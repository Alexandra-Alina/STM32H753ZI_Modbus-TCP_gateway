
Freertos_stml412.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006670  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006900  08006900  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006908  08006908  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006908  08006908  00007908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006910  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000060  08006970  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c90  08006970  00008c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1cc  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3c  00000000  00000000  0002425c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00027c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001228  00000000  00000000  000293f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000363c  00000000  00000000  0002a618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a197  00000000  00000000  0002dc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3487  00000000  00000000  00047deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb272  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006554  00000000  00000000  000fb2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010180c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067e8 	.word	0x080067e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080067e8 	.word	0x080067e8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c4:	f000 fb45 	bl	8000b52 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c8:	f000 f842 	bl	8000550 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004cc:	f000 f8ec 	bl	80006a8 <MX_GPIO_Init>
	MX_TIM6_Init();
 80004d0:	f000 f884 	bl	80005dc <MX_TIM6_Init>
	MX_USART1_UART_Init();
 80004d4:	f000 f8b8 	bl	8000648 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80004d8:	4812      	ldr	r0, [pc, #72]	@ (8000524 <main+0x64>)
 80004da:	f001 ff71 	bl	80023c0 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	4811      	ldr	r0, [pc, #68]	@ (8000528 <main+0x68>)
 80004e4:	f000 fe5a 	bl	800119c <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004e8:	f003 fae4 	bl	8003ab4 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80004ec:	4a0f      	ldr	r2, [pc, #60]	@ (800052c <main+0x6c>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	480f      	ldr	r0, [pc, #60]	@ (8000530 <main+0x70>)
 80004f2:	f003 fb29 	bl	8003b48 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <main+0x74>)
 80004fa:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of readTask02 */
	readTask02Handle = osThreadNew(ReadTask02, NULL, &readTask02_attributes);
 80004fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <main+0x78>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480e      	ldr	r0, [pc, #56]	@ (800053c <main+0x7c>)
 8000502:	f003 fb21 	bl	8003b48 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <main+0x80>)
 800050a:	6013      	str	r3, [r2, #0]

	/* creation of movementTask03 */
	movementTask03Handle = osThreadNew(MovementTask03, NULL,
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <main+0x84>)
 800050e:	2100      	movs	r1, #0
 8000510:	480d      	ldr	r0, [pc, #52]	@ (8000548 <main+0x88>)
 8000512:	f003 fb19 	bl	8003b48 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0c      	ldr	r2, [pc, #48]	@ (800054c <main+0x8c>)
 800051a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800051c:	f003 faee 	bl	8003afc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x60>
 8000524:	2000007c 	.word	0x2000007c
 8000528:	48000400 	.word	0x48000400
 800052c:	0800684c 	.word	0x0800684c
 8000530:	0800076d 	.word	0x0800076d
 8000534:	20000150 	.word	0x20000150
 8000538:	08006870 	.word	0x08006870
 800053c:	08000789 	.word	0x08000789
 8000540:	20000154 	.word	0x20000154
 8000544:	08006894 	.word	0x08006894
 8000548:	080007b1 	.word	0x080007b1
 800054c:	20000158 	.word	0x20000158

08000550 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	@ 0x58
 8000554:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2244      	movs	r2, #68	@ 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 f85a 	bl	8006618 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000572:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000576:	f000 fe37 	bl	80011e8 <HAL_PWREx_ControlVoltageScaling>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000580:	f000 f950 	bl	8000824 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000584:	2310      	movs	r3, #16
 8000586:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000590:	2360      	movs	r3, #96	@ 0x60
 8000592:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	643b      	str	r3, [r7, #64]	@ 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fe79 	bl	8001294 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x5c>
		Error_Handler();
 80005a8:	f000 f93c 	bl	8000824 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005c0:	463b      	mov	r3, r7
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fac7 	bl	8001b58 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x84>
		Error_Handler();
 80005d0:	f000 f928 	bl	8000824 <Error_Handler>
	}
}
 80005d4:	bf00      	nop
 80005d6:	3758      	adds	r7, #88	@ 0x58
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_TIM6_Init+0x64>)
 80005ee:	4a15      	ldr	r2, [pc, #84]	@ (8000644 <MX_TIM6_Init+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16;
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_TIM6_Init+0x64>)
 80005f4:	2210      	movs	r2, #16
 80005f6:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_TIM6_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 999;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_TIM6_Init+0x64>)
 8000600:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000604:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_TIM6_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800060c:	480c      	ldr	r0, [pc, #48]	@ (8000640 <MX_TIM6_Init+0x64>)
 800060e:	f001 fe7f 	bl	8002310 <HAL_TIM_Base_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM6_Init+0x40>
		Error_Handler();
 8000618:	f000 f904 	bl	8000824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_TIM6_Init+0x64>)
 800062a:	f002 f8bd 	bl	80027a8 <HAL_TIMEx_MasterConfigSynchronization>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000634:	f000 f8f6 	bl	8000824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000007c 	.word	0x2000007c
 8000644:	40001000 	.word	0x40001000

08000648 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <MX_USART1_UART_Init+0x5c>)
 8000650:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART1_UART_Init+0x58>)
 800068c:	f002 f910 	bl	80028b0 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000696:	f000 f8c5 	bl	8000824 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000c8 	.word	0x200000c8
 80006a4:	40013800 	.word	0x40013800

080006a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a22      	ldr	r2, [pc, #136]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_GPIO_Init+0xbc>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2102      	movs	r1, #2
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f000 fd51 	bl	800119c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6,
 80006fa:	2200      	movs	r2, #0
 80006fc:	2172      	movs	r1, #114	@ 0x72
 80006fe:	481a      	ldr	r0, [pc, #104]	@ (8000768 <MX_GPIO_Init+0xc0>)
 8000700:	f000 fd4c 	bl	800119c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000704:	2302      	movs	r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071e:	f000 fbb3 	bl	8000e88 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB1 PB4 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000722:	2372      	movs	r3, #114	@ 0x72
 8000724:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <MX_GPIO_Init+0xc0>)
 800073a:	f000 fba5 	bl	8000e88 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800073e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000742:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000756:	f000 fb97 	bl	8000e88 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	48000400 	.word	0x48000400

0800076c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2130      	movs	r1, #48	@ 0x30
 8000778:	4802      	ldr	r0, [pc, #8]	@ (8000784 <StartDefaultTask+0x18>)
 800077a:	f000 fd0f 	bl	800119c <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <StartDefaultTask+0x12>
 8000782:	bf00      	nop
 8000784:	48000400 	.word	0x48000400

08000788 <ReadTask02>:
 * @brief Function implementing the readTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ReadTask02 */
void ReadTask02(void *argument) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ReadTask02 */
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000798:	f000 fce8 	bl	800116c <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f6      	beq.n	8000790 <ReadTask02+0x8>
			movement_flag = 1;
 80007a2:	4b02      	ldr	r3, [pc, #8]	@ (80007ac <ReadTask02+0x24>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80007a8:	e7f2      	b.n	8000790 <ReadTask02+0x8>
 80007aa:	bf00      	nop
 80007ac:	2000015c 	.word	0x2000015c

080007b0 <MovementTask03>:
 * @brief Function implementing the movementTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MovementTask03 */
void MovementTask03(void *argument) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN MovementTask03 */
	/* Infinite loop */
	for (;;) {

		if (movement_flag) {
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <MovementTask03+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d011      	beq.n	80007e4 <MovementTask03+0x34>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2120      	movs	r1, #32
 80007c4:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <MovementTask03+0x44>)
 80007c6:	f000 fce9 	bl	800119c <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, "Movement\n\r", 10, 10);
 80007ca:	230a      	movs	r3, #10
 80007cc:	220a      	movs	r2, #10
 80007ce:	490a      	ldr	r1, [pc, #40]	@ (80007f8 <MovementTask03+0x48>)
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <MovementTask03+0x4c>)
 80007d2:	f002 f8bb 	bl	800294c <HAL_UART_Transmit>
			movement_flag = 0;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MovementTask03+0x40>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 80007dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e0:	f003 fa44 	bl	8003c6c <osDelay>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	4802      	ldr	r0, [pc, #8]	@ (80007f4 <MovementTask03+0x44>)
 80007ea:	f000 fcd7 	bl	800119c <HAL_GPIO_WritePin>
		if (movement_flag) {
 80007ee:	e7e3      	b.n	80007b8 <MovementTask03+0x8>
 80007f0:	2000015c 	.word	0x2000015c
 80007f4:	48000400 	.word	0x48000400
 80007f8:	08006828 	.word	0x08006828
 80007fc:	200000c8 	.word	0x200000c8

08000800 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
//		}

	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000812:	f000 f9b7 	bl	8000b84 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40012c00 	.word	0x40012c00

08000824 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <HAL_MspInit+0x4c>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	4a10      	ldr	r2, [pc, #64]	@ (800087c <HAL_MspInit+0x4c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	@ 0x60
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <HAL_MspInit+0x4c>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <HAL_MspInit+0x4c>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	@ 0x58
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HAL_MspInit+0x4c>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 fa61 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <HAL_TIM_Base_MspInit+0x44>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d113      	bne.n	80008ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <HAL_TIM_Base_MspInit+0x48>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a0c      	ldr	r2, [pc, #48]	@ (80008c8 <HAL_TIM_Base_MspInit+0x48>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_TIM_Base_MspInit+0x48>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2105      	movs	r1, #5
 80008ae:	2036      	movs	r0, #54	@ 0x36
 80008b0:	f000 fa40 	bl	8000d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80008b4:	2036      	movs	r0, #54	@ 0x36
 80008b6:	f000 fa59 	bl	8000d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40001000 	.word	0x40001000
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	@ 0x58
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2234      	movs	r2, #52	@ 0x34
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f005 fe93 	bl	8006618 <memset>
  if(huart->Instance==USART1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <HAL_UART_MspInit+0xb8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d13f      	bne.n	800097c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fb7b 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000914:	f7ff ff86 	bl	8000824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <HAL_UART_MspInit+0xbc>)
 800091a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091c:	4a1a      	ldr	r2, [pc, #104]	@ (8000988 <HAL_UART_MspInit+0xbc>)
 800091e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000922:	6613      	str	r3, [r2, #96]	@ 0x60
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_UART_MspInit+0xbc>)
 8000926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_UART_MspInit+0xbc>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000934:	4a14      	ldr	r2, [pc, #80]	@ (8000988 <HAL_UART_MspInit+0xbc>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_UART_MspInit+0xbc>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000948:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800094c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800095a:	2307      	movs	r3, #7
 800095c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f000 fa8e 	bl	8000e88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2105      	movs	r1, #5
 8000970:	2025      	movs	r0, #37	@ 0x25
 8000972:	f000 f9df 	bl	8000d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000976:	2025      	movs	r0, #37	@ 0x25
 8000978:	f000 f9f8 	bl	8000d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3758      	adds	r7, #88	@ 0x58
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40013800 	.word	0x40013800
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	@ 0x30
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a54 <HAL_InitTick+0xc8>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a54 <HAL_InitTick+0xc8>)
 80009a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <HAL_InitTick+0xc8>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b2:	f107 020c 	add.w	r2, r7, #12
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fa8f 	bl	8001ee0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009c2:	f001 fa77 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 80009c6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <HAL_InitTick+0xcc>)
 80009cc:	fba2 2303 	umull	r2, r3, r2, r3
 80009d0:	0c9b      	lsrs	r3, r3, #18
 80009d2:	3b01      	subs	r3, #1
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <HAL_InitTick+0xd0>)
 80009d8:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <HAL_InitTick+0xd4>)
 80009da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <HAL_InitTick+0xd0>)
 80009de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <HAL_InitTick+0xd0>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <HAL_InitTick+0xd0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <HAL_InitTick+0xd0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_InitTick+0xd0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009fc:	4817      	ldr	r0, [pc, #92]	@ (8000a5c <HAL_InitTick+0xd0>)
 80009fe:	f001 fc87 	bl	8002310 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d11b      	bne.n	8000a48 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a10:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <HAL_InitTick+0xd0>)
 8000a12:	f001 fcd5 	bl	80023c0 <HAL_TIM_Base_Start_IT>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d111      	bne.n	8000a48 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a24:	2019      	movs	r0, #25
 8000a26:	f000 f9a1 	bl	8000d6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d808      	bhi.n	8000a42 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2019      	movs	r0, #25
 8000a36:	f000 f97d 	bl	8000d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_InitTick+0xd8>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e002      	b.n	8000a48 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3730      	adds	r7, #48	@ 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	431bde83 	.word	0x431bde83
 8000a5c:	20000160 	.word	0x20000160
 8000a60:	40012c00 	.word	0x40012c00
 8000a64:	20000004 	.word	0x20000004

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000aa6:	f001 fcdf 	bl	8002468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000160 	.word	0x20000160

08000ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <USART1_IRQHandler+0x10>)
 8000aba:	f001 ffd1 	bl	8002a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000c8 	.word	0x200000c8

08000ac8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <TIM6_IRQHandler+0x10>)
 8000ace:	f001 fccb 	bl	8002468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000007c 	.word	0x2000007c

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff ffea 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f005 fdd1 	bl	80066d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fcc5 	bl	80004c0 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b44:	08006910 	.word	0x08006910
  ldr r2, =_sbss
 8000b48:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b4c:	20001c90 	.word	0x20001c90

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>

08000b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f8de 	bl	8000d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff ff12 	bl	800098c <HAL_InitTick>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	e001      	b.n	8000b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b74:	f7ff fe5c 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b78:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200001ac 	.word	0x200001ac

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200001ac 	.word	0x200001ac

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	@ (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	@ (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	@ (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	@ 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	@ 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff4c 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d46:	f7ff ff61 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ffb1 	bl	8000cb8 <NVIC_EncodePriority>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff80 	bl	8000c64 <__NVIC_SetPriority>
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff54 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d008      	beq.n	8000db2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2204      	movs	r2, #4
 8000da4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e022      	b.n	8000df8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 020e 	bic.w	r2, r2, #14
 8000dc0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0201 	bic.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f003 021c 	and.w	r2, r3, #28
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d005      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2204      	movs	r2, #4
 8000e20:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e029      	b.n	8000e7c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 020e 	bic.w	r2, r2, #14
 8000e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4c:	f003 021c 	and.w	r2, r3, #28
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	4798      	blx	r3
    }
  }
  return status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e14e      	b.n	8001136 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8140 	beq.w	8001130 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d005      	beq.n	8000ec8 <HAL_GPIO_Init+0x40>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d130      	bne.n	8000f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	f003 0201 	and.w	r2, r3, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d017      	beq.n	8000f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d123      	bne.n	8000fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	08da      	lsrs	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0203 	and.w	r2, r3, #3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 809a 	beq.w	8001130 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffc:	4b55      	ldr	r3, [pc, #340]	@ (8001154 <HAL_GPIO_Init+0x2cc>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001000:	4a54      	ldr	r2, [pc, #336]	@ (8001154 <HAL_GPIO_Init+0x2cc>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6613      	str	r3, [r2, #96]	@ 0x60
 8001008:	4b52      	ldr	r3, [pc, #328]	@ (8001154 <HAL_GPIO_Init+0x2cc>)
 800100a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001014:	4a50      	ldr	r2, [pc, #320]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800103e:	d013      	beq.n	8001068 <HAL_GPIO_Init+0x1e0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a46      	ldr	r2, [pc, #280]	@ (800115c <HAL_GPIO_Init+0x2d4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d00d      	beq.n	8001064 <HAL_GPIO_Init+0x1dc>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a45      	ldr	r2, [pc, #276]	@ (8001160 <HAL_GPIO_Init+0x2d8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0x1d8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a44      	ldr	r2, [pc, #272]	@ (8001164 <HAL_GPIO_Init+0x2dc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d101      	bne.n	800105c <HAL_GPIO_Init+0x1d4>
 8001058:	2303      	movs	r3, #3
 800105a:	e006      	b.n	800106a <HAL_GPIO_Init+0x1e2>
 800105c:	2307      	movs	r3, #7
 800105e:	e004      	b.n	800106a <HAL_GPIO_Init+0x1e2>
 8001060:	2302      	movs	r3, #2
 8001062:	e002      	b.n	800106a <HAL_GPIO_Init+0x1e2>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <HAL_GPIO_Init+0x1e2>
 8001068:	2300      	movs	r3, #0
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	f002 0203 	and.w	r2, r2, #3
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	4093      	lsls	r3, r2
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800107a:	4937      	ldr	r1, [pc, #220]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001088:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <HAL_GPIO_Init+0x2e0>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001168 <HAL_GPIO_Init+0x2e0>)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001168 <HAL_GPIO_Init+0x2e0>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d6:	4a24      	ldr	r2, [pc, #144]	@ (8001168 <HAL_GPIO_Init+0x2e0>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <HAL_GPIO_Init+0x2e0>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001100:	4a19      	ldr	r2, [pc, #100]	@ (8001168 <HAL_GPIO_Init+0x2e0>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <HAL_GPIO_Init+0x2e0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <HAL_GPIO_Init+0x2e0>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	f47f aea9 	bne.w	8000e98 <HAL_GPIO_Init+0x10>
  }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	48000400 	.word	0x48000400
 8001160:	48000800 	.word	0x48000800
 8001164:	48000c00 	.word	0x48000c00
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40007000 	.word	0x40007000

080011e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f6:	d130      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001204:	d038      	beq.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800120e:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001214:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2232      	movs	r2, #50	@ 0x32
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800122c:	e002      	b.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3b01      	subs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001240:	d102      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f2      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001254:	d110      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e00f      	b.n	800127a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001266:	d007      	beq.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001270:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001276:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40007000 	.word	0x40007000
 800128c:	20000000 	.word	0x20000000
 8001290:	431bde83 	.word	0x431bde83

08001294 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f000 bc4f 	b.w	8001b46 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a8:	4b97      	ldr	r3, [pc, #604]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b2:	4b95      	ldr	r3, [pc, #596]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80e6 	beq.w	8001496 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_RCC_OscConfig+0x4c>
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	f040 808d 	bne.w	80013f2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	f040 8089 	bne.w	80013f2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e0:	4b89      	ldr	r3, [pc, #548]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_RCC_OscConfig+0x66>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	f000 bc26 	b.w	8001b46 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012fe:	4b82      	ldr	r3, [pc, #520]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <HAL_RCC_OscConfig+0x80>
 800130a:	4b7f      	ldr	r3, [pc, #508]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001312:	e005      	b.n	8001320 <HAL_RCC_OscConfig+0x8c>
 8001314:	4b7c      	ldr	r3, [pc, #496]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001320:	4293      	cmp	r3, r2
 8001322:	d224      	bcs.n	800136e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fe0b 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	f000 bc06 	b.w	8001b46 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133a:	4b73      	ldr	r3, [pc, #460]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a72      	ldr	r2, [pc, #456]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b70      	ldr	r3, [pc, #448]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	496d      	ldr	r1, [pc, #436]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001358:	4b6b      	ldr	r3, [pc, #428]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	4968      	ldr	r1, [pc, #416]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e025      	b.n	80013ba <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136e:	4b66      	ldr	r3, [pc, #408]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a65      	ldr	r2, [pc, #404]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	4960      	ldr	r1, [pc, #384]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138c:	4b5e      	ldr	r3, [pc, #376]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	495b      	ldr	r1, [pc, #364]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fdca 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e3c5      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ba:	f000 fccd 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 80013be:	4602      	mov	r2, r0
 80013c0:	4b51      	ldr	r3, [pc, #324]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	4950      	ldr	r1, [pc, #320]	@ (800150c <HAL_RCC_OscConfig+0x278>)
 80013cc:	5ccb      	ldrb	r3, [r1, r3]
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	4a4e      	ldr	r2, [pc, #312]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80013d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013da:	4b4e      	ldr	r3, [pc, #312]	@ (8001514 <HAL_RCC_OscConfig+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fad4 	bl	800098c <HAL_InitTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d052      	beq.n	8001494 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	e3a9      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d032      	beq.n	8001460 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013fa:	4b43      	ldr	r3, [pc, #268]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a42      	ldr	r2, [pc, #264]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001406:	f7ff fbd1 	bl	8000bac <HAL_GetTick>
 800140a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140e:	f7ff fbcd 	bl	8000bac <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e392      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001420:	4b39      	ldr	r3, [pc, #228]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142c:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a35      	ldr	r2, [pc, #212]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	4930      	ldr	r1, [pc, #192]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144a:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	492b      	ldr	r1, [pc, #172]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
 800145e:	e01a      	b.n	8001496 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a28      	ldr	r2, [pc, #160]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800146c:	f7ff fb9e 	bl	8000bac <HAL_GetTick>
 8001470:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001474:	f7ff fb9a 	bl	8000bac <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e35f      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1e0>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d073      	beq.n	800158a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_OscConfig+0x220>
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d10e      	bne.n	80014cc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d063      	beq.n	8001588 <HAL_RCC_OscConfig+0x2f4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d15f      	bne.n	8001588 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e33c      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x250>
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e025      	b.n	8001530 <HAL_RCC_OscConfig+0x29c>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ec:	d114      	bne.n	8001518 <HAL_RCC_OscConfig+0x284>
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a02      	ldr	r2, [pc, #8]	@ (8001508 <HAL_RCC_OscConfig+0x274>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e013      	b.n	8001530 <HAL_RCC_OscConfig+0x29c>
 8001508:	40021000 	.word	0x40021000
 800150c:	080068b8 	.word	0x080068b8
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004
 8001518:	4b8f      	ldr	r3, [pc, #572]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a8e      	ldr	r2, [pc, #568]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b8c      	ldr	r3, [pc, #560]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a8b      	ldr	r2, [pc, #556]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fb38 	bl	8000bac <HAL_GetTick>
 800153c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fb34 	bl	8000bac <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	@ 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e2f9      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001552:	4b81      	ldr	r3, [pc, #516]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x2ac>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fb24 	bl	8000bac <HAL_GetTick>
 8001564:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fb20 	bl	8000bac <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e2e5      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157a:	4b77      	ldr	r3, [pc, #476]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x2d4>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d060      	beq.n	8001658 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	2b04      	cmp	r3, #4
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_OscConfig+0x314>
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	d119      	bne.n	80015d6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d116      	bne.n	80015d6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_OscConfig+0x32c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e2c2      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	4962      	ldr	r1, [pc, #392]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d4:	e040      	b.n	8001658 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d023      	beq.n	8001626 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015de:	4b5e      	ldr	r3, [pc, #376]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fadf 	bl	8000bac <HAL_GetTick>
 80015ee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fadb 	bl	8000bac <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e2a0      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	494e      	ldr	r1, [pc, #312]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e018      	b.n	8001658 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b4c      	ldr	r3, [pc, #304]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a4b      	ldr	r2, [pc, #300]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fabb 	bl	8000bac <HAL_GetTick>
 8001636:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fab7 	bl	8000bac <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e27c      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800164c:	4b42      	ldr	r3, [pc, #264]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 8082 	beq.w	800176a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d05f      	beq.n	800172e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800166e:	4b3a      	ldr	r3, [pc, #232]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001674:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	429a      	cmp	r2, r3
 8001682:	d037      	beq.n	80016f4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e254      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01b      	beq.n	80016de <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016b6:	f7ff fa79 	bl	8000bac <HAL_GetTick>
 80016ba:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fa75 	bl	8000bac <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b11      	cmp	r3, #17
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e23a      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ef      	bne.n	80016be <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e4:	f023 0210 	bic.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	491a      	ldr	r1, [pc, #104]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016fa:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fa52 	bl	8000bac <HAL_GetTick>
 8001708:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fa4e 	bl	8000bac <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b11      	cmp	r3, #17
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e213      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ef      	beq.n	800170c <HAL_RCC_OscConfig+0x478>
 800172c:	e01d      	b.n	800176a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001734:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff fa35 	bl	8000bac <HAL_GetTick>
 8001742:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fa31 	bl	8000bac <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b11      	cmp	r3, #17
 8001752:	d903      	bls.n	800175c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1f6      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
 8001758:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175c:	4ba9      	ldr	r3, [pc, #676]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ed      	bne.n	8001746 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80bd 	beq.w	80018f2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800177e:	4ba1      	ldr	r3, [pc, #644]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10e      	bne.n	80017a8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b9e      	ldr	r3, [pc, #632]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	4a9d      	ldr	r2, [pc, #628]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	4b9b      	ldr	r3, [pc, #620]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a8:	4b97      	ldr	r3, [pc, #604]	@ (8001a08 <HAL_RCC_OscConfig+0x774>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d118      	bne.n	80017e6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b4:	4b94      	ldr	r3, [pc, #592]	@ (8001a08 <HAL_RCC_OscConfig+0x774>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a93      	ldr	r2, [pc, #588]	@ (8001a08 <HAL_RCC_OscConfig+0x774>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c0:	f7ff f9f4 	bl	8000bac <HAL_GetTick>
 80017c4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c8:	f7ff f9f0 	bl	8000bac <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1b5      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017da:	4b8b      	ldr	r3, [pc, #556]	@ (8001a08 <HAL_RCC_OscConfig+0x774>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d02c      	beq.n	800184c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80017f2:	4b84      	ldr	r3, [pc, #528]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001804:	497f      	ldr	r1, [pc, #508]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001806:	4313      	orrs	r3, r2
 8001808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d010      	beq.n	800183a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001818:	4b7a      	ldr	r3, [pc, #488]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181e:	4a79      	ldr	r2, [pc, #484]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001828:	4b76      	ldr	r3, [pc, #472]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182e:	4a75      	ldr	r2, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001838:	e018      	b.n	800186c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800183a:	4b72      	ldr	r3, [pc, #456]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001840:	4a70      	ldr	r2, [pc, #448]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800184a:	e00f      	b.n	800186c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800184c:	4b6d      	ldr	r3, [pc, #436]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001852:	4a6c      	ldr	r2, [pc, #432]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800185c:	4b69      	ldr	r3, [pc, #420]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001862:	4a68      	ldr	r2, [pc, #416]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d016      	beq.n	80018a2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001874:	f7ff f99a 	bl	8000bac <HAL_GetTick>
 8001878:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187a:	e00a      	b.n	8001892 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187c:	f7ff f996 	bl	8000bac <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e159      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001892:	4b5c      	ldr	r3, [pc, #368]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ed      	beq.n	800187c <HAL_RCC_OscConfig+0x5e8>
 80018a0:	e01d      	b.n	80018de <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff f983 	bl	8000bac <HAL_GetTick>
 80018a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff f97f 	bl	8000bac <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e142      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c0:	4b50      	ldr	r3, [pc, #320]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ed      	bne.n	80018aa <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80018ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 80018d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d105      	bne.n	80018f2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e6:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	4a46      	ldr	r2, [pc, #280]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 80018ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d03c      	beq.n	8001978 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01c      	beq.n	8001940 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001906:	4b3f      	ldr	r3, [pc, #252]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001908:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800190c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff f949 	bl	8000bac <HAL_GetTick>
 800191a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191e:	f7ff f945 	bl	8000bac <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e10a      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001930:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001932:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0ef      	beq.n	800191e <HAL_RCC_OscConfig+0x68a>
 800193e:	e01b      	b.n	8001978 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001940:	4b30      	ldr	r3, [pc, #192]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001942:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001946:	4a2f      	ldr	r2, [pc, #188]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff f92c 	bl	8000bac <HAL_GetTick>
 8001954:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001958:	f7ff f928 	bl	8000bac <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0ed      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800196a:	4b26      	ldr	r3, [pc, #152]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800196c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ef      	bne.n	8001958 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80e1 	beq.w	8001b44 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	2b02      	cmp	r3, #2
 8001988:	f040 80b5 	bne.w	8001af6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800198c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	429a      	cmp	r2, r3
 800199e:	d124      	bne.n	80019ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019aa:	3b01      	subs	r3, #1
 80019ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d11b      	bne.n	80019ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d113      	bne.n	80019ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d05f      	beq.n	8001aaa <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	d05a      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a03      	ldr	r2, [pc, #12]	@ (8001a04 <HAL_RCC_OscConfig+0x770>)
 80019f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019fc:	f7ff f8d6 	bl	8000bac <HAL_GetTick>
 8001a00:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a02:	e00c      	b.n	8001a1e <HAL_RCC_OscConfig+0x78a>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f8ce 	bl	8000bac <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e093      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b49      	ldr	r3, [pc, #292]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	4b49      	ldr	r3, [pc, #292]	@ (8001b54 <HAL_RCC_OscConfig+0x8c0>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a44:	0212      	lsls	r2, r2, #8
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0552      	lsls	r2, r2, #21
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0652      	lsls	r2, r2, #25
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	493b      	ldr	r1, [pc, #236]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a66:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a39      	ldr	r2, [pc, #228]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001a6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a70:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a72:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4a36      	ldr	r2, [pc, #216]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001a78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a7e:	f7ff f895 	bl	8000bac <HAL_GetTick>
 8001a82:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff f891 	bl	8000bac <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e056      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa4:	e04e      	b.n	8001b44 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e04d      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	4b29      	ldr	r3, [pc, #164]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d146      	bne.n	8001b44 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab6:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001abc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac2:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	4a22      	ldr	r2, [pc, #136]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001ac8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001acc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ace:	f7ff f86d 	bl	8000bac <HAL_GetTick>
 8001ad2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f869 	bl	8000bac <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e02e      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x842>
 8001af4:	e026      	b.n	8001b44 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d021      	beq.n	8001b40 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a13      	ldr	r2, [pc, #76]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001b02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff f850 	bl	8000bac <HAL_GetTick>
 8001b0c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f84c 	bl	8000bac <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e011      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001b2e:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4a07      	ldr	r2, [pc, #28]	@ (8001b50 <HAL_RCC_OscConfig+0x8bc>)
 8001b34:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8001b38:	f023 0303 	bic.w	r3, r3, #3
 8001b3c:	60d3      	str	r3, [r2, #12]
 8001b3e:	e001      	b.n	8001b44 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3728      	adds	r7, #40	@ 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	f99f808c 	.word	0xf99f808c

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0e7      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b75      	ldr	r3, [pc, #468]	@ (8001d44 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d910      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b72      	ldr	r3, [pc, #456]	@ (8001d44 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 0207 	bic.w	r2, r3, #7
 8001b82:	4970      	ldr	r1, [pc, #448]	@ (8001d44 <HAL_RCC_ClockConfig+0x1ec>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d44 <HAL_RCC_ClockConfig+0x1ec>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0cf      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d010      	beq.n	8001bca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b66      	ldr	r3, [pc, #408]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d908      	bls.n	8001bca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4960      	ldr	r1, [pc, #384]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d04c      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	4b5a      	ldr	r3, [pc, #360]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d121      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0a6      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf6:	4b54      	ldr	r3, [pc, #336]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d115      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e09a      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e08e      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e086      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b46      	ldr	r3, [pc, #280]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4943      	ldr	r1, [pc, #268]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c40:	f7fe ffb4 	bl	8000bac <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7fe ffb0 	bl	8000bac <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e06e      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d010      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d208      	bcs.n	8001c9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	492b      	ldr	r1, [pc, #172]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9e:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d210      	bcs.n	8001cce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cac:	4b25      	ldr	r3, [pc, #148]	@ (8001d44 <HAL_RCC_ClockConfig+0x1ec>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 0207 	bic.w	r2, r3, #7
 8001cb4:	4923      	ldr	r1, [pc, #140]	@ (8001d44 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbc:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <HAL_RCC_ClockConfig+0x1ec>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e036      	b.n	8001d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cda:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4918      	ldr	r1, [pc, #96]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d009      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4910      	ldr	r1, [pc, #64]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d0c:	f000 f824 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	490b      	ldr	r1, [pc, #44]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f4>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_RCC_ClockConfig+0x1fc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fe2b 	bl	800098c <HAL_InitTick>
 8001d36:	4603      	mov	r3, r0
 8001d38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	080068b8 	.word	0x080068b8
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d66:	4b3e      	ldr	r3, [pc, #248]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d70:	4b3b      	ldr	r3, [pc, #236]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x34>
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d121      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d11e      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d8c:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d98:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	e005      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001da8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001db4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10d      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d102      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dd0:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	e004      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ddc:	4b23      	ldr	r3, [pc, #140]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d134      	bne.n	8001e50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001de6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0xa6>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d003      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0xac>
 8001dfc:	e005      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e00:	617b      	str	r3, [r7, #20]
      break;
 8001e02:	e005      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e04:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e06:	617b      	str	r3, [r7, #20]
      break;
 8001e08:	e002      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	617b      	str	r3, [r7, #20]
      break;
 8001e0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e10:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	fb03 f202 	mul.w	r2, r3, r2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	0e5b      	lsrs	r3, r3, #25
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	3301      	adds	r3, #1
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e50:	69bb      	ldr	r3, [r7, #24]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	@ 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	080068d0 	.word	0x080068d0
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200

08001e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4904      	ldr	r1, [pc, #16]	@ (8001eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	080068c8 	.word	0x080068c8

08001eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eb8:	f7ff ffda 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0adb      	lsrs	r3, r3, #11
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4904      	ldr	r1, [pc, #16]	@ (8001edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	080068c8 	.word	0x080068c8

08001ee0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	220f      	movs	r2, #15
 8001eee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_RCC_GetClockConfig+0x5c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0203 	and.w	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_RCC_GetClockConfig+0x5c>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <HAL_RCC_GetClockConfig+0x5c>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_GetClockConfig+0x5c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f22:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <HAL_RCC_GetClockConfig+0x60>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0207 	and.w	r2, r3, #7
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40022000 	.word	0x40022000

08001f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f50:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f5c:	f7ff f936 	bl	80011cc <HAL_PWREx_GetVoltageRange>
 8001f60:	6178      	str	r0, [r7, #20]
 8001f62:	e014      	b.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	4a24      	ldr	r2, [pc, #144]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f7c:	f7ff f926 	bl	80011cc <HAL_PWREx_GetVoltageRange>
 8001f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f94:	d10b      	bne.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	d919      	bls.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fa0:	d902      	bls.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e013      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e010      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	@ 0x80
 8001fb2:	d902      	bls.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e00a      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	@ 0x80
 8001fbe:	d102      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e004      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b70      	cmp	r3, #112	@ 0x70
 8001fca:	d101      	bne.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4909      	ldr	r1, [pc, #36]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40022000 	.word	0x40022000

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800200c:	2300      	movs	r3, #0
 800200e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002010:	2300      	movs	r3, #0
 8002012:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 809e 	beq.w	800215e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002026:	4b46      	ldr	r3, [pc, #280]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002036:	2300      	movs	r3, #0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	4b40      	ldr	r3, [pc, #256]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	4a3f      	ldr	r2, [pc, #252]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002046:	6593      	str	r3, [r2, #88]	@ 0x58
 8002048:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002054:	2301      	movs	r3, #1
 8002056:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4b3a      	ldr	r3, [pc, #232]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a39      	ldr	r2, [pc, #228]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002064:	f7fe fda2 	bl	8000bac <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800206a:	e009      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7fe fd9e 	bl	8000bac <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d902      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	74fb      	strb	r3, [r7, #19]
        break;
 800207e:	e005      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ef      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d15a      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002092:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800209c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01e      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d019      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ae:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ba:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020da:	4a19      	ldr	r2, [pc, #100]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d016      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe fd5e 	bl	8000bac <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f2:	e00b      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7fe fd5a 	bl	8000bac <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d902      	bls.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	74fb      	strb	r3, [r7, #19]
            break;
 800210a:	e006      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0ec      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800211a:	7cfb      	ldrb	r3, [r7, #19]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10b      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002120:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002126:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4904      	ldr	r1, [pc, #16]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002136:	e009      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	74bb      	strb	r3, [r7, #18]
 800213c:	e006      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214c:	7c7b      	ldrb	r3, [r7, #17]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d105      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002152:	4b6e      	ldr	r3, [pc, #440]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	4a6d      	ldr	r2, [pc, #436]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002158:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800215c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800216a:	4b68      	ldr	r3, [pc, #416]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f023 0203 	bic.w	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4964      	ldr	r1, [pc, #400]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800218c:	4b5f      	ldr	r3, [pc, #380]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	f023 020c 	bic.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	495c      	ldr	r1, [pc, #368]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ae:	4b57      	ldr	r3, [pc, #348]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4953      	ldr	r1, [pc, #332]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021d0:	4b4e      	ldr	r3, [pc, #312]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	494b      	ldr	r1, [pc, #300]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021f2:	4b46      	ldr	r3, [pc, #280]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4942      	ldr	r1, [pc, #264]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002214:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	493a      	ldr	r1, [pc, #232]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002236:	4b35      	ldr	r3, [pc, #212]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	4931      	ldr	r1, [pc, #196]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002258:	4b2c      	ldr	r3, [pc, #176]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	4929      	ldr	r1, [pc, #164]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800227a:	4b24      	ldr	r3, [pc, #144]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	4920      	ldr	r1, [pc, #128]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	4918      	ldr	r1, [pc, #96]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ba:	d105      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a12      	ldr	r2, [pc, #72]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d4:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	490a      	ldr	r1, [pc, #40]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002300:	7cbb      	ldrb	r3, [r7, #18]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e049      	b.n	80023b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe faa2 	bl	8000880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f000 f9ba 	bl	80026c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d001      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e03b      	b.n	8002450 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a19      	ldr	r2, [pc, #100]	@ (800245c <HAL_TIM_Base_Start_IT+0x9c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_TIM_Base_Start_IT+0x4e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002402:	d004      	beq.n	800240e <HAL_TIM_Base_Start_IT+0x4e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <HAL_TIM_Base_Start_IT+0xa0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d115      	bne.n	800243a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <HAL_TIM_Base_Start_IT+0xa4>)
 8002416:	4013      	ands	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b06      	cmp	r3, #6
 800241e:	d015      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x8c>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002426:	d011      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002438:	e008      	b.n	800244c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e000      	b.n	800244e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40012c00 	.word	0x40012c00
 8002460:	40014000 	.word	0x40014000
 8002464:	00010007 	.word	0x00010007

08002468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d020      	beq.n	80024cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01b      	beq.n	80024cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0202 	mvn.w	r2, #2
 800249c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f8e9 	bl	800268a <HAL_TIM_IC_CaptureCallback>
 80024b8:	e005      	b.n	80024c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8db 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f8ec 	bl	800269e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d020      	beq.n	8002518 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0204 	mvn.w	r2, #4
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f8c3 	bl	800268a <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8b5 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f8c6 	bl	800269e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d020      	beq.n	8002564 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0208 	mvn.w	r2, #8
 8002534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2204      	movs	r2, #4
 800253a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f89d 	bl	800268a <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f88f 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f8a0 	bl	800269e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d020      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0210 	mvn.w	r2, #16
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2208      	movs	r2, #8
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f877 	bl	800268a <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f869 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f87a 	bl	800269e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00c      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0201 	mvn.w	r2, #1
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe f916 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d104      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80025fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f943 	bl	8002888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800261e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f93b 	bl	800289c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00c      	beq.n	800264a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f834 	bl	80026b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00c      	beq.n	800266e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f06f 0220 	mvn.w	r2, #32
 8002666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f903 	bl	8002874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a30      	ldr	r2, [pc, #192]	@ (800279c <TIM_Base_SetConfig+0xd4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <TIM_Base_SetConfig+0x20>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e6:	d108      	bne.n	80026fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a27      	ldr	r2, [pc, #156]	@ (800279c <TIM_Base_SetConfig+0xd4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0x52>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0x52>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a24      	ldr	r2, [pc, #144]	@ (80027a0 <TIM_Base_SetConfig+0xd8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0x52>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <TIM_Base_SetConfig+0xdc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a12      	ldr	r2, [pc, #72]	@ (800279c <TIM_Base_SetConfig+0xd4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <TIM_Base_SetConfig+0xa0>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <TIM_Base_SetConfig+0xd8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_Base_SetConfig+0xa0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a10      	ldr	r2, [pc, #64]	@ (80027a4 <TIM_Base_SetConfig+0xdc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d103      	bne.n	8002770 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f023 0201 	bic.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]
  }
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40014000 	.word	0x40014000
 80027a4:	40014400 	.word	0x40014400

080027a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027bc:	2302      	movs	r3, #2
 80027be:	e04f      	b.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a21      	ldr	r2, [pc, #132]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d108      	bne.n	80027fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80027f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a14      	ldr	r2, [pc, #80]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d009      	beq.n	8002834 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002828:	d004      	beq.n	8002834 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a10      	ldr	r2, [pc, #64]	@ (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d10c      	bne.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800283a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40014000 	.word	0x40014000

08002874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e040      	b.n	8002944 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fd fffa 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	@ 0x24
 80028dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fe32 	bl	8003560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fbd5 	bl	80030ac <UART_SetConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e01b      	b.n	8002944 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800291a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800292a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 feb1 	bl	80036a4 <UART_CheckIdleState>
 8002942:	4603      	mov	r3, r0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002960:	2b20      	cmp	r3, #32
 8002962:	d177      	bne.n	8002a54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_UART_Transmit+0x24>
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e070      	b.n	8002a56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2221      	movs	r2, #33	@ 0x21
 8002980:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002982:	f7fe f913 	bl	8000bac <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	88fa      	ldrh	r2, [r7, #6]
 8002994:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a0:	d108      	bne.n	80029b4 <HAL_UART_Transmit+0x68>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e003      	b.n	80029bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029bc:	e02f      	b.n	8002a1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2180      	movs	r1, #128	@ 0x80
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 ff13 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e03b      	b.n	8002a56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	881a      	ldrh	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f0:	b292      	uxth	r2, r2
 80029f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	3302      	adds	r3, #2
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	e007      	b.n	8002a0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	781a      	ldrb	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1c9      	bne.n	80029be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2140      	movs	r1, #64	@ 0x40
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fedd 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e005      	b.n	8002a56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	e000      	b.n	8002a56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
  }
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0ba      	sub	sp, #232	@ 0xe8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002a8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002a8e:	4013      	ands	r3, r2
 8002a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d115      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00f      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 82ca 	beq.w	8003052 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
      }
      return;
 8002ac6:	e2c4      	b.n	8003052 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8117 	beq.w	8002d00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ade:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002ae2:	4b85      	ldr	r3, [pc, #532]	@ (8002cf8 <HAL_UART_IRQHandler+0x298>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 810a 	beq.w	8002d00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d011      	beq.n	8002b1c <HAL_UART_IRQHandler+0xbc>
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d011      	beq.n	8002b4c <HAL_UART_IRQHandler+0xec>
 8002b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d011      	beq.n	8002b7c <HAL_UART_IRQHandler+0x11c>
 8002b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bae:	f043 0208 	orr.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <HAL_UART_IRQHandler+0x18a>
 8002bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00c      	beq.n	8002bea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8230 	beq.w	8003056 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c32:	2b40      	cmp	r3, #64	@ 0x40
 8002c34:	d005      	beq.n	8002c42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04f      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fe43 	bl	80038ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b40      	cmp	r3, #64	@ 0x40
 8002c54:	d141      	bne.n	8002cda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1d9      	bne.n	8002c56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d013      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cae:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <HAL_UART_IRQHandler+0x29c>)
 8002cb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe f8a4 	bl	8000e04 <HAL_DMA_Abort_IT>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd0:	e00f      	b.n	8002cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9d4 	bl	8003080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	e00b      	b.n	8002cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9d0 	bl	8003080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	e007      	b.n	8002cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9cc 	bl	8003080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002cf0:	e1b1      	b.n	8003056 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf2:	bf00      	nop
    return;
 8002cf4:	e1af      	b.n	8003056 <HAL_UART_IRQHandler+0x5f6>
 8002cf6:	bf00      	nop
 8002cf8:	04000120 	.word	0x04000120
 8002cfc:	08003997 	.word	0x08003997

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	f040 816a 	bne.w	8002fde <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8163 	beq.w	8002fde <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 815c 	beq.w	8002fde <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	f040 80d4 	bne.w	8002ee6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80ad 	beq.w	8002eae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f080 80a5 	bcs.w	8002eae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 8086 	bne.w	8002e8c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1da      	bne.n	8002d80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3308      	adds	r3, #8
 8002dd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd4:	e853 3f00 	ldrex	r3, [r3]
 8002dd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3308      	adds	r3, #8
 8002dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e1      	bne.n	8002dca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3308      	adds	r3, #8
 8002e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e3      	bne.n	8002e06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e5c:	f023 0310 	bic.w	r3, r3, #16
 8002e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e4      	bne.n	8002e4c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd ff7e 	bl	8000d88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8f4 	bl	8003094 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002eac:	e0d5      	b.n	800305a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002eb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f040 80ce 	bne.w	800305a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	f040 80c5 	bne.w	800305a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8d8 	bl	8003094 <HAL_UARTEx_RxEventCallback>
      return;
 8002ee4:	e0b9      	b.n	800305a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80ab 	beq.w	800305e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a6 	beq.w	800305e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e4      	bne.n	8002f12 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	623b      	str	r3, [r7, #32]
   return(result);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3308      	adds	r3, #8
 8002f68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e3      	bne.n	8002f48 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f023 0310 	bic.w	r3, r3, #16
 8002fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	69b9      	ldr	r1, [r7, #24]
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e4      	bne.n	8002f94 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f85c 	bl	8003094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fdc:	e03f      	b.n	800305e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <HAL_UART_IRQHandler+0x5a8>
 8002fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fd08 	bl	8003a16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003006:	e02d      	b.n	8003064 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800300c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01c      	beq.n	8003062 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
    }
    return;
 8003030:	e017      	b.n	8003062 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d012      	beq.n	8003064 <HAL_UART_IRQHandler+0x604>
 800303e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fcb9 	bl	80039c2 <UART_EndTransmit_IT>
    return;
 8003050:	e008      	b.n	8003064 <HAL_UART_IRQHandler+0x604>
      return;
 8003052:	bf00      	nop
 8003054:	e006      	b.n	8003064 <HAL_UART_IRQHandler+0x604>
    return;
 8003056:	bf00      	nop
 8003058:	e004      	b.n	8003064 <HAL_UART_IRQHandler+0x604>
      return;
 800305a:	bf00      	nop
 800305c:	e002      	b.n	8003064 <HAL_UART_IRQHandler+0x604>
      return;
 800305e:	bf00      	nop
 8003060:	e000      	b.n	8003064 <HAL_UART_IRQHandler+0x604>
    return;
 8003062:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003064:	37e8      	adds	r7, #232	@ 0xe8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop

0800306c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b0:	b08a      	sub	sp, #40	@ 0x28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b9e      	ldr	r3, [pc, #632]	@ (8003354 <UART_SetConfig+0x2a8>)
 80030dc:	4013      	ands	r3, r2
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a93      	ldr	r2, [pc, #588]	@ (8003358 <UART_SetConfig+0x2ac>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003114:	4313      	orrs	r3, r2
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a8a      	ldr	r2, [pc, #552]	@ (800335c <UART_SetConfig+0x2b0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d126      	bne.n	8003184 <UART_SetConfig+0xd8>
 8003136:	4b8a      	ldr	r3, [pc, #552]	@ (8003360 <UART_SetConfig+0x2b4>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b03      	cmp	r3, #3
 8003142:	d81b      	bhi.n	800317c <UART_SetConfig+0xd0>
 8003144:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <UART_SetConfig+0xa0>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	0800315d 	.word	0x0800315d
 8003150:	0800316d 	.word	0x0800316d
 8003154:	08003165 	.word	0x08003165
 8003158:	08003175 	.word	0x08003175
 800315c:	2301      	movs	r3, #1
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003162:	e0ab      	b.n	80032bc <UART_SetConfig+0x210>
 8003164:	2302      	movs	r3, #2
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316a:	e0a7      	b.n	80032bc <UART_SetConfig+0x210>
 800316c:	2304      	movs	r3, #4
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003172:	e0a3      	b.n	80032bc <UART_SetConfig+0x210>
 8003174:	2308      	movs	r3, #8
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317a:	e09f      	b.n	80032bc <UART_SetConfig+0x210>
 800317c:	2310      	movs	r3, #16
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003182:	e09b      	b.n	80032bc <UART_SetConfig+0x210>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a76      	ldr	r2, [pc, #472]	@ (8003364 <UART_SetConfig+0x2b8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d138      	bne.n	8003200 <UART_SetConfig+0x154>
 800318e:	4b74      	ldr	r3, [pc, #464]	@ (8003360 <UART_SetConfig+0x2b4>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d82d      	bhi.n	80031f8 <UART_SetConfig+0x14c>
 800319c:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <UART_SetConfig+0xf8>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080031f9 	.word	0x080031f9
 80031ac:	080031f9 	.word	0x080031f9
 80031b0:	080031f9 	.word	0x080031f9
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	080031f9 	.word	0x080031f9
 80031bc:	080031f9 	.word	0x080031f9
 80031c0:	080031f9 	.word	0x080031f9
 80031c4:	080031e1 	.word	0x080031e1
 80031c8:	080031f9 	.word	0x080031f9
 80031cc:	080031f9 	.word	0x080031f9
 80031d0:	080031f9 	.word	0x080031f9
 80031d4:	080031f1 	.word	0x080031f1
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031de:	e06d      	b.n	80032bc <UART_SetConfig+0x210>
 80031e0:	2302      	movs	r3, #2
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e6:	e069      	b.n	80032bc <UART_SetConfig+0x210>
 80031e8:	2304      	movs	r3, #4
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ee:	e065      	b.n	80032bc <UART_SetConfig+0x210>
 80031f0:	2308      	movs	r3, #8
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f6:	e061      	b.n	80032bc <UART_SetConfig+0x210>
 80031f8:	2310      	movs	r3, #16
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e05d      	b.n	80032bc <UART_SetConfig+0x210>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a58      	ldr	r2, [pc, #352]	@ (8003368 <UART_SetConfig+0x2bc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d125      	bne.n	8003256 <UART_SetConfig+0x1aa>
 800320a:	4b55      	ldr	r3, [pc, #340]	@ (8003360 <UART_SetConfig+0x2b4>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003210:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003214:	2b30      	cmp	r3, #48	@ 0x30
 8003216:	d016      	beq.n	8003246 <UART_SetConfig+0x19a>
 8003218:	2b30      	cmp	r3, #48	@ 0x30
 800321a:	d818      	bhi.n	800324e <UART_SetConfig+0x1a2>
 800321c:	2b20      	cmp	r3, #32
 800321e:	d00a      	beq.n	8003236 <UART_SetConfig+0x18a>
 8003220:	2b20      	cmp	r3, #32
 8003222:	d814      	bhi.n	800324e <UART_SetConfig+0x1a2>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <UART_SetConfig+0x182>
 8003228:	2b10      	cmp	r3, #16
 800322a:	d008      	beq.n	800323e <UART_SetConfig+0x192>
 800322c:	e00f      	b.n	800324e <UART_SetConfig+0x1a2>
 800322e:	2300      	movs	r3, #0
 8003230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003234:	e042      	b.n	80032bc <UART_SetConfig+0x210>
 8003236:	2302      	movs	r3, #2
 8003238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323c:	e03e      	b.n	80032bc <UART_SetConfig+0x210>
 800323e:	2304      	movs	r3, #4
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003244:	e03a      	b.n	80032bc <UART_SetConfig+0x210>
 8003246:	2308      	movs	r3, #8
 8003248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324c:	e036      	b.n	80032bc <UART_SetConfig+0x210>
 800324e:	2310      	movs	r3, #16
 8003250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003254:	e032      	b.n	80032bc <UART_SetConfig+0x210>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3f      	ldr	r2, [pc, #252]	@ (8003358 <UART_SetConfig+0x2ac>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d12a      	bne.n	80032b6 <UART_SetConfig+0x20a>
 8003260:	4b3f      	ldr	r3, [pc, #252]	@ (8003360 <UART_SetConfig+0x2b4>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800326a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800326e:	d01a      	beq.n	80032a6 <UART_SetConfig+0x1fa>
 8003270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003274:	d81b      	bhi.n	80032ae <UART_SetConfig+0x202>
 8003276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327a:	d00c      	beq.n	8003296 <UART_SetConfig+0x1ea>
 800327c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003280:	d815      	bhi.n	80032ae <UART_SetConfig+0x202>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <UART_SetConfig+0x1e2>
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d008      	beq.n	800329e <UART_SetConfig+0x1f2>
 800328c:	e00f      	b.n	80032ae <UART_SetConfig+0x202>
 800328e:	2300      	movs	r3, #0
 8003290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003294:	e012      	b.n	80032bc <UART_SetConfig+0x210>
 8003296:	2302      	movs	r3, #2
 8003298:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329c:	e00e      	b.n	80032bc <UART_SetConfig+0x210>
 800329e:	2304      	movs	r3, #4
 80032a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a4:	e00a      	b.n	80032bc <UART_SetConfig+0x210>
 80032a6:	2308      	movs	r3, #8
 80032a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ac:	e006      	b.n	80032bc <UART_SetConfig+0x210>
 80032ae:	2310      	movs	r3, #16
 80032b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b4:	e002      	b.n	80032bc <UART_SetConfig+0x210>
 80032b6:	2310      	movs	r3, #16
 80032b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a25      	ldr	r2, [pc, #148]	@ (8003358 <UART_SetConfig+0x2ac>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f040 808a 	bne.w	80033dc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d824      	bhi.n	800331a <UART_SetConfig+0x26e>
 80032d0:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <UART_SetConfig+0x22c>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	080032fd 	.word	0x080032fd
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	08003305 	.word	0x08003305
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800330b 	.word	0x0800330b
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	0800331b 	.word	0x0800331b
 80032f4:	0800331b 	.word	0x0800331b
 80032f8:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032fc:	f7fe fdc4 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8003300:	61f8      	str	r0, [r7, #28]
        break;
 8003302:	e010      	b.n	8003326 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <UART_SetConfig+0x2c0>)
 8003306:	61fb      	str	r3, [r7, #28]
        break;
 8003308:	e00d      	b.n	8003326 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7fe fd25 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 800330e:	61f8      	str	r0, [r7, #28]
        break;
 8003310:	e009      	b.n	8003326 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003316:	61fb      	str	r3, [r7, #28]
        break;
 8003318:	e005      	b.n	8003326 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8109 	beq.w	8003540 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	429a      	cmp	r2, r3
 800333c:	d305      	bcc.n	800334a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	429a      	cmp	r2, r3
 8003348:	d912      	bls.n	8003370 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003350:	e0f6      	b.n	8003540 <UART_SetConfig+0x494>
 8003352:	bf00      	nop
 8003354:	efff69f3 	.word	0xefff69f3
 8003358:	40008000 	.word	0x40008000
 800335c:	40013800 	.word	0x40013800
 8003360:	40021000 	.word	0x40021000
 8003364:	40004400 	.word	0x40004400
 8003368:	40004800 	.word	0x40004800
 800336c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2200      	movs	r2, #0
 8003374:	461c      	mov	r4, r3
 8003376:	4615      	mov	r5, r2
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	022b      	lsls	r3, r5, #8
 8003382:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003386:	0222      	lsls	r2, r4, #8
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	6849      	ldr	r1, [r1, #4]
 800338c:	0849      	lsrs	r1, r1, #1
 800338e:	2000      	movs	r0, #0
 8003390:	4688      	mov	r8, r1
 8003392:	4681      	mov	r9, r0
 8003394:	eb12 0a08 	adds.w	sl, r2, r8
 8003398:	eb43 0b09 	adc.w	fp, r3, r9
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033aa:	4650      	mov	r0, sl
 80033ac:	4659      	mov	r1, fp
 80033ae:	f7fc ff0f 	bl	80001d0 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4613      	mov	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c0:	d308      	bcc.n	80033d4 <UART_SetConfig+0x328>
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c8:	d204      	bcs.n	80033d4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e0b5      	b.n	8003540 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033da:	e0b1      	b.n	8003540 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033e4:	d15d      	bne.n	80034a2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80033e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d827      	bhi.n	800343e <UART_SetConfig+0x392>
 80033ee:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <UART_SetConfig+0x348>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003421 	.word	0x08003421
 80033fc:	08003429 	.word	0x08003429
 8003400:	0800343f 	.word	0x0800343f
 8003404:	0800342f 	.word	0x0800342f
 8003408:	0800343f 	.word	0x0800343f
 800340c:	0800343f 	.word	0x0800343f
 8003410:	0800343f 	.word	0x0800343f
 8003414:	08003437 	.word	0x08003437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003418:	f7fe fd36 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 800341c:	61f8      	str	r0, [r7, #28]
        break;
 800341e:	e014      	b.n	800344a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7fe fd48 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 8003424:	61f8      	str	r0, [r7, #28]
        break;
 8003426:	e010      	b.n	800344a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003428:	4b4c      	ldr	r3, [pc, #304]	@ (800355c <UART_SetConfig+0x4b0>)
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e00d      	b.n	800344a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7fe fc93 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8003432:	61f8      	str	r0, [r7, #28]
        break;
 8003434:	e009      	b.n	800344a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800343a:	61fb      	str	r3, [r7, #28]
        break;
 800343c:	e005      	b.n	800344a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d077      	beq.n	8003540 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005a      	lsls	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	441a      	add	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	d916      	bls.n	800349a <UART_SetConfig+0x3ee>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003472:	d212      	bcs.n	800349a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	b29b      	uxth	r3, r3
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	b29a      	uxth	r2, r3
 800348a:	8afb      	ldrh	r3, [r7, #22]
 800348c:	4313      	orrs	r3, r2
 800348e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	8afa      	ldrh	r2, [r7, #22]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e052      	b.n	8003540 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034a0:	e04e      	b.n	8003540 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d827      	bhi.n	80034fa <UART_SetConfig+0x44e>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <UART_SetConfig+0x404>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034fb 	.word	0x080034fb
 80034c0:	080034eb 	.word	0x080034eb
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	080034fb 	.word	0x080034fb
 80034cc:	080034fb 	.word	0x080034fb
 80034d0:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d4:	f7fe fcd8 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80034d8:	61f8      	str	r0, [r7, #28]
        break;
 80034da:	e014      	b.n	8003506 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034dc:	f7fe fcea 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 80034e0:	61f8      	str	r0, [r7, #28]
        break;
 80034e2:	e010      	b.n	8003506 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <UART_SetConfig+0x4b0>)
 80034e6:	61fb      	str	r3, [r7, #28]
        break;
 80034e8:	e00d      	b.n	8003506 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7fe fc35 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 80034ee:	61f8      	str	r0, [r7, #28]
        break;
 80034f0:	e009      	b.n	8003506 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034f6:	61fb      	str	r3, [r7, #28]
        break;
 80034f8:	e005      	b.n	8003506 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003504:	bf00      	nop
    }

    if (pclk != 0U)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d019      	beq.n	8003540 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	085a      	lsrs	r2, r3, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	441a      	add	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d909      	bls.n	800353a <UART_SetConfig+0x48e>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d205      	bcs.n	800353a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e002      	b.n	8003540 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800354c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	@ 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	00f42400 	.word	0x00f42400

08003560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01a      	beq.n	8003676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800365e:	d10a      	bne.n	8003676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b098      	sub	sp, #96	@ 0x60
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036b4:	f7fd fa7a 	bl	8000bac <HAL_GetTick>
 80036b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d12e      	bne.n	8003726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d0:	2200      	movs	r2, #0
 80036d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f88c 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d021      	beq.n	8003726 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003700:	647b      	str	r3, [r7, #68]	@ 0x44
 8003702:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800370e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e6      	bne.n	80036e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e062      	b.n	80037ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d149      	bne.n	80037c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373c:	2200      	movs	r2, #0
 800373e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f856 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d03c      	beq.n	80037c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	623b      	str	r3, [r7, #32]
   return(result);
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800376c:	633b      	str	r3, [r7, #48]	@ 0x30
 800376e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e6      	bne.n	800374e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3308      	adds	r3, #8
 800379e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a0:	61fa      	str	r2, [r7, #28]
 80037a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	69b9      	ldr	r1, [r7, #24]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	617b      	str	r3, [r7, #20]
   return(result);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e5      	bne.n	8003780 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e011      	b.n	80037ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3758      	adds	r7, #88	@ 0x58
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003804:	e04f      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d04b      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fd f9cd 	bl	8000bac <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <UART_WaitOnFlagUntilTimeout+0x30>
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e04e      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d037      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b80      	cmp	r3, #128	@ 0x80
 800383a:	d034      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b40      	cmp	r3, #64	@ 0x40
 8003840:	d031      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d110      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2208      	movs	r2, #8
 8003856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f838 	bl	80038ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2208      	movs	r2, #8
 8003862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e029      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003880:	d111      	bne.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800388a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f81e 	bl	80038ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e00f      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4013      	ands	r3, r2
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	bf0c      	ite	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	2300      	movne	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d0a0      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b095      	sub	sp, #84	@ 0x54
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80038f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e6      	bne.n	80038d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	61fb      	str	r3, [r7, #28]
   return(result);
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3308      	adds	r3, #8
 8003926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800392e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003940:	2b01      	cmp	r3, #1
 8003942:	d118      	bne.n	8003976 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	60bb      	str	r3, [r7, #8]
   return(result);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f023 0310 	bic.w	r3, r3, #16
 8003958:	647b      	str	r3, [r7, #68]	@ 0x44
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	6979      	ldr	r1, [r7, #20]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	613b      	str	r3, [r7, #16]
   return(result);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e6      	bne.n	8003944 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800398a:	bf00      	nop
 800398c:	3754      	adds	r7, #84	@ 0x54
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff fb63 	bl	8003080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b088      	sub	sp, #32
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	6979      	ldr	r1, [r7, #20]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	613b      	str	r3, [r7, #16]
   return(result);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e6      	bne.n	80039ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fb2f 	bl	800306c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a0e:	bf00      	nop
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <__NVIC_SetPriority>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	db0a      	blt.n	8003a56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	490c      	ldr	r1, [pc, #48]	@ (8003a78 <__NVIC_SetPriority+0x4c>)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a54:	e00a      	b.n	8003a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4908      	ldr	r1, [pc, #32]	@ (8003a7c <__NVIC_SetPriority+0x50>)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3b04      	subs	r3, #4
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	440b      	add	r3, r1
 8003a6a:	761a      	strb	r2, [r3, #24]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000e100 	.word	0xe000e100
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <SysTick_Handler+0x1c>)
 8003a86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a88:	f001 fd46 	bl	8005518 <xTaskGetSchedulerState>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a92:	f002 fb41 	bl	8006118 <xPortSysTickHandler>
  }
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	e000e010 	.word	0xe000e010

08003aa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f06f 0004 	mvn.w	r0, #4
 8003aaa:	f7ff ffbf 	bl	8003a2c <__NVIC_SetPriority>
#endif
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aba:	f3ef 8305 	mrs	r3, IPSR
 8003abe:	603b      	str	r3, [r7, #0]
  return(result);
 8003ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ac6:	f06f 0305 	mvn.w	r3, #5
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	e00c      	b.n	8003ae8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ace:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <osKernelInitialize+0x44>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ad6:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <osKernelInitialize+0x44>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	e002      	b.n	8003ae8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ae8:	687b      	ldr	r3, [r7, #4]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	200001b0 	.word	0x200001b0

08003afc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b02:	f3ef 8305 	mrs	r3, IPSR
 8003b06:	603b      	str	r3, [r7, #0]
  return(result);
 8003b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b0e:	f06f 0305 	mvn.w	r3, #5
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e010      	b.n	8003b38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <osKernelStart+0x48>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d109      	bne.n	8003b32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b1e:	f7ff ffbf 	bl	8003aa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <osKernelStart+0x48>)
 8003b24:	2202      	movs	r2, #2
 8003b26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b28:	f001 f892 	bl	8004c50 <vTaskStartScheduler>
      stat = osOK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	e002      	b.n	8003b38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b38:	687b      	ldr	r3, [r7, #4]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200001b0 	.word	0x200001b0

08003b48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08e      	sub	sp, #56	@ 0x38
 8003b4c:	af04      	add	r7, sp, #16
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b58:	f3ef 8305 	mrs	r3, IPSR
 8003b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d17e      	bne.n	8003c62 <osThreadNew+0x11a>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d07b      	beq.n	8003c62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b6a:	2380      	movs	r3, #128	@ 0x80
 8003b6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b6e:	2318      	movs	r3, #24
 8003b70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d045      	beq.n	8003c0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <osThreadNew+0x48>
        name = attr->name;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <osThreadNew+0x6e>
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b38      	cmp	r3, #56	@ 0x38
 8003ba8:	d805      	bhi.n	8003bb6 <osThreadNew+0x6e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <osThreadNew+0x72>
        return (NULL);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e054      	b.n	8003c64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00e      	beq.n	8003bf0 <osThreadNew+0xa8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2ba7      	cmp	r3, #167	@ 0xa7
 8003bd8:	d90a      	bls.n	8003bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <osThreadNew+0xa8>
        mem = 1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e010      	b.n	8003c12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10c      	bne.n	8003c12 <osThreadNew+0xca>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d108      	bne.n	8003c12 <osThreadNew+0xca>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <osThreadNew+0xca>
          mem = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e001      	b.n	8003c12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d110      	bne.n	8003c3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c20:	9202      	str	r2, [sp, #8]
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6a3a      	ldr	r2, [r7, #32]
 8003c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fe1a 	bl	8004868 <xTaskCreateStatic>
 8003c34:	4603      	mov	r3, r0
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e013      	b.n	8003c62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d110      	bne.n	8003c62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fe68 	bl	8004928 <xTaskCreate>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <osThreadNew+0x11a>
            hTask = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c62:	693b      	ldr	r3, [r7, #16]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3728      	adds	r7, #40	@ 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c74:	f3ef 8305 	mrs	r3, IPSR
 8003c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <osDelay+0x1c>
    stat = osErrorISR;
 8003c80:	f06f 0305 	mvn.w	r3, #5
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e007      	b.n	8003c98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 ffa6 	bl	8004be4 <vTaskDelay>
    }
  }

  return (stat);
 8003c98:	68fb      	ldr	r3, [r7, #12]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a07      	ldr	r2, [pc, #28]	@ (8003cd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4a06      	ldr	r2, [pc, #24]	@ (8003cd4 <vApplicationGetIdleTaskMemory+0x30>)
 8003cba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2280      	movs	r2, #128	@ 0x80
 8003cc0:	601a      	str	r2, [r3, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	200001b4 	.word	0x200001b4
 8003cd4:	2000025c 	.word	0x2000025c

08003cd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ce8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4a06      	ldr	r2, [pc, #24]	@ (8003d08 <vApplicationGetTimerTaskMemory+0x30>)
 8003cee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf6:	601a      	str	r2, [r3, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	2000045c 	.word	0x2000045c
 8003d08:	20000504 	.word	0x20000504

08003d0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f103 0208 	add.w	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295
 8003d24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f103 0208 	add.w	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f103 0208 	add.w	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d66:	b480      	push	{r7}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d103      	bne.n	8003dce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e00c      	b.n	8003de8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e002      	b.n	8003ddc <vListInsert+0x2e>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d2f6      	bcs.n	8003dd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6892      	ldr	r2, [r2, #8]
 8003e36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6852      	ldr	r2, [r2, #4]
 8003e40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d103      	bne.n	8003e54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	1e5a      	subs	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ea0:	f002 f8aa 	bl	8005ff8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	68f9      	ldr	r1, [r7, #12]
 8003ed4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	441a      	add	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	22ff      	movs	r2, #255	@ 0xff
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	22ff      	movs	r2, #255	@ 0xff
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d114      	bne.n	8003f20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01a      	beq.n	8003f34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3310      	adds	r3, #16
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 f942 	bl	800518c <xTaskRemoveFromEventList>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d012      	beq.n	8003f34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <xQueueGenericReset+0xd0>)
 8003f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	e009      	b.n	8003f34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3310      	adds	r3, #16
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fef1 	bl	8003d0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3324      	adds	r3, #36	@ 0x24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff feec 	bl	8003d0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f34:	f002 f892 	bl	800605c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f38:	2301      	movs	r3, #1
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08e      	sub	sp, #56	@ 0x38
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	e7fd      	b.n	8003f70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <xQueueGenericCreateStatic+0x56>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <xQueueGenericCreateStatic+0x5a>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <xQueueGenericCreateStatic+0x5c>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	623b      	str	r3, [r7, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <xQueueGenericCreateStatic+0x84>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <xQueueGenericCreateStatic+0x88>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <xQueueGenericCreateStatic+0x8a>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	61fb      	str	r3, [r7, #28]
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	e7fd      	b.n	8003fea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fee:	2350      	movs	r3, #80	@ 0x50
 8003ff0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b50      	cmp	r3, #80	@ 0x50
 8003ff6:	d00b      	beq.n	8004010 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	61bb      	str	r3, [r7, #24]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004010:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004024:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f805 	bl	8004042 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800403a:	4618      	mov	r0, r3
 800403c:	3730      	adds	r7, #48	@ 0x30
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e002      	b.n	8004064 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004070:	2101      	movs	r1, #1
 8004072:	69b8      	ldr	r0, [r7, #24]
 8004074:	f7ff fefe 	bl	8003e74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08e      	sub	sp, #56	@ 0x38
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004096:	2300      	movs	r3, #0
 8004098:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <xQueueGenericSend+0x34>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040b6:	bf00      	nop
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <xQueueGenericSend+0x42>
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <xQueueGenericSend+0x46>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <xQueueGenericSend+0x48>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <xQueueGenericSend+0x64>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d103      	bne.n	80040fa <xQueueGenericSend+0x72>
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <xQueueGenericSend+0x76>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <xQueueGenericSend+0x78>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <xQueueGenericSend+0x94>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	623b      	str	r3, [r7, #32]
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800411c:	f001 f9fc 	bl	8005518 <xTaskGetSchedulerState>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <xQueueGenericSend+0xa4>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <xQueueGenericSend+0xa8>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <xQueueGenericSend+0xaa>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <xQueueGenericSend+0xc6>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	61fb      	str	r3, [r7, #28]
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	e7fd      	b.n	800414a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800414e:	f001 ff53 	bl	8005ff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <xQueueGenericSend+0xdc>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d129      	bne.n	80041b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800416a:	f000 fa0f 	bl	800458c <prvCopyDataToQueue>
 800416e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d010      	beq.n	800419a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417a:	3324      	adds	r3, #36	@ 0x24
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f805 	bl	800518c <xTaskRemoveFromEventList>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004188:	4b3f      	ldr	r3, [pc, #252]	@ (8004288 <xQueueGenericSend+0x200>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	e00a      	b.n	80041b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800419a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041a0:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <xQueueGenericSend+0x200>)
 80041a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041b0:	f001 ff54 	bl	800605c <vPortExitCritical>
				return pdPASS;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e063      	b.n	8004280 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041be:	f001 ff4d 	bl	800605c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e05c      	b.n	8004280 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 f83f 	bl	8005254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041da:	f001 ff3f 	bl	800605c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041de:	f000 fda7 	bl	8004d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041e2:	f001 ff09 	bl	8005ff8 <vPortEnterCritical>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d103      	bne.n	80041fc <xQueueGenericSend+0x174>
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004202:	b25b      	sxtb	r3, r3
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d103      	bne.n	8004212 <xQueueGenericSend+0x18a>
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004212:	f001 ff23 	bl	800605c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004216:	1d3a      	adds	r2, r7, #4
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f001 f82e 	bl	8005280 <xTaskCheckForTimeOut>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d124      	bne.n	8004274 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800422a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800422c:	f000 faa6 	bl	800477c <prvIsQueueFull>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	3310      	adds	r3, #16
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f000 ff52 	bl	80050e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004246:	f000 fa31 	bl	80046ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800424a:	f000 fd7f 	bl	8004d4c <xTaskResumeAll>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f af7c 	bne.w	800414e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004256:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <xQueueGenericSend+0x200>)
 8004258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	e772      	b.n	800414e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800426a:	f000 fa1f 	bl	80046ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800426e:	f000 fd6d 	bl	8004d4c <xTaskResumeAll>
 8004272:	e76c      	b.n	800414e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004274:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004276:	f000 fa19 	bl	80046ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800427a:	f000 fd67 	bl	8004d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800427e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004280:	4618      	mov	r0, r3
 8004282:	3738      	adds	r7, #56	@ 0x38
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b090      	sub	sp, #64	@ 0x40
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	e7fd      	b.n	80042b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <xQueueGenericSendFromISR+0x3e>
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <xQueueGenericSendFromISR+0x42>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <xQueueGenericSendFromISR+0x44>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d103      	bne.n	80042fa <xQueueGenericSendFromISR+0x6e>
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <xQueueGenericSendFromISR+0x72>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <xQueueGenericSendFromISR+0x74>
 80042fe:	2300      	movs	r3, #0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	623b      	str	r3, [r7, #32]
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800431c:	f001 ff4c 	bl	80061b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004320:	f3ef 8211 	mrs	r2, BASEPRI
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	61fa      	str	r2, [r7, #28]
 8004336:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004338:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <xQueueGenericSendFromISR+0xc2>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d12f      	bne.n	80043ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004354:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004364:	f000 f912 	bl	800458c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004368:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d112      	bne.n	8004398 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437c:	3324      	adds	r3, #36	@ 0x24
 800437e:	4618      	mov	r0, r3
 8004380:	f000 ff04 	bl	800518c <xTaskRemoveFromEventList>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00e      	beq.n	80043a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e007      	b.n	80043a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004398:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800439c:	3301      	adds	r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	b25a      	sxtb	r2, r3
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80043a8:	2301      	movs	r3, #1
 80043aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80043ac:	e001      	b.n	80043b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3740      	adds	r7, #64	@ 0x40
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <xQueueReceive+0x32>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	623b      	str	r3, [r7, #32]
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	e7fd      	b.n	80043f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <xQueueReceive+0x40>
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <xQueueReceive+0x44>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <xQueueReceive+0x46>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <xQueueReceive+0x62>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	61fb      	str	r3, [r7, #28]
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800442a:	f001 f875 	bl	8005518 <xTaskGetSchedulerState>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <xQueueReceive+0x72>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <xQueueReceive+0x76>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <xQueueReceive+0x78>
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <xQueueReceive+0x94>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	61bb      	str	r3, [r7, #24]
}
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800445c:	f001 fdcc 	bl	8005ff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01f      	beq.n	80044ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004470:	f000 f8f6 	bl	8004660 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	1e5a      	subs	r2, r3, #1
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00f      	beq.n	80044a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	3310      	adds	r3, #16
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fe7f 	bl	800518c <xTaskRemoveFromEventList>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004494:	4b3c      	ldr	r3, [pc, #240]	@ (8004588 <xQueueReceive+0x1c0>)
 8004496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044a4:	f001 fdda 	bl	800605c <vPortExitCritical>
				return pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e069      	b.n	8004580 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044b2:	f001 fdd3 	bl	800605c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e062      	b.n	8004580 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fec5 	bl	8005254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ca:	2301      	movs	r3, #1
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044ce:	f001 fdc5 	bl	800605c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044d2:	f000 fc2d 	bl	8004d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044d6:	f001 fd8f 	bl	8005ff8 <vPortEnterCritical>
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d103      	bne.n	80044f0 <xQueueReceive+0x128>
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d103      	bne.n	8004506 <xQueueReceive+0x13e>
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004506:	f001 fda9 	bl	800605c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800450a:	1d3a      	adds	r2, r7, #4
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 feb4 	bl	8005280 <xTaskCheckForTimeOut>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d123      	bne.n	8004566 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800451e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004520:	f000 f916 	bl	8004750 <prvIsQueueEmpty>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d017      	beq.n	800455a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452c:	3324      	adds	r3, #36	@ 0x24
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fdd8 	bl	80050e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800453a:	f000 f8b7 	bl	80046ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800453e:	f000 fc05 	bl	8004d4c <xTaskResumeAll>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d189      	bne.n	800445c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004548:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <xQueueReceive+0x1c0>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	e780      	b.n	800445c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800455a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800455c:	f000 f8a6 	bl	80046ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004560:	f000 fbf4 	bl	8004d4c <xTaskResumeAll>
 8004564:	e77a      	b.n	800445c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004568:	f000 f8a0 	bl	80046ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800456c:	f000 fbee 	bl	8004d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004572:	f000 f8ed 	bl	8004750 <prvIsQueueEmpty>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	f43f af6f 	beq.w	800445c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800457e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004580:	4618      	mov	r0, r3
 8004582:	3730      	adds	r7, #48	@ 0x30
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d14d      	bne.n	800464e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 ffcc 	bl	8005554 <xTaskPriorityDisinherit>
 80045bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	e043      	b.n	800464e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d119      	bne.n	8004600 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6858      	ldr	r0, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	461a      	mov	r2, r3
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	f002 f8a2 	bl	8006720 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	441a      	add	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d32b      	bcc.n	800464e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	e026      	b.n	800464e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68d8      	ldr	r0, [r3, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	461a      	mov	r2, r3
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	f002 f888 	bl	8006720 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	425b      	negs	r3, r3
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d207      	bcs.n	800463c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	425b      	negs	r3, r3
 8004636:	441a      	add	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d105      	bne.n	800464e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3b01      	subs	r3, #1
 800464c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004656:	697b      	ldr	r3, [r7, #20]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	441a      	add	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d303      	bcc.n	8004694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68d9      	ldr	r1, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	461a      	mov	r2, r3
 800469e:	6838      	ldr	r0, [r7, #0]
 80046a0:	f002 f83e 	bl	8006720 <memcpy>
	}
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046b4:	f001 fca0 	bl	8005ff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046c0:	e011      	b.n	80046e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d012      	beq.n	80046f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3324      	adds	r3, #36	@ 0x24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fd5c 	bl	800518c <xTaskRemoveFromEventList>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046da:	f000 fe35 	bl	8005348 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	dce9      	bgt.n	80046c2 <prvUnlockQueue+0x16>
 80046ee:	e000      	b.n	80046f2 <prvUnlockQueue+0x46>
					break;
 80046f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	22ff      	movs	r2, #255	@ 0xff
 80046f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046fa:	f001 fcaf 	bl	800605c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046fe:	f001 fc7b 	bl	8005ff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800470a:	e011      	b.n	8004730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d012      	beq.n	800473a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3310      	adds	r3, #16
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fd37 	bl	800518c <xTaskRemoveFromEventList>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004724:	f000 fe10 	bl	8005348 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004728:	7bbb      	ldrb	r3, [r7, #14]
 800472a:	3b01      	subs	r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004734:	2b00      	cmp	r3, #0
 8004736:	dce9      	bgt.n	800470c <prvUnlockQueue+0x60>
 8004738:	e000      	b.n	800473c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800473a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	22ff      	movs	r2, #255	@ 0xff
 8004740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004744:	f001 fc8a 	bl	800605c <vPortExitCritical>
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004758:	f001 fc4e 	bl	8005ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e001      	b.n	800476e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800476e:	f001 fc75 	bl	800605c <vPortExitCritical>

	return xReturn;
 8004772:	68fb      	ldr	r3, [r7, #12]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004784:	f001 fc38 	bl	8005ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004790:	429a      	cmp	r2, r3
 8004792:	d102      	bne.n	800479a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e001      	b.n	800479e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800479e:	f001 fc5d 	bl	800605c <vPortExitCritical>

	return xReturn;
 80047a2:	68fb      	ldr	r3, [r7, #12]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e014      	b.n	80047e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047bc:	4a0f      	ldr	r2, [pc, #60]	@ (80047fc <vQueueAddToRegistry+0x50>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047c8:	490c      	ldr	r1, [pc, #48]	@ (80047fc <vQueueAddToRegistry+0x50>)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047d2:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <vQueueAddToRegistry+0x50>)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047de:	e006      	b.n	80047ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b07      	cmp	r3, #7
 80047ea:	d9e7      	bls.n	80047bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000904 	.word	0x20000904

08004800 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004810:	f001 fbf2 	bl	8005ff8 <vPortEnterCritical>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800481a:	b25b      	sxtb	r3, r3
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d103      	bne.n	800482a <vQueueWaitForMessageRestricted+0x2a>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004830:	b25b      	sxtb	r3, r3
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d103      	bne.n	8004840 <vQueueWaitForMessageRestricted+0x40>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004840:	f001 fc0c 	bl	800605c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	3324      	adds	r3, #36	@ 0x24
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fc6d 	bl	8005134 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800485a:	6978      	ldr	r0, [r7, #20]
 800485c:	f7ff ff26 	bl	80046ac <prvUnlockQueue>
	}
 8004860:	bf00      	nop
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	@ 0x38
 800486c:	af04      	add	r7, sp, #16
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <xTaskCreateStatic+0x2c>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	623b      	str	r3, [r7, #32]
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61fb      	str	r3, [r7, #28]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048b2:	23a8      	movs	r3, #168	@ 0xa8
 80048b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80048ba:	d00b      	beq.n	80048d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	61bb      	str	r3, [r7, #24]
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	e7fd      	b.n	80048d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01e      	beq.n	800491a <xTaskCreateStatic+0xb2>
 80048dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048f4:	2300      	movs	r3, #0
 80048f6:	9303      	str	r3, [sp, #12]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	9302      	str	r3, [sp, #8]
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f851 	bl	80049b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004914:	f000 f8f6 	bl	8004b04 <prvAddNewTaskToReadyList>
 8004918:	e001      	b.n	800491e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800491e:	697b      	ldr	r3, [r7, #20]
	}
 8004920:	4618      	mov	r0, r3
 8004922:	3728      	adds	r7, #40	@ 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	@ 0x30
 800492c:	af04      	add	r7, sp, #16
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4618      	mov	r0, r3
 800493e:	f001 fc7d 	bl	800623c <pvPortMalloc>
 8004942:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00e      	beq.n	8004968 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800494a:	20a8      	movs	r0, #168	@ 0xa8
 800494c:	f001 fc76 	bl	800623c <pvPortMalloc>
 8004950:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30
 800495e:	e005      	b.n	800496c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004960:	6978      	ldr	r0, [r7, #20]
 8004962:	f001 fd39 	bl	80063d8 <vPortFree>
 8004966:	e001      	b.n	800496c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d017      	beq.n	80049a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	2300      	movs	r3, #0
 800497e:	9303      	str	r3, [sp, #12]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	9302      	str	r3, [sp, #8]
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f80f 	bl	80049b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004996:	69f8      	ldr	r0, [r7, #28]
 8004998:	f000 f8b4 	bl	8004b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800499c:	2301      	movs	r3, #1
 800499e:	61bb      	str	r3, [r7, #24]
 80049a0:	e002      	b.n	80049a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295
 80049a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049a8:	69bb      	ldr	r3, [r7, #24]
	}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	461a      	mov	r2, r3
 80049cc:	21a5      	movs	r1, #165	@ 0xa5
 80049ce:	f001 fe23 	bl	8006618 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049dc:	3b01      	subs	r3, #1
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f023 0307 	bic.w	r3, r3, #7
 80049ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	617b      	str	r3, [r7, #20]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01f      	beq.n	8004a54 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	e012      	b.n	8004a40 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	7819      	ldrb	r1, [r3, #0]
 8004a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	3334      	adds	r3, #52	@ 0x34
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d006      	beq.n	8004a48 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d9e9      	bls.n	8004a1a <prvInitialiseNewTask+0x66>
 8004a46:	e000      	b.n	8004a4a <prvInitialiseNewTask+0x96>
			{
				break;
 8004a48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a52:	e003      	b.n	8004a5c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	2b37      	cmp	r3, #55	@ 0x37
 8004a60:	d901      	bls.n	8004a66 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a62:	2337      	movs	r3, #55	@ 0x37
 8004a64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a70:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	2200      	movs	r2, #0
 8004a76:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff f965 	bl	8003d4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a84:	3318      	adds	r3, #24
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff f960 	bl	8003d4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab4:	3354      	adds	r3, #84	@ 0x54
 8004ab6:	224c      	movs	r2, #76	@ 0x4c
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 fdac 	bl	8006618 <memset>
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8004af8 <prvInitialiseNewTask+0x144>)
 8004ac4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8004afc <prvInitialiseNewTask+0x148>)
 8004aca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	4a0c      	ldr	r2, [pc, #48]	@ (8004b00 <prvInitialiseNewTask+0x14c>)
 8004ad0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	68f9      	ldr	r1, [r7, #12]
 8004ad6:	69b8      	ldr	r0, [r7, #24]
 8004ad8:	f001 f95a 	bl	8005d90 <pxPortInitialiseStack>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aee:	bf00      	nop
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20001b50 	.word	0x20001b50
 8004afc:	20001bb8 	.word	0x20001bb8
 8004b00:	20001c20 	.word	0x20001c20

08004b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b0c:	f001 fa74 	bl	8005ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b10:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc8 <prvAddNewTaskToReadyList+0xc4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3301      	adds	r3, #1
 8004b16:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc8 <prvAddNewTaskToReadyList+0xc4>)
 8004b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bcc <prvAddNewTaskToReadyList+0xc8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b22:	4a2a      	ldr	r2, [pc, #168]	@ (8004bcc <prvAddNewTaskToReadyList+0xc8>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b28:	4b27      	ldr	r3, [pc, #156]	@ (8004bc8 <prvAddNewTaskToReadyList+0xc4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d110      	bne.n	8004b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b30:	f000 fc2e 	bl	8005390 <prvInitialiseTaskLists>
 8004b34:	e00d      	b.n	8004b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b36:	4b26      	ldr	r3, [pc, #152]	@ (8004bd0 <prvAddNewTaskToReadyList+0xcc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b3e:	4b23      	ldr	r3, [pc, #140]	@ (8004bcc <prvAddNewTaskToReadyList+0xc8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d802      	bhi.n	8004b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bcc <prvAddNewTaskToReadyList+0xc8>)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b52:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <prvAddNewTaskToReadyList+0xd0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd4 <prvAddNewTaskToReadyList+0xd0>)
 8004b5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <prvAddNewTaskToReadyList+0xd0>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b68:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd8 <prvAddNewTaskToReadyList+0xd4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d903      	bls.n	8004b78 <prvAddNewTaskToReadyList+0x74>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	4a18      	ldr	r2, [pc, #96]	@ (8004bd8 <prvAddNewTaskToReadyList+0xd4>)
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4a15      	ldr	r2, [pc, #84]	@ (8004bdc <prvAddNewTaskToReadyList+0xd8>)
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f7ff f8e9 	bl	8003d66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b94:	f001 fa62 	bl	800605c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b98:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <prvAddNewTaskToReadyList+0xcc>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <prvAddNewTaskToReadyList+0xc8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d207      	bcs.n	8004bbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bae:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <prvAddNewTaskToReadyList+0xdc>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000e18 	.word	0x20000e18
 8004bcc:	20000944 	.word	0x20000944
 8004bd0:	20000e24 	.word	0x20000e24
 8004bd4:	20000e34 	.word	0x20000e34
 8004bd8:	20000e20 	.word	0x20000e20
 8004bdc:	20000948 	.word	0x20000948
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bf6:	4b14      	ldr	r3, [pc, #80]	@ (8004c48 <vTaskDelay+0x64>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <vTaskDelay+0x32>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	60bb      	str	r3, [r7, #8]
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	e7fd      	b.n	8004c12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c16:	f000 f88b 	bl	8004d30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fd09 	bl	8005634 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c22:	f000 f893 	bl	8004d4c <xTaskResumeAll>
 8004c26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d107      	bne.n	8004c3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004c2e:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <vTaskDelay+0x68>)
 8004c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000e40 	.word	0x20000e40
 8004c4c:	e000ed04 	.word	0xe000ed04

08004c50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	@ 0x28
 8004c54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c5e:	463a      	mov	r2, r7
 8004c60:	1d39      	adds	r1, r7, #4
 8004c62:	f107 0308 	add.w	r3, r7, #8
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff f81c 	bl	8003ca4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c6c:	6839      	ldr	r1, [r7, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	9202      	str	r2, [sp, #8]
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	2300      	movs	r3, #0
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	460a      	mov	r2, r1
 8004c7e:	4924      	ldr	r1, [pc, #144]	@ (8004d10 <vTaskStartScheduler+0xc0>)
 8004c80:	4824      	ldr	r0, [pc, #144]	@ (8004d14 <vTaskStartScheduler+0xc4>)
 8004c82:	f7ff fdf1 	bl	8004868 <xTaskCreateStatic>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4a23      	ldr	r2, [pc, #140]	@ (8004d18 <vTaskStartScheduler+0xc8>)
 8004c8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c8c:	4b22      	ldr	r3, [pc, #136]	@ (8004d18 <vTaskStartScheduler+0xc8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c94:	2301      	movs	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e001      	b.n	8004c9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d102      	bne.n	8004caa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ca4:	f000 fd1a 	bl	80056dc <xTimerCreateTimerTask>
 8004ca8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d11b      	bne.n	8004ce8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cc4:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <vTaskStartScheduler+0xcc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3354      	adds	r3, #84	@ 0x54
 8004cca:	4a15      	ldr	r2, [pc, #84]	@ (8004d20 <vTaskStartScheduler+0xd0>)
 8004ccc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <vTaskStartScheduler+0xd4>)
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cd6:	4b14      	ldr	r3, [pc, #80]	@ (8004d28 <vTaskStartScheduler+0xd8>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cdc:	4b13      	ldr	r3, [pc, #76]	@ (8004d2c <vTaskStartScheduler+0xdc>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ce2:	f001 f8e5 	bl	8005eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ce6:	e00f      	b.n	8004d08 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d10b      	bne.n	8004d08 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60fb      	str	r3, [r7, #12]
}
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <vTaskStartScheduler+0xb4>
}
 8004d08:	bf00      	nop
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	08006834 	.word	0x08006834
 8004d14:	08005361 	.word	0x08005361
 8004d18:	20000e3c 	.word	0x20000e3c
 8004d1c:	20000944 	.word	0x20000944
 8004d20:	20000010 	.word	0x20000010
 8004d24:	20000e38 	.word	0x20000e38
 8004d28:	20000e24 	.word	0x20000e24
 8004d2c:	20000e1c 	.word	0x20000e1c

08004d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d34:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <vTaskSuspendAll+0x18>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	4a03      	ldr	r2, [pc, #12]	@ (8004d48 <vTaskSuspendAll+0x18>)
 8004d3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	20000e40 	.word	0x20000e40

08004d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d5a:	4b42      	ldr	r3, [pc, #264]	@ (8004e64 <xTaskResumeAll+0x118>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <xTaskResumeAll+0x2e>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	603b      	str	r3, [r7, #0]
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	e7fd      	b.n	8004d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d7a:	f001 f93d 	bl	8005ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d7e:	4b39      	ldr	r3, [pc, #228]	@ (8004e64 <xTaskResumeAll+0x118>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	4a37      	ldr	r2, [pc, #220]	@ (8004e64 <xTaskResumeAll+0x118>)
 8004d86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d88:	4b36      	ldr	r3, [pc, #216]	@ (8004e64 <xTaskResumeAll+0x118>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d162      	bne.n	8004e56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d90:	4b35      	ldr	r3, [pc, #212]	@ (8004e68 <xTaskResumeAll+0x11c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d05e      	beq.n	8004e56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d98:	e02f      	b.n	8004dfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9a:	4b34      	ldr	r3, [pc, #208]	@ (8004e6c <xTaskResumeAll+0x120>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3318      	adds	r3, #24
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff f83a 	bl	8003e20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff f835 	bl	8003e20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dba:	4b2d      	ldr	r3, [pc, #180]	@ (8004e70 <xTaskResumeAll+0x124>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d903      	bls.n	8004dca <xTaskResumeAll+0x7e>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e70 <xTaskResumeAll+0x124>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4a27      	ldr	r2, [pc, #156]	@ (8004e74 <xTaskResumeAll+0x128>)
 8004dd8:	441a      	add	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7fe ffc0 	bl	8003d66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dea:	4b23      	ldr	r3, [pc, #140]	@ (8004e78 <xTaskResumeAll+0x12c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d302      	bcc.n	8004dfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004df4:	4b21      	ldr	r3, [pc, #132]	@ (8004e7c <xTaskResumeAll+0x130>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004e6c <xTaskResumeAll+0x120>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1cb      	bne.n	8004d9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e08:	f000 fb66 	bl	80054d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e80 <xTaskResumeAll+0x134>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e18:	f000 f846 	bl	8004ea8 <xTaskIncrementTick>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004e22:	4b16      	ldr	r3, [pc, #88]	@ (8004e7c <xTaskResumeAll+0x130>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f1      	bne.n	8004e18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004e34:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <xTaskResumeAll+0x134>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e3a:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <xTaskResumeAll+0x130>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e46:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <xTaskResumeAll+0x138>)
 8004e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e56:	f001 f901 	bl	800605c <vPortExitCritical>

	return xAlreadyYielded;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000e40 	.word	0x20000e40
 8004e68:	20000e18 	.word	0x20000e18
 8004e6c:	20000dd8 	.word	0x20000dd8
 8004e70:	20000e20 	.word	0x20000e20
 8004e74:	20000948 	.word	0x20000948
 8004e78:	20000944 	.word	0x20000944
 8004e7c:	20000e2c 	.word	0x20000e2c
 8004e80:	20000e28 	.word	0x20000e28
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <xTaskGetTickCount+0x1c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e94:	687b      	ldr	r3, [r7, #4]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000e1c 	.word	0x20000e1c

08004ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff0 <xTaskIncrementTick+0x148>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 8090 	bne.w	8004fdc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff4 <xTaskIncrementTick+0x14c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ff4 <xTaskIncrementTick+0x14c>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d121      	bne.n	8004f14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ed0:	4b49      	ldr	r3, [pc, #292]	@ (8004ff8 <xTaskIncrementTick+0x150>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	603b      	str	r3, [r7, #0]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <xTaskIncrementTick+0x46>
 8004ef2:	4b41      	ldr	r3, [pc, #260]	@ (8004ff8 <xTaskIncrementTick+0x150>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	4b40      	ldr	r3, [pc, #256]	@ (8004ffc <xTaskIncrementTick+0x154>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ff8 <xTaskIncrementTick+0x150>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4a3e      	ldr	r2, [pc, #248]	@ (8004ffc <xTaskIncrementTick+0x154>)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b3e      	ldr	r3, [pc, #248]	@ (8005000 <xTaskIncrementTick+0x158>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8005000 <xTaskIncrementTick+0x158>)
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	f000 fae2 	bl	80054d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f14:	4b3b      	ldr	r3, [pc, #236]	@ (8005004 <xTaskIncrementTick+0x15c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d349      	bcc.n	8004fb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f1e:	4b36      	ldr	r3, [pc, #216]	@ (8004ff8 <xTaskIncrementTick+0x150>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f28:	4b36      	ldr	r3, [pc, #216]	@ (8005004 <xTaskIncrementTick+0x15c>)
 8004f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2e:	601a      	str	r2, [r3, #0]
					break;
 8004f30:	e03f      	b.n	8004fb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f32:	4b31      	ldr	r3, [pc, #196]	@ (8004ff8 <xTaskIncrementTick+0x150>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d203      	bcs.n	8004f52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8005004 <xTaskIncrementTick+0x15c>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f50:	e02f      	b.n	8004fb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe ff62 	bl	8003e20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d004      	beq.n	8004f6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	3318      	adds	r3, #24
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe ff59 	bl	8003e20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f72:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <xTaskIncrementTick+0x160>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d903      	bls.n	8004f82 <xTaskIncrementTick+0xda>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	4a22      	ldr	r2, [pc, #136]	@ (8005008 <xTaskIncrementTick+0x160>)
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800500c <xTaskIncrementTick+0x164>)
 8004f90:	441a      	add	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f7fe fee4 	bl	8003d66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8005010 <xTaskIncrementTick+0x168>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d3b8      	bcc.n	8004f1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004fac:	2301      	movs	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fb0:	e7b5      	b.n	8004f1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fb2:	4b17      	ldr	r3, [pc, #92]	@ (8005010 <xTaskIncrementTick+0x168>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb8:	4914      	ldr	r1, [pc, #80]	@ (800500c <xTaskIncrementTick+0x164>)
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d901      	bls.n	8004fce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fce:	4b11      	ldr	r3, [pc, #68]	@ (8005014 <xTaskIncrementTick+0x16c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e004      	b.n	8004fe6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8005018 <xTaskIncrementTick+0x170>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8005018 <xTaskIncrementTick+0x170>)
 8004fe4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fe6:	697b      	ldr	r3, [r7, #20]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000e40 	.word	0x20000e40
 8004ff4:	20000e1c 	.word	0x20000e1c
 8004ff8:	20000dd0 	.word	0x20000dd0
 8004ffc:	20000dd4 	.word	0x20000dd4
 8005000:	20000e30 	.word	0x20000e30
 8005004:	20000e38 	.word	0x20000e38
 8005008:	20000e20 	.word	0x20000e20
 800500c:	20000948 	.word	0x20000948
 8005010:	20000944 	.word	0x20000944
 8005014:	20000e2c 	.word	0x20000e2c
 8005018:	20000e28 	.word	0x20000e28

0800501c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005022:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <vTaskSwitchContext+0xb4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800502a:	4b2a      	ldr	r3, [pc, #168]	@ (80050d4 <vTaskSwitchContext+0xb8>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005030:	e047      	b.n	80050c2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005032:	4b28      	ldr	r3, [pc, #160]	@ (80050d4 <vTaskSwitchContext+0xb8>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005038:	4b27      	ldr	r3, [pc, #156]	@ (80050d8 <vTaskSwitchContext+0xbc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e011      	b.n	8005064 <vTaskSwitchContext+0x48>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10b      	bne.n	800505e <vTaskSwitchContext+0x42>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	607b      	str	r3, [r7, #4]
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	e7fd      	b.n	800505a <vTaskSwitchContext+0x3e>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3b01      	subs	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	491d      	ldr	r1, [pc, #116]	@ (80050dc <vTaskSwitchContext+0xc0>)
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0e3      	beq.n	8005040 <vTaskSwitchContext+0x24>
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4a16      	ldr	r2, [pc, #88]	@ (80050dc <vTaskSwitchContext+0xc0>)
 8005084:	4413      	add	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	605a      	str	r2, [r3, #4]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	3308      	adds	r3, #8
 800509a:	429a      	cmp	r2, r3
 800509c:	d104      	bne.n	80050a8 <vTaskSwitchContext+0x8c>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	605a      	str	r2, [r3, #4]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	4a0c      	ldr	r2, [pc, #48]	@ (80050e0 <vTaskSwitchContext+0xc4>)
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4a09      	ldr	r2, [pc, #36]	@ (80050d8 <vTaskSwitchContext+0xbc>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050b8:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <vTaskSwitchContext+0xc4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3354      	adds	r3, #84	@ 0x54
 80050be:	4a09      	ldr	r2, [pc, #36]	@ (80050e4 <vTaskSwitchContext+0xc8>)
 80050c0:	6013      	str	r3, [r2, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000e40 	.word	0x20000e40
 80050d4:	20000e2c 	.word	0x20000e2c
 80050d8:	20000e20 	.word	0x20000e20
 80050dc:	20000948 	.word	0x20000948
 80050e0:	20000944 	.word	0x20000944
 80050e4:	20000010 	.word	0x20000010

080050e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60fb      	str	r3, [r7, #12]
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <vTaskPlaceOnEventList+0x48>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3318      	adds	r3, #24
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fe fe48 	bl	8003dae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800511e:	2101      	movs	r1, #1
 8005120:	6838      	ldr	r0, [r7, #0]
 8005122:	f000 fa87 	bl	8005634 <prvAddCurrentTaskToDelayedList>
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000944 	.word	0x20000944

08005134 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	617b      	str	r3, [r7, #20]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800515e:	4b0a      	ldr	r3, [pc, #40]	@ (8005188 <vTaskPlaceOnEventListRestricted+0x54>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3318      	adds	r3, #24
 8005164:	4619      	mov	r1, r3
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7fe fdfd 	bl	8003d66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
 8005176:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	68b8      	ldr	r0, [r7, #8]
 800517c:	f000 fa5a 	bl	8005634 <prvAddCurrentTaskToDelayedList>
	}
 8005180:	bf00      	nop
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000944 	.word	0x20000944

0800518c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60fb      	str	r3, [r7, #12]
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	e7fd      	b.n	80051b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	3318      	adds	r3, #24
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fe fe2e 	bl	8003e20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c4:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <xTaskRemoveFromEventList+0xb0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11d      	bne.n	8005208 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe fe25 	bl	8003e20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051da:	4b19      	ldr	r3, [pc, #100]	@ (8005240 <xTaskRemoveFromEventList+0xb4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d903      	bls.n	80051ea <xTaskRemoveFromEventList+0x5e>
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	4a16      	ldr	r2, [pc, #88]	@ (8005240 <xTaskRemoveFromEventList+0xb4>)
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4a13      	ldr	r2, [pc, #76]	@ (8005244 <xTaskRemoveFromEventList+0xb8>)
 80051f8:	441a      	add	r2, r3
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f7fe fdb0 	bl	8003d66 <vListInsertEnd>
 8005206:	e005      	b.n	8005214 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	3318      	adds	r3, #24
 800520c:	4619      	mov	r1, r3
 800520e:	480e      	ldr	r0, [pc, #56]	@ (8005248 <xTaskRemoveFromEventList+0xbc>)
 8005210:	f7fe fda9 	bl	8003d66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005218:	4b0c      	ldr	r3, [pc, #48]	@ (800524c <xTaskRemoveFromEventList+0xc0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	429a      	cmp	r2, r3
 8005220:	d905      	bls.n	800522e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005222:	2301      	movs	r3, #1
 8005224:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005226:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <xTaskRemoveFromEventList+0xc4>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e001      	b.n	8005232 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005232:	697b      	ldr	r3, [r7, #20]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20000e40 	.word	0x20000e40
 8005240:	20000e20 	.word	0x20000e20
 8005244:	20000948 	.word	0x20000948
 8005248:	20000dd8 	.word	0x20000dd8
 800524c:	20000944 	.word	0x20000944
 8005250:	20000e2c 	.word	0x20000e2c

08005254 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800525c:	4b06      	ldr	r3, [pc, #24]	@ (8005278 <vTaskInternalSetTimeOutState+0x24>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <vTaskInternalSetTimeOutState+0x28>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20000e30 	.word	0x20000e30
 800527c:	20000e1c 	.word	0x20000e1c

08005280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	613b      	str	r3, [r7, #16]
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	60fb      	str	r3, [r7, #12]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80052c6:	f000 fe97 	bl	8005ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005340 <xTaskCheckForTimeOut+0xc0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d102      	bne.n	80052ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e023      	b.n	8005332 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b15      	ldr	r3, [pc, #84]	@ (8005344 <xTaskCheckForTimeOut+0xc4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d007      	beq.n	8005306 <xTaskCheckForTimeOut+0x86>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	e015      	b.n	8005332 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	d20b      	bcs.n	8005328 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff99 	bl	8005254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	e004      	b.n	8005332 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800532e:	2301      	movs	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005332:	f000 fe93 	bl	800605c <vPortExitCritical>

	return xReturn;
 8005336:	69fb      	ldr	r3, [r7, #28]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000e1c 	.word	0x20000e1c
 8005344:	20000e30 	.word	0x20000e30

08005348 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800534c:	4b03      	ldr	r3, [pc, #12]	@ (800535c <vTaskMissedYield+0x14>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	20000e2c 	.word	0x20000e2c

08005360 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005368:	f000 f852 	bl	8005410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800536c:	4b06      	ldr	r3, [pc, #24]	@ (8005388 <prvIdleTask+0x28>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d9f9      	bls.n	8005368 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <prvIdleTask+0x2c>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005384:	e7f0      	b.n	8005368 <prvIdleTask+0x8>
 8005386:	bf00      	nop
 8005388:	20000948 	.word	0x20000948
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	e00c      	b.n	80053b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4a12      	ldr	r2, [pc, #72]	@ (80053f0 <prvInitialiseTaskLists+0x60>)
 80053a8:	4413      	add	r3, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fcae 	bl	8003d0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3301      	adds	r3, #1
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b37      	cmp	r3, #55	@ 0x37
 80053ba:	d9ef      	bls.n	800539c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053bc:	480d      	ldr	r0, [pc, #52]	@ (80053f4 <prvInitialiseTaskLists+0x64>)
 80053be:	f7fe fca5 	bl	8003d0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053c2:	480d      	ldr	r0, [pc, #52]	@ (80053f8 <prvInitialiseTaskLists+0x68>)
 80053c4:	f7fe fca2 	bl	8003d0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053c8:	480c      	ldr	r0, [pc, #48]	@ (80053fc <prvInitialiseTaskLists+0x6c>)
 80053ca:	f7fe fc9f 	bl	8003d0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053ce:	480c      	ldr	r0, [pc, #48]	@ (8005400 <prvInitialiseTaskLists+0x70>)
 80053d0:	f7fe fc9c 	bl	8003d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053d4:	480b      	ldr	r0, [pc, #44]	@ (8005404 <prvInitialiseTaskLists+0x74>)
 80053d6:	f7fe fc99 	bl	8003d0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <prvInitialiseTaskLists+0x78>)
 80053dc:	4a05      	ldr	r2, [pc, #20]	@ (80053f4 <prvInitialiseTaskLists+0x64>)
 80053de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053e0:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <prvInitialiseTaskLists+0x7c>)
 80053e2:	4a05      	ldr	r2, [pc, #20]	@ (80053f8 <prvInitialiseTaskLists+0x68>)
 80053e4:	601a      	str	r2, [r3, #0]
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000948 	.word	0x20000948
 80053f4:	20000da8 	.word	0x20000da8
 80053f8:	20000dbc 	.word	0x20000dbc
 80053fc:	20000dd8 	.word	0x20000dd8
 8005400:	20000dec 	.word	0x20000dec
 8005404:	20000e04 	.word	0x20000e04
 8005408:	20000dd0 	.word	0x20000dd0
 800540c:	20000dd4 	.word	0x20000dd4

08005410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005416:	e019      	b.n	800544c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005418:	f000 fdee 	bl	8005ff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541c:	4b10      	ldr	r3, [pc, #64]	@ (8005460 <prvCheckTasksWaitingTermination+0x50>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe fcf9 	bl	8003e20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800542e:	4b0d      	ldr	r3, [pc, #52]	@ (8005464 <prvCheckTasksWaitingTermination+0x54>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3b01      	subs	r3, #1
 8005434:	4a0b      	ldr	r2, [pc, #44]	@ (8005464 <prvCheckTasksWaitingTermination+0x54>)
 8005436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005438:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <prvCheckTasksWaitingTermination+0x58>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	4a0a      	ldr	r2, [pc, #40]	@ (8005468 <prvCheckTasksWaitingTermination+0x58>)
 8005440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005442:	f000 fe0b 	bl	800605c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f810 	bl	800546c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800544c:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <prvCheckTasksWaitingTermination+0x58>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e1      	bne.n	8005418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000dec 	.word	0x20000dec
 8005464:	20000e18 	.word	0x20000e18
 8005468:	20000e00 	.word	0x20000e00

0800546c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3354      	adds	r3, #84	@ 0x54
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f8d5 	bl	8006628 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005484:	2b00      	cmp	r3, #0
 8005486:	d108      	bne.n	800549a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548c:	4618      	mov	r0, r3
 800548e:	f000 ffa3 	bl	80063d8 <vPortFree>
				vPortFree( pxTCB );
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 ffa0 	bl	80063d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005498:	e019      	b.n	80054ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d103      	bne.n	80054ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 ff97 	bl	80063d8 <vPortFree>
	}
 80054aa:	e010      	b.n	80054ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d00b      	beq.n	80054ce <prvDeleteTCB+0x62>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60fb      	str	r3, [r7, #12]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <prvDeleteTCB+0x5e>
	}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054de:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <prvResetNextTaskUnblockTime+0x38>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <prvResetNextTaskUnblockTime+0x3c>)
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295
 80054ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054f0:	e008      	b.n	8005504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f2:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <prvResetNextTaskUnblockTime+0x38>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4a04      	ldr	r2, [pc, #16]	@ (8005514 <prvResetNextTaskUnblockTime+0x3c>)
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000dd0 	.word	0x20000dd0
 8005514:	20000e38 	.word	0x20000e38

08005518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800551e:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <xTaskGetSchedulerState+0x34>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005526:	2301      	movs	r3, #1
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	e008      	b.n	800553e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552c:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <xTaskGetSchedulerState+0x38>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005534:	2302      	movs	r3, #2
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	e001      	b.n	800553e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800553e:	687b      	ldr	r3, [r7, #4]
	}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000e24 	.word	0x20000e24
 8005550:	20000e40 	.word	0x20000e40

08005554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d058      	beq.n	800561c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800556a:	4b2f      	ldr	r3, [pc, #188]	@ (8005628 <xTaskPriorityDisinherit+0xd4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	429a      	cmp	r2, r3
 8005572:	d00b      	beq.n	800558c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	60fb      	str	r3, [r7, #12]
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	e7fd      	b.n	8005588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60bb      	str	r3, [r7, #8]
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055be:	429a      	cmp	r2, r3
 80055c0:	d02c      	beq.n	800561c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d128      	bne.n	800561c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	3304      	adds	r3, #4
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fc26 	bl	8003e20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ec:	4b0f      	ldr	r3, [pc, #60]	@ (800562c <xTaskPriorityDisinherit+0xd8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d903      	bls.n	80055fc <xTaskPriorityDisinherit+0xa8>
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	4a0c      	ldr	r2, [pc, #48]	@ (800562c <xTaskPriorityDisinherit+0xd8>)
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4a09      	ldr	r2, [pc, #36]	@ (8005630 <xTaskPriorityDisinherit+0xdc>)
 800560a:	441a      	add	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f7fe fba7 	bl	8003d66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005618:	2301      	movs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800561c:	697b      	ldr	r3, [r7, #20]
	}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000944 	.word	0x20000944
 800562c:	20000e20 	.word	0x20000e20
 8005630:	20000948 	.word	0x20000948

08005634 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800563e:	4b21      	ldr	r3, [pc, #132]	@ (80056c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005644:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3304      	adds	r3, #4
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fbe8 	bl	8003e20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d10a      	bne.n	800566e <prvAddCurrentTaskToDelayedList+0x3a>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800565e:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4819      	ldr	r0, [pc, #100]	@ (80056cc <prvAddCurrentTaskToDelayedList+0x98>)
 8005668:	f7fe fb7d 	bl	8003d66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800566c:	e026      	b.n	80056bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005676:	4b14      	ldr	r3, [pc, #80]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d209      	bcs.n	800569a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005686:	4b12      	ldr	r3, [pc, #72]	@ (80056d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f7fe fb8b 	bl	8003dae <vListInsert>
}
 8005698:	e010      	b.n	80056bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800569a:	4b0e      	ldr	r3, [pc, #56]	@ (80056d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7fe fb81 	bl	8003dae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056ac:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d202      	bcs.n	80056bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80056b6:	4a08      	ldr	r2, [pc, #32]	@ (80056d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6013      	str	r3, [r2, #0]
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000e1c 	.word	0x20000e1c
 80056c8:	20000944 	.word	0x20000944
 80056cc:	20000e04 	.word	0x20000e04
 80056d0:	20000dd4 	.word	0x20000dd4
 80056d4:	20000dd0 	.word	0x20000dd0
 80056d8:	20000e38 	.word	0x20000e38

080056dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	@ 0x28
 80056e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056e6:	f000 fb13 	bl	8005d10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005760 <xTimerCreateTimerTask+0x84>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d021      	beq.n	8005736 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056fa:	1d3a      	adds	r2, r7, #4
 80056fc:	f107 0108 	add.w	r1, r7, #8
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe fae7 	bl	8003cd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	9202      	str	r2, [sp, #8]
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	2302      	movs	r3, #2
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2300      	movs	r3, #0
 800571a:	460a      	mov	r2, r1
 800571c:	4911      	ldr	r1, [pc, #68]	@ (8005764 <xTimerCreateTimerTask+0x88>)
 800571e:	4812      	ldr	r0, [pc, #72]	@ (8005768 <xTimerCreateTimerTask+0x8c>)
 8005720:	f7ff f8a2 	bl	8004868 <xTaskCreateStatic>
 8005724:	4603      	mov	r3, r0
 8005726:	4a11      	ldr	r2, [pc, #68]	@ (800576c <xTimerCreateTimerTask+0x90>)
 8005728:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800572a:	4b10      	ldr	r3, [pc, #64]	@ (800576c <xTimerCreateTimerTask+0x90>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005732:	2301      	movs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10b      	bne.n	8005754 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	613b      	str	r3, [r7, #16]
}
 800574e:	bf00      	nop
 8005750:	bf00      	nop
 8005752:	e7fd      	b.n	8005750 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000e74 	.word	0x20000e74
 8005764:	0800683c 	.word	0x0800683c
 8005768:	080058a9 	.word	0x080058a9
 800576c:	20000e78 	.word	0x20000e78

08005770 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08a      	sub	sp, #40	@ 0x28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800577e:	2300      	movs	r3, #0
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10b      	bne.n	80057a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	623b      	str	r3, [r7, #32]
}
 800579a:	bf00      	nop
 800579c:	bf00      	nop
 800579e:	e7fd      	b.n	800579c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057a0:	4b19      	ldr	r3, [pc, #100]	@ (8005808 <xTimerGenericCommand+0x98>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d02a      	beq.n	80057fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b05      	cmp	r3, #5
 80057b8:	dc18      	bgt.n	80057ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057ba:	f7ff fead 	bl	8005518 <xTaskGetSchedulerState>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d109      	bne.n	80057d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057c4:	4b10      	ldr	r3, [pc, #64]	@ (8005808 <xTimerGenericCommand+0x98>)
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	f107 0110 	add.w	r1, r7, #16
 80057cc:	2300      	movs	r3, #0
 80057ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d0:	f7fe fc5a 	bl	8004088 <xQueueGenericSend>
 80057d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80057d6:	e012      	b.n	80057fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <xTimerGenericCommand+0x98>)
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	f107 0110 	add.w	r1, r7, #16
 80057e0:	2300      	movs	r3, #0
 80057e2:	2200      	movs	r2, #0
 80057e4:	f7fe fc50 	bl	8004088 <xQueueGenericSend>
 80057e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80057ea:	e008      	b.n	80057fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057ec:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <xTimerGenericCommand+0x98>)
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	f107 0110 	add.w	r1, r7, #16
 80057f4:	2300      	movs	r3, #0
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	f7fe fd48 	bl	800428c <xQueueGenericSendFromISR>
 80057fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005800:	4618      	mov	r0, r3
 8005802:	3728      	adds	r7, #40	@ 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000e74 	.word	0x20000e74

0800580c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af02      	add	r7, sp, #8
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005816:	4b23      	ldr	r3, [pc, #140]	@ (80058a4 <prvProcessExpiredTimer+0x98>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	3304      	adds	r3, #4
 8005824:	4618      	mov	r0, r3
 8005826:	f7fe fafb 	bl	8003e20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d023      	beq.n	8005880 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	18d1      	adds	r1, r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	6978      	ldr	r0, [r7, #20]
 8005846:	f000 f8d5 	bl	80059f4 <prvInsertTimerInActiveList>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d020      	beq.n	8005892 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005850:	2300      	movs	r3, #0
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	2300      	movs	r3, #0
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	2100      	movs	r1, #0
 800585a:	6978      	ldr	r0, [r7, #20]
 800585c:	f7ff ff88 	bl	8005770 <xTimerGenericCommand>
 8005860:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d114      	bne.n	8005892 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	60fb      	str	r3, [r7, #12]
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	b2da      	uxtb	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	6978      	ldr	r0, [r7, #20]
 8005898:	4798      	blx	r3
}
 800589a:	bf00      	nop
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000e6c 	.word	0x20000e6c

080058a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058b0:	f107 0308 	add.w	r3, r7, #8
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 f859 	bl	800596c <prvGetNextExpireTime>
 80058ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4619      	mov	r1, r3
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f805 	bl	80058d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058c6:	f000 f8d7 	bl	8005a78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058ca:	bf00      	nop
 80058cc:	e7f0      	b.n	80058b0 <prvTimerTask+0x8>
	...

080058d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058da:	f7ff fa29 	bl	8004d30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058de:	f107 0308 	add.w	r3, r7, #8
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f866 	bl	80059b4 <prvSampleTimeNow>
 80058e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d130      	bne.n	8005952 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <prvProcessTimerOrBlockTask+0x3c>
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d806      	bhi.n	800590c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058fe:	f7ff fa25 	bl	8004d4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff ff81 	bl	800580c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800590a:	e024      	b.n	8005956 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005912:	4b13      	ldr	r3, [pc, #76]	@ (8005960 <prvProcessTimerOrBlockTask+0x90>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <prvProcessTimerOrBlockTask+0x50>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <prvProcessTimerOrBlockTask+0x52>
 8005920:	2300      	movs	r3, #0
 8005922:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <prvProcessTimerOrBlockTask+0x94>)
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	4619      	mov	r1, r3
 8005932:	f7fe ff65 	bl	8004800 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005936:	f7ff fa09 	bl	8004d4c <xTaskResumeAll>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005940:	4b09      	ldr	r3, [pc, #36]	@ (8005968 <prvProcessTimerOrBlockTask+0x98>)
 8005942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
}
 8005950:	e001      	b.n	8005956 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005952:	f7ff f9fb 	bl	8004d4c <xTaskResumeAll>
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000e70 	.word	0x20000e70
 8005964:	20000e74 	.word	0x20000e74
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005974:	4b0e      	ldr	r3, [pc, #56]	@ (80059b0 <prvGetNextExpireTime+0x44>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <prvGetNextExpireTime+0x16>
 800597e:	2201      	movs	r2, #1
 8005980:	e000      	b.n	8005984 <prvGetNextExpireTime+0x18>
 8005982:	2200      	movs	r2, #0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d105      	bne.n	800599c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005990:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <prvGetNextExpireTime+0x44>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e001      	b.n	80059a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059a0:	68fb      	ldr	r3, [r7, #12]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000e6c 	.word	0x20000e6c

080059b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80059bc:	f7ff fa64 	bl	8004e88 <xTaskGetTickCount>
 80059c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80059c2:	4b0b      	ldr	r3, [pc, #44]	@ (80059f0 <prvSampleTimeNow+0x3c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d205      	bcs.n	80059d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059cc:	f000 f93a 	bl	8005c44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e002      	b.n	80059de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80059de:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <prvSampleTimeNow+0x3c>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059e4:	68fb      	ldr	r3, [r7, #12]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000e7c 	.word	0x20000e7c

080059f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d812      	bhi.n	8005a40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e01b      	b.n	8005a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a2e:	4b10      	ldr	r3, [pc, #64]	@ (8005a70 <prvInsertTimerInActiveList+0x7c>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7fe f9b8 	bl	8003dae <vListInsert>
 8005a3e:	e012      	b.n	8005a66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d206      	bcs.n	8005a56 <prvInsertTimerInActiveList+0x62>
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e007      	b.n	8005a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a56:	4b07      	ldr	r3, [pc, #28]	@ (8005a74 <prvInsertTimerInActiveList+0x80>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7fe f9a4 	bl	8003dae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a66:	697b      	ldr	r3, [r7, #20]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000e70 	.word	0x20000e70
 8005a74:	20000e6c 	.word	0x20000e6c

08005a78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08e      	sub	sp, #56	@ 0x38
 8005a7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a7e:	e0ce      	b.n	8005c1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	da19      	bge.n	8005aba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	3304      	adds	r3, #4
 8005a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	61fb      	str	r3, [r7, #28]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab0:	6850      	ldr	r0, [r2, #4]
 8005ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab4:	6892      	ldr	r2, [r2, #8]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f2c0 80ae 	blt.w	8005c1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe f9a4 	bl	8003e20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff ff6a 	bl	80059b4 <prvSampleTimeNow>
 8005ae0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b09      	cmp	r3, #9
 8005ae6:	f200 8097 	bhi.w	8005c18 <prvProcessReceivedCommands+0x1a0>
 8005aea:	a201      	add	r2, pc, #4	@ (adr r2, 8005af0 <prvProcessReceivedCommands+0x78>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b19 	.word	0x08005b19
 8005af8:	08005b19 	.word	0x08005b19
 8005afc:	08005b8f 	.word	0x08005b8f
 8005b00:	08005ba3 	.word	0x08005ba3
 8005b04:	08005bef 	.word	0x08005bef
 8005b08:	08005b19 	.word	0x08005b19
 8005b0c:	08005b19 	.word	0x08005b19
 8005b10:	08005b8f 	.word	0x08005b8f
 8005b14:	08005ba3 	.word	0x08005ba3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	18d1      	adds	r1, r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b38:	f7ff ff5c 	bl	80059f4 <prvInsertTimerInActiveList>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d06c      	beq.n	8005c1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d061      	beq.n	8005c1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	441a      	add	r2, r3
 8005b60:	2300      	movs	r3, #0
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	2300      	movs	r3, #0
 8005b66:	2100      	movs	r1, #0
 8005b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b6a:	f7ff fe01 	bl	8005770 <xTimerGenericCommand>
 8005b6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d152      	bne.n	8005c1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61bb      	str	r3, [r7, #24]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ba0:	e03d      	b.n	8005c1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10b      	bne.n	8005bda <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	617b      	str	r3, [r7, #20]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	18d1      	adds	r1, r2, r3
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005be8:	f7ff ff04 	bl	80059f4 <prvInsertTimerInActiveList>
					break;
 8005bec:	e017      	b.n	8005c1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005bfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bfe:	f000 fbeb 	bl	80063d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c02:	e00c      	b.n	8005c1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005c16:	e002      	b.n	8005c1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005c18:	bf00      	nop
 8005c1a:	e000      	b.n	8005c1e <prvProcessReceivedCommands+0x1a6>
					break;
 8005c1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c1e:	4b08      	ldr	r3, [pc, #32]	@ (8005c40 <prvProcessReceivedCommands+0x1c8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	1d39      	adds	r1, r7, #4
 8005c24:	2200      	movs	r2, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fbce 	bl	80043c8 <xQueueReceive>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f47f af26 	bne.w	8005a80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	3730      	adds	r7, #48	@ 0x30
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000e74 	.word	0x20000e74

08005c44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c4a:	e049      	b.n	8005ce0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8005d08 <prvSwitchTimerLists+0xc4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c56:	4b2c      	ldr	r3, [pc, #176]	@ (8005d08 <prvSwitchTimerLists+0xc4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe f8db 	bl	8003e20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02f      	beq.n	8005ce0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d90e      	bls.n	8005cb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d08 <prvSwitchTimerLists+0xc4>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fe f880 	bl	8003dae <vListInsert>
 8005cae:	e017      	b.n	8005ce0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	2100      	movs	r1, #0
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fd58 	bl	8005770 <xTimerGenericCommand>
 8005cc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	603b      	str	r3, [r7, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ce0:	4b09      	ldr	r3, [pc, #36]	@ (8005d08 <prvSwitchTimerLists+0xc4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1b0      	bne.n	8005c4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cea:	4b07      	ldr	r3, [pc, #28]	@ (8005d08 <prvSwitchTimerLists+0xc4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005cf0:	4b06      	ldr	r3, [pc, #24]	@ (8005d0c <prvSwitchTimerLists+0xc8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	@ (8005d08 <prvSwitchTimerLists+0xc4>)
 8005cf6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005cf8:	4a04      	ldr	r2, [pc, #16]	@ (8005d0c <prvSwitchTimerLists+0xc8>)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	6013      	str	r3, [r2, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000e6c 	.word	0x20000e6c
 8005d0c:	20000e70 	.word	0x20000e70

08005d10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d16:	f000 f96f 	bl	8005ff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d1a:	4b15      	ldr	r3, [pc, #84]	@ (8005d70 <prvCheckForValidListAndQueue+0x60>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d120      	bne.n	8005d64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d22:	4814      	ldr	r0, [pc, #80]	@ (8005d74 <prvCheckForValidListAndQueue+0x64>)
 8005d24:	f7fd fff2 	bl	8003d0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d28:	4813      	ldr	r0, [pc, #76]	@ (8005d78 <prvCheckForValidListAndQueue+0x68>)
 8005d2a:	f7fd ffef 	bl	8003d0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	@ (8005d7c <prvCheckForValidListAndQueue+0x6c>)
 8005d30:	4a10      	ldr	r2, [pc, #64]	@ (8005d74 <prvCheckForValidListAndQueue+0x64>)
 8005d32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d34:	4b12      	ldr	r3, [pc, #72]	@ (8005d80 <prvCheckForValidListAndQueue+0x70>)
 8005d36:	4a10      	ldr	r2, [pc, #64]	@ (8005d78 <prvCheckForValidListAndQueue+0x68>)
 8005d38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4b11      	ldr	r3, [pc, #68]	@ (8005d84 <prvCheckForValidListAndQueue+0x74>)
 8005d40:	4a11      	ldr	r2, [pc, #68]	@ (8005d88 <prvCheckForValidListAndQueue+0x78>)
 8005d42:	2110      	movs	r1, #16
 8005d44:	200a      	movs	r0, #10
 8005d46:	f7fe f8ff 	bl	8003f48 <xQueueGenericCreateStatic>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4a08      	ldr	r2, [pc, #32]	@ (8005d70 <prvCheckForValidListAndQueue+0x60>)
 8005d4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d50:	4b07      	ldr	r3, [pc, #28]	@ (8005d70 <prvCheckForValidListAndQueue+0x60>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d58:	4b05      	ldr	r3, [pc, #20]	@ (8005d70 <prvCheckForValidListAndQueue+0x60>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	490b      	ldr	r1, [pc, #44]	@ (8005d8c <prvCheckForValidListAndQueue+0x7c>)
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fd24 	bl	80047ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d64:	f000 f97a 	bl	800605c <vPortExitCritical>
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000e74 	.word	0x20000e74
 8005d74:	20000e44 	.word	0x20000e44
 8005d78:	20000e58 	.word	0x20000e58
 8005d7c:	20000e6c 	.word	0x20000e6c
 8005d80:	20000e70 	.word	0x20000e70
 8005d84:	20000f20 	.word	0x20000f20
 8005d88:	20000e80 	.word	0x20000e80
 8005d8c:	08006844 	.word	0x08006844

08005d90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3b04      	subs	r3, #4
 8005da0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3b04      	subs	r3, #4
 8005dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 0201 	bic.w	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3b04      	subs	r3, #4
 8005dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8005df4 <pxPortInitialiseStack+0x64>)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3b14      	subs	r3, #20
 8005dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3b04      	subs	r3, #4
 8005dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f06f 0202 	mvn.w	r2, #2
 8005dde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3b20      	subs	r3, #32
 8005de4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	08005df9 	.word	0x08005df9

08005df8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e02:	4b13      	ldr	r3, [pc, #76]	@ (8005e50 <prvTaskExitError+0x58>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d00b      	beq.n	8005e24 <prvTaskExitError+0x2c>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60fb      	str	r3, [r7, #12]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <prvTaskExitError+0x28>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	60bb      	str	r3, [r7, #8]
}
 8005e36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e38:	bf00      	nop
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0fc      	beq.n	8005e3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	2000000c 	.word	0x2000000c
	...

08005e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e60:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <pxCurrentTCBConst2>)
 8005e62:	6819      	ldr	r1, [r3, #0]
 8005e64:	6808      	ldr	r0, [r1, #0]
 8005e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6a:	f380 8809 	msr	PSP, r0
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f380 8811 	msr	BASEPRI, r0
 8005e7a:	4770      	bx	lr
 8005e7c:	f3af 8000 	nop.w

08005e80 <pxCurrentTCBConst2>:
 8005e80:	20000944 	.word	0x20000944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop

08005e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e88:	4808      	ldr	r0, [pc, #32]	@ (8005eac <prvPortStartFirstTask+0x24>)
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	6800      	ldr	r0, [r0, #0]
 8005e8e:	f380 8808 	msr	MSP, r0
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8814 	msr	CONTROL, r0
 8005e9a:	b662      	cpsie	i
 8005e9c:	b661      	cpsie	f
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	df00      	svc	0
 8005ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eaa:	bf00      	nop
 8005eac:	e000ed08 	.word	0xe000ed08

08005eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005eb6:	4b47      	ldr	r3, [pc, #284]	@ (8005fd4 <xPortStartScheduler+0x124>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a47      	ldr	r2, [pc, #284]	@ (8005fd8 <xPortStartScheduler+0x128>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10b      	bne.n	8005ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	613b      	str	r3, [r7, #16]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd4 <xPortStartScheduler+0x124>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a3f      	ldr	r2, [pc, #252]	@ (8005fdc <xPortStartScheduler+0x12c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10b      	bne.n	8005efa <xPortStartScheduler+0x4a>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	60fb      	str	r3, [r7, #12]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005efa:	4b39      	ldr	r3, [pc, #228]	@ (8005fe0 <xPortStartScheduler+0x130>)
 8005efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	22ff      	movs	r2, #255	@ 0xff
 8005f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4b31      	ldr	r3, [pc, #196]	@ (8005fe4 <xPortStartScheduler+0x134>)
 8005f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f22:	4b31      	ldr	r3, [pc, #196]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f24:	2207      	movs	r2, #7
 8005f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f28:	e009      	b.n	8005f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f46:	2b80      	cmp	r3, #128	@ 0x80
 8005f48:	d0ef      	beq.n	8005f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f4a:	4b27      	ldr	r3, [pc, #156]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1c3 0307 	rsb	r3, r3, #7
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d00b      	beq.n	8005f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60bb      	str	r3, [r7, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	e7fd      	b.n	8005f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	4a1c      	ldr	r2, [pc, #112]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f78:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f80:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f8c:	4b17      	ldr	r3, [pc, #92]	@ (8005fec <xPortStartScheduler+0x13c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a16      	ldr	r2, [pc, #88]	@ (8005fec <xPortStartScheduler+0x13c>)
 8005f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f98:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <xPortStartScheduler+0x13c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a13      	ldr	r2, [pc, #76]	@ (8005fec <xPortStartScheduler+0x13c>)
 8005f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fa4:	f000 f8da 	bl	800615c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fa8:	4b11      	ldr	r3, [pc, #68]	@ (8005ff0 <xPortStartScheduler+0x140>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fae:	f000 f8f9 	bl	80061a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ff4 <xPortStartScheduler+0x144>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff4 <xPortStartScheduler+0x144>)
 8005fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fbe:	f7ff ff63 	bl	8005e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fc2:	f7ff f82b 	bl	800501c <vTaskSwitchContext>
	prvTaskExitError();
 8005fc6:	f7ff ff17 	bl	8005df8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	e000ed00 	.word	0xe000ed00
 8005fd8:	410fc271 	.word	0x410fc271
 8005fdc:	410fc270 	.word	0x410fc270
 8005fe0:	e000e400 	.word	0xe000e400
 8005fe4:	20000f70 	.word	0x20000f70
 8005fe8:	20000f74 	.word	0x20000f74
 8005fec:	e000ed20 	.word	0xe000ed20
 8005ff0:	2000000c 	.word	0x2000000c
 8005ff4:	e000ef34 	.word	0xe000ef34

08005ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	607b      	str	r3, [r7, #4]
}
 8006010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006012:	4b10      	ldr	r3, [pc, #64]	@ (8006054 <vPortEnterCritical+0x5c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3301      	adds	r3, #1
 8006018:	4a0e      	ldr	r2, [pc, #56]	@ (8006054 <vPortEnterCritical+0x5c>)
 800601a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800601c:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <vPortEnterCritical+0x5c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d110      	bne.n	8006046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006024:	4b0c      	ldr	r3, [pc, #48]	@ (8006058 <vPortEnterCritical+0x60>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <vPortEnterCritical+0x4e>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	603b      	str	r3, [r7, #0]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <vPortEnterCritical+0x4a>
	}
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	2000000c 	.word	0x2000000c
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <vPortExitCritical+0x50>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <vPortExitCritical+0x26>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	607b      	str	r3, [r7, #4]
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	e7fd      	b.n	800607e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006082:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <vPortExitCritical+0x50>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3b01      	subs	r3, #1
 8006088:	4a08      	ldr	r2, [pc, #32]	@ (80060ac <vPortExitCritical+0x50>)
 800608a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800608c:	4b07      	ldr	r3, [pc, #28]	@ (80060ac <vPortExitCritical+0x50>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <vPortExitCritical+0x44>
 8006094:	2300      	movs	r3, #0
 8006096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f383 8811 	msr	BASEPRI, r3
}
 800609e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	2000000c 	.word	0x2000000c

080060b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060b0:	f3ef 8009 	mrs	r0, PSP
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	4b15      	ldr	r3, [pc, #84]	@ (8006110 <pxCurrentTCBConst>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	f01e 0f10 	tst.w	lr, #16
 80060c0:	bf08      	it	eq
 80060c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ca:	6010      	str	r0, [r2, #0]
 80060cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060d4:	f380 8811 	msr	BASEPRI, r0
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f7fe ff9c 	bl	800501c <vTaskSwitchContext>
 80060e4:	f04f 0000 	mov.w	r0, #0
 80060e8:	f380 8811 	msr	BASEPRI, r0
 80060ec:	bc09      	pop	{r0, r3}
 80060ee:	6819      	ldr	r1, [r3, #0]
 80060f0:	6808      	ldr	r0, [r1, #0]
 80060f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f6:	f01e 0f10 	tst.w	lr, #16
 80060fa:	bf08      	it	eq
 80060fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006100:	f380 8809 	msr	PSP, r0
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w

08006110 <pxCurrentTCBConst>:
 8006110:	20000944 	.word	0x20000944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop

08006118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
}
 8006130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006132:	f7fe feb9 	bl	8004ea8 <xTaskIncrementTick>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800613c:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <xPortSysTickHandler+0x40>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f383 8811 	msr	BASEPRI, r3
}
 800614e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006160:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <vPortSetupTimerInterrupt+0x34>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006166:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <vPortSetupTimerInterrupt+0x38>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800616c:	4b0a      	ldr	r3, [pc, #40]	@ (8006198 <vPortSetupTimerInterrupt+0x3c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0a      	ldr	r2, [pc, #40]	@ (800619c <vPortSetupTimerInterrupt+0x40>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	099b      	lsrs	r3, r3, #6
 8006178:	4a09      	ldr	r2, [pc, #36]	@ (80061a0 <vPortSetupTimerInterrupt+0x44>)
 800617a:	3b01      	subs	r3, #1
 800617c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800617e:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <vPortSetupTimerInterrupt+0x34>)
 8006180:	2207      	movs	r2, #7
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	e000e010 	.word	0xe000e010
 8006194:	e000e018 	.word	0xe000e018
 8006198:	20000000 	.word	0x20000000
 800619c:	10624dd3 	.word	0x10624dd3
 80061a0:	e000e014 	.word	0xe000e014

080061a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80061b4 <vPortEnableVFP+0x10>
 80061a8:	6801      	ldr	r1, [r0, #0]
 80061aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80061ae:	6001      	str	r1, [r0, #0]
 80061b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061b2:	bf00      	nop
 80061b4:	e000ed88 	.word	0xe000ed88

080061b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061be:	f3ef 8305 	mrs	r3, IPSR
 80061c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b0f      	cmp	r3, #15
 80061c8:	d915      	bls.n	80061f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061ca:	4a18      	ldr	r2, [pc, #96]	@ (800622c <vPortValidateInterruptPriority+0x74>)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061d4:	4b16      	ldr	r3, [pc, #88]	@ (8006230 <vPortValidateInterruptPriority+0x78>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	7afa      	ldrb	r2, [r7, #11]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d20b      	bcs.n	80061f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	607b      	str	r3, [r7, #4]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <vPortValidateInterruptPriority+0x7c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006238 <vPortValidateInterruptPriority+0x80>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d90b      	bls.n	800621e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	603b      	str	r3, [r7, #0]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <vPortValidateInterruptPriority+0x62>
	}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	e000e3f0 	.word	0xe000e3f0
 8006230:	20000f70 	.word	0x20000f70
 8006234:	e000ed0c 	.word	0xe000ed0c
 8006238:	20000f74 	.word	0x20000f74

0800623c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	@ 0x28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006248:	f7fe fd72 	bl	8004d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800624c:	4b5c      	ldr	r3, [pc, #368]	@ (80063c0 <pvPortMalloc+0x184>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006254:	f000 f924 	bl	80064a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006258:	4b5a      	ldr	r3, [pc, #360]	@ (80063c4 <pvPortMalloc+0x188>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 8095 	bne.w	8006390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01e      	beq.n	80062aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800626c:	2208      	movs	r2, #8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4413      	add	r3, r2
 8006272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	2b00      	cmp	r3, #0
 800627c:	d015      	beq.n	80062aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f023 0307 	bic.w	r3, r3, #7
 8006284:	3308      	adds	r3, #8
 8006286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <pvPortMalloc+0x6e>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	617b      	str	r3, [r7, #20]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d06f      	beq.n	8006390 <pvPortMalloc+0x154>
 80062b0:	4b45      	ldr	r3, [pc, #276]	@ (80063c8 <pvPortMalloc+0x18c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d86a      	bhi.n	8006390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062ba:	4b44      	ldr	r3, [pc, #272]	@ (80063cc <pvPortMalloc+0x190>)
 80062bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062be:	4b43      	ldr	r3, [pc, #268]	@ (80063cc <pvPortMalloc+0x190>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062c4:	e004      	b.n	80062d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d903      	bls.n	80062e2 <pvPortMalloc+0xa6>
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f1      	bne.n	80062c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062e2:	4b37      	ldr	r3, [pc, #220]	@ (80063c0 <pvPortMalloc+0x184>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d051      	beq.n	8006390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2208      	movs	r2, #8
 80062f2:	4413      	add	r3, r2
 80062f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	2308      	movs	r3, #8
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	429a      	cmp	r2, r3
 800630c:	d920      	bls.n	8006350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <pvPortMalloc+0xfc>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	1ad2      	subs	r2, r2, r3
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800634a:	69b8      	ldr	r0, [r7, #24]
 800634c:	f000 f90a 	bl	8006564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006350:	4b1d      	ldr	r3, [pc, #116]	@ (80063c8 <pvPortMalloc+0x18c>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	4a1b      	ldr	r2, [pc, #108]	@ (80063c8 <pvPortMalloc+0x18c>)
 800635c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800635e:	4b1a      	ldr	r3, [pc, #104]	@ (80063c8 <pvPortMalloc+0x18c>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4b1b      	ldr	r3, [pc, #108]	@ (80063d0 <pvPortMalloc+0x194>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d203      	bcs.n	8006372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800636a:	4b17      	ldr	r3, [pc, #92]	@ (80063c8 <pvPortMalloc+0x18c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <pvPortMalloc+0x194>)
 8006370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	4b13      	ldr	r3, [pc, #76]	@ (80063c4 <pvPortMalloc+0x188>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	431a      	orrs	r2, r3
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006386:	4b13      	ldr	r3, [pc, #76]	@ (80063d4 <pvPortMalloc+0x198>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3301      	adds	r3, #1
 800638c:	4a11      	ldr	r2, [pc, #68]	@ (80063d4 <pvPortMalloc+0x198>)
 800638e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006390:	f7fe fcdc 	bl	8004d4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <pvPortMalloc+0x17a>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <pvPortMalloc+0x176>
	return pvReturn;
 80063b6:	69fb      	ldr	r3, [r7, #28]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3728      	adds	r7, #40	@ 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20001b38 	.word	0x20001b38
 80063c4:	20001b4c 	.word	0x20001b4c
 80063c8:	20001b3c 	.word	0x20001b3c
 80063cc:	20001b30 	.word	0x20001b30
 80063d0:	20001b40 	.word	0x20001b40
 80063d4:	20001b44 	.word	0x20001b44

080063d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d04f      	beq.n	800648a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063ea:	2308      	movs	r3, #8
 80063ec:	425b      	negs	r3, r3
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4413      	add	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4b25      	ldr	r3, [pc, #148]	@ (8006494 <vPortFree+0xbc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <vPortFree+0x46>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	60fb      	str	r3, [r7, #12]
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	e7fd      	b.n	800641a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <vPortFree+0x66>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60bb      	str	r3, [r7, #8]
}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	e7fd      	b.n	800643a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	4b14      	ldr	r3, [pc, #80]	@ (8006494 <vPortFree+0xbc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4013      	ands	r3, r2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01e      	beq.n	800648a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d11a      	bne.n	800648a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	4b0e      	ldr	r3, [pc, #56]	@ (8006494 <vPortFree+0xbc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006464:	f7fe fc64 	bl	8004d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	4b0a      	ldr	r3, [pc, #40]	@ (8006498 <vPortFree+0xc0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4413      	add	r3, r2
 8006472:	4a09      	ldr	r2, [pc, #36]	@ (8006498 <vPortFree+0xc0>)
 8006474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006476:	6938      	ldr	r0, [r7, #16]
 8006478:	f000 f874 	bl	8006564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800647c:	4b07      	ldr	r3, [pc, #28]	@ (800649c <vPortFree+0xc4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3301      	adds	r3, #1
 8006482:	4a06      	ldr	r2, [pc, #24]	@ (800649c <vPortFree+0xc4>)
 8006484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006486:	f7fe fc61 	bl	8004d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800648a:	bf00      	nop
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20001b4c 	.word	0x20001b4c
 8006498:	20001b3c 	.word	0x20001b3c
 800649c:	20001b48 	.word	0x20001b48

080064a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80064aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064ac:	4b27      	ldr	r3, [pc, #156]	@ (800654c <prvHeapInit+0xac>)
 80064ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00c      	beq.n	80064d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3307      	adds	r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0307 	bic.w	r3, r3, #7
 80064c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	4a1f      	ldr	r2, [pc, #124]	@ (800654c <prvHeapInit+0xac>)
 80064d0:	4413      	add	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006550 <prvHeapInit+0xb0>)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064de:	4b1c      	ldr	r3, [pc, #112]	@ (8006550 <prvHeapInit+0xb0>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4413      	add	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064ec:	2208      	movs	r2, #8
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0307 	bic.w	r3, r3, #7
 80064fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <prvHeapInit+0xb4>)
 8006500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006502:	4b14      	ldr	r3, [pc, #80]	@ (8006554 <prvHeapInit+0xb4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800650a:	4b12      	ldr	r3, [pc, #72]	@ (8006554 <prvHeapInit+0xb4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006520:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <prvHeapInit+0xb4>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a0a      	ldr	r2, [pc, #40]	@ (8006558 <prvHeapInit+0xb8>)
 800652e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4a09      	ldr	r2, [pc, #36]	@ (800655c <prvHeapInit+0xbc>)
 8006536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006538:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <prvHeapInit+0xc0>)
 800653a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800653e:	601a      	str	r2, [r3, #0]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	20000f78 	.word	0x20000f78
 8006550:	20001b30 	.word	0x20001b30
 8006554:	20001b38 	.word	0x20001b38
 8006558:	20001b40 	.word	0x20001b40
 800655c:	20001b3c 	.word	0x20001b3c
 8006560:	20001b4c 	.word	0x20001b4c

08006564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800656c:	4b28      	ldr	r3, [pc, #160]	@ (8006610 <prvInsertBlockIntoFreeList+0xac>)
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e002      	b.n	8006578 <prvInsertBlockIntoFreeList+0x14>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	429a      	cmp	r2, r3
 8006580:	d8f7      	bhi.n	8006572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4413      	add	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d108      	bne.n	80065a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	441a      	add	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d118      	bne.n	80065ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b15      	ldr	r3, [pc, #84]	@ (8006614 <prvInsertBlockIntoFreeList+0xb0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d00d      	beq.n	80065e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	441a      	add	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e008      	b.n	80065f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <prvInsertBlockIntoFreeList+0xb0>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e003      	b.n	80065f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d002      	beq.n	8006602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20001b30 	.word	0x20001b30
 8006614:	20001b38 	.word	0x20001b38

08006618 <memset>:
 8006618:	4402      	add	r2, r0
 800661a:	4603      	mov	r3, r0
 800661c:	4293      	cmp	r3, r2
 800661e:	d100      	bne.n	8006622 <memset+0xa>
 8006620:	4770      	bx	lr
 8006622:	f803 1b01 	strb.w	r1, [r3], #1
 8006626:	e7f9      	b.n	800661c <memset+0x4>

08006628 <_reclaim_reent>:
 8006628:	4b29      	ldr	r3, [pc, #164]	@ (80066d0 <_reclaim_reent+0xa8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4283      	cmp	r3, r0
 800662e:	b570      	push	{r4, r5, r6, lr}
 8006630:	4604      	mov	r4, r0
 8006632:	d04b      	beq.n	80066cc <_reclaim_reent+0xa4>
 8006634:	69c3      	ldr	r3, [r0, #28]
 8006636:	b1ab      	cbz	r3, 8006664 <_reclaim_reent+0x3c>
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	b16b      	cbz	r3, 8006658 <_reclaim_reent+0x30>
 800663c:	2500      	movs	r5, #0
 800663e:	69e3      	ldr	r3, [r4, #28]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	5959      	ldr	r1, [r3, r5]
 8006644:	2900      	cmp	r1, #0
 8006646:	d13b      	bne.n	80066c0 <_reclaim_reent+0x98>
 8006648:	3504      	adds	r5, #4
 800664a:	2d80      	cmp	r5, #128	@ 0x80
 800664c:	d1f7      	bne.n	800663e <_reclaim_reent+0x16>
 800664e:	69e3      	ldr	r3, [r4, #28]
 8006650:	4620      	mov	r0, r4
 8006652:	68d9      	ldr	r1, [r3, #12]
 8006654:	f000 f872 	bl	800673c <_free_r>
 8006658:	69e3      	ldr	r3, [r4, #28]
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	b111      	cbz	r1, 8006664 <_reclaim_reent+0x3c>
 800665e:	4620      	mov	r0, r4
 8006660:	f000 f86c 	bl	800673c <_free_r>
 8006664:	6961      	ldr	r1, [r4, #20]
 8006666:	b111      	cbz	r1, 800666e <_reclaim_reent+0x46>
 8006668:	4620      	mov	r0, r4
 800666a:	f000 f867 	bl	800673c <_free_r>
 800666e:	69e1      	ldr	r1, [r4, #28]
 8006670:	b111      	cbz	r1, 8006678 <_reclaim_reent+0x50>
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f862 	bl	800673c <_free_r>
 8006678:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800667a:	b111      	cbz	r1, 8006682 <_reclaim_reent+0x5a>
 800667c:	4620      	mov	r0, r4
 800667e:	f000 f85d 	bl	800673c <_free_r>
 8006682:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006684:	b111      	cbz	r1, 800668c <_reclaim_reent+0x64>
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f858 	bl	800673c <_free_r>
 800668c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800668e:	b111      	cbz	r1, 8006696 <_reclaim_reent+0x6e>
 8006690:	4620      	mov	r0, r4
 8006692:	f000 f853 	bl	800673c <_free_r>
 8006696:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006698:	b111      	cbz	r1, 80066a0 <_reclaim_reent+0x78>
 800669a:	4620      	mov	r0, r4
 800669c:	f000 f84e 	bl	800673c <_free_r>
 80066a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80066a2:	b111      	cbz	r1, 80066aa <_reclaim_reent+0x82>
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 f849 	bl	800673c <_free_r>
 80066aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80066ac:	b111      	cbz	r1, 80066b4 <_reclaim_reent+0x8c>
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f844 	bl	800673c <_free_r>
 80066b4:	6a23      	ldr	r3, [r4, #32]
 80066b6:	b14b      	cbz	r3, 80066cc <_reclaim_reent+0xa4>
 80066b8:	4620      	mov	r0, r4
 80066ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066be:	4718      	bx	r3
 80066c0:	680e      	ldr	r6, [r1, #0]
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 f83a 	bl	800673c <_free_r>
 80066c8:	4631      	mov	r1, r6
 80066ca:	e7bb      	b.n	8006644 <_reclaim_reent+0x1c>
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
 80066ce:	bf00      	nop
 80066d0:	20000010 	.word	0x20000010

080066d4 <__libc_init_array>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	4d0d      	ldr	r5, [pc, #52]	@ (800670c <__libc_init_array+0x38>)
 80066d8:	4c0d      	ldr	r4, [pc, #52]	@ (8006710 <__libc_init_array+0x3c>)
 80066da:	1b64      	subs	r4, r4, r5
 80066dc:	10a4      	asrs	r4, r4, #2
 80066de:	2600      	movs	r6, #0
 80066e0:	42a6      	cmp	r6, r4
 80066e2:	d109      	bne.n	80066f8 <__libc_init_array+0x24>
 80066e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006714 <__libc_init_array+0x40>)
 80066e6:	4c0c      	ldr	r4, [pc, #48]	@ (8006718 <__libc_init_array+0x44>)
 80066e8:	f000 f87e 	bl	80067e8 <_init>
 80066ec:	1b64      	subs	r4, r4, r5
 80066ee:	10a4      	asrs	r4, r4, #2
 80066f0:	2600      	movs	r6, #0
 80066f2:	42a6      	cmp	r6, r4
 80066f4:	d105      	bne.n	8006702 <__libc_init_array+0x2e>
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fc:	4798      	blx	r3
 80066fe:	3601      	adds	r6, #1
 8006700:	e7ee      	b.n	80066e0 <__libc_init_array+0xc>
 8006702:	f855 3b04 	ldr.w	r3, [r5], #4
 8006706:	4798      	blx	r3
 8006708:	3601      	adds	r6, #1
 800670a:	e7f2      	b.n	80066f2 <__libc_init_array+0x1e>
 800670c:	08006908 	.word	0x08006908
 8006710:	08006908 	.word	0x08006908
 8006714:	08006908 	.word	0x08006908
 8006718:	0800690c 	.word	0x0800690c

0800671c <__retarget_lock_acquire_recursive>:
 800671c:	4770      	bx	lr

0800671e <__retarget_lock_release_recursive>:
 800671e:	4770      	bx	lr

08006720 <memcpy>:
 8006720:	440a      	add	r2, r1
 8006722:	4291      	cmp	r1, r2
 8006724:	f100 33ff 	add.w	r3, r0, #4294967295
 8006728:	d100      	bne.n	800672c <memcpy+0xc>
 800672a:	4770      	bx	lr
 800672c:	b510      	push	{r4, lr}
 800672e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006736:	4291      	cmp	r1, r2
 8006738:	d1f9      	bne.n	800672e <memcpy+0xe>
 800673a:	bd10      	pop	{r4, pc}

0800673c <_free_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4605      	mov	r5, r0
 8006740:	2900      	cmp	r1, #0
 8006742:	d041      	beq.n	80067c8 <_free_r+0x8c>
 8006744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006748:	1f0c      	subs	r4, r1, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	bfb8      	it	lt
 800674e:	18e4      	addlt	r4, r4, r3
 8006750:	f000 f83e 	bl	80067d0 <__malloc_lock>
 8006754:	4a1d      	ldr	r2, [pc, #116]	@ (80067cc <_free_r+0x90>)
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	b933      	cbnz	r3, 8006768 <_free_r+0x2c>
 800675a:	6063      	str	r3, [r4, #4]
 800675c:	6014      	str	r4, [r2, #0]
 800675e:	4628      	mov	r0, r5
 8006760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006764:	f000 b83a 	b.w	80067dc <__malloc_unlock>
 8006768:	42a3      	cmp	r3, r4
 800676a:	d908      	bls.n	800677e <_free_r+0x42>
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	1821      	adds	r1, r4, r0
 8006770:	428b      	cmp	r3, r1
 8006772:	bf01      	itttt	eq
 8006774:	6819      	ldreq	r1, [r3, #0]
 8006776:	685b      	ldreq	r3, [r3, #4]
 8006778:	1809      	addeq	r1, r1, r0
 800677a:	6021      	streq	r1, [r4, #0]
 800677c:	e7ed      	b.n	800675a <_free_r+0x1e>
 800677e:	461a      	mov	r2, r3
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	b10b      	cbz	r3, 8006788 <_free_r+0x4c>
 8006784:	42a3      	cmp	r3, r4
 8006786:	d9fa      	bls.n	800677e <_free_r+0x42>
 8006788:	6811      	ldr	r1, [r2, #0]
 800678a:	1850      	adds	r0, r2, r1
 800678c:	42a0      	cmp	r0, r4
 800678e:	d10b      	bne.n	80067a8 <_free_r+0x6c>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	4401      	add	r1, r0
 8006794:	1850      	adds	r0, r2, r1
 8006796:	4283      	cmp	r3, r0
 8006798:	6011      	str	r1, [r2, #0]
 800679a:	d1e0      	bne.n	800675e <_free_r+0x22>
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	6053      	str	r3, [r2, #4]
 80067a2:	4408      	add	r0, r1
 80067a4:	6010      	str	r0, [r2, #0]
 80067a6:	e7da      	b.n	800675e <_free_r+0x22>
 80067a8:	d902      	bls.n	80067b0 <_free_r+0x74>
 80067aa:	230c      	movs	r3, #12
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	e7d6      	b.n	800675e <_free_r+0x22>
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	1821      	adds	r1, r4, r0
 80067b4:	428b      	cmp	r3, r1
 80067b6:	bf04      	itt	eq
 80067b8:	6819      	ldreq	r1, [r3, #0]
 80067ba:	685b      	ldreq	r3, [r3, #4]
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	bf04      	itt	eq
 80067c0:	1809      	addeq	r1, r1, r0
 80067c2:	6021      	streq	r1, [r4, #0]
 80067c4:	6054      	str	r4, [r2, #4]
 80067c6:	e7ca      	b.n	800675e <_free_r+0x22>
 80067c8:	bd38      	pop	{r3, r4, r5, pc}
 80067ca:	bf00      	nop
 80067cc:	20001c8c 	.word	0x20001c8c

080067d0 <__malloc_lock>:
 80067d0:	4801      	ldr	r0, [pc, #4]	@ (80067d8 <__malloc_lock+0x8>)
 80067d2:	f7ff bfa3 	b.w	800671c <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	20001c88 	.word	0x20001c88

080067dc <__malloc_unlock>:
 80067dc:	4801      	ldr	r0, [pc, #4]	@ (80067e4 <__malloc_unlock+0x8>)
 80067de:	f7ff bf9e 	b.w	800671e <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	20001c88 	.word	0x20001c88

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
