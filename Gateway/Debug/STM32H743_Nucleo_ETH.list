
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e88  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003194  08014128  08014128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080172bc  080172bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080172c4  080172c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080172c8  080172c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  080172cc  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000fed0  24000098  08017360  00019098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2400ff68  08017360  00019f68  2**0
                  ALLOC
  9 .lwip_sec     00024b83  30020000  30020000  0001a000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00019094  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005b576  00000000  00000000  000190c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000bc0f  00000000  00000000  00074638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000027b8  00000000  00000000  00080248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003ef1  00000000  00000000  00082a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004b389  00000000  00000000  000868f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005d484  00000000  00000000  000d1c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018bb2c  00000000  00000000  0012f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002bac2a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008898  00000000  00000000  002bac70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000242d9  00000000  00000000  002c3508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  002e77e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014110 	.word	0x08014110

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08014110 	.word	0x08014110

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
    * Useful for debugging issues.
    */
   __BKPT(0);
 8000670:	be00      	bkpt	0x0000
}
 8000672:	4770      	bx	lr

08000674 <lwiperf_tcp_close>:
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *prev = NULL;
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8000674:	4a3d      	ldr	r2, [pc, #244]	@ (800076c <lwiperf_tcp_close+0xf8>)
 8000676:	6813      	ldr	r3, [r2, #0]
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8000678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800067c:	4604      	mov	r4, r0
 800067e:	b087      	sub	sp, #28
 8000680:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8000682:	b14b      	cbz	r3, 8000698 <lwiperf_tcp_close+0x24>
    if (iter == item) {
 8000684:	4298      	cmp	r0, r3
        lwiperf_all_connections = iter->next;
 8000686:	681d      	ldr	r5, [r3, #0]
    if (iter == item) {
 8000688:	d102      	bne.n	8000690 <lwiperf_tcp_close+0x1c>
 800068a:	e04b      	b.n	8000724 <lwiperf_tcp_close+0xb0>
 800068c:	429c      	cmp	r4, r3
 800068e:	d048      	beq.n	8000722 <lwiperf_tcp_close+0xae>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8000690:	461a      	mov	r2, r3
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f9      	bne.n	800068c <lwiperf_tcp_close+0x18>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 8000698:	b1cc      	cbz	r4, 80006ce <lwiperf_tcp_close+0x5a>
 800069a:	69a3      	ldr	r3, [r4, #24]
 800069c:	b1bb      	cbz	r3, 80006ce <lwiperf_tcp_close+0x5a>
    now = sys_now();
 800069e:	f006 fcbd 	bl	800701c <sys_now>
    duration_ms = now - conn->time_started;
 80006a2:	6963      	ldr	r3, [r4, #20]
    if (duration_ms == 0) {
 80006a4:	1ac5      	subs	r5, r0, r3
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80006a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (duration_ms == 0) {
 80006a8:	d05e      	beq.n	8000768 <lwiperf_tcp_close+0xf4>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80006aa:	fbb3 f7f5 	udiv	r7, r3, r5
 80006ae:	00ff      	lsls	r7, r7, #3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80006b0:	6922      	ldr	r2, [r4, #16]
    conn->report_fn(conn->report_arg, report_type,
 80006b2:	4631      	mov	r1, r6
 80006b4:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 80006b8:	e9d4 6006 	ldrd	r6, r0, [r4, #24]
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	4663      	mov	r3, ip
 80006c0:	e9cd 5703 	strd	r5, r7, [sp, #12]
 80006c4:	8b15      	ldrh	r5, [r2, #24]
 80006c6:	9501      	str	r5, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 80006c8:	1d15      	adds	r5, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 80006ca:	9500      	str	r5, [sp, #0]
 80006cc:	47b0      	blx	r6
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 80006ce:	6920      	ldr	r0, [r4, #16]
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d03c      	beq.n	800074e <lwiperf_tcp_close+0xda>
    tcp_arg(conn->conn_pcb, NULL);
 80006d4:	2100      	movs	r1, #0
 80006d6:	f00c fcdf 	bl	800d098 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	6920      	ldr	r0, [r4, #16]
 80006de:	4611      	mov	r1, r2
 80006e0:	f00c fd3c 	bl	800d15c <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 80006e4:	2100      	movs	r1, #0
 80006e6:	6920      	ldr	r0, [r4, #16]
 80006e8:	f00c fcf8 	bl	800d0dc <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 80006ec:	2100      	movs	r1, #0
 80006ee:	6920      	ldr	r0, [r4, #16]
 80006f0:	f00c fcda 	bl	800d0a8 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 80006f4:	6920      	ldr	r0, [r4, #16]
 80006f6:	2100      	movs	r1, #0
 80006f8:	f00c fd0a 	bl	800d110 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 80006fc:	6920      	ldr	r0, [r4, #16]
 80006fe:	f00d fb6f 	bl	800dde0 <tcp_close>
    if (err != ERR_OK) {
 8000702:	b928      	cbnz	r0, 8000710 <lwiperf_tcp_close+0x9c>
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000704:	4620      	mov	r0, r4
}
 8000706:	b007      	add	sp, #28
 8000708:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800070c:	f00b b87e 	b.w	800b80c <mem_free>
      tcp_abort(conn->conn_pcb);
 8000710:	6920      	ldr	r0, [r4, #16]
 8000712:	f00d f985 	bl	800da20 <tcp_abort>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000716:	4620      	mov	r0, r4
}
 8000718:	b007      	add	sp, #28
 800071a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800071e:	f00b b875 	b.w	800b80c <mem_free>
        prev->next = iter->next;
 8000722:	6825      	ldr	r5, [r4, #0]
 8000724:	6015      	str	r5, [r2, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000726:	2d00      	cmp	r5, #0
 8000728:	d0b7      	beq.n	800069a <lwiperf_tcp_close+0x26>
        LWIP_ASSERT("duplicate entry", iter != item);
 800072a:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8000774 <lwiperf_tcp_close+0x100>
 800072e:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 800077c <lwiperf_tcp_close+0x108>
 8000732:	4f0f      	ldr	r7, [pc, #60]	@ (8000770 <lwiperf_tcp_close+0xfc>)
 8000734:	e002      	b.n	800073c <lwiperf_tcp_close+0xc8>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000736:	682d      	ldr	r5, [r5, #0]
 8000738:	2d00      	cmp	r5, #0
 800073a:	d0ad      	beq.n	8000698 <lwiperf_tcp_close+0x24>
        LWIP_ASSERT("duplicate entry", iter != item);
 800073c:	42ac      	cmp	r4, r5
 800073e:	d1fa      	bne.n	8000736 <lwiperf_tcp_close+0xc2>
 8000740:	464b      	mov	r3, r9
 8000742:	22d0      	movs	r2, #208	@ 0xd0
 8000744:	4641      	mov	r1, r8
 8000746:	4638      	mov	r0, r7
 8000748:	f012 fbd2 	bl	8012ef0 <iprintf>
 800074c:	e7f3      	b.n	8000736 <lwiperf_tcp_close+0xc2>
    err = tcp_close(conn->server_pcb);
 800074e:	68e0      	ldr	r0, [r4, #12]
 8000750:	f00d fb46 	bl	800dde0 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 8000754:	2800      	cmp	r0, #0
 8000756:	d0d5      	beq.n	8000704 <lwiperf_tcp_close+0x90>
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <lwiperf_tcp_close+0x100>)
 800075a:	f240 120d 	movw	r2, #269	@ 0x10d
 800075e:	4906      	ldr	r1, [pc, #24]	@ (8000778 <lwiperf_tcp_close+0x104>)
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <lwiperf_tcp_close+0xfc>)
 8000762:	f012 fbc5 	bl	8012ef0 <iprintf>
 8000766:	e7cd      	b.n	8000704 <lwiperf_tcp_close+0x90>
      bandwidth_kbitpsec = 0;
 8000768:	462f      	mov	r7, r5
 800076a:	e7a1      	b.n	80006b0 <lwiperf_tcp_close+0x3c>
 800076c:	240000b4 	.word	0x240000b4
 8000770:	08014150 	.word	0x08014150
 8000774:	08014128 	.word	0x08014128
 8000778:	08014178 	.word	0x08014178
 800077c:	08014140 	.word	0x08014140

08000780 <lwiperf_tcp_accept>:
/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8000780:	2800      	cmp	r0, #0
 8000782:	bf18      	it	ne
 8000784:	2900      	cmpne	r1, #0
 8000786:	f000 8091 	beq.w	80008ac <lwiperf_tcp_accept+0x12c>
 800078a:	2a00      	cmp	r2, #0
 800078c:	f040 808e 	bne.w	80008ac <lwiperf_tcp_accept+0x12c>
{
 8000790:	b570      	push	{r4, r5, r6, lr}
    return ERR_VAL;
  }

  s = (lwiperf_state_tcp_t *)arg;
  LWIP_ASSERT("invalid session", s->base.server);
 8000792:	7943      	ldrb	r3, [r0, #5]
 8000794:	460e      	mov	r6, r1
 8000796:	4604      	mov	r4, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d06a      	beq.n	8000872 <lwiperf_tcp_accept+0xf2>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800079c:	68e3      	ldr	r3, [r4, #12]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d071      	beq.n	8000886 <lwiperf_tcp_accept+0x106>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80007a2:	6923      	ldr	r3, [r4, #16]
 80007a4:	b133      	cbz	r3, 80007b4 <lwiperf_tcp_accept+0x34>
 80007a6:	4b43      	ldr	r3, [pc, #268]	@ (80008b4 <lwiperf_tcp_accept+0x134>)
 80007a8:	f240 225a 	movw	r2, #602	@ 0x25a
 80007ac:	4942      	ldr	r1, [pc, #264]	@ (80008b8 <lwiperf_tcp_accept+0x138>)
 80007ae:	4843      	ldr	r0, [pc, #268]	@ (80008bc <lwiperf_tcp_accept+0x13c>)
 80007b0:	f012 fb9e 	bl	8012ef0 <iprintf>
  if (s->specific_remote) {
 80007b4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80007b8:	68a2      	ldr	r2, [r4, #8]
  if (s->specific_remote) {
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d137      	bne.n	800082e <lwiperf_tcp_accept+0xae>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 80007be:	b132      	cbz	r2, 80007ce <lwiperf_tcp_accept+0x4e>
 80007c0:	4b3c      	ldr	r3, [pc, #240]	@ (80008b4 <lwiperf_tcp_accept+0x134>)
 80007c2:	f240 2262 	movw	r2, #610	@ 0x262
 80007c6:	493e      	ldr	r1, [pc, #248]	@ (80008c0 <lwiperf_tcp_accept+0x140>)
 80007c8:	483c      	ldr	r0, [pc, #240]	@ (80008bc <lwiperf_tcp_accept+0x13c>)
 80007ca:	f012 fb91 	bl	8012ef0 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80007ce:	2048      	movs	r0, #72	@ 0x48
 80007d0:	f00b f9b4 	bl	800bb3c <mem_malloc>
  if (conn == NULL) {
 80007d4:	4605      	mov	r5, r0
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d065      	beq.n	80008a6 <lwiperf_tcp_accept+0x126>
    return ERR_MEM;
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 80007da:	2248      	movs	r2, #72	@ 0x48
 80007dc:	2100      	movs	r1, #0
 80007de:	f012 fc26 	bl	801302e <memset>
  conn->base.tcp = 1;
 80007e2:	f240 1301 	movw	r3, #257	@ 0x101
  conn->base.server = 1;
  conn->base.related_master_state = &s->base;
 80007e6:	60ac      	str	r4, [r5, #8]
  conn->base.tcp = 1;
 80007e8:	80ab      	strh	r3, [r5, #4]
  conn->conn_pcb = newpcb;
 80007ea:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 80007ec:	f006 fc16 	bl	800701c <sys_now>
  conn->report_fn = s->report_fn;
 80007f0:	69a3      	ldr	r3, [r4, #24]
  conn->report_arg = s->report_arg;

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 80007f2:	4629      	mov	r1, r5
  conn->report_fn = s->report_fn;
 80007f4:	e9c5 0305 	strd	r0, r3, [r5, #20]
  conn->report_arg = s->report_arg;
 80007f8:	69e3      	ldr	r3, [r4, #28]
  tcp_arg(newpcb, conn);
 80007fa:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 80007fc:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 80007fe:	f00c fc4b 	bl	800d098 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8000802:	4930      	ldr	r1, [pc, #192]	@ (80008c4 <lwiperf_tcp_accept+0x144>)
 8000804:	4630      	mov	r0, r6
 8000806:	f00c fc4f 	bl	800d0a8 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800080a:	2202      	movs	r2, #2
 800080c:	492e      	ldr	r1, [pc, #184]	@ (80008c8 <lwiperf_tcp_accept+0x148>)
 800080e:	4630      	mov	r0, r6
 8000810:	f00c fca4 	bl	800d15c <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8000814:	492d      	ldr	r1, [pc, #180]	@ (80008cc <lwiperf_tcp_accept+0x14c>)
 8000816:	6928      	ldr	r0, [r5, #16]
 8000818:	f00c fc7a 	bl	800d110 <tcp_err>

  if (s->specific_remote) {
 800081c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8000820:	b973      	cbnz	r3, 8000840 <lwiperf_tcp_accept+0xc0>
  item->next = lwiperf_all_connections;
 8000822:	4e2b      	ldr	r6, [pc, #172]	@ (80008d0 <lwiperf_tcp_accept+0x150>)
 8000824:	6831      	ldr	r1, [r6, #0]
      s->report_fn = NULL;
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
 8000826:	2000      	movs	r0, #0
  item->next = lwiperf_all_connections;
 8000828:	6029      	str	r1, [r5, #0]
  lwiperf_all_connections = item;
 800082a:	6035      	str	r5, [r6, #0]
}
 800082c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800082e:	2a00      	cmp	r2, #0
 8000830:	d031      	beq.n	8000896 <lwiperf_tcp_accept+0x116>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8000832:	6872      	ldr	r2, [r6, #4]
 8000834:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000836:	429a      	cmp	r2, r3
 8000838:	d0c9      	beq.n	80007ce <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 800083a:	f06f 0005 	mvn.w	r0, #5
}
 800083e:	bd70      	pop	{r4, r5, r6, pc}
    conn->base.related_master_state = s->base.related_master_state;
 8000840:	68a2      	ldr	r2, [r4, #8]
 8000842:	4e23      	ldr	r6, [pc, #140]	@ (80008d0 <lwiperf_tcp_accept+0x150>)
 8000844:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8000846:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800084a:	b153      	cbz	r3, 8000862 <lwiperf_tcp_accept+0xe2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800084c:	6831      	ldr	r1, [r6, #0]
 800084e:	b141      	cbz	r1, 8000862 <lwiperf_tcp_accept+0xe2>
    if (iter == item) {
 8000850:	428a      	cmp	r2, r1
 8000852:	d0e8      	beq.n	8000826 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000854:	460b      	mov	r3, r1
 8000856:	e001      	b.n	800085c <lwiperf_tcp_accept+0xdc>
    if (iter == item) {
 8000858:	429a      	cmp	r2, r3
 800085a:	d0e4      	beq.n	8000826 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1fa      	bne.n	8000858 <lwiperf_tcp_accept+0xd8>
      s->report_fn = NULL;
 8000862:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8000864:	2102      	movs	r1, #2
 8000866:	4620      	mov	r0, r4
      s->report_fn = NULL;
 8000868:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800086a:	f7ff ff03 	bl	8000674 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 800086e:	6831      	ldr	r1, [r6, #0]
 8000870:	e7d9      	b.n	8000826 <lwiperf_tcp_accept+0xa6>
  LWIP_ASSERT("invalid session", s->base.server);
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <lwiperf_tcp_accept+0x134>)
 8000874:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000878:	4916      	ldr	r1, [pc, #88]	@ (80008d4 <lwiperf_tcp_accept+0x154>)
 800087a:	4810      	ldr	r0, [pc, #64]	@ (80008bc <lwiperf_tcp_accept+0x13c>)
 800087c:	f012 fb38 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8000880:	68e3      	ldr	r3, [r4, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d18d      	bne.n	80007a2 <lwiperf_tcp_accept+0x22>
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <lwiperf_tcp_accept+0x134>)
 8000888:	f240 2259 	movw	r2, #601	@ 0x259
 800088c:	4912      	ldr	r1, [pc, #72]	@ (80008d8 <lwiperf_tcp_accept+0x158>)
 800088e:	480b      	ldr	r0, [pc, #44]	@ (80008bc <lwiperf_tcp_accept+0x13c>)
 8000890:	f012 fb2e 	bl	8012ef0 <iprintf>
 8000894:	e785      	b.n	80007a2 <lwiperf_tcp_accept+0x22>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8000896:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <lwiperf_tcp_accept+0x134>)
 8000898:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 800089c:	490f      	ldr	r1, [pc, #60]	@ (80008dc <lwiperf_tcp_accept+0x15c>)
 800089e:	4807      	ldr	r0, [pc, #28]	@ (80008bc <lwiperf_tcp_accept+0x13c>)
 80008a0:	f012 fb26 	bl	8012ef0 <iprintf>
 80008a4:	e7c5      	b.n	8000832 <lwiperf_tcp_accept+0xb2>
    return ERR_MEM;
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80008ac:	f06f 0005 	mvn.w	r0, #5
}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	08014128 	.word	0x08014128
 80008b8:	080141a4 	.word	0x080141a4
 80008bc:	08014150 	.word	0x08014150
 80008c0:	080141e0 	.word	0x080141e0
 80008c4:	08000cd9 	.word	0x08000cd9
 80008c8:	08000a25 	.word	0x08000a25
 80008cc:	080008e1 	.word	0x080008e1
 80008d0:	240000b4 	.word	0x240000b4
 80008d4:	08014180 	.word	0x08014180
 80008d8:	08014190 	.word	0x08014190
 80008dc:	080141b8 	.word	0x080141b8

080008e0 <lwiperf_tcp_err>:
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80008e0:	2105      	movs	r1, #5
 80008e2:	f7ff bec7 	b.w	8000674 <lwiperf_tcp_close>
 80008e6:	bf00      	nop

080008e8 <lwiperf_tcp_client_send_more>:
{
 80008e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80008ec:	4604      	mov	r4, r0
 80008ee:	b110      	cbz	r0, 80008f6 <lwiperf_tcp_client_send_more+0xe>
 80008f0:	7903      	ldrb	r3, [r0, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d16e      	bne.n	80009d4 <lwiperf_tcp_client_send_more+0xec>
 80008f6:	4b39      	ldr	r3, [pc, #228]	@ (80009dc <lwiperf_tcp_client_send_more+0xf4>)
 80008f8:	f240 121d 	movw	r2, #285	@ 0x11d
 80008fc:	4938      	ldr	r1, [pc, #224]	@ (80009e0 <lwiperf_tcp_client_send_more+0xf8>)
 80008fe:	4839      	ldr	r0, [pc, #228]	@ (80009e4 <lwiperf_tcp_client_send_more+0xfc>)
 8000900:	f012 faf6 	bl	8012ef0 <iprintf>
      u32_t time_ms = time * 10;
 8000904:	f06f 0909 	mvn.w	r9, #9
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000908:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 80009ec <lwiperf_tcp_client_send_more+0x104>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 800090c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800090e:	0602      	lsls	r2, r0, #24
 8000910:	d534      	bpl.n	800097c <lwiperf_tcp_client_send_more+0x94>
      u32_t now = sys_now();
 8000912:	f006 fb83 	bl	800701c <sys_now>
      u32_t diff_ms = now - conn->time_started;
 8000916:	6963      	ldr	r3, [r4, #20]
      u32_t now = sys_now();
 8000918:	4605      	mov	r5, r0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800091a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      u32_t diff_ms = now - conn->time_started;
 800091c:	1aed      	subs	r5, r5, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800091e:	f00a febb 	bl	800b698 <lwip_htonl>
      u32_t time_ms = time * 10;
 8000922:	fb09 f000 	mul.w	r0, r9, r0
      if (diff_ms >= time_ms) {
 8000926:	4285      	cmp	r5, r0
 8000928:	d22d      	bcs.n	8000986 <lwiperf_tcp_client_send_more+0x9e>
    if (conn->bytes_transferred < 24) {
 800092a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800092c:	2b17      	cmp	r3, #23
 800092e:	d831      	bhi.n	8000994 <lwiperf_tcp_client_send_more+0xac>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8000930:	f104 0528 	add.w	r5, r4, #40	@ 0x28
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000934:	f1c3 0a18 	rsb	sl, r3, #24
      apiflags = TCP_WRITE_FLAG_COPY;
 8000938:	2601      	movs	r6, #1
    send_more = 0;
 800093a:	f04f 0800 	mov.w	r8, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800093e:	441d      	add	r5, r3
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000940:	fa1f fa8a 	uxth.w	sl, sl
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000944:	f240 27da 	movw	r7, #730	@ 0x2da
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8000948:	4633      	mov	r3, r6
 800094a:	4652      	mov	r2, sl
 800094c:	4629      	mov	r1, r5
 800094e:	6920      	ldr	r0, [r4, #16]
 8000950:	f00f f952 	bl	800fbf8 <tcp_write>
      if (err ==  ERR_MEM) {
 8000954:	1c43      	adds	r3, r0, #1
 8000956:	d00c      	beq.n	8000972 <lwiperf_tcp_client_send_more+0x8a>
    if (err == ERR_OK) {
 8000958:	b928      	cbnz	r0, 8000966 <lwiperf_tcp_client_send_more+0x7e>
      conn->bytes_transferred += txlen;
 800095a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800095c:	4453      	add	r3, sl
 800095e:	6263      	str	r3, [r4, #36]	@ 0x24
  } while (send_more);
 8000960:	f1b8 0f00 	cmp.w	r8, #0
 8000964:	d1d2      	bne.n	800090c <lwiperf_tcp_client_send_more+0x24>
  tcp_output(conn->conn_pcb);
 8000966:	6920      	ldr	r0, [r4, #16]
 8000968:	f00f ff3e 	bl	80107e8 <tcp_output>
}
 800096c:	2000      	movs	r0, #0
 800096e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txlen /= 2;
 8000972:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000976:	45ba      	cmp	sl, r7
 8000978:	d0e6      	beq.n	8000948 <lwiperf_tcp_client_send_more+0x60>
 800097a:	e7f4      	b.n	8000966 <lwiperf_tcp_client_send_more+0x7e>
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 800097c:	f00a fe8c 	bl	800b698 <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 8000980:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000982:	4283      	cmp	r3, r0
 8000984:	d8d2      	bhi.n	800092c <lwiperf_tcp_client_send_more+0x44>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000986:	4620      	mov	r0, r4
 8000988:	2101      	movs	r1, #1
 800098a:	f7ff fe73 	bl	8000674 <lwiperf_tcp_close>
}
 800098e:	2000      	movs	r0, #0
 8000990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (conn->bytes_transferred < 48) {
 8000994:	2b2f      	cmp	r3, #47	@ 0x2f
 8000996:	d809      	bhi.n	80009ac <lwiperf_tcp_client_send_more+0xc4>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8000998:	18e5      	adds	r5, r4, r3
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800099a:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 800099e:	2603      	movs	r6, #3
      send_more = 1;
 80009a0:	f04f 0801 	mov.w	r8, #1
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80009a4:	3510      	adds	r5, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80009a6:	fa1f fa83 	uxth.w	sl, r3
      send_more = 1;
 80009aa:	e7cb      	b.n	8000944 <lwiperf_tcp_client_send_more+0x5c>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80009ac:	fbab 1203 	umull	r1, r2, fp, r3
      apiflags = 0; /* no copying needed */
 80009b0:	f240 5a9c 	movw	sl, #1436	@ 0x59c
 80009b4:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 80009b8:	2600      	movs	r6, #0
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80009ba:	08d2      	lsrs	r2, r2, #3
      apiflags = 0; /* no copying needed */
 80009bc:	f04f 0801 	mov.w	r8, #1
 80009c0:	2b30      	cmp	r3, #48	@ 0x30
 80009c2:	bf18      	it	ne
 80009c4:	468a      	movne	sl, r1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80009c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80009ca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80009ce:	4a06      	ldr	r2, [pc, #24]	@ (80009e8 <lwiperf_tcp_client_send_more+0x100>)
 80009d0:	189d      	adds	r5, r3, r2
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 80009d2:	e7b7      	b.n	8000944 <lwiperf_tcp_client_send_more+0x5c>
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80009d4:	7943      	ldrb	r3, [r0, #5]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d094      	beq.n	8000904 <lwiperf_tcp_client_send_more+0x1c>
 80009da:	e78c      	b.n	80008f6 <lwiperf_tcp_client_send_more+0xe>
 80009dc:	08014128 	.word	0x08014128
 80009e0:	08014208 	.word	0x08014208
 80009e4:	08014150 	.word	0x08014150
 80009e8:	0801428c 	.word	0x0801428c
 80009ec:	cccccccd 	.word	0xcccccccd

080009f0 <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80009f0:	6903      	ldr	r3, [r0, #16]
 80009f2:	428b      	cmp	r3, r1
{
 80009f4:	b510      	push	{r4, lr}
 80009f6:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80009f8:	d006      	beq.n	8000a08 <lwiperf_tcp_client_sent+0x18>
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <lwiperf_tcp_client_sent+0x28>)
 80009fc:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8000a00:	4906      	ldr	r1, [pc, #24]	@ (8000a1c <lwiperf_tcp_client_sent+0x2c>)
 8000a02:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <lwiperf_tcp_client_sent+0x30>)
 8000a04:	f012 fa74 	bl	8012ef0 <iprintf>
  conn->poll_count = 0;
 8000a08:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 8000a0a:	4620      	mov	r0, r4
  conn->poll_count = 0;
 8000a0c:	f884 3020 	strb.w	r3, [r4, #32]
}
 8000a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000a14:	f7ff bf68 	b.w	80008e8 <lwiperf_tcp_client_send_more>
 8000a18:	08014128 	.word	0x08014128
 8000a1c:	08014bec 	.word	0x08014bec
 8000a20:	08014150 	.word	0x08014150

08000a24 <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a24:	6903      	ldr	r3, [r0, #16]
 8000a26:	428b      	cmp	r3, r1
{
 8000a28:	b510      	push	{r4, lr}
 8000a2a:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a2c:	d006      	beq.n	8000a3c <lwiperf_tcp_poll+0x18>
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <lwiperf_tcp_poll+0x48>)
 8000a30:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000a34:	490e      	ldr	r1, [pc, #56]	@ (8000a70 <lwiperf_tcp_poll+0x4c>)
 8000a36:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <lwiperf_tcp_poll+0x50>)
 8000a38:	f012 fa5a 	bl	8012ef0 <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8000a3c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000a40:	3301      	adds	r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b09      	cmp	r3, #9
 8000a46:	f884 3020 	strb.w	r3, [r4, #32]
 8000a4a:	d808      	bhi.n	8000a5e <lwiperf_tcp_poll+0x3a>
  if (!conn->base.server) {
 8000a4c:	7963      	ldrb	r3, [r4, #5]
 8000a4e:	b10b      	cbz	r3, 8000a54 <lwiperf_tcp_poll+0x30>
}
 8000a50:	2000      	movs	r0, #0
 8000a52:	bd10      	pop	{r4, pc}
    lwiperf_tcp_client_send_more(conn);
 8000a54:	4620      	mov	r0, r4
 8000a56:	f7ff ff47 	bl	80008e8 <lwiperf_tcp_client_send_more>
}
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000a5e:	4620      	mov	r0, r4
 8000a60:	2102      	movs	r1, #2
 8000a62:	f7ff fe07 	bl	8000674 <lwiperf_tcp_close>
}
 8000a66:	2000      	movs	r0, #0
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08014128 	.word	0x08014128
 8000a70:	08014218 	.word	0x08014218
 8000a74:	08014150 	.word	0x08014150

08000a78 <lwiperf_tcp_client_connected>:
{
 8000a78:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000a7a:	6903      	ldr	r3, [r0, #16]
{
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d006      	beq.n	8000a92 <lwiperf_tcp_client_connected+0x1a>
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <lwiperf_tcp_client_connected+0x40>)
 8000a86:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8000a8a:	490c      	ldr	r1, [pc, #48]	@ (8000abc <lwiperf_tcp_client_connected+0x44>)
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <lwiperf_tcp_client_connected+0x48>)
 8000a8e:	f012 fa2f 	bl	8012ef0 <iprintf>
  if (err != ERR_OK) {
 8000a92:	b955      	cbnz	r5, 8000aaa <lwiperf_tcp_client_connected+0x32>
  conn->poll_count = 0;
 8000a94:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 8000a98:	f006 fac0 	bl	800701c <sys_now>
 8000a9c:	4603      	mov	r3, r0
  return lwiperf_tcp_client_send_more(conn);
 8000a9e:	4620      	mov	r0, r4
  conn->time_started = sys_now();
 8000aa0:	6163      	str	r3, [r4, #20]
}
 8000aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000aa6:	f7ff bf1f 	b.w	80008e8 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000aaa:	4620      	mov	r0, r4
 8000aac:	2105      	movs	r1, #5
 8000aae:	f7ff fde1 	bl	8000674 <lwiperf_tcp_close>
}
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08014128 	.word	0x08014128
 8000abc:	08014bec 	.word	0x08014bec
 8000ac0:	08014150 	.word	0x08014150

08000ac4 <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 8000ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac8:	4605      	mov	r5, r0
 8000aca:	460f      	mov	r7, r1
 8000acc:	4690      	mov	r8, r2
 8000ace:	461e      	mov	r6, r3
{
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 8000ad0:	f006 fc2c 	bl	800732c <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 8000ad4:	2d00      	cmp	r5, #0
 8000ad6:	d035      	beq.n	8000b44 <lwiperf_start_tcp_server_impl.constprop.0+0x80>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000ad8:	2048      	movs	r0, #72	@ 0x48
 8000ada:	f00b f82f 	bl	800bb3c <mem_malloc>
  if (s == NULL) {
 8000ade:	4604      	mov	r4, r0
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d038      	beq.n	8000b56 <lwiperf_start_tcp_server_impl.constprop.0+0x92>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8000ae4:	2248      	movs	r2, #72	@ 0x48
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f012 faa1 	bl	801302e <memset>
  s->base.tcp = 1;
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
 8000aec:	9b06      	ldr	r3, [sp, #24]
  s->report_fn = report_fn;
  s->report_arg = report_arg;
 8000aee:	61e6      	str	r6, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000af0:	202e      	movs	r0, #46	@ 0x2e
  s->base.related_master_state = related_master_state;
 8000af2:	60a3      	str	r3, [r4, #8]
  s->base.tcp = 1;
 8000af4:	f240 1301 	movw	r3, #257	@ 0x101
  s->report_fn = report_fn;
 8000af8:	f8c4 8018 	str.w	r8, [r4, #24]
  s->base.tcp = 1;
 8000afc:	80a3      	strh	r3, [r4, #4]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000afe:	f00d f89d 	bl	800dc3c <tcp_new_ip_type>
  if (pcb == NULL) {
 8000b02:	4606      	mov	r6, r0
 8000b04:	b338      	cbz	r0, 8000b56 <lwiperf_start_tcp_server_impl.constprop.0+0x92>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8000b06:	4629      	mov	r1, r5
 8000b08:	463a      	mov	r2, r7
 8000b0a:	f00c f85d 	bl	800cbc8 <tcp_bind>
  if (err != ERR_OK) {
 8000b0e:	4605      	mov	r5, r0
 8000b10:	b110      	cbz	r0, 8000b18 <lwiperf_start_tcp_server_impl.constprop.0+0x54>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 8000b12:	4628      	mov	r0, r5
 8000b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f00c f93c 	bl	800cd98 <tcp_listen_with_backlog>
 8000b20:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 8000b22:	b190      	cbz	r0, 8000b4a <lwiperf_start_tcp_server_impl.constprop.0+0x86>
  tcp_arg(s->server_pcb, s);
 8000b24:	4621      	mov	r1, r4
 8000b26:	f00c fab7 	bl	800d098 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8000b2a:	68e0      	ldr	r0, [r4, #12]
 8000b2c:	490b      	ldr	r1, [pc, #44]	@ (8000b5c <lwiperf_start_tcp_server_impl.constprop.0+0x98>)
 8000b2e:	f00c fb09 	bl	800d144 <tcp_accept>
  item->next = lwiperf_all_connections;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <lwiperf_start_tcp_server_impl.constprop.0+0x9c>)
}
 8000b34:	4628      	mov	r0, r5
  item->next = lwiperf_all_connections;
 8000b36:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000b38:	601c      	str	r4, [r3, #0]
  *state = s;
 8000b3a:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 8000b3c:	6022      	str	r2, [r4, #0]
  *state = s;
 8000b3e:	601c      	str	r4, [r3, #0]
}
 8000b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_ARG;
 8000b44:	f06f 050f 	mvn.w	r5, #15
 8000b48:	e7e3      	b.n	8000b12 <lwiperf_start_tcp_server_impl.constprop.0+0x4e>
      tcp_close(pcb);
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	f00d f948 	bl	800dde0 <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8000b50:	4620      	mov	r0, r4
 8000b52:	f00a fe5b 	bl	800b80c <mem_free>
    return ERR_MEM;
 8000b56:	f04f 35ff 	mov.w	r5, #4294967295
 8000b5a:	e7da      	b.n	8000b12 <lwiperf_start_tcp_server_impl.constprop.0+0x4e>
 8000b5c:	08000781 	.word	0x08000781
 8000b60:	240000b4 	.word	0x240000b4

08000b64 <lwiperf_tx_start_impl.constprop.0>:
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
 8000b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b68:	4689      	mov	r9, r1
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	4616      	mov	r6, r2
 8000b6e:	469a      	mov	sl, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000b70:	4607      	mov	r7, r0
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d063      	beq.n	8000c3e <lwiperf_tx_start_impl.constprop.0+0xda>
  *new_conn = NULL;
 8000b76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000b78:	f04f 0800 	mov.w	r8, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000b7c:	2048      	movs	r0, #72	@ 0x48
  *new_conn = NULL;
 8000b7e:	f8c3 8000 	str.w	r8, [r3]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000b82:	f00a ffdb 	bl	800bb3c <mem_malloc>
  if (client_conn == NULL) {
 8000b86:	4604      	mov	r4, r0
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d063      	beq.n	8000c54 <lwiperf_tx_start_impl.constprop.0+0xf0>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8000b8c:	4640      	mov	r0, r8
 8000b8e:	f00d f855 	bl	800dc3c <tcp_new_ip_type>
  if (newpcb == NULL) {
 8000b92:	4605      	mov	r5, r0
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d05a      	beq.n	8000c4e <lwiperf_tx_start_impl.constprop.0+0xea>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8000b98:	2248      	movs	r2, #72	@ 0x48
 8000b9a:	4641      	mov	r1, r8
 8000b9c:	4620      	mov	r0, r4
  client_conn->base.tcp = 1;
 8000b9e:	f04f 0b01 	mov.w	fp, #1
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8000ba2:	f012 fa44 	bl	801302e <memset>
  client_conn->base.related_master_state = related_master_state;
 8000ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  client_conn->conn_pcb = newpcb;
 8000ba8:	6125      	str	r5, [r4, #16]
  client_conn->base.related_master_state = related_master_state;
 8000baa:	60a3      	str	r3, [r4, #8]
  client_conn->base.tcp = 1;
 8000bac:	f884 b004 	strb.w	fp, [r4, #4]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000bb0:	f006 fa34 	bl	800701c <sys_now>
  client_conn->report_arg = report_arg;
 8000bb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  client_conn->report_fn = report_fn;
 8000bb6:	f8c4 a018 	str.w	sl, [r4, #24]
  client_conn->report_arg = report_arg;
 8000bba:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000bbc:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 8000bbe:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000bc2:	6160      	str	r0, [r4, #20]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000bc4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000bc8:	6832      	ldr	r2, [r6, #0]
 8000bca:	6873      	ldr	r3, [r6, #4]
 8000bcc:	68b0      	ldr	r0, [r6, #8]
 8000bce:	68f1      	ldr	r1, [r6, #12]
 8000bd0:	6320      	str	r0, [r4, #48]	@ 0x30
  tcp_arg(newpcb, client_conn);
 8000bd2:	4628      	mov	r0, r5
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000bd4:	6361      	str	r1, [r4, #52]	@ 0x34
  tcp_arg(newpcb, client_conn);
 8000bd6:	4621      	mov	r1, r4
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000bd8:	62a2      	str	r2, [r4, #40]	@ 0x28
 8000bda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000bdc:	6973      	ldr	r3, [r6, #20]
 8000bde:	6932      	ldr	r2, [r6, #16]
 8000be0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000be2:	63a2      	str	r2, [r4, #56]	@ 0x38
  client_conn->have_settings_buf = 1;
 8000be4:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
  tcp_arg(newpcb, client_conn);
 8000be8:	f00c fa56 	bl	800d098 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000bec:	4628      	mov	r0, r5
 8000bee:	491b      	ldr	r1, [pc, #108]	@ (8000c5c <lwiperf_tx_start_impl.constprop.0+0xf8>)
 8000bf0:	f00c fa74 	bl	800d0dc <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	4919      	ldr	r1, [pc, #100]	@ (8000c60 <lwiperf_tx_start_impl.constprop.0+0xfc>)
 8000bfa:	f00c faaf 	bl	800d15c <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8000bfe:	4628      	mov	r0, r5
 8000c00:	4918      	ldr	r1, [pc, #96]	@ (8000c64 <lwiperf_tx_start_impl.constprop.0+0x100>)
 8000c02:	f00c fa85 	bl	800d110 <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 8000c06:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000c08:	4628      	mov	r0, r5
 8000c0a:	464a      	mov	r2, r9
  ip_addr_copy(remote_addr, *remote_ip);
 8000c0c:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000c0e:	a901      	add	r1, sp, #4
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <lwiperf_tx_start_impl.constprop.0+0x104>)
 8000c12:	f00c f94b 	bl	800ceac <tcp_connect>
  if (err != ERR_OK) {
 8000c16:	4605      	mov	r5, r0
 8000c18:	b948      	cbnz	r0, 8000c2e <lwiperf_tx_start_impl.constprop.0+0xca>
  item->next = lwiperf_all_connections;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <lwiperf_tx_start_impl.constprop.0+0x108>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000c1e:	601c      	str	r4, [r3, #0]
  *new_conn = client_conn;
 8000c20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  item->next = lwiperf_all_connections;
 8000c22:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 8000c24:	601c      	str	r4, [r3, #0]
}
 8000c26:	4628      	mov	r0, r5
 8000c28:	b003      	add	sp, #12
 8000c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000c2e:	4620      	mov	r0, r4
 8000c30:	2102      	movs	r1, #2
 8000c32:	f7ff fd1f 	bl	8000674 <lwiperf_tcp_close>
}
 8000c36:	4628      	mov	r0, r5
 8000c38:	b003      	add	sp, #12
 8000c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <lwiperf_tx_start_impl.constprop.0+0x10c>)
 8000c40:	f240 128b 	movw	r2, #395	@ 0x18b
 8000c44:	490b      	ldr	r1, [pc, #44]	@ (8000c74 <lwiperf_tx_start_impl.constprop.0+0x110>)
 8000c46:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <lwiperf_tx_start_impl.constprop.0+0x114>)
 8000c48:	f012 f952 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000c4c:	e793      	b.n	8000b76 <lwiperf_tx_start_impl.constprop.0+0x12>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f00a fddc 	bl	800b80c <mem_free>
    return ERR_MEM;
 8000c54:	f04f 35ff 	mov.w	r5, #4294967295
 8000c58:	e7e5      	b.n	8000c26 <lwiperf_tx_start_impl.constprop.0+0xc2>
 8000c5a:	bf00      	nop
 8000c5c:	080009f1 	.word	0x080009f1
 8000c60:	08000a25 	.word	0x08000a25
 8000c64:	080008e1 	.word	0x080008e1
 8000c68:	08000a79 	.word	0x08000a79
 8000c6c:	240000b4 	.word	0x240000b4
 8000c70:	08014128 	.word	0x08014128
 8000c74:	08014228 	.word	0x08014228
 8000c78:	08014150 	.word	0x08014150

08000c7c <lwiperf_tx_start_passive>:
{
 8000c7c:	b530      	push	{r4, r5, lr}
  lwiperf_state_tcp_t *new_conn = NULL;
 8000c7e:	2300      	movs	r3, #0
{
 8000c80:	4604      	mov	r4, r0
 8000c82:	b087      	sub	sp, #28
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8000c84:	6b00      	ldr	r0, [r0, #48]	@ 0x30
  lwiperf_state_tcp_t *new_conn = NULL;
 8000c86:	9305      	str	r3, [sp, #20]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8000c88:	f00a fd06 	bl	800b698 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8000c8c:	6922      	ldr	r2, [r4, #16]
 8000c8e:	a905      	add	r1, sp, #20
 8000c90:	69e3      	ldr	r3, [r4, #28]
 8000c92:	68a5      	ldr	r5, [r4, #8]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	e9cd 5101 	strd	r5, r1, [sp, #4]
 8000c9a:	b281      	uxth	r1, r0
 8000c9c:	69a3      	ldr	r3, [r4, #24]
 8000c9e:	1d10      	adds	r0, r2, #4
 8000ca0:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8000ca4:	f7ff ff5e 	bl	8000b64 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 8000ca8:	4604      	mov	r4, r0
 8000caa:	b918      	cbnz	r0, 8000cb4 <lwiperf_tx_start_passive+0x38>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000cac:	9d05      	ldr	r5, [sp, #20]
 8000cae:	b125      	cbz	r5, 8000cba <lwiperf_tx_start_passive+0x3e>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62ab      	str	r3, [r5, #40]	@ 0x28
}
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	b007      	add	sp, #28
 8000cb8:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <lwiperf_tx_start_passive+0x50>)
 8000cbc:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8000cc0:	4903      	ldr	r1, [pc, #12]	@ (8000cd0 <lwiperf_tx_start_passive+0x54>)
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <lwiperf_tx_start_passive+0x58>)
 8000cc4:	f012 f914 	bl	8012ef0 <iprintf>
 8000cc8:	e7f2      	b.n	8000cb0 <lwiperf_tx_start_passive+0x34>
 8000cca:	bf00      	nop
 8000ccc:	08014128 	.word	0x08014128
 8000cd0:	0801423c 	.word	0x0801423c
 8000cd4:	08014150 	.word	0x08014150

08000cd8 <lwiperf_tcp_recv>:
{
 8000cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cdc:	4698      	mov	r8, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000cde:	6903      	ldr	r3, [r0, #16]
{
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460e      	mov	r6, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000ce4:	428b      	cmp	r3, r1
{
 8000ce6:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000ce8:	d006      	beq.n	8000cf8 <lwiperf_tcp_recv+0x20>
 8000cea:	4b6a      	ldr	r3, [pc, #424]	@ (8000e94 <lwiperf_tcp_recv+0x1bc>)
 8000cec:	f44f 72e8 	mov.w	r2, #464	@ 0x1d0
 8000cf0:	4969      	ldr	r1, [pc, #420]	@ (8000e98 <lwiperf_tcp_recv+0x1c0>)
 8000cf2:	486a      	ldr	r0, [pc, #424]	@ (8000e9c <lwiperf_tcp_recv+0x1c4>)
 8000cf4:	f012 f8fc 	bl	8012ef0 <iprintf>
  if (err != ERR_OK) {
 8000cf8:	f1b8 0f00 	cmp.w	r8, #0
 8000cfc:	f040 8092 	bne.w	8000e24 <lwiperf_tcp_recv+0x14c>
  if (p == NULL) {
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	f000 8096 	beq.w	8000e32 <lwiperf_tcp_recv+0x15a>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000d06:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  tot_len = p->tot_len;
 8000d0a:	892f      	ldrh	r7, [r5, #8]
  conn->poll_count = 0;
 8000d0c:	f884 8020 	strb.w	r8, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000d10:	bb33      	cbnz	r3, 8000d60 <lwiperf_tcp_recv+0x88>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000d12:	2f17      	cmp	r7, #23
 8000d14:	d961      	bls.n	8000dda <lwiperf_tcp_recv+0x102>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000d16:	4643      	mov	r3, r8
 8000d18:	2218      	movs	r2, #24
 8000d1a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f00b fe2c 	bl	800c97c <pbuf_copy_partial>
 8000d24:	2818      	cmp	r0, #24
 8000d26:	f040 809b 	bne.w	8000e60 <lwiperf_tcp_recv+0x188>
      conn->have_settings_buf = 1;
 8000d2a:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000d2c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      conn->have_settings_buf = 1;
 8000d2e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000d32:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea0 <lwiperf_tcp_recv+0x1c8>)
 8000d34:	4393      	bics	r3, r2
 8000d36:	f000 809f 	beq.w	8000e78 <lwiperf_tcp_recv+0x1a0>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000d3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000d3c:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8000d3e:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000d40:	6263      	str	r3, [r4, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 8000d42:	d819      	bhi.n	8000d78 <lwiperf_tcp_recv+0xa0>
      conn->time_started = sys_now();
 8000d44:	f006 f96a 	bl	800701c <sys_now>
 8000d48:	4603      	mov	r3, r0
      tcp_recved(tpcb, p->tot_len);
 8000d4a:	8929      	ldrh	r1, [r5, #8]
 8000d4c:	4630      	mov	r0, r6
      conn->time_started = sys_now();
 8000d4e:	6163      	str	r3, [r4, #20]
      tcp_recved(tpcb, p->tot_len);
 8000d50:	f00c f86c 	bl	800ce2c <tcp_recved>
      pbuf_free(p);
 8000d54:	4628      	mov	r0, r5
 8000d56:	f00b fb6f 	bl	800c438 <pbuf_free>
}
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000d60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000d62:	03da      	lsls	r2, r3, #15
 8000d64:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 8000d68:	d115      	bne.n	8000d96 <lwiperf_tcp_recv+0xbe>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000d6a:	2f17      	cmp	r7, #23
 8000d6c:	d935      	bls.n	8000dda <lwiperf_tcp_recv+0x102>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000d6e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000d70:	0612      	lsls	r2, r2, #24
 8000d72:	d46a      	bmi.n	8000e4a <lwiperf_tcp_recv+0x172>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000d74:	3318      	adds	r3, #24
 8000d76:	6263      	str	r3, [r4, #36]	@ 0x24
    conn->next_num = 4; /* 24 bytes received... */
 8000d78:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 8000d7a:	2118      	movs	r1, #24
 8000d7c:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 8000d7e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 8000d82:	f00b faf7 	bl	800c374 <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8000d86:	b130      	cbz	r0, 8000d96 <lwiperf_tcp_recv+0xbe>
 8000d88:	4b42      	ldr	r3, [pc, #264]	@ (8000e94 <lwiperf_tcp_recv+0x1bc>)
 8000d8a:	f240 2211 	movw	r2, #529	@ 0x211
 8000d8e:	4945      	ldr	r1, [pc, #276]	@ (8000ea4 <lwiperf_tcp_recv+0x1cc>)
 8000d90:	4842      	ldr	r0, [pc, #264]	@ (8000e9c <lwiperf_tcp_recv+0x1c4>)
 8000d92:	f012 f8ad 	bl	8012ef0 <iprintf>
{
 8000d96:	46ae      	mov	lr, r5
 8000d98:	f04f 0800 	mov.w	r8, #0
    for (i = 0; i < q->len; i++) {
 8000d9c:	f8be 300a 	ldrh.w	r3, [lr, #10]
    const u8_t *payload = (const u8_t *)q->payload;
 8000da0:	f8de 9004 	ldr.w	r9, [lr, #4]
    for (i = 0; i < q->len; i++) {
 8000da4:	b323      	cbz	r3, 8000df0 <lwiperf_tcp_recv+0x118>
      if (num == conn->next_num) {
 8000da6:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8000daa:	2200      	movs	r2, #0
 8000dac:	e008      	b.n	8000dc0 <lwiperf_tcp_recv+0xe8>
          conn->next_num = 0;
 8000dae:	2b0a      	cmp	r3, #10
 8000db0:	bf08      	it	eq
 8000db2:	2300      	moveq	r3, #0
 8000db4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    for (i = 0; i < q->len; i++) {
 8000db8:	f8be 100a 	ldrh.w	r1, [lr, #10]
 8000dbc:	4281      	cmp	r1, r0
 8000dbe:	d916      	bls.n	8000dee <lwiperf_tcp_recv+0x116>
      u8_t val = payload[i];
 8000dc0:	b290      	uxth	r0, r2
        conn->next_num++;
 8000dc2:	1c59      	adds	r1, r3, #1
    for (i = 0; i < q->len; i++) {
 8000dc4:	3201      	adds	r2, #1
      u8_t num = val - '0';
 8000dc6:	f819 c000 	ldrb.w	ip, [r9, r0]
    for (i = 0; i < q->len; i++) {
 8000dca:	b290      	uxth	r0, r2
      u8_t num = val - '0';
 8000dcc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
      if (num == conn->next_num) {
 8000dd0:	fa5f fc8c 	uxtb.w	ip, ip
 8000dd4:	459c      	cmp	ip, r3
        conn->next_num++;
 8000dd6:	b2cb      	uxtb	r3, r1
      if (num == conn->next_num) {
 8000dd8:	d0e9      	beq.n	8000dae <lwiperf_tcp_recv+0xd6>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000dda:	4620      	mov	r0, r4
 8000ddc:	2103      	movs	r1, #3
 8000dde:	f7ff fc49 	bl	8000674 <lwiperf_tcp_close>
      pbuf_free(p);
 8000de2:	4628      	mov	r0, r5
 8000de4:	f00b fb28 	bl	800c438 <pbuf_free>
}
 8000de8:	2000      	movs	r0, #0
 8000dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    packet_idx += q->len;
 8000dee:	4488      	add	r8, r1
  for (q = p; q != NULL; q = q->next) {
 8000df0:	f8de e000 	ldr.w	lr, [lr]
 8000df4:	f1be 0f00 	cmp.w	lr, #0
 8000df8:	d1d0      	bne.n	8000d9c <lwiperf_tcp_recv+0xc4>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000dfa:	892b      	ldrh	r3, [r5, #8]
 8000dfc:	4543      	cmp	r3, r8
 8000dfe:	d006      	beq.n	8000e0e <lwiperf_tcp_recv+0x136>
 8000e00:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <lwiperf_tcp_recv+0x1bc>)
 8000e02:	f240 222b 	movw	r2, #555	@ 0x22b
 8000e06:	4928      	ldr	r1, [pc, #160]	@ (8000ea8 <lwiperf_tcp_recv+0x1d0>)
 8000e08:	4824      	ldr	r0, [pc, #144]	@ (8000e9c <lwiperf_tcp_recv+0x1c4>)
 8000e0a:	f012 f871 	bl	8012ef0 <iprintf>
  conn->bytes_transferred += packet_idx;
 8000e0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000e10:	4630      	mov	r0, r6
 8000e12:	4639      	mov	r1, r7
  conn->bytes_transferred += packet_idx;
 8000e14:	4443      	add	r3, r8
 8000e16:	6263      	str	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000e18:	f00c f808 	bl	800ce2c <tcp_recved>
  pbuf_free(p);
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f00b fb0b 	bl	800c438 <pbuf_free>
  return ERR_OK;
 8000e22:	e7e1      	b.n	8000de8 <lwiperf_tcp_recv+0x110>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000e24:	4620      	mov	r0, r4
 8000e26:	2105      	movs	r1, #5
 8000e28:	f7ff fc24 	bl	8000674 <lwiperf_tcp_close>
}
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000e32:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000e34:	0618      	lsls	r0, r3, #24
 8000e36:	d501      	bpl.n	8000e3c <lwiperf_tcp_recv+0x164>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000e38:	01d9      	lsls	r1, r3, #7
 8000e3a:	d519      	bpl.n	8000e70 <lwiperf_tcp_recv+0x198>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	2100      	movs	r1, #0
 8000e40:	f7ff fc18 	bl	8000674 <lwiperf_tcp_close>
}
 8000e44:	2000      	movs	r0, #0
 8000e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000e4a:	4641      	mov	r1, r8
 8000e4c:	2318      	movs	r3, #24
 8000e4e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8000e52:	4628      	mov	r0, r5
 8000e54:	f00b fdfc 	bl	800ca50 <pbuf_memcmp>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	f43f af6e 	beq.w	8000d3a <lwiperf_tcp_recv+0x62>
 8000e5e:	e7bc      	b.n	8000dda <lwiperf_tcp_recv+0x102>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000e60:	4620      	mov	r0, r4
 8000e62:	2102      	movs	r1, #2
 8000e64:	f7ff fc06 	bl	8000674 <lwiperf_tcp_close>
        pbuf_free(p);
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f00b fae5 	bl	800c438 <pbuf_free>
        return ERR_OK;
 8000e6e:	e7bb      	b.n	8000de8 <lwiperf_tcp_recv+0x110>
        lwiperf_tx_start_passive(conn);
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff ff03 	bl	8000c7c <lwiperf_tx_start_passive>
 8000e76:	e7e1      	b.n	8000e3c <lwiperf_tcp_recv+0x164>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff feff 	bl	8000c7c <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	f43f af5b 	beq.w	8000d3a <lwiperf_tcp_recv+0x62>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000e84:	4620      	mov	r0, r4
 8000e86:	2104      	movs	r1, #4
 8000e88:	f7ff fbf4 	bl	8000674 <lwiperf_tcp_close>
            pbuf_free(p);
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	f00b fad3 	bl	800c438 <pbuf_free>
            return ERR_OK;
 8000e92:	e7a9      	b.n	8000de8 <lwiperf_tcp_recv+0x110>
 8000e94:	08014128 	.word	0x08014128
 8000e98:	08014218 	.word	0x08014218
 8000e9c:	08014150 	.word	0x08014150
 8000ea0:	01000080 	.word	0x01000080
 8000ea4:	08014250 	.word	0x08014250
 8000ea8:	0801426c 	.word	0x0801426c

08000eac <lwiperf_start_tcp_server_default>:
{
 8000eac:	b530      	push	{r4, r5, lr}
 8000eae:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8000eb0:	2400      	movs	r4, #0
{
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000eb6:	ad03      	add	r5, sp, #12
 8000eb8:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000ebc:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <lwiperf_start_tcp_server_default+0x2c>)
  lwiperf_state_tcp_t *state = NULL;
 8000ebe:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000ec0:	e9cd 4500 	strd	r4, r5, [sp]
 8000ec4:	f7ff fdfe 	bl	8000ac4 <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 8000ec8:	b910      	cbnz	r0, 8000ed0 <lwiperf_start_tcp_server_default+0x24>
    return state;
 8000eca:	9803      	ldr	r0, [sp, #12]
}
 8000ecc:	b005      	add	sp, #20
 8000ece:	bd30      	pop	{r4, r5, pc}
  return NULL;
 8000ed0:	4620      	mov	r0, r4
}
 8000ed2:	b005      	add	sp, #20
 8000ed4:	bd30      	pop	{r4, r5, pc}
 8000ed6:	bf00      	nop
 8000ed8:	08016fdc 	.word	0x08016fdc

08000edc <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 8000edc:	b5f0      	push	{r4, r5, r6, r7, lr}
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;

  memset(&settings, 0, sizeof(settings));
  switch (type) {
 8000ede:	2a01      	cmp	r2, #1
  lwiperf_state_tcp_t *state = NULL;
 8000ee0:	f04f 0400 	mov.w	r4, #0
{
 8000ee4:	b08d      	sub	sp, #52	@ 0x34
 8000ee6:	4615      	mov	r5, r2
 8000ee8:	4607      	mov	r7, r0
 8000eea:	460e      	mov	r6, r1
  lwiperf_state_tcp_t *state = NULL;
 8000eec:	9404      	str	r4, [sp, #16]
  memset(&settings, 0, sizeof(settings));
 8000eee:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000ef2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000ef6:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
{
 8000efa:	461c      	mov	r4, r3
  switch (type) {
 8000efc:	d045      	beq.n	8000f8a <lwiperf_start_tcp_client+0xae>
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	d004      	beq.n	8000f0c <lwiperf_start_tcp_client+0x30>
 8000f02:	b142      	cbz	r2, 8000f16 <lwiperf_start_tcp_client+0x3a>
    /* Do a bidirectional test individually */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
    break;
  default:
    /* invalid argument */
    return NULL;
 8000f04:	2600      	movs	r6, #0
      }
    }
    return state;
  }
  return NULL;
}
 8000f06:	4630      	mov	r0, r6
 8000f08:	b00d      	add	sp, #52	@ 0x34
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 8000f0c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8000f10:	f00a fbc2 	bl	800b698 <lwip_htonl>
 8000f14:	9006      	str	r0, [sp, #24]
  settings.num_threads = htonl(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f00a fbbe 	bl	800b698 <lwip_htonl>
 8000f1c:	9007      	str	r0, [sp, #28]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 8000f1e:	f241 3089 	movw	r0, #5001	@ 0x1389
 8000f22:	f00a fbb9 	bl	800b698 <lwip_htonl>
 8000f26:	9008      	str	r0, [sp, #32]
  settings.amount = htonl((u32_t)-1000);
 8000f28:	4832      	ldr	r0, [pc, #200]	@ (8000ff4 <lwiperf_start_tcp_client+0x118>)
 8000f2a:	f00a fbb5 	bl	800b698 <lwip_htonl>
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000f2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  settings.amount = htonl((u32_t)-1000);
 8000f30:	900b      	str	r0, [sp, #44]	@ 0x2c
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000f32:	aa06      	add	r2, sp, #24
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	ab04      	add	r3, sp, #16
 8000f38:	4631      	mov	r1, r6
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	4623      	mov	r3, r4
 8000f44:	f7ff fe0e 	bl	8000b64 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d1db      	bne.n	8000f04 <lwiperf_start_tcp_client+0x28>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000f4c:	9e04      	ldr	r6, [sp, #16]
 8000f4e:	b30e      	cbz	r6, 8000f94 <lwiperf_start_tcp_client+0xb8>
    if (type != LWIPERF_CLIENT) {
 8000f50:	2d00      	cmp	r5, #0
 8000f52:	d0d8      	beq.n	8000f06 <lwiperf_start_tcp_client+0x2a>
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000f54:	ab05      	add	r3, sp, #20
      lwiperf_state_tcp_t *server = NULL;
 8000f56:	2700      	movs	r7, #0
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000f58:	6930      	ldr	r0, [r6, #16]
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000f62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8000f64:	9600      	str	r6, [sp, #0]
      lwiperf_state_tcp_t *server = NULL;
 8000f66:	9705      	str	r7, [sp, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000f68:	f7ff fdac 	bl	8000ac4 <lwiperf_start_tcp_server_impl.constprop.0>
      if (ret != ERR_OK) {
 8000f6c:	b9e0      	cbnz	r0, 8000fa8 <lwiperf_start_tcp_client+0xcc>
      server->specific_remote = 1;
 8000f6e:	9b05      	ldr	r3, [sp, #20]
 8000f70:	2201      	movs	r2, #1
      if (type == LWIPERF_TRADEOFF) {
 8000f72:	2d02      	cmp	r5, #2
}
 8000f74:	4630      	mov	r0, r6
      server->specific_remote = 1;
 8000f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 8000f7a:	6931      	ldr	r1, [r6, #16]
 8000f7c:	6849      	ldr	r1, [r1, #4]
        server->client_tradeoff_mode = 1;
 8000f7e:	bf08      	it	eq
 8000f80:	f883 2022 	strbeq.w	r2, [r3, #34]	@ 0x22
      server->remote_addr = state->conn_pcb->remote_ip;
 8000f84:	6459      	str	r1, [r3, #68]	@ 0x44
}
 8000f86:	b00d      	add	sp, #52	@ 0x34
 8000f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 8000f8a:	481b      	ldr	r0, [pc, #108]	@ (8000ff8 <lwiperf_start_tcp_client+0x11c>)
 8000f8c:	f00a fb84 	bl	800b698 <lwip_htonl>
 8000f90:	9006      	str	r0, [sp, #24]
    break;
 8000f92:	e7c0      	b.n	8000f16 <lwiperf_start_tcp_client+0x3a>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <lwiperf_start_tcp_client+0x120>)
 8000f96:	f240 3216 	movw	r2, #790	@ 0x316
 8000f9a:	4919      	ldr	r1, [pc, #100]	@ (8001000 <lwiperf_start_tcp_client+0x124>)
 8000f9c:	4819      	ldr	r0, [pc, #100]	@ (8001004 <lwiperf_start_tcp_client+0x128>)
 8000f9e:	f011 ffa7 	bl	8012ef0 <iprintf>
    if (type != LWIPERF_CLIENT) {
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d0af      	beq.n	8000f06 <lwiperf_start_tcp_client+0x2a>
 8000fa6:	e7d5      	b.n	8000f54 <lwiperf_start_tcp_client+0x78>
void
lwiperf_abort(void *lwiperf_session)
{
  lwiperf_state_base_t *i, *dealloc, *last = NULL;

  LWIP_ASSERT_CORE_LOCKED();
 8000fa8:	f006 f9c0 	bl	800732c <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <lwiperf_start_tcp_client+0x12c>)
 8000fae:	681d      	ldr	r5, [r3, #0]
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d0a7      	beq.n	8000f04 <lwiperf_start_tcp_client+0x28>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000fb4:	42ae      	cmp	r6, r5
        last->next = i;
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
    } else {
      last = i;
      i = i->next;
 8000fb6:	682c      	ldr	r4, [r5, #0]
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000fb8:	d00d      	beq.n	8000fd6 <lwiperf_start_tcp_client+0xfa>
 8000fba:	68ab      	ldr	r3, [r5, #8]
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d00a      	beq.n	8000fd6 <lwiperf_start_tcp_client+0xfa>
 8000fc0:	462f      	mov	r7, r5
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d09e      	beq.n	8000f04 <lwiperf_start_tcp_client+0x28>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000fc6:	42a6      	cmp	r6, r4
      i = i->next;
 8000fc8:	6823      	ldr	r3, [r4, #0]
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000fca:	4625      	mov	r5, r4
 8000fcc:	d00f      	beq.n	8000fee <lwiperf_start_tcp_client+0x112>
      i = i->next;
 8000fce:	461c      	mov	r4, r3
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000fd0:	68ab      	ldr	r3, [r5, #8]
 8000fd2:	429e      	cmp	r6, r3
 8000fd4:	d1f4      	bne.n	8000fc0 <lwiperf_start_tcp_client+0xe4>
      if (last != NULL) {
 8000fd6:	b13f      	cbz	r7, 8000fe8 <lwiperf_start_tcp_client+0x10c>
        last->next = i;
 8000fd8:	4628      	mov	r0, r5
 8000fda:	4625      	mov	r5, r4
 8000fdc:	603c      	str	r4, [r7, #0]
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000fde:	f00a fc15 	bl	800b80c <mem_free>
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000fe2:	2c00      	cmp	r4, #0
 8000fe4:	d1e6      	bne.n	8000fb4 <lwiperf_start_tcp_client+0xd8>
 8000fe6:	e78d      	b.n	8000f04 <lwiperf_start_tcp_client+0x28>
 8000fe8:	4628      	mov	r0, r5
 8000fea:	4625      	mov	r5, r4
 8000fec:	e7f7      	b.n	8000fde <lwiperf_start_tcp_client+0x102>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000fee:	4635      	mov	r5, r6
      i = i->next;
 8000ff0:	461c      	mov	r4, r3
 8000ff2:	e7f1      	b.n	8000fd8 <lwiperf_start_tcp_client+0xfc>
 8000ff4:	fffffc18 	.word	0xfffffc18
 8000ff8:	80000001 	.word	0x80000001
 8000ffc:	08014128 	.word	0x08014128
 8001000:	0801427c 	.word	0x0801427c
 8001004:	08014150 	.word	0x08014150
 8001008:	240000b4 	.word	0x240000b4

0800100c <lwiperf_start_tcp_client_default>:
{
 800100c:	b510      	push	{r4, lr}
 800100e:	4614      	mov	r4, r2
 8001010:	b082      	sub	sp, #8
 8001012:	460b      	mov	r3, r1
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 8001014:	2200      	movs	r2, #0
 8001016:	f241 3189 	movw	r1, #5001	@ 0x1389
 800101a:	9400      	str	r4, [sp, #0]
 800101c:	f7ff ff5e 	bl	8000edc <lwiperf_start_tcp_client>
}
 8001020:	b002      	add	sp, #8
 8001022:	bd10      	pop	{r4, pc}

08001024 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001024:	b500      	push	{lr}
 8001026:	b083      	sub	sp, #12
	/* init code for LWIP */
	MX_LWIP_Init();
 8001028:	f005 fdc2 	bl	8006bb0 <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */

	LOCK_TCPIP_CORE();
 800102c:	f006 f8f6 	bl	800721c <sys_lock_tcpip_core>
	lwiperf_start_tcp_server_default(NULL, NULL);
 8001030:	2100      	movs	r1, #0
 8001032:	4608      	mov	r0, r1
 8001034:	f7ff ff3a 	bl	8000eac <lwiperf_start_tcp_server_default>

	ip4_addr_t remote_addr;
	IP4_ADDR(&remote_addr, 192, 168, 0, 1);
	lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8001038:	2200      	movs	r2, #0
	IP4_ADDR(&remote_addr, 192, 168, 0, 1);
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <StartDefaultTask+0x30>)
	lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 800103c:	a801      	add	r0, sp, #4
 800103e:	4611      	mov	r1, r2
	IP4_ADDR(&remote_addr, 192, 168, 0, 1);
 8001040:	9301      	str	r3, [sp, #4]
	lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8001042:	f7ff ffe3 	bl	800100c <lwiperf_start_tcp_client_default>
	UNLOCK_TCPIP_CORE();
 8001046:	f006 f967 	bl	8007318 <sys_unlock_tcpip_core>

	/* Infinite loop */
	for (;;) {
		osDelay(10);
 800104a:	200a      	movs	r0, #10
 800104c:	f006 fa30 	bl	80074b0 <osDelay>
	for (;;) {
 8001050:	e7fb      	b.n	800104a <StartDefaultTask+0x26>
 8001052:	bf00      	nop
 8001054:	0100a8c0 	.word	0x0100a8c0

08001058 <StartTaskMQTT>:
 * @brief Function implementing the MQTT thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskMQTT */
void StartTaskMQTT(void *argument) {
 8001058:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartTaskMQTT */

	tcpserver_init();
 800105a:	f000 fe87 	bl	8001d6c <tcpserver_init>
//	message.qos = 0;
//	message.retained = 0;
//	MQTTPublish(&mqttClient, "sensors/temperature", &message);

	for (;;) {
		osDelay(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f006 fa26 	bl	80074b0 <osDelay>
	for (;;) {
 8001064:	e7fb      	b.n	800105e <StartTaskMQTT+0x6>
 8001066:	bf00      	nop

08001068 <StartTaskModbus>:
 * @brief Function implementing the ModbusTask tahread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskModbus */
void StartTaskModbus(void *argument) {
 8001068:	b580      	push	{r7, lr}
 800106a:	4d12      	ldr	r5, [pc, #72]	@ (80010b4 <StartTaskModbus+0x4c>)
 800106c:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 80010c8 <StartTaskModbus+0x60>
 8001070:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 80010cc <StartTaskModbus+0x64>
//			if (rx_request_complete) {
		osDelay(2000);

			//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);

				HAL_UART_Transmit(&huart1, request_array_rx, 8, 100);
 8001074:	4f10      	ldr	r7, [pc, #64]	@ (80010b8 <StartTaskModbus+0x50>)
 8001076:	4c11      	ldr	r4, [pc, #68]	@ (80010bc <StartTaskModbus+0x54>)
//				timer_request_start = 0;
//			}

			//	HAL_UART_Receive_IT(&huart1, response_array_rx, size_resp);

			HAL_UART_Receive_IT(&huart1, &response_byte, 1);
 8001078:	4e11      	ldr	r6, [pc, #68]	@ (80010c0 <StartTaskModbus+0x58>)
	HAL_TIM_Base_Start_IT(&htim15);
 800107a:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <StartTaskModbus+0x5c>)
 800107c:	f004 f9b6 	bl	80053ec <HAL_TIM_Base_Start_IT>
		osDelay(2000);
 8001080:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001084:	f006 fa14 	bl	80074b0 <osDelay>
				HAL_UART_Transmit(&huart1, request_array_rx, 8, 100);
 8001088:	2364      	movs	r3, #100	@ 0x64
 800108a:	4639      	mov	r1, r7
 800108c:	2208      	movs	r2, #8
 800108e:	4620      	mov	r0, r4
 8001090:	f005 fb3a 	bl	8006708 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart1, &response_byte, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	4631      	mov	r1, r6
 8001098:	4620      	mov	r0, r4
 800109a:	f005 fcc3 	bl	8006a24 <HAL_UART_Receive_IT>


			if (rx_response_complete) {
 800109e:	782a      	ldrb	r2, [r5, #0]

				rx_response_complete = 0;
 80010a0:	2300      	movs	r3, #0
			if (rx_response_complete) {
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d0ec      	beq.n	8001080 <StartTaskModbus+0x18>
				rx_response_complete = 0;
 80010a6:	702b      	strb	r3, [r5, #0]
				index_response_array_rx = 0;
 80010a8:	f889 3000 	strb.w	r3, [r9]
				timer_response_start = 0;
 80010ac:	f888 3000 	strb.w	r3, [r8]
 80010b0:	e7e6      	b.n	8001080 <StartTaskModbus+0x18>
 80010b2:	bf00      	nop
 80010b4:	240000f2 	.word	0x240000f2
 80010b8:	24000000 	.word	0x24000000
 80010bc:	24000190 	.word	0x24000190
 80010c0:	240000b9 	.word	0x240000b9
 80010c4:	24000220 	.word	0x24000220
 80010c8:	240000b8 	.word	0x240000b8
 80010cc:	240000f0 	.word	0x240000f0

080010d0 <SystemClock_Config>:
void SystemClock_Config(void) {
 80010d0:	b530      	push	{r4, r5, lr}
 80010d2:	b09f      	sub	sp, #124	@ 0x7c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010d4:	224c      	movs	r2, #76	@ 0x4c
 80010d6:	2100      	movs	r1, #0
 80010d8:	a80a      	add	r0, sp, #40	@ 0x28
 80010da:	f011 ffa8 	bl	801302e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010de:	2220      	movs	r2, #32
 80010e0:	2100      	movs	r1, #0
 80010e2:	a802      	add	r0, sp, #8
 80010e4:	f011 ffa3 	bl	801302e <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f002 fb9f 	bl	800382c <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ee:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <SystemClock_Config+0xb4>)
 80010f0:	2100      	movs	r1, #0
 80010f2:	4a25      	ldr	r2, [pc, #148]	@ (8001188 <SystemClock_Config+0xb8>)
 80010f4:	9101      	str	r1, [sp, #4]
 80010f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010f8:	f021 0101 	bic.w	r1, r1, #1
 80010fc:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80010fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	6993      	ldr	r3, [r2, #24]
 8001108:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	6993      	ldr	r3, [r2, #24]
 8001110:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	9b01      	ldr	r3, [sp, #4]
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001118:	6993      	ldr	r3, [r2, #24]
 800111a:	0499      	lsls	r1, r3, #18
 800111c:	d5fc      	bpl.n	8001118 <SystemClock_Config+0x48>
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111e:	2300      	movs	r3, #0
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001120:	2201      	movs	r2, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001122:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001124:	2540      	movs	r5, #64	@ 0x40
 8001126:	920d      	str	r2, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001128:	2220      	movs	r2, #32
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800112a:	9314      	str	r3, [sp, #80]	@ 0x50
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800112c:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112e:	940a      	str	r4, [sp, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	9413      	str	r4, [sp, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001132:	9417      	str	r4, [sp, #92]	@ 0x5c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001134:	950e      	str	r5, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001136:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLN = 400;
 800113a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800113e:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001142:	2304      	movs	r3, #4
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001144:	e9cd 4418 	strd	r4, r4, [sp, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001148:	931a      	str	r3, [sp, #104]	@ 0x68
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800114a:	f002 fc05 	bl	8003958 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	b108      	cbz	r0, 8001156 <SystemClock_Config+0x86>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001152:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001154:	e7fe      	b.n	8001154 <SystemClock_Config+0x84>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001156:	223f      	movs	r2, #63	@ 0x3f
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800115a:	2308      	movs	r3, #8
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800115c:	4621      	mov	r1, r4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800115e:	9202      	str	r2, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2203      	movs	r2, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001162:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001164:	9509      	str	r5, [sp, #36]	@ 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001166:	9203      	str	r2, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001168:	e9cd 3505 	strd	r3, r5, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800116c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001170:	e9cd 5307 	strd	r5, r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001174:	f002 fee6 	bl	8003f44 <HAL_RCC_ClockConfig>
 8001178:	b108      	cbz	r0, 800117e <SystemClock_Config+0xae>
 800117a:	b672      	cpsid	i
	while (1) {
 800117c:	e7fe      	b.n	800117c <SystemClock_Config+0xac>
}
 800117e:	b01f      	add	sp, #124	@ 0x7c
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	58000400 	.word	0x58000400
 8001188:	58024800 	.word	0x58024800

0800118c <main>:
int main(void) {
 800118c:	b500      	push	{lr}
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 800118e:	2400      	movs	r4, #0
int main(void) {
 8001190:	b091      	sub	sp, #68	@ 0x44
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001192:	2501      	movs	r5, #1
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8001194:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8001198:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	HAL_MPU_Disable();
 800119c:	f000 ffa2 	bl	80020e4 <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011a0:	f248 721f 	movw	r2, #34591	@ 0x871f
 80011a4:	f240 1301 	movw	r3, #257	@ 0x101
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011a8:	a80b      	add	r0, sp, #44	@ 0x2c
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011aa:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80011b0:	e9cd 420c 	strd	r4, r2, [sp, #48]	@ 0x30
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011b4:	f000 ffb4 	bl	8002120 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.BaseAddress = 0x30020000;
 80011b8:	4aba      	ldr	r2, [pc, #744]	@ (80014a4 <main+0x318>)
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80011ba:	4bbb      	ldr	r3, [pc, #748]	@ (80014a8 <main+0x31c>)
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011bc:	a80b      	add	r0, sp, #44	@ 0x2c
	MPU_InitStruct.BaseAddress = 0x30020000;
 80011be:	920c      	str	r2, [sp, #48]	@ 0x30
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80011c0:	930d      	str	r3, [sp, #52]	@ 0x34
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80011c2:	f88d 502d 	strb.w	r5, [sp, #45]	@ 0x2d
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80011c6:	f88d 4039 	strb.w	r4, [sp, #57]	@ 0x39
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011ca:	f000 ffa9 	bl	8002120 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.BaseAddress = 0x30040000;
 80011ce:	4bb7      	ldr	r3, [pc, #732]	@ (80014ac <main+0x320>)
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011d0:	2202      	movs	r2, #2
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011d2:	a80b      	add	r0, sp, #44	@ 0x2c
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011d4:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
	MPU_InitStruct.BaseAddress = 0x30040000;
 80011d8:	930c      	str	r3, [sp, #48]	@ 0x30
	MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80011da:	2308      	movs	r3, #8
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011dc:	f88d 202d 	strb.w	r2, [sp, #45]	@ 0x2d
	MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80011e0:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011e4:	f88d 5039 	strb.w	r5, [sp, #57]	@ 0x39
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80011e8:	f88d 503b 	strb.w	r5, [sp, #59]	@ 0x3b
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011ec:	f000 ff98 	bl	8002120 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011f0:	2004      	movs	r0, #4
 80011f2:	f000 ff85 	bl	8002100 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011f6:	4aae      	ldr	r2, [pc, #696]	@ (80014b0 <main+0x324>)
 80011f8:	6953      	ldr	r3, [r2, #20]
 80011fa:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80011fe:	d111      	bne.n	8001224 <main+0x98>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001204:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001208:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800120c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001214:	6953      	ldr	r3, [r2, #20]
 8001216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800121c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001220:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001224:	48a2      	ldr	r0, [pc, #648]	@ (80014b0 <main+0x324>)
 8001226:	6943      	ldr	r3, [r0, #20]
 8001228:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800122c:	d124      	bne.n	8001278 <main+0xec>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800122e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001232:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001236:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800123a:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800123e:	f3c3 344e 	ubfx	r4, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001242:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
 8001246:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001248:	ea04 0105 	and.w	r1, r4, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800124c:	4663      	mov	r3, ip
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800124e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001252:	3b01      	subs	r3, #1
 8001254:	1c5e      	adds	r6, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001256:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 800125a:	d1f8      	bne.n	800124e <main+0xc2>
    } while(sets-- != 0U);
 800125c:	3c20      	subs	r4, #32
 800125e:	f114 0f20 	cmn.w	r4, #32
 8001262:	d1f1      	bne.n	8001248 <main+0xbc>
 8001264:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001268:	6943      	ldr	r3, [r0, #20]
 800126a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126e:	6143      	str	r3, [r0, #20]
 8001270:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001274:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001278:	2400      	movs	r4, #0
	HAL_Init();
 800127a:	f000 fe85 	bl	8001f88 <HAL_Init>
	SystemClock_Config();
 800127e:	f7ff ff27 	bl	80010d0 <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b8c      	ldr	r3, [pc, #560]	@ (80014b4 <main+0x328>)
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001284:	940f      	str	r4, [sp, #60]	@ 0x3c
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001286:	2101      	movs	r1, #1
 8001288:	4622      	mov	r2, r4
	GPIO_InitStruct.Pin = LD1_Pin;
 800128a:	2601      	movs	r6, #1
	htim3.Instance = TIM3;
 800128c:	4d8a      	ldr	r5, [pc, #552]	@ (80014b8 <main+0x32c>)
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800128e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8001292:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800129a:	f040 0004 	orr.w	r0, r0, #4
 800129e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80012a2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80012a6:	f000 0004 	and.w	r0, r0, #4
 80012aa:	9001      	str	r0, [sp, #4]
 80012ac:	9801      	ldr	r0, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80012b2:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80012b6:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80012ba:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80012be:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80012c2:	9002      	str	r0, [sp, #8]
 80012c4:	9802      	ldr	r0, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80012ca:	4308      	orrs	r0, r1
 80012cc:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80012d0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80012d4:	4008      	ands	r0, r1
 80012d6:	9003      	str	r0, [sp, #12]
 80012d8:	9803      	ldr	r0, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80012de:	f040 0002 	orr.w	r0, r0, #2
 80012e2:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80012e6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80012ea:	f000 0002 	and.w	r0, r0, #2
 80012ee:	9004      	str	r0, [sp, #16]
 80012f0:	9804      	ldr	r0, [sp, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80012f6:	f040 0008 	orr.w	r0, r0, #8
 80012fa:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80012fe:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8001302:	f000 0008 	and.w	r0, r0, #8
 8001306:	9005      	str	r0, [sp, #20]
 8001308:	9805      	ldr	r0, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800130a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800130e:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8001312:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8001316:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800131a:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 800131e:	9006      	str	r0, [sp, #24]
 8001320:	9806      	ldr	r0, [sp, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8001326:	f040 0010 	orr.w	r0, r0, #16
 800132a:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001332:	4862      	ldr	r0, [pc, #392]	@ (80014bc <main+0x330>)
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	9307      	str	r3, [sp, #28]
 800133a:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800133c:	f002 fa72 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,
 8001340:	4622      	mov	r2, r4
 8001342:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8001346:	485e      	ldr	r0, [pc, #376]	@ (80014c0 <main+0x334>)
 8001348:	f002 fa6c 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134c:	4622      	mov	r2, r4
 800134e:	2102      	movs	r1, #2
 8001350:	485c      	ldr	r0, [pc, #368]	@ (80014c4 <main+0x338>)
 8001352:	f002 fa67 	bl	8003824 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 8001356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800135a:	a90b      	add	r1, sp, #44	@ 0x2c
 800135c:	485a      	ldr	r0, [pc, #360]	@ (80014c8 <main+0x33c>)
	GPIO_InitStruct.Pin = B1_Pin;
 800135e:	930b      	str	r3, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001364:	f002 f91c 	bl	80035a0 <HAL_GPIO_Init>
	HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001368:	a90b      	add	r1, sp, #44	@ 0x2c
 800136a:	4854      	ldr	r0, [pc, #336]	@ (80014bc <main+0x330>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	e9cd 660b 	strd	r6, r6, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001374:	f002 f914 	bl	80035a0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | GPIO_PIN_4 | GPIO_PIN_5
 8001378:	f44f 638e 	mov.w	r3, #1136	@ 0x470
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137c:	a90b      	add	r1, sp, #44	@ 0x2c
 800137e:	4850      	ldr	r0, [pc, #320]	@ (80014c0 <main+0x334>)
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | GPIO_PIN_4 | GPIO_PIN_5
 8001380:	930b      	str	r3, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	940e      	str	r4, [sp, #56]	@ 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	e9cd 640c 	strd	r6, r4, [sp, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	f002 f90a 	bl	80035a0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800138c:	2280      	movs	r2, #128	@ 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001392:	a90b      	add	r1, sp, #44	@ 0x2c
 8001394:	484d      	ldr	r0, [pc, #308]	@ (80014cc <main+0x340>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	940d      	str	r4, [sp, #52]	@ 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800139c:	f002 f900 	bl	80035a0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 80013a0:	2302      	movs	r3, #2
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013a2:	4848      	ldr	r0, [pc, #288]	@ (80014c4 <main+0x338>)
 80013a4:	a90b      	add	r1, sp, #44	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	e9cd 360b 	strd	r3, r6, [sp, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f002 f8f7 	bl	80035a0 <HAL_GPIO_Init>
	htim3.Instance = TIM3;
 80013b2:	4a47      	ldr	r2, [pc, #284]	@ (80014d0 <main+0x344>)
	htim3.Init.Period = 65535;
 80013b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80013b8:	4628      	mov	r0, r5
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013ba:	9408      	str	r4, [sp, #32]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	612c      	str	r4, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	61ac      	str	r4, [r5, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013c0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80013c4:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
	htim3.Init.Prescaler = 0;
 80013c8:	e9c5 2400 	strd	r2, r4, [r5]
	htim3.Init.Period = 65535;
 80013cc:	e9c5 4302 	strd	r4, r3, [r5, #8]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013d0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80013d4:	f004 fa50 	bl	8005878 <HAL_TIM_Base_Init>
 80013d8:	b108      	cbz	r0, 80013de <main+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 80013da:	b672      	cpsid	i
	while (1) {
 80013dc:	e7fe      	b.n	80013dc <main+0x250>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013de:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80013e2:	a90b      	add	r1, sp, #44	@ 0x2c
 80013e4:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	960b      	str	r6, [sp, #44]	@ 0x2c
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80013e8:	f004 f852 	bl	8005490 <HAL_TIM_ConfigClockSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b108      	cbz	r0, 80013f4 <main+0x268>
 80013f0:	b672      	cpsid	i
	while (1) {
 80013f2:	e7fe      	b.n	80013f2 <main+0x266>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013f4:	4628      	mov	r0, r5
 80013f6:	a908      	add	r1, sp, #32
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	930a      	str	r3, [sp, #40]	@ 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013fc:	f004 fa6e 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 8001400:	b108      	cbz	r0, 8001406 <main+0x27a>
 8001402:	b672      	cpsid	i
	while (1) {
 8001404:	e7fe      	b.n	8001404 <main+0x278>
	htim15.Instance = TIM15;
 8001406:	4c33      	ldr	r4, [pc, #204]	@ (80014d4 <main+0x348>)
	htim15.Init.Prescaler = 64;
 8001408:	2340      	movs	r3, #64	@ 0x40
 800140a:	4a33      	ldr	r2, [pc, #204]	@ (80014d8 <main+0x34c>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800140c:	900a      	str	r0, [sp, #40]	@ 0x28
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	60a0      	str	r0, [r4, #8]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001410:	61a0      	str	r0, [r4, #24]
	htim15.Init.Prescaler = 64;
 8001412:	e9c4 2300 	strd	r2, r3, [r4]
	htim15.Init.Period = 999;
 8001416:	f240 33e7 	movw	r3, #999	@ 0x3e7
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800141a:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800141e:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001422:	e9cd 0008 	strd	r0, r0, [sp, #32]
	htim15.Init.RepetitionCounter = 0;
 8001426:	e9c4 0004 	strd	r0, r0, [r4, #16]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 800142a:	4620      	mov	r0, r4
	htim15.Init.Period = 999;
 800142c:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 800142e:	f004 fa23 	bl	8005878 <HAL_TIM_Base_Init>
 8001432:	b108      	cbz	r0, 8001438 <main+0x2ac>
 8001434:	b672      	cpsid	i
	while (1) {
 8001436:	e7fe      	b.n	8001436 <main+0x2aa>
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8001438:	a90b      	add	r1, sp, #44	@ 0x2c
 800143a:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	960b      	str	r6, [sp, #44]	@ 0x2c
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 800143e:	f004 f827 	bl	8005490 <HAL_TIM_ConfigClockSource>
 8001442:	4603      	mov	r3, r0
 8001444:	b108      	cbz	r0, 800144a <main+0x2be>
 8001446:	b672      	cpsid	i
	while (1) {
 8001448:	e7fe      	b.n	8001448 <main+0x2bc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 800144a:	a908      	add	r1, sp, #32
 800144c:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	930a      	str	r3, [sp, #40]	@ 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8001452:	f004 fa43 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 8001456:	4603      	mov	r3, r0
 8001458:	b108      	cbz	r0, 800145e <main+0x2d2>
 800145a:	b672      	cpsid	i
	while (1) {
 800145c:	e7fe      	b.n	800145c <main+0x2d0>
	huart1.Instance = USART1;
 800145e:	4c1f      	ldr	r4, [pc, #124]	@ (80014dc <main+0x350>)
	huart1.Init.BaudRate = 115200;
 8001460:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
	huart1.Instance = USART1;
 8001464:	481e      	ldr	r0, [pc, #120]	@ (80014e0 <main+0x354>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001466:	220c      	movs	r2, #12
	huart1.Init.BaudRate = 115200;
 8001468:	e884 000b 	stmia.w	r4, {r0, r1, r3}
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800146c:	4620      	mov	r0, r4
	huart1.Init.Parity = UART_PARITY_NONE;
 800146e:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	e9c4 2305 	strd	r2, r3, [r4, #20]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	e9c4 3307 	strd	r3, r3, [r4, #28]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147a:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800147e:	f005 f9ef 	bl	8006860 <HAL_UART_Init>
 8001482:	4601      	mov	r1, r0
 8001484:	b108      	cbz	r0, 800148a <main+0x2fe>
 8001486:	b672      	cpsid	i
	while (1) {
 8001488:	e7fe      	b.n	8001488 <main+0x2fc>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800148a:	4620      	mov	r0, r4
 800148c:	f005 fb3e 	bl	8006b0c <HAL_UARTEx_SetTxFifoThreshold>
 8001490:	4601      	mov	r1, r0
 8001492:	b108      	cbz	r0, 8001498 <main+0x30c>
 8001494:	b672      	cpsid	i
	while (1) {
 8001496:	e7fe      	b.n	8001496 <main+0x30a>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001498:	4620      	mov	r0, r4
 800149a:	f005 fb5f 	bl	8006b5c <HAL_UARTEx_SetRxFifoThreshold>
 800149e:	b308      	cbz	r0, 80014e4 <main+0x358>
 80014a0:	b672      	cpsid	i
	while (1) {
 80014a2:	e7fe      	b.n	80014a2 <main+0x316>
 80014a4:	30020000 	.word	0x30020000
 80014a8:	03010010 	.word	0x03010010
 80014ac:	30040000 	.word	0x30040000
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	58024400 	.word	0x58024400
 80014b8:	2400026c 	.word	0x2400026c
 80014bc:	58020400 	.word	0x58020400
 80014c0:	58020c00 	.word	0x58020c00
 80014c4:	58021000 	.word	0x58021000
 80014c8:	58020800 	.word	0x58020800
 80014cc:	58021800 	.word	0x58021800
 80014d0:	40000400 	.word	0x40000400
 80014d4:	24000220 	.word	0x24000220
 80014d8:	40014000 	.word	0x40014000
 80014dc:	24000190 	.word	0x24000190
 80014e0:	40011000 	.word	0x40011000
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80014e4:	4620      	mov	r0, r4
 80014e6:	f005 faf3 	bl	8006ad0 <HAL_UARTEx_DisableFifoMode>
 80014ea:	b108      	cbz	r0, 80014f0 <main+0x364>
 80014ec:	b672      	cpsid	i
	while (1) {
 80014ee:	e7fe      	b.n	80014ee <main+0x362>
	huart3.Instance = USART3;
 80014f0:	4c24      	ldr	r4, [pc, #144]	@ (8001584 <main+0x3f8>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	2300      	movs	r3, #0
	huart3.Init.BaudRate = 115200;
 80014f4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
	huart3.Instance = USART3;
 80014f8:	4823      	ldr	r0, [pc, #140]	@ (8001588 <main+0x3fc>)
	huart3.Init.Mode = UART_MODE_TX_RX;
 80014fa:	220c      	movs	r2, #12
	huart3.Init.BaudRate = 115200;
 80014fc:	e884 000b 	stmia.w	r4, {r0, r1, r3}
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001500:	4620      	mov	r0, r4
	huart3.Init.Parity = UART_PARITY_NONE;
 8001502:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	e9c4 2305 	strd	r2, r3, [r4, #20]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	e9c4 3307 	strd	r3, r3, [r4, #28]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150e:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001512:	f005 f9a5 	bl	8006860 <HAL_UART_Init>
 8001516:	4601      	mov	r1, r0
 8001518:	b108      	cbz	r0, 800151e <main+0x392>
 800151a:	b672      	cpsid	i
	while (1) {
 800151c:	e7fe      	b.n	800151c <main+0x390>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 800151e:	4620      	mov	r0, r4
 8001520:	f005 faf4 	bl	8006b0c <HAL_UARTEx_SetTxFifoThreshold>
 8001524:	4601      	mov	r1, r0
 8001526:	b108      	cbz	r0, 800152c <main+0x3a0>
 8001528:	b672      	cpsid	i
	while (1) {
 800152a:	e7fe      	b.n	800152a <main+0x39e>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800152c:	4620      	mov	r0, r4
 800152e:	f005 fb15 	bl	8006b5c <HAL_UARTEx_SetRxFifoThreshold>
 8001532:	b108      	cbz	r0, 8001538 <main+0x3ac>
 8001534:	b672      	cpsid	i
	while (1) {
 8001536:	e7fe      	b.n	8001536 <main+0x3aa>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001538:	4620      	mov	r0, r4
 800153a:	f005 fac9 	bl	8006ad0 <HAL_UARTEx_DisableFifoMode>
 800153e:	4604      	mov	r4, r0
 8001540:	b108      	cbz	r0, 8001546 <main+0x3ba>
 8001542:	b672      	cpsid	i
	while (1) {
 8001544:	e7fe      	b.n	8001544 <main+0x3b8>
	HAL_TIM_Base_Start_IT(&htim15);
 8001546:	4811      	ldr	r0, [pc, #68]	@ (800158c <main+0x400>)
 8001548:	f003 ff50 	bl	80053ec <HAL_TIM_Base_Start_IT>
	osKernelInitialize();
 800154c:	f005 ff36 	bl	80073bc <osKernelInitialize>
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001550:	4a0f      	ldr	r2, [pc, #60]	@ (8001590 <main+0x404>)
 8001552:	4621      	mov	r1, r4
 8001554:	480f      	ldr	r0, [pc, #60]	@ (8001594 <main+0x408>)
 8001556:	f005 ff65 	bl	8007424 <osThreadNew>
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <main+0x40c>)
	MQTTTaskHandle = osThreadNew(StartTaskMQTT, NULL, &MQTTTask_attributes);
 800155c:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <main+0x410>)
 800155e:	4621      	mov	r1, r4
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001560:	6018      	str	r0, [r3, #0]
	MQTTTaskHandle = osThreadNew(StartTaskMQTT, NULL, &MQTTTask_attributes);
 8001562:	480f      	ldr	r0, [pc, #60]	@ (80015a0 <main+0x414>)
 8001564:	f005 ff5e 	bl	8007424 <osThreadNew>
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <main+0x418>)
 800156a:	4605      	mov	r5, r0
	ModbusTaskHandle = osThreadNew(StartTaskModbus, NULL,
 800156c:	4a0e      	ldr	r2, [pc, #56]	@ (80015a8 <main+0x41c>)
 800156e:	4621      	mov	r1, r4
 8001570:	480e      	ldr	r0, [pc, #56]	@ (80015ac <main+0x420>)
	MQTTTaskHandle = osThreadNew(StartTaskMQTT, NULL, &MQTTTask_attributes);
 8001572:	601d      	str	r5, [r3, #0]
	ModbusTaskHandle = osThreadNew(StartTaskModbus, NULL,
 8001574:	f005 ff56 	bl	8007424 <osThreadNew>
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <main+0x424>)
 800157a:	6018      	str	r0, [r3, #0]
	osKernelStart();
 800157c:	f005 ff30 	bl	80073e0 <osKernelStart>
	while (1) {
 8001580:	e7fe      	b.n	8001580 <main+0x3f4>
 8001582:	bf00      	nop
 8001584:	24000100 	.word	0x24000100
 8001588:	40004800 	.word	0x40004800
 800158c:	24000220 	.word	0x24000220
 8001590:	08014938 	.word	0x08014938
 8001594:	08001025 	.word	0x08001025
 8001598:	240000fc 	.word	0x240000fc
 800159c:	08014914 	.word	0x08014914
 80015a0:	08001059 	.word	0x08001059
 80015a4:	240000f8 	.word	0x240000f8
 80015a8:	080148f0 	.word	0x080148f0
 80015ac:	08001069 	.word	0x08001069
 80015b0:	240000f4 	.word	0x240000f4

080015b4 <HAL_UART_RxCpltCallback>:
	if (huart->Instance == USART1) {
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <HAL_UART_RxCpltCallback+0x30>)
 80015b6:	6802      	ldr	r2, [r0, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d000      	beq.n	80015be <HAL_UART_RxCpltCallback+0xa>
 80015bc:	4770      	bx	lr
		response_array_rx[index_response_array_rx] = response_byte;
 80015be:	480a      	ldr	r0, [pc, #40]	@ (80015e8 <HAL_UART_RxCpltCallback+0x34>)
		timer_response_start = 1;
 80015c0:	2201      	movs	r2, #1
		response_array_rx[index_response_array_rx] = response_byte;
 80015c2:	490a      	ldr	r1, [pc, #40]	@ (80015ec <HAL_UART_RxCpltCallback+0x38>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015c4:	b410      	push	{r4}
		response_array_rx[index_response_array_rx] = response_byte;
 80015c6:	4c0a      	ldr	r4, [pc, #40]	@ (80015f0 <HAL_UART_RxCpltCallback+0x3c>)
 80015c8:	7803      	ldrb	r3, [r0, #0]
 80015ca:	f891 c000 	ldrb.w	ip, [r1]
 80015ce:	f804 c003 	strb.w	ip, [r4, r3]
		index_response_array_rx++;
 80015d2:	4413      	add	r3, r2
 80015d4:	7003      	strb	r3, [r0, #0]
		timer_response_start = 1;
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <HAL_UART_RxCpltCallback+0x40>)
		HAL_UART_Receive_IT(&huart1, &response_byte, 1);
 80015d8:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <HAL_UART_RxCpltCallback+0x44>)
		timer_response_start = 1;
 80015da:	701a      	strb	r2, [r3, #0]
}
 80015dc:	f85d 4b04 	ldr.w	r4, [sp], #4
		HAL_UART_Receive_IT(&huart1, &response_byte, 1);
 80015e0:	f005 ba20 	b.w	8006a24 <HAL_UART_Receive_IT>
 80015e4:	40011000 	.word	0x40011000
 80015e8:	240000b8 	.word	0x240000b8
 80015ec:	240000b9 	.word	0x240000b9
 80015f0:	240000bc 	.word	0x240000bc
 80015f4:	240000f0 	.word	0x240000f0
 80015f8:	24000190 	.word	0x24000190

080015fc <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim15) {
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015fe:	4298      	cmp	r0, r3
 8001600:	d004      	beq.n	800160c <HAL_TIM_PeriodElapsedCallback+0x10>
	if (htim->Instance == TIM6) {
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001604:	6802      	ldr	r2, [r0, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d01f      	beq.n	800164a <HAL_TIM_PeriodElapsedCallback+0x4e>
}
 800160a:	4770      	bx	lr
		if (timer_response_start) {
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_TIM_PeriodElapsedCallback+0x6c>)
			counter_response++;
 800160e:	4a17      	ldr	r2, [pc, #92]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x70>)
		if (timer_response_start) {
 8001610:	7819      	ldrb	r1, [r3, #0]
			counter_response++;
 8001612:	7813      	ldrb	r3, [r2, #0]
		if (timer_response_start) {
 8001614:	b111      	cbz	r1, 800161c <HAL_TIM_PeriodElapsedCallback+0x20>
			counter_response++;
 8001616:	3301      	adds	r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	7013      	strb	r3, [r2, #0]
		if (counter_response == 30) {
 800161c:	2b1e      	cmp	r3, #30
 800161e:	d016      	beq.n	800164e <HAL_TIM_PeriodElapsedCallback+0x52>
		if (timer_request_start) {
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x74>)
			counter_request++;
 8001622:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0x78>)
		if (timer_request_start) {
 8001624:	7819      	ldrb	r1, [r3, #0]
			counter_request++;
 8001626:	7813      	ldrb	r3, [r2, #0]
		if (timer_request_start) {
 8001628:	b111      	cbz	r1, 8001630 <HAL_TIM_PeriodElapsedCallback+0x34>
			counter_request++;
 800162a:	3301      	adds	r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	7013      	strb	r3, [r2, #0]
		if (counter_request == 30) {
 8001630:	2b1e      	cmp	r3, #30
 8001632:	d1e6      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x6>
			rx_request_complete = 1;
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <HAL_TIM_PeriodElapsedCallback+0x7c>)
			counter_request = 0;
 8001636:	f04f 0c00 	mov.w	ip, #0
			rx_request_complete = 1;
 800163a:	2101      	movs	r1, #1
			counter_request = 0;
 800163c:	f882 c000 	strb.w	ip, [r2]
			rx_request_complete = 1;
 8001640:	7019      	strb	r1, [r3, #0]
	if (htim->Instance == TIM6) {
 8001642:	6802      	ldr	r2, [r0, #0]
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001646:	429a      	cmp	r2, r3
 8001648:	d1df      	bne.n	800160a <HAL_TIM_PeriodElapsedCallback+0xe>
		HAL_IncTick();
 800164a:	f000 bccd 	b.w	8001fe8 <HAL_IncTick>
			counter_response = 0;
 800164e:	f04f 0c00 	mov.w	ip, #0
			rx_response_complete = 1;
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001654:	2101      	movs	r1, #1
			counter_response = 0;
 8001656:	f882 c000 	strb.w	ip, [r2]
			rx_response_complete = 1;
 800165a:	7019      	strb	r1, [r3, #0]
 800165c:	e7e0      	b.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x24>
 800165e:	bf00      	nop
 8001660:	24000220 	.word	0x24000220
 8001664:	40001000 	.word	0x40001000
 8001668:	240000f0 	.word	0x240000f0
 800166c:	240000ee 	.word	0x240000ee
 8001670:	240000f1 	.word	0x240000f1
 8001674:	240000ef 	.word	0x240000ef
 8001678:	240000f3 	.word	0x240000f3
 800167c:	240000f2 	.word	0x240000f2

08001680 <Error_Handler>:
 8001680:	b672      	cpsid	i
	while (1) {
 8001682:	e7fe      	b.n	8001682 <Error_Handler+0x2>

08001684 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_MspInit+0x40>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	210f      	movs	r1, #15
 800168a:	f06f 0001 	mvn.w	r0, #1
{
 800168e:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001690:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
{
 8001694:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	f044 0402 	orr.w	r4, r4, #2
 800169a:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
 800169e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016aa:	f000 fcd1 	bl	8002050 <HAL_NVIC_SetPriority>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ae:	4906      	ldr	r1, [pc, #24]	@ (80016c8 <HAL_MspInit+0x44>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b0:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_MspInit+0x48>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b8:	4002      	ands	r2, r0
  reg_value  =  (reg_value                                   |
 80016ba:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 80016bc:	60cb      	str	r3, [r1, #12]

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
  /* USER CODE END MspInit 1 */
}
 80016be:	b002      	add	sp, #8
 80016c0:	bd10      	pop	{r4, pc}
 80016c2:	bf00      	nop
 80016c4:	58024400 	.word	0x58024400
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	05fa0000 	.word	0x05fa0000

080016d0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80016d0:	4a18      	ldr	r2, [pc, #96]	@ (8001734 <HAL_TIM_Base_MspInit+0x64>)
 80016d2:	6803      	ldr	r3, [r0, #0]
 80016d4:	4293      	cmp	r3, r2
{
 80016d6:	b510      	push	{r4, lr}
 80016d8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 80016da:	d004      	beq.n	80016e6 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 80016dc:	4a16      	ldr	r2, [pc, #88]	@ (8001738 <HAL_TIM_Base_MspInit+0x68>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d010      	beq.n	8001704 <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80016e2:	b002      	add	sp, #8
 80016e4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_TIM_Base_MspInit+0x6c>)
 80016e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80016ec:	f042 0202 	orr.w	r2, r2, #2
 80016f0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80016f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	9b00      	ldr	r3, [sp, #0]
}
 8001700:	b002      	add	sp, #8
 8001702:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <HAL_TIM_Base_MspInit+0x6c>)
    HAL_NVIC_SetPriority(TIM15_IRQn, 5, 0);
 8001706:	2074      	movs	r0, #116	@ 0x74
 8001708:	2200      	movs	r2, #0
 800170a:	2105      	movs	r1, #5
    __HAL_RCC_TIM15_CLK_ENABLE();
 800170c:	f8d3 40f0 	ldr.w	r4, [r3, #240]	@ 0xf0
 8001710:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 8001714:	f8c3 40f0 	str.w	r4, [r3, #240]	@ 0xf0
 8001718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800171c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM15_IRQn, 5, 0);
 8001724:	f000 fc94 	bl	8002050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001728:	2074      	movs	r0, #116	@ 0x74
}
 800172a:	b002      	add	sp, #8
 800172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001730:	f000 bcca 	b.w	80020c8 <HAL_NVIC_EnableIRQ>
 8001734:	40000400 	.word	0x40000400
 8001738:	40014000 	.word	0x40014000
 800173c:	58024400 	.word	0x58024400

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b510      	push	{r4, lr}
 8001742:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	2100      	movs	r1, #0
{
 8001746:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	22bc      	movs	r2, #188	@ 0xbc
 800174a:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	9108      	str	r1, [sp, #32]
 800174e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001752:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001756:	f011 fc6a 	bl	801302e <memset>
  if(huart->Instance==USART1)
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	4a44      	ldr	r2, [pc, #272]	@ (8001870 <HAL_UART_MspInit+0x130>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d004      	beq.n	800176c <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001762:	4a44      	ldr	r2, [pc, #272]	@ (8001874 <HAL_UART_MspInit+0x134>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d039      	beq.n	80017dc <HAL_UART_MspInit+0x9c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001768:	b038      	add	sp, #224	@ 0xe0
 800176a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800176c:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176e:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001770:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001772:	f002 fe85 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	2800      	cmp	r0, #0
 8001778:	d167      	bne.n	800184a <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800177a:	4b3f      	ldr	r3, [pc, #252]	@ (8001878 <HAL_UART_MspInit+0x138>)
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800177c:	2404      	movs	r4, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	a904      	add	r1, sp, #16
 8001780:	483e      	ldr	r0, [pc, #248]	@ (800187c <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001782:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001786:	f042 0210 	orr.w	r2, r2, #16
 800178a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800178e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001792:	f002 0210 	and.w	r2, r2, #16
 8001796:	9200      	str	r2, [sp, #0]
 8001798:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800179e:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8001858 <HAL_UART_MspInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80017ae:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80017b8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8001860 <HAL_UART_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017c0:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f001 feec 	bl	80035a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2105      	movs	r1, #5
 80017cc:	2025      	movs	r0, #37	@ 0x25
 80017ce:	f000 fc3f 	bl	8002050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017d2:	2025      	movs	r0, #37	@ 0x25
 80017d4:	f000 fc78 	bl	80020c8 <HAL_NVIC_EnableIRQ>
}
 80017d8:	b038      	add	sp, #224	@ 0xe0
 80017da:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017dc:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017de:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017e0:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e2:	f002 fe4d 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	bb98      	cbnz	r0, 8001850 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e8:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <HAL_UART_MspInit+0x138>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ea:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	a904      	add	r1, sp, #16
 80017ee:	4823      	ldr	r0, [pc, #140]	@ (800187c <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80017f4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80017f8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80017fc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001800:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001804:	9202      	str	r2, [sp, #8]
 8001806:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800180c:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001810:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8001868 <HAL_UART_MspInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800181c:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001822:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001826:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8001860 <HAL_UART_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	9303      	str	r3, [sp, #12]
 800182c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800182e:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f001 feb5 	bl	80035a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2105      	movs	r1, #5
 800183a:	2027      	movs	r0, #39	@ 0x27
 800183c:	f000 fc08 	bl	8002050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001840:	2027      	movs	r0, #39	@ 0x27
 8001842:	f000 fc41 	bl	80020c8 <HAL_NVIC_EnableIRQ>
}
 8001846:	b038      	add	sp, #224	@ 0xe0
 8001848:	bd10      	pop	{r4, pc}
      Error_Handler();
 800184a:	f7ff ff19 	bl	8001680 <Error_Handler>
 800184e:	e794      	b.n	800177a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001850:	f7ff ff16 	bl	8001680 <Error_Handler>
 8001854:	e7c8      	b.n	80017e8 <HAL_UART_MspInit+0xa8>
 8001856:	bf00      	nop
 8001858:	0000c000 	.word	0x0000c000
 800185c:	00000002 	.word	0x00000002
	...
 8001868:	00000c00 	.word	0x00000c00
 800186c:	00000002 	.word	0x00000002
 8001870:	40011000 	.word	0x40011000
 8001874:	40004800 	.word	0x40004800
 8001878:	58024400 	.word	0x58024400
 800187c:	58020400 	.word	0x58020400

08001880 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001880:	280f      	cmp	r0, #15
 8001882:	d901      	bls.n	8001888 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001884:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001886:	4770      	bx	lr
{
 8001888:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800188a:	4601      	mov	r1, r0
{
 800188c:	b08b      	sub	sp, #44	@ 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800188e:	2200      	movs	r2, #0
 8001890:	4604      	mov	r4, r0
 8001892:	2036      	movs	r0, #54	@ 0x36
 8001894:	f000 fbdc 	bl	8002050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001898:	2036      	movs	r0, #54	@ 0x36
 800189a:	f000 fc15 	bl	80020c8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_InitTick+0x8c>)
    uwTickPrio = TickPriority;
 80018a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001910 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018a2:	4669      	mov	r1, sp
 80018a4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80018a6:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018a8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80018ac:	f042 0210 	orr.w	r2, r2, #16
 80018b0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80018b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018c0:	f002 fcce 	bl	8004260 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018c4:	9b07      	ldr	r3, [sp, #28]
 80018c6:	b9c3      	cbnz	r3, 80018fa <HAL_InitTick+0x7a>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018c8:	f002 fca6 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 80018cc:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ce:	4911      	ldr	r1, [pc, #68]	@ (8001914 <HAL_InitTick+0x94>)
  htim6.Init.ClockDivision = 0;
 80018d0:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 80018d2:	4c11      	ldr	r4, [pc, #68]	@ (8001918 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018d4:	fba1 1303 	umull	r1, r3, r1, r3
  htim6.Instance = TIM6;
 80018d8:	4d10      	ldr	r5, [pc, #64]	@ (800191c <HAL_InitTick+0x9c>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018da:	f240 31e7 	movw	r1, #999	@ 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018de:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018e0:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 80018e2:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018e6:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018e8:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018ec:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018ee:	f003 ffc3 	bl	8005878 <HAL_TIM_Base_Init>
 80018f2:	b130      	cbz	r0, 8001902 <HAL_InitTick+0x82>
    return HAL_ERROR;
 80018f4:	2001      	movs	r0, #1
}
 80018f6:	b00b      	add	sp, #44	@ 0x2c
 80018f8:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018fa:	f002 fc8d 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 80018fe:	0043      	lsls	r3, r0, #1
 8001900:	e7e5      	b.n	80018ce <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001902:	4620      	mov	r0, r4
 8001904:	f003 fd72 	bl	80053ec <HAL_TIM_Base_Start_IT>
 8001908:	e7f5      	b.n	80018f6 <HAL_InitTick+0x76>
 800190a:	bf00      	nop
 800190c:	58024400 	.word	0x58024400
 8001910:	24000014 	.word	0x24000014
 8001914:	431bde83 	.word	0x431bde83
 8001918:	240002b8 	.word	0x240002b8
 800191c:	40001000 	.word	0x40001000

08001920 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler>
 8001922:	bf00      	nop

08001924 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <HardFault_Handler>
 8001926:	bf00      	nop

08001928 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler>
 800192a:	bf00      	nop

0800192c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <BusFault_Handler>
 800192e:	bf00      	nop

08001930 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <UsageFault_Handler>
 8001932:	bf00      	nop

08001934 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop

08001938 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001938:	4801      	ldr	r0, [pc, #4]	@ (8001940 <USART1_IRQHandler+0x8>)
 800193a:	f004 b875 	b.w	8005a28 <HAL_UART_IRQHandler>
 800193e:	bf00      	nop
 8001940:	24000190 	.word	0x24000190

08001944 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001944:	4801      	ldr	r0, [pc, #4]	@ (800194c <USART3_IRQHandler+0x8>)
 8001946:	f004 b86f 	b.w	8005a28 <HAL_UART_IRQHandler>
 800194a:	bf00      	nop
 800194c:	24000100 	.word	0x24000100

08001950 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001950:	4801      	ldr	r0, [pc, #4]	@ (8001958 <TIM6_DAC_IRQHandler+0x8>)
 8001952:	f003 be6b 	b.w	800562c <HAL_TIM_IRQHandler>
 8001956:	bf00      	nop
 8001958:	240002b8 	.word	0x240002b8

0800195c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800195c:	4801      	ldr	r0, [pc, #4]	@ (8001964 <ETH_IRQHandler+0x8>)
 800195e:	f001 bad5 	b.w	8002f0c <HAL_ETH_IRQHandler>
 8001962:	bf00      	nop
 8001964:	24000548 	.word	0x24000548

08001968 <TIM15_IRQHandler>:
void TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001968:	4801      	ldr	r0, [pc, #4]	@ (8001970 <TIM15_IRQHandler+0x8>)
 800196a:	f003 be5f 	b.w	800562c <HAL_TIM_IRQHandler>
 800196e:	bf00      	nop
 8001970:	24000220 	.word	0x24000220

08001974 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001974:	2001      	movs	r0, #1
 8001976:	4770      	bx	lr

08001978 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8001978:	4b02      	ldr	r3, [pc, #8]	@ (8001984 <_kill+0xc>)
 800197a:	2216      	movs	r2, #22
	return -1;
}
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8001980:	601a      	str	r2, [r3, #0]
}
 8001982:	4770      	bx	lr
 8001984:	2400ff58 	.word	0x2400ff58

08001988 <_exit>:
	errno = EINVAL;
 8001988:	4b01      	ldr	r3, [pc, #4]	@ (8001990 <_exit+0x8>)
 800198a:	2216      	movs	r2, #22
 800198c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800198e:	e7fe      	b.n	800198e <_exit+0x6>
 8001990:	2400ff58 	.word	0x2400ff58

08001994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001994:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	1e16      	subs	r6, r2, #0
 8001998:	dd07      	ble.n	80019aa <_read+0x16>
 800199a:	460c      	mov	r4, r1
 800199c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800199e:	f3af 8000 	nop.w
 80019a2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	42a5      	cmp	r5, r4
 80019a8:	d1f9      	bne.n	800199e <_read+0xa>
	}

return len;
}
 80019aa:	4630      	mov	r0, r6
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
 80019ae:	bf00      	nop

080019b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	1e16      	subs	r6, r2, #0
 80019b4:	dd07      	ble.n	80019c6 <_write+0x16>
 80019b6:	460c      	mov	r4, r1
 80019b8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80019ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80019be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	42a5      	cmp	r5, r4
 80019c4:	d1f9      	bne.n	80019ba <_write+0xa>
	}
	return len;
}
 80019c6:	4630      	mov	r0, r6
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
 80019ca:	bf00      	nop

080019cc <_close>:

int _close(int file)
{
	return -1;
}
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80019d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80019d8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80019da:	604b      	str	r3, [r1, #4]
}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019e0:	2001      	movs	r0, #1
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019e4:	2000      	movs	r0, #0
 80019e6:	4770      	bx	lr

080019e8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	490d      	ldr	r1, [pc, #52]	@ (8001a20 <_sbrk+0x38>)
{
 80019ea:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80019ee:	6808      	ldr	r0, [r1, #0]
{
 80019f0:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f2:	4c0d      	ldr	r4, [pc, #52]	@ (8001a28 <_sbrk+0x40>)
 80019f4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80019f6:	b170      	cbz	r0, 8001a16 <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f8:	4403      	add	r3, r0
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d803      	bhi.n	8001a06 <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80019fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8001a02:	600b      	str	r3, [r1, #0]
}
 8001a04:	4770      	bx	lr
    errno = ENOMEM;
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <_sbrk+0x44>)
 8001a08:	220c      	movs	r2, #12
    return (void *)-1;
 8001a0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8001a16:	4c06      	ldr	r4, [pc, #24]	@ (8001a30 <_sbrk+0x48>)
 8001a18:	4620      	mov	r0, r4
 8001a1a:	600c      	str	r4, [r1, #0]
 8001a1c:	e7ec      	b.n	80019f8 <_sbrk+0x10>
 8001a1e:	bf00      	nop
 8001a20:	24000304 	.word	0x24000304
 8001a24:	24080000 	.word	0x24080000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	2400ff58 	.word	0x2400ff58
 8001a30:	2400ff68 	.word	0x2400ff68

08001a34 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a34:	4927      	ldr	r1, [pc, #156]	@ (8001ad4 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a36:	4a28      	ldr	r2, [pc, #160]	@ (8001ad8 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a38:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001a40:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d805      	bhi.n	8001a5c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a50:	6813      	ldr	r3, [r2, #0]
 8001a52:	f023 030f 	bic.w	r3, r3, #15
 8001a56:	f043 0307 	orr.w	r3, r3, #7
 8001a5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a5e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae0 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8001a62:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a64:	481c      	ldr	r0, [pc, #112]	@ (8001ad8 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8001a66:	f041 0101 	orr.w	r1, r1, #1
 8001a6a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a6c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a74:	6803      	ldr	r3, [r0, #0]
 8001a76:	071b      	lsls	r3, r3, #28
 8001a78:	d505      	bpl.n	8001a86 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a7a:	6803      	ldr	r3, [r0, #0]
 8001a7c:	f023 030f 	bic.w	r3, r3, #15
 8001a80:	f043 0307 	orr.w	r3, r3, #7
 8001a84:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <SystemInit+0xa8>)
 8001a88:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a8a:	4916      	ldr	r1, [pc, #88]	@ (8001ae4 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8001a8c:	4c16      	ldr	r4, [pc, #88]	@ (8001ae8 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8001a8e:	4817      	ldr	r0, [pc, #92]	@ (8001aec <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8001a90:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001a92:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001a94:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001a96:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001a98:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001a9a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a9e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001aa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aa2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa6:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001aa8:	4c11      	ldr	r4, [pc, #68]	@ (8001af0 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001aaa:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001aae:	4911      	ldr	r1, [pc, #68]	@ (8001af4 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8001ab0:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8001ab2:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	4019      	ands	r1, r3
 8001ab8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8001abc:	d203      	bcs.n	8001ac6 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <SystemInit+0xc4>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <SystemInit+0xc8>)
 8001ac8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001acc:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ad0:	601a      	str	r2, [r3, #0]
}
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00
 8001ad8:	52002000 	.word	0x52002000
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ae4:	01010280 	.word	0x01010280
 8001ae8:	02020200 	.word	0x02020200
 8001aec:	01ff0000 	.word	0x01ff0000
 8001af0:	5c001000 	.word	0x5c001000
 8001af4:	ffff0000 	.word	0xffff0000
 8001af8:	51008000 	.word	0x51008000
 8001afc:	52004000 	.word	0x52004000

08001b00 <tcp_thread>:
static void tcp_thread(void *arg)
{
	err_t err, accept_err, recv_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2010      	movs	r0, #16
{
 8001b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = netconn_new(NETCONN_TCP);
 8001b08:	4c86      	ldr	r4, [pc, #536]	@ (8001d24 <tcp_thread+0x224>)
{
 8001b0a:	b085      	sub	sp, #20
	conn = netconn_new(NETCONN_TCP);
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	f008 f937 	bl	8009d80 <netconn_new_with_proto_and_callback>
 8001b12:	6020      	str	r0, [r4, #0]

	if (conn!=NULL)
 8001b14:	2800      	cmp	r0, #0
 8001b16:	f000 8102 	beq.w	8001d1e <tcp_thread+0x21e>
	{
		/* Bind connection to the port number 7. */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	4982      	ldr	r1, [pc, #520]	@ (8001d28 <tcp_thread+0x228>)
 8001b1e:	f008 f9af 	bl	8009e80 <netconn_bind>

		if (err == ERR_OK)
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d167      	bne.n	8001bf6 <tcp_thread+0xf6>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001b26:	21ff      	movs	r1, #255	@ 0xff
 8001b28:	6820      	ldr	r0, [r4, #0]
 8001b2a:	4e80      	ldr	r6, [pc, #512]	@ (8001d2c <tcp_thread+0x22c>)
 8001b2c:	f8df b234 	ldr.w	fp, [pc, #564]	@ 8001d64 <tcp_thread+0x264>
								if(request_array_rx[i] > 0x10) {
									int len = sprintf (smsg, "%x", request_array_rx[i]);
									netconn_write(newconn, smsg, len, NETCONN_COPY);
								}
								else {
									int len = sprintf (smsg, "0%x", request_array_rx[i]);
 8001b30:	f8df a234 	ldr.w	sl, [pc, #564]	@ 8001d68 <tcp_thread+0x268>
			netconn_listen(conn);
 8001b34:	f008 f9d0 	bl	8009ed8 <netconn_listen_with_backlog>
				accept_err = netconn_accept(conn, &newconn);
 8001b38:	4b7a      	ldr	r3, [pc, #488]	@ (8001d24 <tcp_thread+0x224>)
 8001b3a:	4631      	mov	r1, r6
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f008 f9ef 	bl	8009f20 <netconn_accept>
				if (accept_err == ERR_OK)
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d1f8      	bne.n	8001b38 <tcp_thread+0x38>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001b46:	497a      	ldr	r1, [pc, #488]	@ (8001d30 <tcp_thread+0x230>)
 8001b48:	6830      	ldr	r0, [r6, #0]
 8001b4a:	f008 fa4f 	bl	8009fec <netconn_recv>
 8001b4e:	4607      	mov	r7, r0
 8001b50:	2800      	cmp	r0, #0
 8001b52:	f040 80dd 	bne.w	8001d10 <tcp_thread+0x210>
							int len = sprintf (smsg, "\n%s", frame);
 8001b56:	4c77      	ldr	r4, [pc, #476]	@ (8001d34 <tcp_thread+0x234>)
							strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 8001b58:	4b75      	ldr	r3, [pc, #468]	@ (8001d30 <tcp_thread+0x230>)
 8001b5a:	4877      	ldr	r0, [pc, #476]	@ (8001d38 <tcp_thread+0x238>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4d77      	ldr	r5, [pc, #476]	@ (8001d3c <tcp_thread+0x23c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	895a      	ldrh	r2, [r3, #10]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	f011 fa6a 	bl	801303e <strncpy>
							strcpy(frame, msg);
 8001b6a:	4973      	ldr	r1, [pc, #460]	@ (8001d38 <tcp_thread+0x238>)
 8001b6c:	4874      	ldr	r0, [pc, #464]	@ (8001d40 <tcp_thread+0x240>)
 8001b6e:	f011 fb3c 	bl	80131ea <strcpy>
							int len = sprintf (smsg, "\n%s", frame);
 8001b72:	4a73      	ldr	r2, [pc, #460]	@ (8001d40 <tcp_thread+0x240>)
 8001b74:	4973      	ldr	r1, [pc, #460]	@ (8001d44 <tcp_thread+0x244>)
 8001b76:	4620      	mov	r0, r4
 8001b78:	f011 f9cc 	bl	8012f14 <siprintf>
							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001b7c:	9700      	str	r7, [sp, #0]
							int len = sprintf (smsg, "\n%s", frame);
 8001b7e:	4602      	mov	r2, r0
							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001b80:	2301      	movs	r3, #1
 8001b82:	4621      	mov	r1, r4
 8001b84:	6830      	ldr	r0, [r6, #0]
 8001b86:	f008 fb07 	bl	800a198 <netconn_write_partly>
							for(int i = 0; i < 16 - 1; i += 2)
 8001b8a:	4a6d      	ldr	r2, [pc, #436]	@ (8001d40 <tcp_thread+0x240>)
							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	e016      	b.n	8001bbe <tcp_thread+0xbe>
		if(c == 'A') return 10; else if (c == 'B') return 11; else if (c == 'C') return 12; else if (c == 'D') return 13; else if (c == 'E') return 14; else if (c == 'F') return 15;
 8001b90:	d038      	beq.n	8001c04 <tcp_thread+0x104>
 8001b92:	f1a1 0937 	sub.w	r9, r1, #55	@ 0x37
								request_array_rx[index++] = 16 * first_integer + second_integer;
 8001b96:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001b9a:	b2db      	uxtb	r3, r3
	if (c <= 'F' && c >= 'A')
 8001b9c:	f1ac 0141 	sub.w	r1, ip, #65	@ 0x41
 8001ba0:	b2c9      	uxtb	r1, r1
 8001ba2:	2905      	cmp	r1, #5
 8001ba4:	d81f      	bhi.n	8001be6 <tcp_thread+0xe6>
		if(c == 'A') return 10; else if (c == 'B') return 11; else if (c == 'C') return 12; else if (c == 'D') return 13; else if (c == 'E') return 14; else if (c == 'F') return 15;
 8001ba6:	d031      	beq.n	8001c0c <tcp_thread+0x10c>
 8001ba8:	f1ac 0837 	sub.w	r8, ip, #55	@ 0x37
								request_array_rx[index++] = 16 * first_integer + second_integer;
 8001bac:	fa5f f188 	uxtb.w	r1, r8
 8001bb0:	440b      	add	r3, r1
							for(int i = 0; i < 16 - 1; i += 2)
 8001bb2:	3202      	adds	r2, #2
								request_array_rx[index++] = 16 * first_integer + second_integer;
 8001bb4:	f800 3f01 	strb.w	r3, [r0, #1]!
							for(int i = 0; i < 16 - 1; i += 2)
 8001bb8:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <tcp_thread+0x248>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02a      	beq.n	8001c14 <tcp_thread+0x114>
								char first = frame[i];
 8001bbe:	7811      	ldrb	r1, [r2, #0]
								char second = frame[i + 1];
 8001bc0:	f892 c001 	ldrb.w	ip, [r2, #1]
	if (c <= 'F' && c >= 'A')
 8001bc4:	f1a1 0341 	sub.w	r3, r1, #65	@ 0x41
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d9e0      	bls.n	8001b90 <tcp_thread+0x90>
	if (c <= '9' && c >= 0)
 8001bce:	2939      	cmp	r1, #57	@ 0x39
		return c - '0';
 8001bd0:	bf98      	it	ls
 8001bd2:	f1a1 0930 	subls.w	r9, r1, #48	@ 0x30
	if (c <= 'F' && c >= 'A')
 8001bd6:	f1ac 0141 	sub.w	r1, ip, #65	@ 0x41
 8001bda:	b2c9      	uxtb	r1, r1
								request_array_rx[index++] = 16 * first_integer + second_integer;
 8001bdc:	ea4f 1309 	mov.w	r3, r9, lsl #4
	if (c <= 'F' && c >= 'A')
 8001be0:	2905      	cmp	r1, #5
								request_array_rx[index++] = 16 * first_integer + second_integer;
 8001be2:	b2db      	uxtb	r3, r3
	if (c <= 'F' && c >= 'A')
 8001be4:	d9df      	bls.n	8001ba6 <tcp_thread+0xa6>
	if (c <= '9' && c >= 0)
 8001be6:	f1bc 0f39 	cmp.w	ip, #57	@ 0x39
		return c - '0';
 8001bea:	bf98      	it	ls
 8001bec:	f1ac 0830 	subls.w	r8, ip, #48	@ 0x30
								request_array_rx[index++] = 16 * first_integer + second_integer;
 8001bf0:	fa5f f188 	uxtb.w	r1, r8
 8001bf4:	e7dc      	b.n	8001bb0 <tcp_thread+0xb0>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 8001bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8001d24 <tcp_thread+0x224>)
 8001bf8:	6818      	ldr	r0, [r3, #0]
		}
	}
}
 8001bfa:	b005      	add	sp, #20
 8001bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			netconn_delete(conn);
 8001c00:	f008 b91e 	b.w	8009e40 <netconn_delete>
	if (c <= 'F' && c >= 'A')
 8001c04:	23f0      	movs	r3, #240	@ 0xf0
 8001c06:	f04f 090f 	mov.w	r9, #15
 8001c0a:	e7c7      	b.n	8001b9c <tcp_thread+0x9c>
 8001c0c:	f04f 080f 	mov.w	r8, #15
 8001c10:	4641      	mov	r1, r8
 8001c12:	e7cd      	b.n	8001bb0 <tcp_thread+0xb0>
							len = sprintf (smsg, "\nREQ:");
 8001c14:	494d      	ldr	r1, [pc, #308]	@ (8001d4c <tcp_thread+0x24c>)
							netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001c16:	2301      	movs	r3, #1
 8001c18:	9503      	str	r5, [sp, #12]
 8001c1a:	2205      	movs	r2, #5
							len = sprintf (smsg, "\nREQ:");
 8001c1c:	4d45      	ldr	r5, [pc, #276]	@ (8001d34 <tcp_thread+0x234>)
							netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001c1e:	9700      	str	r7, [sp, #0]
							len = sprintf (smsg, "\nREQ:");
 8001c20:	c903      	ldmia	r1, {r0, r1}
 8001c22:	6028      	str	r0, [r5, #0]
 8001c24:	80a9      	strh	r1, [r5, #4]
							netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001c26:	4621      	mov	r1, r4
 8001c28:	6830      	ldr	r0, [r6, #0]
 8001c2a:	f008 fab5 	bl	800a198 <netconn_write_partly>
 8001c2e:	9d03      	ldr	r5, [sp, #12]
 8001c30:	e00b      	b.n	8001c4a <tcp_thread+0x14a>
									int len = sprintf (smsg, "%x", request_array_rx[i]);
 8001c32:	4947      	ldr	r1, [pc, #284]	@ (8001d50 <tcp_thread+0x250>)
 8001c34:	f011 f96e 	bl	8012f14 <siprintf>
									netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001c38:	6830      	ldr	r0, [r6, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4621      	mov	r1, r4
 8001c40:	9700      	str	r7, [sp, #0]
 8001c42:	f008 faa9 	bl	800a198 <netconn_write_partly>
							for(int i = 0; i < 8; i++)
 8001c46:	455d      	cmp	r5, fp
 8001c48:	d010      	beq.n	8001c6c <tcp_thread+0x16c>
								if(request_array_rx[i] > 0x10) {
 8001c4a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
									int len = sprintf (smsg, "0%x", request_array_rx[i]);
 8001c4e:	4651      	mov	r1, sl
 8001c50:	4620      	mov	r0, r4
								if(request_array_rx[i] > 0x10) {
 8001c52:	2a10      	cmp	r2, #16
 8001c54:	d8ed      	bhi.n	8001c32 <tcp_thread+0x132>
									int len = sprintf (smsg, "0%x", request_array_rx[i]);
 8001c56:	f011 f95d 	bl	8012f14 <siprintf>
									netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001c5a:	2301      	movs	r3, #1
									int len = sprintf (smsg, "0%x", request_array_rx[i]);
 8001c5c:	4602      	mov	r2, r0
									netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001c5e:	4621      	mov	r1, r4
 8001c60:	6830      	ldr	r0, [r6, #0]
 8001c62:	9700      	str	r7, [sp, #0]
 8001c64:	f008 fa98 	bl	800a198 <netconn_write_partly>
							for(int i = 0; i < 8; i++)
 8001c68:	455d      	cmp	r5, fp
 8001c6a:	d1ee      	bne.n	8001c4a <tcp_thread+0x14a>
							len = sprintf (smsg, "\nRES:");
 8001c6c:	4939      	ldr	r1, [pc, #228]	@ (8001d54 <tcp_thread+0x254>)
							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001c6e:	2301      	movs	r3, #1
							len = sprintf (smsg, "\nRES:");
 8001c70:	4d30      	ldr	r5, [pc, #192]	@ (8001d34 <tcp_thread+0x234>)
							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001c72:	2205      	movs	r2, #5
 8001c74:	9700      	str	r7, [sp, #0]
							len = sprintf (smsg, "\nRES:");
 8001c76:	c903      	ldmia	r1, {r0, r1}
 8001c78:	6028      	str	r0, [r5, #0]
 8001c7a:	80a9      	strh	r1, [r5, #4]
							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	6830      	ldr	r0, [r6, #0]
 8001c80:	4d35      	ldr	r5, [pc, #212]	@ (8001d58 <tcp_thread+0x258>)
 8001c82:	f008 fa89 	bl	800a198 <netconn_write_partly>
							for(int i = 0; i < 8; i++)
 8001c86:	e00c      	b.n	8001ca2 <tcp_thread+0x1a2>
									int len = sprintf (smsg, "%x", response_array_rx[i]);
 8001c88:	4931      	ldr	r1, [pc, #196]	@ (8001d50 <tcp_thread+0x250>)
 8001c8a:	f011 f943 	bl	8012f14 <siprintf>
									netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001c8e:	2301      	movs	r3, #1
 8001c90:	6830      	ldr	r0, [r6, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4621      	mov	r1, r4
 8001c96:	9700      	str	r7, [sp, #0]
 8001c98:	f008 fa7e 	bl	800a198 <netconn_write_partly>
							for(int i = 0; i < 8; i++)
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <tcp_thread+0x25c>)
 8001c9e:	42ab      	cmp	r3, r5
 8001ca0:	d011      	beq.n	8001cc6 <tcp_thread+0x1c6>
								if(response_array_rx[i] > 0x10) {
 8001ca2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
									int len = sprintf (smsg, "0%x", response_array_rx[i]);
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	4620      	mov	r0, r4
								if(response_array_rx[i] > 0x10) {
 8001caa:	2a10      	cmp	r2, #16
 8001cac:	d8ec      	bhi.n	8001c88 <tcp_thread+0x188>
									int len = sprintf (smsg, "0%x", response_array_rx[i]);
 8001cae:	f011 f931 	bl	8012f14 <siprintf>
									netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001cb2:	2301      	movs	r3, #1
									int len = sprintf (smsg, "0%x", response_array_rx[i]);
 8001cb4:	4602      	mov	r2, r0
									netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	6830      	ldr	r0, [r6, #0]
 8001cba:	9700      	str	r7, [sp, #0]
 8001cbc:	f008 fa6c 	bl	800a198 <netconn_write_partly>
							for(int i = 0; i < 8; i++)
 8001cc0:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <tcp_thread+0x25c>)
 8001cc2:	42ab      	cmp	r3, r5
 8001cc4:	d1ed      	bne.n	8001ca2 <tcp_thread+0x1a2>
							len = sprintf (smsg, " \n");
 8001cc6:	4b26      	ldr	r3, [pc, #152]	@ (8001d60 <tcp_thread+0x260>)
							netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001cc8:	4621      	mov	r1, r4
							len = sprintf (smsg, " \n");
 8001cca:	4a1a      	ldr	r2, [pc, #104]	@ (8001d34 <tcp_thread+0x234>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
							netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001cce:	9700      	str	r7, [sp, #0]
							len = sprintf (smsg, " \n");
 8001cd0:	8013      	strh	r3, [r2, #0]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
							netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001cd4:	6830      	ldr	r0, [r6, #0]
							len = sprintf (smsg, " \n");
 8001cd6:	7093      	strb	r3, [r2, #2]
							netconn_write(newconn, smsg, len, NETCONN_COPY);
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f008 fa5c 	bl	800a198 <netconn_write_partly>
							memset (msg, '\0', 100);  // clear the buffer
 8001ce0:	2264      	movs	r2, #100	@ 0x64
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4814      	ldr	r0, [pc, #80]	@ (8001d38 <tcp_thread+0x238>)
 8001ce6:	f011 f9a2 	bl	801302e <memset>
						while (netbuf_next(buf) >0);
 8001cea:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <tcp_thread+0x230>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	f009 fb8b 	bl	800b408 <netbuf_next>
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	f73f af30 	bgt.w	8001b58 <tcp_thread+0x58>
						netbuf_delete(buf);
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <tcp_thread+0x230>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f009 fb72 	bl	800b3e4 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001d00:	490b      	ldr	r1, [pc, #44]	@ (8001d30 <tcp_thread+0x230>)
 8001d02:	6830      	ldr	r0, [r6, #0]
 8001d04:	f008 f972 	bl	8009fec <netconn_recv>
 8001d08:	4607      	mov	r7, r0
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	f43f af23 	beq.w	8001b56 <tcp_thread+0x56>
					netconn_close(newconn);
 8001d10:	6830      	ldr	r0, [r6, #0]
 8001d12:	f008 fa4f 	bl	800a1b4 <netconn_close>
					netconn_delete(newconn);
 8001d16:	6830      	ldr	r0, [r6, #0]
 8001d18:	f008 f892 	bl	8009e40 <netconn_delete>
 8001d1c:	e70c      	b.n	8001b38 <tcp_thread+0x38>
}
 8001d1e:	b005      	add	sp, #20
 8001d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d24:	24000470 	.word	0x24000470
 8001d28:	08016fdc 	.word	0x08016fdc
 8001d2c:	2400046c 	.word	0x2400046c
 8001d30:	24000468 	.word	0x24000468
 8001d34:	2400033c 	.word	0x2400033c
 8001d38:	24000404 	.word	0x24000404
 8001d3c:	23ffffff 	.word	0x23ffffff
 8001d40:	24000308 	.word	0x24000308
 8001d44:	0801496c 	.word	0x0801496c
 8001d48:	24000318 	.word	0x24000318
 8001d4c:	08014970 	.word	0x08014970
 8001d50:	08014978 	.word	0x08014978
 8001d54:	08014980 	.word	0x08014980
 8001d58:	240000bb 	.word	0x240000bb
 8001d5c:	240000c3 	.word	0x240000c3
 8001d60:	08014988 	.word	0x08014988
 8001d64:	24000007 	.word	0x24000007
 8001d68:	0801497c 	.word	0x0801497c

08001d6c <tcpserver_init>:


void tcpserver_init(void)
{
 8001d6c:	b510      	push	{r4, lr}
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001d6e:	2418      	movs	r4, #24
{
 8001d70:	b082      	sub	sp, #8
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d76:	2200      	movs	r2, #0
 8001d78:	4903      	ldr	r1, [pc, #12]	@ (8001d88 <tcpserver_init+0x1c>)
 8001d7a:	9400      	str	r4, [sp, #0]
 8001d7c:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <tcpserver_init+0x20>)
 8001d7e:	f010 ff5f 	bl	8012c40 <sys_thread_new>
}
 8001d82:	b002      	add	sp, #8
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	bf00      	nop
 8001d88:	08001b01 	.word	0x08001b01
 8001d8c:	0801498c 	.word	0x0801498c

08001d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d94:	f7ff fe4e 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f011 f9ed 	bl	801319c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7ff f9e3 	bl	800118c <main>
  bx  lr
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001dcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dd0:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001dd4:	080172cc 	.word	0x080172cc
  ldr r2, =_sbss
 8001dd8:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8001ddc:	2400ff68 	.word	0x2400ff68

08001de0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC3_IRQHandler>
	...

08001de4 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001de4:	b188      	cbz	r0, 8001e0a <LAN8742_RegisterBusIO+0x26>
 8001de6:	68ca      	ldr	r2, [r1, #12]
 8001de8:	b17a      	cbz	r2, 8001e0a <LAN8742_RegisterBusIO+0x26>
{
 8001dea:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001dec:	688c      	ldr	r4, [r1, #8]
 8001dee:	b17c      	cbz	r4, 8001e10 <LAN8742_RegisterBusIO+0x2c>
 8001df0:	690d      	ldr	r5, [r1, #16]
 8001df2:	b16d      	cbz	r5, 8001e10 <LAN8742_RegisterBusIO+0x2c>
 8001df4:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8001df6:	e9d1 0100 	ldrd	r0, r1, [r1]
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001dfa:	615a      	str	r2, [r3, #20]
  pObj->IO.Init = ioctx->Init;
 8001dfc:	6098      	str	r0, [r3, #8]
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 8001dfe:	2000      	movs	r0, #0
  pObj->IO.GetTick = ioctx->GetTick;
 8001e00:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001e02:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8001e06:	bc30      	pop	{r4, r5}
 8001e08:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001e0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001e0e:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	e7f7      	b.n	8001e06 <LAN8742_RegisterBusIO+0x22>
 8001e16:	bf00      	nop

08001e18 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e18:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e1a:	2300      	movs	r3, #0
 {
 8001e1c:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8001e1e:	6844      	ldr	r4, [r0, #4]
 {
 8001e20:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e22:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001e24:	2c00      	cmp	r4, #0
 8001e26:	d146      	bne.n	8001eb6 <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 8001e28:	6883      	ldr	r3, [r0, #8]
 8001e2a:	b103      	cbz	r3, 8001e2e <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e2c:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e2e:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8001e30:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e32:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e34:	e007      	b.n	8001e46 <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e36:	9b01      	ldr	r3, [sp, #4]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	42a3      	cmp	r3, r4
 8001e3e:	d016      	beq.n	8001e6e <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e40:	3401      	adds	r4, #1
 8001e42:	2c20      	cmp	r4, #32
 8001e44:	d00b      	beq.n	8001e5e <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e46:	4620      	mov	r0, r4
 8001e48:	696b      	ldr	r3, [r5, #20]
 8001e4a:	aa01      	add	r2, sp, #4
 8001e4c:	2112      	movs	r1, #18
 8001e4e:	4798      	blx	r3
 8001e50:	2800      	cmp	r0, #0
 8001e52:	daf0      	bge.n	8001e36 <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e54:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 8001e56:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e5a:	2c20      	cmp	r4, #32
 8001e5c:	d1f3      	bne.n	8001e46 <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001e5e:	682c      	ldr	r4, [r5, #0]
 8001e60:	2c1f      	cmp	r4, #31
 8001e62:	d937      	bls.n	8001ed4 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001e64:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 8001e68:	4630      	mov	r0, r6
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8001e6e:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001e70:	692b      	ldr	r3, [r5, #16]
 8001e72:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e76:	4620      	mov	r0, r4
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4798      	blx	r3
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	db2c      	blt.n	8001eda <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001e80:	696b      	ldr	r3, [r5, #20]
 8001e82:	aa01      	add	r2, sp, #4
 8001e84:	2100      	movs	r1, #0
 8001e86:	6828      	ldr	r0, [r5, #0]
 8001e88:	4798      	blx	r3
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	db2b      	blt.n	8001ee6 <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8001e8e:	69ab      	ldr	r3, [r5, #24]
 8001e90:	4798      	blx	r3
 8001e92:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e94:	e00c      	b.n	8001eb0 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001e96:	69ab      	ldr	r3, [r5, #24]
 8001e98:	4798      	blx	r3
 8001e9a:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001e9c:	aa01      	add	r2, sp, #4
 8001e9e:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001ea0:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8001ea4:	d81c      	bhi.n	8001ee0 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001ea6:	696b      	ldr	r3, [r5, #20]
 8001ea8:	6828      	ldr	r0, [r5, #0]
 8001eaa:	4798      	blx	r3
 8001eac:	2800      	cmp	r0, #0
 8001eae:	db1a      	blt.n	8001ee6 <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001eb0:	9b01      	ldr	r3, [sp, #4]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	d4ef      	bmi.n	8001e96 <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 8001eb6:	69ab      	ldr	r3, [r5, #24]
 8001eb8:	4798      	blx	r3
 8001eba:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001ebc:	69ab      	ldr	r3, [r5, #24]
 8001ebe:	4798      	blx	r3
 8001ec0:	1b03      	subs	r3, r0, r4
 8001ec2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ec6:	d9f9      	bls.n	8001ebc <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	2600      	movs	r6, #0
 8001ecc:	606b      	str	r3, [r5, #4]
 }
 8001ece:	4630      	mov	r0, r6
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8001ed4:	2e00      	cmp	r6, #0
 8001ed6:	d1fa      	bne.n	8001ece <LAN8742_Init+0xb6>
 8001ed8:	e7ca      	b.n	8001e70 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 8001eda:	f06f 0603 	mvn.w	r6, #3
 8001ede:	e7f6      	b.n	8001ece <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001ee0:	f06f 0601 	mvn.w	r6, #1
 8001ee4:	e7f3      	b.n	8001ece <LAN8742_Init+0xb6>
                 status = LAN8742_STATUS_READ_ERROR;
 8001ee6:	f06f 0604 	mvn.w	r6, #4
   if(status == LAN8742_STATUS_OK)
 8001eea:	e7f0      	b.n	8001ece <LAN8742_Init+0xb6>

08001eec <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001eec:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8001eee:	2500      	movs	r5, #0
{
 8001ef0:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ef2:	6943      	ldr	r3, [r0, #20]
{
 8001ef4:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ef6:	aa01      	add	r2, sp, #4
 8001ef8:	2101      	movs	r1, #1
 8001efa:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8001efc:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001efe:	4798      	blx	r3
 8001f00:	42a8      	cmp	r0, r5
 8001f02:	db3d      	blt.n	8001f80 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f04:	6963      	ldr	r3, [r4, #20]
 8001f06:	aa01      	add	r2, sp, #4
 8001f08:	2101      	movs	r1, #1
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	4798      	blx	r3
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	db36      	blt.n	8001f80 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001f12:	9b01      	ldr	r3, [sp, #4]
 8001f14:	075b      	lsls	r3, r3, #29
 8001f16:	d52a      	bpl.n	8001f6e <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001f18:	6963      	ldr	r3, [r4, #20]
 8001f1a:	aa01      	add	r2, sp, #4
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	6820      	ldr	r0, [r4, #0]
 8001f20:	4798      	blx	r3
 8001f22:	2800      	cmp	r0, #0
 8001f24:	db2c      	blt.n	8001f80 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001f26:	9b01      	ldr	r3, [sp, #4]
 8001f28:	04dd      	lsls	r5, r3, #19
 8001f2a:	d514      	bpl.n	8001f56 <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f2c:	6963      	ldr	r3, [r4, #20]
 8001f2e:	aa01      	add	r2, sp, #4
 8001f30:	211f      	movs	r1, #31
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	4798      	blx	r3
 8001f36:	2800      	cmp	r0, #0
 8001f38:	db22      	blt.n	8001f80 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f3a:	9b01      	ldr	r3, [sp, #4]
 8001f3c:	04da      	lsls	r2, r3, #19
 8001f3e:	d51d      	bpl.n	8001f7c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f40:	f003 031c 	and.w	r3, r3, #28
 8001f44:	2b18      	cmp	r3, #24
 8001f46:	d017      	beq.n	8001f78 <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d013      	beq.n	8001f74 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001f4c:	2b14      	cmp	r3, #20
 8001f4e:	d10b      	bne.n	8001f68 <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f50:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8001f52:	b003      	add	sp, #12
 8001f54:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001f56:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 8001f5a:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 8001f5e:	d00b      	beq.n	8001f78 <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001f60:	0498      	lsls	r0, r3, #18
 8001f62:	d407      	bmi.n	8001f74 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f64:	05d9      	lsls	r1, r3, #23
 8001f66:	d4f3      	bmi.n	8001f50 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f68:	2005      	movs	r0, #5
}
 8001f6a:	b003      	add	sp, #12
 8001f6c:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 8001f6e:	2001      	movs	r0, #1
}
 8001f70:	b003      	add	sp, #12
 8001f72:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f74:	2003      	movs	r0, #3
 8001f76:	e7f8      	b.n	8001f6a <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f78:	2002      	movs	r0, #2
 8001f7a:	e7f6      	b.n	8001f6a <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f7c:	2006      	movs	r0, #6
 8001f7e:	e7f4      	b.n	8001f6a <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8001f80:	f06f 0004 	mvn.w	r0, #4
 8001f84:	e7f1      	b.n	8001f6a <LAN8742_GetLinkState+0x7e>
 8001f86:	bf00      	nop

08001f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f88:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f8c:	4c12      	ldr	r4, [pc, #72]	@ (8001fd8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8e:	f000 f84d 	bl	800202c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f92:	f001 ffb5 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_Init+0x54>)
 8001f98:	4911      	ldr	r1, [pc, #68]	@ (8001fe0 <HAL_Init+0x58>)
 8001f9a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f9c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f9e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fa2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fa6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001faa:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fae:	490d      	ldr	r1, [pc, #52]	@ (8001fe4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fb0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fb4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fb6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001fba:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fbc:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fbe:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc0:	f7ff fc5e 	bl	8001880 <HAL_InitTick>
 8001fc4:	b110      	cbz	r0, 8001fcc <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8001fc6:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8001fc8:	4620      	mov	r0, r4
 8001fca:	bd10      	pop	{r4, pc}
 8001fcc:	4604      	mov	r4, r0
  HAL_MspInit();
 8001fce:	f7ff fb59 	bl	8001684 <HAL_MspInit>
}
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	bd10      	pop	{r4, pc}
 8001fd6:	bf00      	nop
 8001fd8:	24000008 	.word	0x24000008
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	0801495c 	.word	0x0801495c
 8001fe4:	2400000c 	.word	0x2400000c

08001fe8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001fe8:	4a03      	ldr	r2, [pc, #12]	@ (8001ff8 <HAL_IncTick+0x10>)
 8001fea:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <HAL_IncTick+0x14>)
 8001fec:	6811      	ldr	r1, [r2, #0]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	440b      	add	r3, r1
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	24000474 	.word	0x24000474
 8001ffc:	24000010 	.word	0x24000010

08002000 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002000:	4b01      	ldr	r3, [pc, #4]	@ (8002008 <HAL_GetTick+0x8>)
 8002002:	6818      	ldr	r0, [r3, #0]
}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	24000474 	.word	0x24000474

0800200c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800200c:	4b01      	ldr	r3, [pc, #4]	@ (8002014 <HAL_GetREVID+0x8>)
 800200e:	6818      	ldr	r0, [r3, #0]
}
 8002010:	0c00      	lsrs	r0, r0, #16
 8002012:	4770      	bx	lr
 8002014:	5c001000 	.word	0x5c001000

08002018 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002018:	4a03      	ldr	r2, [pc, #12]	@ (8002028 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800201a:	6853      	ldr	r3, [r2, #4]
 800201c:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8002020:	4303      	orrs	r3, r0
 8002022:	6053      	str	r3, [r2, #4]
}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	58000400 	.word	0x58000400

0800202c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4906      	ldr	r1, [pc, #24]	@ (8002048 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002032:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002036:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8002042:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002044:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	05fa0000 	.word	0x05fa0000

08002050 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <HAL_NVIC_SetPriority+0x6c>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002062:	f1be 0f04 	cmp.w	lr, #4
 8002066:	bf28      	it	cs
 8002068:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206c:	f1bc 0f06 	cmp.w	ip, #6
 8002070:	d91a      	bls.n	80020a8 <HAL_NVIC_SetPriority+0x58>
 8002072:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	fa03 f30c 	lsl.w	r3, r3, ip
 800207e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8002086:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	fa03 f30e 	lsl.w	r3, r3, lr
 800208c:	ea21 0303 	bic.w	r3, r1, r3
 8002090:	fa03 f30c 	lsl.w	r3, r3, ip
 8002094:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800209c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800209e:	db06      	blt.n	80020ae <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	4a07      	ldr	r2, [pc, #28]	@ (80020c0 <HAL_NVIC_SetPriority+0x70>)
 80020a2:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	4694      	mov	ip, r2
 80020ac:	e7e9      	b.n	8002082 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	f000 000f 	and.w	r0, r0, #15
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_NVIC_SetPriority+0x74>)
 80020b4:	5413      	strb	r3, [r2, r0]
 80020b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00
 80020c0:	e000e400 	.word	0xe000e400
 80020c4:	e000ed14 	.word	0xe000ed14

080020c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020c8:	2800      	cmp	r0, #0
 80020ca:	db07      	blt.n	80020dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020cc:	2301      	movs	r3, #1
 80020ce:	f000 011f 	and.w	r1, r0, #31
 80020d2:	4a03      	ldr	r2, [pc, #12]	@ (80020e0 <HAL_NVIC_EnableIRQ+0x18>)
 80020d4:	0940      	lsrs	r0, r0, #5
 80020d6:	408b      	lsls	r3, r1
 80020d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020ea:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 80020f4:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_MPU_Enable+0x1c>)
 8002102:	f040 0001 	orr.w	r0, r0, #1
 8002106:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800210a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800210c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002112:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002116:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002120:	4a17      	ldr	r2, [pc, #92]	@ (8002180 <HAL_MPU_ConfigRegion+0x60>)
 8002122:	7843      	ldrb	r3, [r0, #1]
 8002124:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 8002128:	7801      	ldrb	r1, [r0, #0]
 800212a:	b321      	cbz	r1, 8002176 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800212c:	6843      	ldr	r3, [r0, #4]
{
 800212e:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8002130:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002134:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002136:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800213a:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800213c:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002140:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002144:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002148:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800214a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800214c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002150:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002154:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002158:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800215c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002160:	7a01      	ldrb	r1, [r0, #8]
 8002162:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002166:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800216a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800216e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002172:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8002176:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 800217a:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ff3a 	bl	8002000 <HAL_GetTick>

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800218c:	2c00      	cmp	r4, #0
 800218e:	d06b      	beq.n	8002268 <HAL_DMA_Abort+0xe4>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002190:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002194:	2b02      	cmp	r3, #2
 8002196:	d162      	bne.n	800225e <HAL_DMA_Abort+0xda>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002198:	6825      	ldr	r5, [r4, #0]
 800219a:	4606      	mov	r6, r0
 800219c:	4ba2      	ldr	r3, [pc, #648]	@ (8002428 <HAL_DMA_Abort+0x2a4>)
 800219e:	429d      	cmp	r5, r3
 80021a0:	d064      	beq.n	800226c <HAL_DMA_Abort+0xe8>
 80021a2:	3318      	adds	r3, #24
 80021a4:	429d      	cmp	r5, r3
 80021a6:	d061      	beq.n	800226c <HAL_DMA_Abort+0xe8>
 80021a8:	3318      	adds	r3, #24
 80021aa:	429d      	cmp	r5, r3
 80021ac:	f000 80f1 	beq.w	8002392 <HAL_DMA_Abort+0x20e>
 80021b0:	3318      	adds	r3, #24
 80021b2:	429d      	cmp	r5, r3
 80021b4:	f000 8118 	beq.w	80023e8 <HAL_DMA_Abort+0x264>
 80021b8:	3318      	adds	r3, #24
 80021ba:	429d      	cmp	r5, r3
 80021bc:	f000 8123 	beq.w	8002406 <HAL_DMA_Abort+0x282>
 80021c0:	3318      	adds	r3, #24
 80021c2:	429d      	cmp	r5, r3
 80021c4:	f000 80fd 	beq.w	80023c2 <HAL_DMA_Abort+0x23e>
 80021c8:	3318      	adds	r3, #24
 80021ca:	429d      	cmp	r5, r3
 80021cc:	f000 8138 	beq.w	8002440 <HAL_DMA_Abort+0x2bc>
 80021d0:	3318      	adds	r3, #24
 80021d2:	429d      	cmp	r5, r3
 80021d4:	f000 8147 	beq.w	8002466 <HAL_DMA_Abort+0x2e2>
 80021d8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80021dc:	429d      	cmp	r5, r3
 80021de:	f000 8155 	beq.w	800248c <HAL_DMA_Abort+0x308>
 80021e2:	3318      	adds	r3, #24
 80021e4:	429d      	cmp	r5, r3
 80021e6:	f000 8160 	beq.w	80024aa <HAL_DMA_Abort+0x326>
 80021ea:	3318      	adds	r3, #24
 80021ec:	429d      	cmp	r5, r3
 80021ee:	f000 816b 	beq.w	80024c8 <HAL_DMA_Abort+0x344>
 80021f2:	3318      	adds	r3, #24
 80021f4:	429d      	cmp	r5, r3
 80021f6:	f000 8169 	beq.w	80024cc <HAL_DMA_Abort+0x348>
 80021fa:	3318      	adds	r3, #24
 80021fc:	429d      	cmp	r5, r3
 80021fe:	f000 8167 	beq.w	80024d0 <HAL_DMA_Abort+0x34c>
 8002202:	3318      	adds	r3, #24
 8002204:	429d      	cmp	r5, r3
 8002206:	f000 8165 	beq.w	80024d4 <HAL_DMA_Abort+0x350>
 800220a:	3318      	adds	r3, #24
 800220c:	429d      	cmp	r5, r3
 800220e:	f000 8165 	beq.w	80024dc <HAL_DMA_Abort+0x358>
 8002212:	3318      	adds	r3, #24
 8002214:	429d      	cmp	r5, r3
 8002216:	f000 815f 	beq.w	80024d8 <HAL_DMA_Abort+0x354>
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800221a:	682b      	ldr	r3, [r5, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800221c:	4a83      	ldr	r2, [pc, #524]	@ (800242c <HAL_DMA_Abort+0x2a8>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800221e:	f023 030e 	bic.w	r3, r3, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002222:	4295      	cmp	r5, r2
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002224:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002226:	d014      	beq.n	8002252 <HAL_DMA_Abort+0xce>
 8002228:	4b81      	ldr	r3, [pc, #516]	@ (8002430 <HAL_DMA_Abort+0x2ac>)
 800222a:	429d      	cmp	r5, r3
 800222c:	d011      	beq.n	8002252 <HAL_DMA_Abort+0xce>
 800222e:	3314      	adds	r3, #20
 8002230:	429d      	cmp	r5, r3
 8002232:	d00e      	beq.n	8002252 <HAL_DMA_Abort+0xce>
 8002234:	3314      	adds	r3, #20
 8002236:	429d      	cmp	r5, r3
 8002238:	d00b      	beq.n	8002252 <HAL_DMA_Abort+0xce>
 800223a:	3314      	adds	r3, #20
 800223c:	429d      	cmp	r5, r3
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Abort+0xce>
 8002240:	3314      	adds	r3, #20
 8002242:	429d      	cmp	r5, r3
 8002244:	d005      	beq.n	8002252 <HAL_DMA_Abort+0xce>
 8002246:	3314      	adds	r3, #20
 8002248:	429d      	cmp	r5, r3
 800224a:	d002      	beq.n	8002252 <HAL_DMA_Abort+0xce>
 800224c:	3314      	adds	r3, #20
 800224e:	429d      	cmp	r5, r3
 8002250:	d119      	bne.n	8002286 <HAL_DMA_Abort+0x102>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002252:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800225a:	6013      	str	r3, [r2, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800225c:	e013      	b.n	8002286 <HAL_DMA_Abort+0x102>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225e:	2280      	movs	r2, #128	@ 0x80
    __HAL_UNLOCK(hdma);
 8002260:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002262:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002264:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002268:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 800226a:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800226c:	682b      	ldr	r3, [r5, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800226e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002270:	f023 031e 	bic.w	r3, r3, #30
 8002274:	602b      	str	r3, [r5, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002276:	696b      	ldr	r3, [r5, #20]
 8002278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800227c:	616b      	str	r3, [r5, #20]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002286:	682b      	ldr	r3, [r5, #0]
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	602b      	str	r3, [r5, #0]
 800228e:	e005      	b.n	800229c <HAL_DMA_Abort+0x118>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002290:	f7ff feb6 	bl	8002000 <HAL_GetTick>
 8002294:	1b83      	subs	r3, r0, r6
 8002296:	2b05      	cmp	r3, #5
 8002298:	f200 808a 	bhi.w	80023b0 <HAL_DMA_Abort+0x22c>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	07db      	lsls	r3, r3, #31
 80022a0:	d4f6      	bmi.n	8002290 <HAL_DMA_Abort+0x10c>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	4960      	ldr	r1, [pc, #384]	@ (8002428 <HAL_DMA_Abort+0x2a4>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022a6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a8:	428b      	cmp	r3, r1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022ac:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022b0:	d05e      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022b2:	3118      	adds	r1, #24
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d05b      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022b8:	3118      	adds	r1, #24
 80022ba:	428b      	cmp	r3, r1
 80022bc:	d058      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022be:	3118      	adds	r1, #24
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d055      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022c4:	3118      	adds	r1, #24
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d052      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022ca:	3118      	adds	r1, #24
 80022cc:	428b      	cmp	r3, r1
 80022ce:	d04f      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022d0:	3118      	adds	r1, #24
 80022d2:	428b      	cmp	r3, r1
 80022d4:	d04c      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022d6:	3118      	adds	r1, #24
 80022d8:	428b      	cmp	r3, r1
 80022da:	d049      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022dc:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80022e0:	428b      	cmp	r3, r1
 80022e2:	d045      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022e4:	3118      	adds	r1, #24
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d042      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022ea:	3118      	adds	r1, #24
 80022ec:	428b      	cmp	r3, r1
 80022ee:	d03f      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022f0:	3118      	adds	r1, #24
 80022f2:	428b      	cmp	r3, r1
 80022f4:	d03c      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022f6:	3118      	adds	r1, #24
 80022f8:	428b      	cmp	r3, r1
 80022fa:	d039      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 80022fc:	3118      	adds	r1, #24
 80022fe:	428b      	cmp	r3, r1
 8002300:	d036      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 8002302:	3118      	adds	r1, #24
 8002304:	428b      	cmp	r3, r1
 8002306:	d033      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
 8002308:	3118      	adds	r1, #24
 800230a:	428b      	cmp	r3, r1
 800230c:	d030      	beq.n	8002370 <HAL_DMA_Abort+0x1ec>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800230e:	2101      	movs	r1, #1
 8002310:	4091      	lsls	r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002312:	4a47      	ldr	r2, [pc, #284]	@ (8002430 <HAL_DMA_Abort+0x2ac>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002314:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002316:	4845      	ldr	r0, [pc, #276]	@ (800242c <HAL_DMA_Abort+0x2a8>)
 8002318:	4946      	ldr	r1, [pc, #280]	@ (8002434 <HAL_DMA_Abort+0x2b0>)
 800231a:	4283      	cmp	r3, r0
 800231c:	bf18      	it	ne
 800231e:	4293      	cmpne	r3, r2
 8002320:	f100 003c 	add.w	r0, r0, #60	@ 0x3c
 8002324:	bf0c      	ite	eq
 8002326:	2201      	moveq	r2, #1
 8002328:	2200      	movne	r2, #0
 800232a:	428b      	cmp	r3, r1
 800232c:	bf08      	it	eq
 800232e:	f042 0201 	orreq.w	r2, r2, #1
 8002332:	3128      	adds	r1, #40	@ 0x28
 8002334:	4283      	cmp	r3, r0
 8002336:	bf08      	it	eq
 8002338:	f042 0201 	orreq.w	r2, r2, #1
 800233c:	3028      	adds	r0, #40	@ 0x28
 800233e:	428b      	cmp	r3, r1
 8002340:	bf08      	it	eq
 8002342:	f042 0201 	orreq.w	r2, r2, #1
 8002346:	3128      	adds	r1, #40	@ 0x28
 8002348:	4283      	cmp	r3, r0
 800234a:	bf08      	it	eq
 800234c:	f042 0201 	orreq.w	r2, r2, #1
 8002350:	428b      	cmp	r3, r1
 8002352:	bf08      	it	eq
 8002354:	f042 0201 	orreq.w	r2, r2, #1
 8002358:	b96a      	cbnz	r2, 8002376 <HAL_DMA_Abort+0x1f2>
 800235a:	4a37      	ldr	r2, [pc, #220]	@ (8002438 <HAL_DMA_Abort+0x2b4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00a      	beq.n	8002376 <HAL_DMA_Abort+0x1f2>
    __HAL_UNLOCK(hdma);
 8002360:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	2201      	movs	r2, #1
  return HAL_OK;
 8002364:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8002366:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800236a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800236e:	bd70      	pop	{r4, r5, r6, pc}
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002370:	233f      	movs	r3, #63	@ 0x3f
 8002372:	4093      	lsls	r3, r2
 8002374:	6083      	str	r3, [r0, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8002376:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002378:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 800237c:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ee      	beq.n	8002360 <HAL_DMA_Abort+0x1dc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002382:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002384:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	@ 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002388:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800238c:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800238e:	6048      	str	r0, [r1, #4]
 8002390:	e7e6      	b.n	8002360 <HAL_DMA_Abort+0x1dc>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002392:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <HAL_DMA_Abort+0x2b8>)
 8002394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002396:	f022 021e 	bic.w	r2, r2, #30
 800239a:	641a      	str	r2, [r3, #64]	@ 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800239c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800239e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a2:	655a      	str	r2, [r3, #84]	@ 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80023a6:	6813      	ldr	r3, [r2, #0]
 80023a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80023ae:	e76a      	b.n	8002286 <HAL_DMA_Abort+0x102>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b0:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80023b2:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 80023b4:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b6:	6561      	str	r1, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hdma);
 80023b8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80023bc:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        return HAL_ERROR;
 80023c0:	e752      	b.n	8002268 <HAL_DMA_Abort+0xe4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023c2:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <HAL_DMA_Abort+0x2b8>)
 80023c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80023c8:	f022 021e 	bic.w	r2, r2, #30
 80023cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80023d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023dc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80023de:	6813      	ldr	r3, [r2, #0]
 80023e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80023e6:	e74e      	b.n	8002286 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023e8:	4b14      	ldr	r3, [pc, #80]	@ (800243c <HAL_DMA_Abort+0x2b8>)
 80023ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023ec:	f022 021e 	bic.w	r2, r2, #30
 80023f0:	659a      	str	r2, [r3, #88]	@ 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023f2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023fa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002402:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002404:	e73f      	b.n	8002286 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002406:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <HAL_DMA_Abort+0x2b8>)
 8002408:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800240a:	f022 021e 	bic.w	r2, r2, #30
 800240e:	671a      	str	r2, [r3, #112]	@ 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002410:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800241c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800241e:	6813      	ldr	r3, [r2, #0]
 8002420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002424:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002426:	e72e      	b.n	8002286 <HAL_DMA_Abort+0x102>
 8002428:	40020010 	.word	0x40020010
 800242c:	58025408 	.word	0x58025408
 8002430:	5802541c 	.word	0x5802541c
 8002434:	58025430 	.word	0x58025430
 8002438:	58025494 	.word	0x58025494
 800243c:	40020000 	.word	0x40020000
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <HAL_DMA_Abort+0x35c>)
 8002442:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002446:	f022 021e 	bic.w	r2, r2, #30
 800244a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800244e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8002452:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002456:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800245a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800245c:	6813      	ldr	r3, [r2, #0]
 800245e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002462:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002464:	e70f      	b.n	8002286 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002466:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <HAL_DMA_Abort+0x35c>)
 8002468:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800246c:	f022 021e 	bic.w	r2, r2, #30
 8002470:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002474:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8002478:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800247c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002480:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002482:	6813      	ldr	r3, [r2, #0]
 8002484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002488:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800248a:	e6fc      	b.n	8002286 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800248c:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <HAL_DMA_Abort+0x360>)
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	f022 021e 	bic.w	r2, r2, #30
 8002494:	611a      	str	r2, [r3, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800249e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024a6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80024a8:	e6ed      	b.n	8002286 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_DMA_Abort+0x360>)
 80024ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ae:	f022 021e 	bic.w	r2, r2, #30
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024bc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024c4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80024c6:	e6de      	b.n	8002286 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_DMA_Abort+0x360>)
 80024ca:	e763      	b.n	8002394 <HAL_DMA_Abort+0x210>
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_DMA_Abort+0x360>)
 80024ce:	e78c      	b.n	80023ea <HAL_DMA_Abort+0x266>
 80024d0:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <HAL_DMA_Abort+0x360>)
 80024d2:	e799      	b.n	8002408 <HAL_DMA_Abort+0x284>
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_DMA_Abort+0x360>)
 80024d6:	e775      	b.n	80023c4 <HAL_DMA_Abort+0x240>
 80024d8:	4b02      	ldr	r3, [pc, #8]	@ (80024e4 <HAL_DMA_Abort+0x360>)
 80024da:	e7c5      	b.n	8002468 <HAL_DMA_Abort+0x2e4>
 80024dc:	4b01      	ldr	r3, [pc, #4]	@ (80024e4 <HAL_DMA_Abort+0x360>)
 80024de:	e7b0      	b.n	8002442 <HAL_DMA_Abort+0x2be>
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40020400 	.word	0x40020400

080024e8 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024e8:	2800      	cmp	r0, #0
 80024ea:	f000 8096 	beq.w	800261a <HAL_DMA_Abort_IT+0x132>
{
 80024ee:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f0:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	f040 8083 	bne.w	8002600 <HAL_DMA_Abort_IT+0x118>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024fa:	6803      	ldr	r3, [r0, #0]
 80024fc:	4a48      	ldr	r2, [pc, #288]	@ (8002620 <HAL_DMA_Abort_IT+0x138>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	f000 8082 	beq.w	8002608 <HAL_DMA_Abort_IT+0x120>
 8002504:	3218      	adds	r2, #24
 8002506:	4293      	cmp	r3, r2
 8002508:	d07e      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 800250a:	3218      	adds	r2, #24
 800250c:	4293      	cmp	r3, r2
 800250e:	d07b      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 8002510:	3218      	adds	r2, #24
 8002512:	4293      	cmp	r3, r2
 8002514:	d078      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 8002516:	3218      	adds	r2, #24
 8002518:	4293      	cmp	r3, r2
 800251a:	d075      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 800251c:	3218      	adds	r2, #24
 800251e:	4293      	cmp	r3, r2
 8002520:	d072      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 8002522:	3218      	adds	r2, #24
 8002524:	4293      	cmp	r3, r2
 8002526:	d06f      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 8002528:	3218      	adds	r2, #24
 800252a:	4293      	cmp	r3, r2
 800252c:	d06c      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 800252e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002532:	4293      	cmp	r3, r2
 8002534:	d068      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 8002536:	3218      	adds	r2, #24
 8002538:	4293      	cmp	r3, r2
 800253a:	d065      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 800253c:	3218      	adds	r2, #24
 800253e:	4293      	cmp	r3, r2
 8002540:	d062      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 8002542:	3218      	adds	r2, #24
 8002544:	4293      	cmp	r3, r2
 8002546:	d05f      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 8002548:	3218      	adds	r2, #24
 800254a:	4293      	cmp	r3, r2
 800254c:	d05c      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 800254e:	3218      	adds	r2, #24
 8002550:	4293      	cmp	r3, r2
 8002552:	d059      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 8002554:	3218      	adds	r2, #24
 8002556:	4293      	cmp	r3, r2
 8002558:	d056      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
 800255a:	3218      	adds	r2, #24
 800255c:	4293      	cmp	r3, r2
 800255e:	d053      	beq.n	8002608 <HAL_DMA_Abort_IT+0x120>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002560:	4a30      	ldr	r2, [pc, #192]	@ (8002624 <HAL_DMA_Abort_IT+0x13c>)
 8002562:	4d31      	ldr	r5, [pc, #196]	@ (8002628 <HAL_DMA_Abort_IT+0x140>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002564:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002566:	42ab      	cmp	r3, r5
 8002568:	bf18      	it	ne
 800256a:	4293      	cmpne	r3, r2
 800256c:	4c2f      	ldr	r4, [pc, #188]	@ (800262c <HAL_DMA_Abort_IT+0x144>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800256e:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002572:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 8002576:	bf0c      	ite	eq
 8002578:	2201      	moveq	r2, #1
 800257a:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800257c:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800257e:	42a3      	cmp	r3, r4
 8002580:	bf08      	it	eq
 8002582:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8002586:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002588:	3428      	adds	r4, #40	@ 0x28
 800258a:	42ab      	cmp	r3, r5
 800258c:	bf08      	it	eq
 800258e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8002592:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002596:	42a3      	cmp	r3, r4
 8002598:	bf08      	it	eq
 800259a:	f042 0201 	orreq.w	r2, r2, #1
 800259e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80025a0:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025a2:	42a3      	cmp	r3, r4
 80025a4:	bf08      	it	eq
 80025a6:	f042 0201 	orreq.w	r2, r2, #1
 80025aa:	4921      	ldr	r1, [pc, #132]	@ (8002630 <HAL_DMA_Abort_IT+0x148>)
 80025ac:	428b      	cmp	r3, r1
 80025ae:	bf08      	it	eq
 80025b0:	f042 0201 	orreq.w	r2, r2, #1
 80025b4:	b912      	cbnz	r2, 80025bc <HAL_DMA_Abort_IT+0xd4>
 80025b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002634 <HAL_DMA_Abort_IT+0x14c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d117      	bne.n	80025ec <HAL_DMA_Abort_IT+0x104>
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025bc:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025be:	6d84      	ldr	r4, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025c0:	e9d0 1517 	ldrd	r1, r5, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025c4:	682a      	ldr	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025c6:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025ce:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025d0:	602a      	str	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025d2:	6063      	str	r3, [r4, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;

        if(hdma->DMAmuxRequestGen != 0U)
 80025d4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025d6:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 80025da:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80025dc:	b133      	cbz	r3, 80025ec <HAL_DMA_Abort_IT+0x104>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025de:	681a      	ldr	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025e0:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e8:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ea:	604c      	str	r4, [r1, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ec:	2101      	movs	r1, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ee:	2200      	movs	r2, #0

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025f0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80025f2:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80025f6:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 80025fa:	b163      	cbz	r3, 8002616 <HAL_DMA_Abort_IT+0x12e>
      {
        hdma->XferAbortCallback(hdma);
 80025fc:	4798      	blx	r3
 80025fe:	e00a      	b.n	8002616 <HAL_DMA_Abort_IT+0x12e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002604:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8002606:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 8002608:	2204      	movs	r2, #4
 800260a:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002616:	2000      	movs	r0, #0
}
 8002618:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800261a:	2001      	movs	r0, #1
}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40020010 	.word	0x40020010
 8002624:	5802541c 	.word	0x5802541c
 8002628:	58025408 	.word	0x58025408
 800262c:	58025430 	.word	0x58025430
 8002630:	58025480 	.word	0x58025480
 8002634:	58025494 	.word	0x58025494

08002638 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002638:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800263a:	688b      	ldr	r3, [r1, #8]
 800263c:	680d      	ldr	r5, [r1, #0]
 800263e:	694c      	ldr	r4, [r1, #20]
 8002640:	432b      	orrs	r3, r5
 8002642:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002644:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002648:	4323      	orrs	r3, r4
 800264a:	698c      	ldr	r4, [r1, #24]
 800264c:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800264e:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002652:	4323      	orrs	r3, r4
 8002654:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002656:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800265a:	4d52      	ldr	r5, [pc, #328]	@ (80027a4 <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800265c:	4323      	orrs	r3, r4
 800265e:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8002660:	4323      	orrs	r3, r4
 8002662:	4c51      	ldr	r4, [pc, #324]	@ (80027a8 <ETH_SetMACConfig+0x170>)
 8002664:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002666:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002668:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800266a:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800266c:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002670:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002672:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002676:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002678:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800267c:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800267e:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 8002682:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002684:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002688:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800268a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800268e:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002690:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002694:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002696:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 800269a:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800269e:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026a2:	7c08      	ldrb	r0, [r1, #16]
 80026a4:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026a8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026ac:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026ae:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026b0:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026b4:	7f88      	ldrb	r0, [r1, #30]
 80026b6:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026ba:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026be:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026c0:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026c4:	f891 0020 	ldrb.w	r0, [r1, #32]
 80026c8:	fab0 f080 	clz	r0, r0
 80026cc:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026ce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026d2:	6b48      	ldr	r0, [r1, #52]	@ 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026d4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026d6:	6853      	ldr	r3, [r2, #4]
 80026d8:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026da:	f64f 750d 	movw	r5, #65293	@ 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026de:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026e2:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026e6:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026e8:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026ec:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026f0:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026f4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80026f8:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 80026fc:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002700:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002704:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002706:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800270a:	4828      	ldr	r0, [pc, #160]	@ (80027ac <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800270c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800270e:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8002710:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002712:	4018      	ands	r0, r3
 8002714:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8002716:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002718:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800271c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002720:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002722:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002724:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 8002726:	402b      	ands	r3, r5
 8002728:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800272c:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002730:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002732:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 8002736:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800273a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800273e:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002740:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002744:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002748:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800274a:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800274e:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002752:	f020 0003 	bic.w	r0, r0, #3
 8002756:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002758:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800275c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002764:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 8002768:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 800276c:	432b      	orrs	r3, r5
 800276e:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002772:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002776:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800277a:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800277e:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002782:	4323      	orrs	r3, r4
 8002784:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002788:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 800278c:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002790:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002794:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002796:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 800279a:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800279c:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	c0f88000 	.word	0xc0f88000
 80027a8:	00048083 	.word	0x00048083
 80027ac:	fffffef0 	.word	0xfffffef0

080027b0 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027b0:	6803      	ldr	r3, [r0, #0]
 80027b2:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <ETH_SetDMAConfig+0x7c>)
 80027b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b8:	6808      	ldr	r0, [r1, #0]
{
 80027ba:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027bc:	681c      	ldr	r4, [r3, #0]
 80027be:	4022      	ands	r2, r4
 80027c0:	4302      	orrs	r2, r0
 80027c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027c4:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027c6:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027c8:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027ca:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027cc:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80027d0:	688c      	ldr	r4, [r1, #8]
 80027d2:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027d4:	4c16      	ldr	r4, [pc, #88]	@ (8002830 <ETH_SetDMAConfig+0x80>)
 80027d6:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027d8:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027da:	4322      	orrs	r2, r4
 80027dc:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027de:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027e0:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027e4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027e8:	4812      	ldr	r0, [pc, #72]	@ (8002834 <ETH_SetDMAConfig+0x84>)
 80027ea:	4020      	ands	r0, r4
 80027ec:	4302      	orrs	r2, r0
 80027ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027f2:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80027f4:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027f6:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027f8:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 80027fc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002800:	690c      	ldr	r4, [r1, #16]
 8002802:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002804:	4c0c      	ldr	r4, [pc, #48]	@ (8002838 <ETH_SetDMAConfig+0x88>)
 8002806:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002808:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800280a:	4322      	orrs	r2, r4
 800280c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002810:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002814:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002816:	4909      	ldr	r1, [pc, #36]	@ (800283c <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002818:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800281c:	4021      	ands	r1, r4
}
 800281e:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002822:	430a      	orrs	r2, r1
 8002824:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	ffff87fd 	.word	0xffff87fd
 8002830:	ffff2ffe 	.word	0xffff2ffe
 8002834:	fffec000 	.word	0xfffec000
 8002838:	ffc0efef 	.word	0xffc0efef
 800283c:	7fc0ffff 	.word	0x7fc0ffff

08002840 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002844:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 8002846:	4692      	mov	sl, r2
 8002848:	b085      	sub	sp, #20
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800284a:	688e      	ldr	r6, [r1, #8]
 800284c:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002850:	f8de 3018 	ldr.w	r3, [lr, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	2a00      	cmp	r2, #0
 8002858:	f2c0 8141 	blt.w	8002ade <ETH_Prepare_Tx_Descriptors+0x29e>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800285c:	f8de 202c 	ldr.w	r2, [lr, #44]	@ 0x2c
 8002860:	2a00      	cmp	r2, #0
 8002862:	f040 813c 	bne.w	8002ade <ETH_Prepare_Tx_Descriptors+0x29e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002866:	680d      	ldr	r5, [r1, #0]
 8002868:	f015 0c04 	ands.w	ip, r5, #4
 800286c:	d02a      	beq.n	80028c4 <ETH_Prepare_Tx_Descriptors+0x84>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	4fa9      	ldr	r7, [pc, #676]	@ (8002b18 <ETH_Prepare_Tx_Descriptors+0x2d8>)
 8002872:	4017      	ands	r7, r2
 8002874:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8002876:	4317      	orrs	r7, r2
 8002878:	60df      	str	r7, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800287a:	68da      	ldr	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800287c:	6807      	ldr	r7, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800287e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002882:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002884:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002886:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800288a:	663a      	str	r2, [r7, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800288c:	072a      	lsls	r2, r5, #28
 800288e:	d519      	bpl.n	80028c4 <ETH_Prepare_Tx_Descriptors+0x84>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	fa1f f882 	uxth.w	r8, r2
 8002896:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8002898:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800289c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80028a4:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	f422 2840 	bic.w	r8, r2, #786432	@ 0xc0000
 80028ac:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80028ae:	ea48 0202 	orr.w	r2, r8, r2
 80028b2:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80028b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80028b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80028ba:	667a      	str	r2, [r7, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80028bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028be:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80028c2:	653a      	str	r2, [r7, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80028c4:	f015 0810 	ands.w	r8, r5, #16
 80028c8:	d009      	beq.n	80028de <ETH_Prepare_Tx_Descriptors+0x9e>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4f93      	ldr	r7, [pc, #588]	@ (8002b1c <ETH_Prepare_Tx_Descriptors+0x2dc>)
 80028ce:	4017      	ands	r7, r2
 80028d0:	698a      	ldr	r2, [r1, #24]
 80028d2:	4317      	orrs	r7, r2
 80028d4:	609f      	str	r7, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80028dc:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80028de:	f015 0f14 	tst.w	r5, #20
 80028e2:	f040 80c1 	bne.w	8002a68 <ETH_Prepare_Tx_Descriptors+0x228>
 80028e6:	2701      	movs	r7, #1
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028e8:	4622      	mov	r2, r4
 80028ea:	9701      	str	r7, [sp, #4]
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80028ec:	6837      	ldr	r7, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80028ee:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8002b1c <ETH_Prepare_Tx_Descriptors+0x2dc>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80028f2:	601f      	str	r7, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80028f4:	689f      	ldr	r7, [r3, #8]
 80028f6:	ea07 0909 	and.w	r9, r7, r9
 80028fa:	6877      	ldr	r7, [r6, #4]
 80028fc:	ea49 0707 	orr.w	r7, r9, r7
 8002900:	609f      	str	r7, [r3, #8]

  if (txbuffer->next != NULL)
 8002902:	68b7      	ldr	r7, [r6, #8]
 8002904:	2f00      	cmp	r7, #0
 8002906:	f000 812d 	beq.w	8002b64 <ETH_Prepare_Tx_Descriptors+0x324>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800290a:	683e      	ldr	r6, [r7, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800290c:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8002b24 <ETH_Prepare_Tx_Descriptors+0x2e4>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002910:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002912:	689e      	ldr	r6, [r3, #8]
 8002914:	ea06 0909 	and.w	r9, r6, r9
 8002918:	687e      	ldr	r6, [r7, #4]
 800291a:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 800291e:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002920:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002922:	f1b8 0f00 	cmp.w	r8, #0
 8002926:	f000 80dc 	beq.w	8002ae2 <ETH_Prepare_Tx_Descriptors+0x2a2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800292a:	6a0d      	ldr	r5, [r1, #32]
 800292c:	f426 06f0 	bic.w	r6, r6, #7864320	@ 0x780000
 8002930:	ea46 45c5 	orr.w	r5, r6, r5, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002934:	4e7a      	ldr	r6, [pc, #488]	@ (8002b20 <ETH_Prepare_Tx_Descriptors+0x2e0>)
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002936:	60dd      	str	r5, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002938:	68dd      	ldr	r5, [r3, #12]
 800293a:	402e      	ands	r6, r5
 800293c:	69cd      	ldr	r5, [r1, #28]
 800293e:	432e      	orrs	r6, r5
 8002940:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002942:	68dd      	ldr	r5, [r3, #12]
 8002944:	f445 2580 	orr.w	r5, r5, #262144	@ 0x40000
 8002948:	60dd      	str	r5, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800294a:	f1bc 0f00 	cmp.w	ip, #0
 800294e:	d005      	beq.n	800295c <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002950:	689e      	ldr	r6, [r3, #8]
 8002952:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8002954:	f426 4640 	bic.w	r6, r6, #49152	@ 0xc000
 8002958:	4335      	orrs	r5, r6
 800295a:	609d      	str	r5, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800295c:	68dd      	ldr	r5, [r3, #12]
 800295e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8002962:	60dd      	str	r5, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002964:	68dd      	ldr	r5, [r3, #12]
 8002966:	f025 4580 	bic.w	r5, r5, #1073741824	@ 0x40000000
 800296a:	60dd      	str	r5, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800296c:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002970:	68dd      	ldr	r5, [r3, #12]
 8002972:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8002976:	60dd      	str	r5, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002978:	680d      	ldr	r5, [r1, #0]
 800297a:	07ad      	lsls	r5, r5, #30
 800297c:	d505      	bpl.n	800298a <ETH_Prepare_Tx_Descriptors+0x14a>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800297e:	68de      	ldr	r6, [r3, #12]
 8002980:	68cd      	ldr	r5, [r1, #12]
 8002982:	f026 7660 	bic.w	r6, r6, #58720256	@ 0x3800000
 8002986:	4335      	orrs	r5, r6
 8002988:	60dd      	str	r5, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800298a:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800298e:	f1b9 0f00 	cmp.w	r9, #0
 8002992:	f000 80fd 	beq.w	8002b90 <ETH_Prepare_Tx_Descriptors+0x350>
 8002996:	2500      	movs	r5, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002998:	4f60      	ldr	r7, [pc, #384]	@ (8002b1c <ETH_Prepare_Tx_Descriptors+0x2dc>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800299a:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002b24 <ETH_Prepare_Tx_Descriptors+0x2e4>
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800299e:	464e      	mov	r6, r9
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80029a0:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 8002b28 <ETH_Prepare_Tx_Descriptors+0x2e8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80029a4:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8002b20 <ETH_Prepare_Tx_Descriptors+0x2e0>
 80029a8:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 80029ac:	e018      	b.n	80029e0 <ETH_Prepare_Tx_Descriptors+0x1a0>
 80029ae:	ea06 090b 	and.w	r9, r6, fp
 80029b2:	69ce      	ldr	r6, [r1, #28]
 80029b4:	ea49 0606 	orr.w	r6, r9, r6
 80029b8:	60de      	str	r6, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80029ba:	68de      	ldr	r6, [r3, #12]
 80029bc:	f446 2680 	orr.w	r6, r6, #262144	@ 0x40000
 80029c0:	60de      	str	r6, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 80029c2:	3501      	adds	r5, #1
 80029c4:	f3bf 8f5f 	dmb	sy
  while (txbuffer->next != NULL)
 80029c8:	68a6      	ldr	r6, [r4, #8]

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80029ca:	68dc      	ldr	r4, [r3, #12]
 80029cc:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80029d0:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80029d2:	68dc      	ldr	r4, [r3, #12]
 80029d4:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 80029d8:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 80029da:	2e00      	cmp	r6, #0
 80029dc:	f000 80a6 	beq.w	8002b2c <ETH_Prepare_Tx_Descriptors+0x2ec>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80029e0:	68dc      	ldr	r4, [r3, #12]
 80029e2:	f024 5480 	bic.w	r4, r4, #268435456	@ 0x10000000
 80029e6:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029e8:	1c53      	adds	r3, r2, #1
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	bf94      	ite	ls
 80029ee:	461a      	movls	r2, r3
 80029f0:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029f2:	eb00 0982 	add.w	r9, r0, r2, lsl #2
 80029f6:	f8d9 3018 	ldr.w	r3, [r9, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80029fa:	68dc      	ldr	r4, [r3, #12]
 80029fc:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8002a00:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002a02:	68dc      	ldr	r4, [r3, #12]
 8002a04:	2c00      	cmp	r4, #0
 8002a06:	db52      	blt.n	8002aae <ETH_Prepare_Tx_Descriptors+0x26e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a08:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8002a0c:	2c00      	cmp	r4, #0
 8002a0e:	d14e      	bne.n	8002aae <ETH_Prepare_Tx_Descriptors+0x26e>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a10:	6834      	ldr	r4, [r6, #0]
 8002a12:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a14:	689c      	ldr	r4, [r3, #8]
 8002a16:	ea04 0907 	and.w	r9, r4, r7
 8002a1a:	6874      	ldr	r4, [r6, #4]
 8002a1c:	ea49 0404 	orr.w	r4, r9, r4
 8002a20:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8002a22:	68b4      	ldr	r4, [r6, #8]
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	d03b      	beq.n	8002aa0 <ETH_Prepare_Tx_Descriptors+0x260>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a28:	6826      	ldr	r6, [r4, #0]
 8002a2a:	605e      	str	r6, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a2c:	689e      	ldr	r6, [r3, #8]
 8002a2e:	ea06 090c 	and.w	r9, r6, ip
 8002a32:	6866      	ldr	r6, [r4, #4]
 8002a34:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8002a38:	609e      	str	r6, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a3a:	f8d1 a000 	ldr.w	sl, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a3e:	68de      	ldr	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a40:	f01a 0f10 	tst.w	sl, #16
 8002a44:	d1b3      	bne.n	80029ae <ETH_Prepare_Tx_Descriptors+0x16e>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002a46:	ea06 0908 	and.w	r9, r6, r8
 8002a4a:	684e      	ldr	r6, [r1, #4]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002a4c:	f01a 0f01 	tst.w	sl, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002a50:	ea49 0606 	orr.w	r6, r9, r6
 8002a54:	60de      	str	r6, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002a56:	d0b4      	beq.n	80029c2 <ETH_Prepare_Tx_Descriptors+0x182>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002a58:	68de      	ldr	r6, [r3, #12]
 8002a5a:	f426 3940 	bic.w	r9, r6, #196608	@ 0x30000
 8002a5e:	694e      	ldr	r6, [r1, #20]
 8002a60:	ea49 0606 	orr.w	r6, r9, r6
 8002a64:	60de      	str	r6, [r3, #12]
 8002a66:	e7ac      	b.n	80029c2 <ETH_Prepare_Tx_Descriptors+0x182>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a7a:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a7c:	1c62      	adds	r2, r4, #1
 8002a7e:	2a03      	cmp	r2, #3
 8002a80:	bf88      	it	hi
 8002a82:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a84:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002a88:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a8a:	68dd      	ldr	r5, [r3, #12]
 8002a8c:	2d00      	cmp	r5, #0
 8002a8e:	db76      	blt.n	8002b7e <ETH_Prepare_Tx_Descriptors+0x33e>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a90:	680d      	ldr	r5, [r1, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a92:	2702      	movs	r7, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a94:	f005 0810 	and.w	r8, r5, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a98:	f005 0c04 	and.w	ip, r5, #4
 8002a9c:	9701      	str	r7, [sp, #4]
 8002a9e:	e725      	b.n	80028ec <ETH_Prepare_Tx_Descriptors+0xac>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002aa0:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002aa2:	4634      	mov	r4, r6
 8002aa4:	689e      	ldr	r6, [r3, #8]
 8002aa6:	ea06 060c 	and.w	r6, r6, ip
 8002aaa:	609e      	str	r6, [r3, #8]
 8002aac:	e7c5      	b.n	8002a3a <ETH_Prepare_Tx_Descriptors+0x1fa>
      for (idx = 0; idx < descnbr; idx ++)
 8002aae:	9b01      	ldr	r3, [sp, #4]
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ab0:	9c02      	ldr	r4, [sp, #8]
      for (idx = 0; idx < descnbr; idx ++)
 8002ab2:	195e      	adds	r6, r3, r5
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ab4:	f8de 2018 	ldr.w	r2, [lr, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002ab8:	d011      	beq.n	8002ade <ETH_Prepare_Tx_Descriptors+0x29e>
 8002aba:	2100      	movs	r1, #0
 8002abc:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ac0:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ac2:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ac4:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8002ac6:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ac8:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ace:	bf98      	it	ls
 8002ad0:	462c      	movls	r4, r5
 8002ad2:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8002ad4:	42b1      	cmp	r1, r6
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ad6:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8002ada:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002adc:	d1ee      	bne.n	8002abc <ETH_Prepare_Tx_Descriptors+0x27c>
    return HAL_ETH_ERROR_BUSY;
 8002ade:	2002      	movs	r0, #2
 8002ae0:	e03d      	b.n	8002b5e <ETH_Prepare_Tx_Descriptors+0x31e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ae2:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8002b28 <ETH_Prepare_Tx_Descriptors+0x2e8>
 8002ae6:	ea06 0808 	and.w	r8, r6, r8
 8002aea:	684e      	ldr	r6, [r1, #4]
 8002aec:	ea48 0606 	orr.w	r6, r8, r6
 8002af0:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002af2:	07ee      	lsls	r6, r5, #31
 8002af4:	d506      	bpl.n	8002b04 <ETH_Prepare_Tx_Descriptors+0x2c4>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002af6:	68de      	ldr	r6, [r3, #12]
 8002af8:	f426 3840 	bic.w	r8, r6, #196608	@ 0x30000
 8002afc:	694e      	ldr	r6, [r1, #20]
 8002afe:	ea48 0606 	orr.w	r6, r8, r6
 8002b02:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002b04:	06ae      	lsls	r6, r5, #26
 8002b06:	f57f af20 	bpl.w	800294a <ETH_Prepare_Tx_Descriptors+0x10a>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002b0a:	68de      	ldr	r6, [r3, #12]
 8002b0c:	690d      	ldr	r5, [r1, #16]
 8002b0e:	f026 6640 	bic.w	r6, r6, #201326592	@ 0xc000000
 8002b12:	4335      	orrs	r5, r6
 8002b14:	60dd      	str	r5, [r3, #12]
 8002b16:	e718      	b.n	800294a <ETH_Prepare_Tx_Descriptors+0x10a>
 8002b18:	ffff0000 	.word	0xffff0000
 8002b1c:	ffffc000 	.word	0xffffc000
 8002b20:	fffc0000 	.word	0xfffc0000
 8002b24:	c000ffff 	.word	0xc000ffff
 8002b28:	ffff8000 	.word	0xffff8000
 8002b2c:	f8dd a00c 	ldr.w	sl, [sp, #12]
  }

  if (ItMode != ((uint32_t)RESET))
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002b30:	6899      	ldr	r1, [r3, #8]
  if (ItMode != ((uint32_t)RESET))
 8002b32:	f1ba 0f00 	cmp.w	sl, #0
 8002b36:	d01e      	beq.n	8002b76 <ETH_Prepare_Tx_Descriptors+0x336>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002b38:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8002b3c:	6099      	str	r1, [r3, #8]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b3e:	68d9      	ldr	r1, [r3, #12]
 8002b40:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002b44:	60d9      	str	r1, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002b46:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002b4a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002b4c:	62d9      	str	r1, [r3, #44]	@ 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 8002b4e:	6282      	str	r2, [r0, #40]	@ 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002b52:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002b54:	3301      	adds	r3, #1
 8002b56:	442b      	add	r3, r5
 8002b58:	6403      	str	r3, [r0, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b5a:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b5c:	2000      	movs	r0, #0
}
 8002b5e:	b005      	add	sp, #20
 8002b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b64:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002b66:	4637      	mov	r7, r6
 8002b68:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8002b6c:	4e09      	ldr	r6, [pc, #36]	@ (8002b94 <ETH_Prepare_Tx_Descriptors+0x354>)
 8002b6e:	ea09 0606 	and.w	r6, r9, r6
 8002b72:	609e      	str	r6, [r3, #8]
 8002b74:	e6d4      	b.n	8002920 <ETH_Prepare_Tx_Descriptors+0xe0>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002b76:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002b7a:	6099      	str	r1, [r3, #8]
 8002b7c:	e7df      	b.n	8002b3e <ETH_Prepare_Tx_Descriptors+0x2fe>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b7e:	f8de 2018 	ldr.w	r2, [lr, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b82:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b86:	68d3      	ldr	r3, [r2, #12]
 8002b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b8c:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8002b8e:	e7a6      	b.n	8002ade <ETH_Prepare_Tx_Descriptors+0x29e>
  while (txbuffer->next != NULL)
 8002b90:	464d      	mov	r5, r9
 8002b92:	e7cd      	b.n	8002b30 <ETH_Prepare_Tx_Descriptors+0x2f0>
 8002b94:	c000ffff 	.word	0xc000ffff

08002b98 <ETH_UpdateDescriptor>:
{
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buff = NULL;
 8002b9a:	2300      	movs	r3, #0
{
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	4605      	mov	r5, r0
  uint8_t *buff = NULL;
 8002ba0:	9301      	str	r3, [sp, #4]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002ba2:	e9d0 761a 	ldrd	r7, r6, [r0, #104]	@ 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ba6:	f107 0312 	add.w	r3, r7, #18
 8002baa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002bae:	b1ee      	cbz	r6, 8002bec <ETH_UpdateDescriptor+0x54>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002bb0:	6923      	ldr	r3, [r4, #16]
 8002bb2:	b19b      	cbz	r3, 8002bdc <ETH_UpdateDescriptor+0x44>
 8002bb4:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 8002bb8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002bba:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002bbe:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8002bc2:	bb03      	cbnz	r3, 8002c06 <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002bc4:	60e2      	str	r2, [r4, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002bc6:	1c7b      	adds	r3, r7, #1
      desccount--;
 8002bc8:	3e01      	subs	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	bf88      	it	hi
 8002bce:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002bd0:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 8002bd4:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002bd6:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
      desccount--;
 8002bda:	e7e8      	b.n	8002bae <ETH_UpdateDescriptor+0x16>
      HAL_ETH_RxAllocateCallback(&buff);
 8002bdc:	a801      	add	r0, sp, #4
 8002bde:	f004 fac7 	bl	8007170 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8002be2:	9b01      	ldr	r3, [sp, #4]
 8002be4:	b113      	cbz	r3, 8002bec <ETH_UpdateDescriptor+0x54>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002be6:	6123      	str	r3, [r4, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002be8:	6023      	str	r3, [r4, #0]
    if (allocStatus != 0U)
 8002bea:	e7e3      	b.n	8002bb4 <ETH_UpdateDescriptor+0x1c>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002bec:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002bee:	42b3      	cmp	r3, r6
 8002bf0:	d007      	beq.n	8002c02 <ETH_UpdateDescriptor+0x6a>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bfa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002bfe:	e9c5 761a 	strd	r7, r6, [r5, #104]	@ 0x68
}
 8002c02:	b003      	add	sp, #12
 8002c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002c06:	60e1      	str	r1, [r4, #12]
 8002c08:	e7dd      	b.n	8002bc6 <ETH_UpdateDescriptor+0x2e>
 8002c0a:	bf00      	nop

08002c0c <HAL_ETH_Start_IT>:
{
 8002c0c:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002c0e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d001      	beq.n	8002c1a <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
}
 8002c18:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002c1a:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c1c:	2523      	movs	r5, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c22:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    heth->RxDescList.ItMode = 1U;
 8002c26:	6582      	str	r2, [r0, #88]	@ 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002c28:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <HAL_ETH_Start_IT+0x98>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002c34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <HAL_ETH_Start_IT+0x9c>)
 8002c36:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002c40:	2304      	movs	r3, #4
 8002c42:	66c3      	str	r3, [r0, #108]	@ 0x6c
    ETH_UpdateDescriptor(heth);
 8002c44:	f7ff ffa8 	bl	8002b98 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c48:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8002c4a:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c4c:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c4e:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c52:	f041 0102 	orr.w	r1, r1, #2
 8002c56:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002c58:	6811      	ldr	r1, [r2, #0]
 8002c5a:	f041 0101 	orr.w	r1, r1, #1
 8002c5e:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002c60:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	@ 0xd00
 8002c64:	f041 0101 	orr.w	r1, r1, #1
 8002c68:	f8c2 1d00 	str.w	r1, [r2, #3328]	@ 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002c6c:	f24d 02c1 	movw	r2, #53441	@ 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c70:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 8002c74:	f041 0101 	orr.w	r1, r1, #1
 8002c78:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002c7c:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8002c80:	f041 0101 	orr.w	r1, r1, #1
 8002c84:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002c88:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 8002c8c:	f441 7181 	orr.w	r1, r1, #258	@ 0x102
 8002c90:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002c94:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8002c9e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8002ca2:	bd38      	pop	{r3, r4, r5, pc}
 8002ca4:	0c020060 	.word	0x0c020060
 8002ca8:	0c20c000 	.word	0x0c20c000

08002cac <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002cac:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8002cb0:	2a23      	cmp	r2, #35	@ 0x23
 8002cb2:	d001      	beq.n	8002cb8 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8002cb4:	2001      	movs	r0, #1
}
 8002cb6:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002cb8:	4601      	mov	r1, r0
 8002cba:	4603      	mov	r3, r0
{
 8002cbc:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cbe:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002cc2:	f103 0c54 	add.w	ip, r3, #84	@ 0x54
 8002cc6:	f851 2b44 	ldr.w	r2, [r1], #68
 8002cca:	4c19      	ldr	r4, [pc, #100]	@ (8002d30 <HAL_ETH_Stop_IT+0x84>)
 8002ccc:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8002cd0:	f8d0 5134 	ldr.w	r5, [r0, #308]	@ 0x134
 8002cd4:	402c      	ands	r4, r5
 8002cd6:	f8c0 4134 	str.w	r4, [r0, #308]	@ 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002cda:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
 8002cde:	f024 0401 	bic.w	r4, r4, #1
 8002ce2:	f8c0 4104 	str.w	r4, [r0, #260]	@ 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002ce6:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
 8002cea:	f024 0401 	bic.w	r4, r4, #1
 8002cee:	f8c0 4108 	str.w	r4, [r0, #264]	@ 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002cf2:	6810      	ldr	r0, [r2, #0]
 8002cf4:	f020 0001 	bic.w	r0, r0, #1
 8002cf8:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002cfa:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	@ 0xd00
 8002cfe:	f040 0001 	orr.w	r0, r0, #1
 8002d02:	f8c2 0d00 	str.w	r0, [r2, #3328]	@ 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d06:	6810      	ldr	r0, [r2, #0]
 8002d08:	f020 0002 	bic.w	r0, r0, #2
 8002d0c:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002d0e:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002d12:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002d14:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002d16:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8002d1a:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002d1c:	d1f7      	bne.n	8002d0e <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 8002d1e:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8002d20:	2110      	movs	r1, #16
    return HAL_OK;
 8002d22:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8002d26:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
}
 8002d2a:	bc30      	pop	{r4, r5}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	ffff2f3e 	.word	0xffff2f3e

08002d34 <HAL_ETH_Transmit_IT>:
{
 8002d34:	b510      	push	{r4, lr}
 8002d36:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8002d38:	b321      	cbz	r1, 8002d84 <HAL_ETH_Transmit_IT+0x50>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002d3a:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8002d3e:	2a23      	cmp	r2, #35	@ 0x23
 8002d40:	d001      	beq.n	8002d46 <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 8002d42:	2001      	movs	r0, #1
}
 8002d44:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002d46:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002d48:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002d4a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002d4c:	f7ff fd78 	bl	8002840 <ETH_Prepare_Tx_Descriptors>
 8002d50:	b130      	cbz	r0, 8002d60 <HAL_ETH_Transmit_IT+0x2c>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002d52:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002d56:	f043 0302 	orr.w	r3, r3, #2
 8002d5a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 8002d5e:	e7f0      	b.n	8002d42 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8002d60:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002d64:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    return HAL_OK;
 8002d66:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002d68:	1c53      	adds	r3, r2, #1
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	bf88      	it	hi
 8002d6e:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002d70:	6822      	ldr	r2, [r4, #0]
 8002d72:	1d99      	adds	r1, r3, #6
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002d74:	62a3      	str	r3, [r4, #40]	@ 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002d76:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 8002d7a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8002d7e:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
}
 8002d82:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002d84:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8002d90:	e7d7      	b.n	8002d42 <HAL_ETH_Transmit_IT+0xe>
 8002d92:	bf00      	nop

08002d94 <HAL_ETH_ReadData>:
{
 8002d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d98:	4604      	mov	r4, r0
 8002d9a:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8002d9c:	2900      	cmp	r1, #0
 8002d9e:	d070      	beq.n	8002e82 <HAL_ETH_ReadData+0xee>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002da0:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002da4:	2b23      	cmp	r3, #35	@ 0x23
 8002da6:	d162      	bne.n	8002e6e <HAL_ETH_ReadData+0xda>
  descidx = heth->RxDescList.RxDescIdx;
 8002da8:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
 8002dac:	460f      	mov	r7, r1
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002dae:	f108 0312 	add.w	r3, r8, #18
 8002db2:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002db6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002db8:	68e9      	ldr	r1, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002dba:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8002dbe:	2900      	cmp	r1, #0
 8002dc0:	db6a      	blt.n	8002e98 <HAL_ETH_ReadData+0x104>
 8002dc2:	f1bb 0f00 	cmp.w	fp, #0
 8002dc6:	d069      	beq.n	8002e9c <HAL_ETH_ReadData+0x108>
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002dc8:	f100 0380 	add.w	r3, r0, #128	@ 0x80
  uint32_t desccnt = 0U;
 8002dcc:	f04f 0900 	mov.w	r9, #0
      dmarxdesc->BackupAddr0 = 0;
 8002dd0:	9703      	str	r7, [sp, #12]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	f100 037c 	add.w	r3, r0, #124	@ 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8002dd8:	46ca      	mov	sl, r9
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	e003      	b.n	8002de6 <HAL_ETH_ReadData+0x52>
         && (rxdataready == 0U))
 8002dde:	45cb      	cmp	fp, r9
 8002de0:	d93d      	bls.n	8002e5e <HAL_ETH_ReadData+0xca>
 8002de2:	2e00      	cmp	r6, #0
 8002de4:	d13b      	bne.n	8002e5e <HAL_ETH_ReadData+0xca>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002de6:	68eb      	ldr	r3, [r5, #12]
 8002de8:	0059      	lsls	r1, r3, #1
 8002dea:	d503      	bpl.n	8002df4 <HAL_ETH_ReadData+0x60>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002dec:	686b      	ldr	r3, [r5, #4]
 8002dee:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002df4:	68eb      	ldr	r3, [r5, #12]
 8002df6:	009a      	lsls	r2, r3, #2
 8002df8:	d401      	bmi.n	8002dfe <HAL_ETH_ReadData+0x6a>
 8002dfa:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 8002dfc:	b1fe      	cbz	r6, 8002e3e <HAL_ETH_ReadData+0xaa>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002dfe:	68eb      	ldr	r3, [r5, #12]
      bufflength = heth->Init.RxBuffLen;
 8002e00:	6967      	ldr	r7, [r4, #20]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002e02:	009b      	lsls	r3, r3, #2
        heth->RxDescList.RxDescCnt = 0;
 8002e04:	bf48      	it	mi
 8002e06:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	@ 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002e0a:	68ee      	ldr	r6, [r5, #12]
 8002e0c:	f016 5680 	ands.w	r6, r6, #268435456	@ 0x10000000
 8002e10:	d007      	beq.n	8002e22 <HAL_ETH_ReadData+0x8e>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002e12:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 8002e14:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002e16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e18:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8002e1c:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002e1e:	68eb      	ldr	r3, [r5, #12]
 8002e20:	6723      	str	r3, [r4, #112]	@ 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002e22:	b2bb      	uxth	r3, r7
 8002e24:	692a      	ldr	r2, [r5, #16]
 8002e26:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8002e2a:	f004 f9c5 	bl	80071b8 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8002e2e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002e30:	3301      	adds	r3, #1
 8002e32:	6623      	str	r3, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e36:	443b      	add	r3, r7
 8002e38:	6663      	str	r3, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 8002e3a:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002e3e:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8002e42:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	bf8c      	ite	hi
 8002e4a:	f1a8 0803 	subhi.w	r8, r8, #3
 8002e4e:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e50:	f108 0312 	add.w	r3, r8, #18
 8002e54:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002e58:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dabf      	bge.n	8002dde <HAL_ETH_ReadData+0x4a>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002e5e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002e60:	9f03      	ldr	r7, [sp, #12]
 8002e62:	444b      	add	r3, r9
 8002e64:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002e66:	b99b      	cbnz	r3, 8002e90 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 8002e68:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8002e6c:	b91e      	cbnz	r6, 8002e76 <HAL_ETH_ReadData+0xe2>
    return HAL_ERROR;
 8002e6e:	2001      	movs	r0, #1
}
 8002e70:	b005      	add	sp, #20
 8002e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8002e76:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 8002e78:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8002e7a:	603a      	str	r2, [r7, #0]
    return HAL_OK;
 8002e7c:	4618      	mov	r0, r3
    heth->RxDescList.pRxStart = NULL;
 8002e7e:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002e80:	e7f6      	b.n	8002e70 <HAL_ETH_ReadData+0xdc>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e82:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8002e8e:	e7ee      	b.n	8002e6e <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff fe81 	bl	8002b98 <ETH_UpdateDescriptor>
 8002e96:	e7e7      	b.n	8002e68 <HAL_ETH_ReadData+0xd4>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0e8      	beq.n	8002e6e <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 8002e9c:	f7ff fe7c 	bl	8002b98 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8002ea0:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8002ea4:	e7e3      	b.n	8002e6e <HAL_ETH_ReadData+0xda>
 8002ea6:	bf00      	nop

08002ea8 <HAL_ETH_ReleaseTxPacket>:
{
 8002ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002eac:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002eb0:	b17d      	cbz	r5, 8002ed2 <HAL_ETH_ReleaseTxPacket+0x2a>
 8002eb2:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002eb4:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002eb6:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 8002eba:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002ebc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002ec0:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8002ec4:	b140      	cbz	r0, 8002ed8 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002ec6:	68f3      	ldr	r3, [r6, #12]
 8002ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da0a      	bge.n	8002ee8 <HAL_ETH_ReleaseTxPacket+0x40>
}
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002ed8:	3401      	adds	r4, #1
 8002eda:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002ede:	2d00      	cmp	r5, #0
 8002ee0:	d1e9      	bne.n	8002eb6 <HAL_ETH_ReleaseTxPacket+0xe>
}
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002ee8:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002eea:	f004 f995 	bl	8007218 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002eee:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002ef2:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002ef6:	6435      	str	r5, [r6, #64]	@ 0x40
        dmatxdesclist->releaseIndex = idx;
 8002ef8:	6474      	str	r4, [r6, #68]	@ 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002efa:	2d00      	cmp	r5, #0
 8002efc:	d1db      	bne.n	8002eb6 <HAL_ETH_ReleaseTxPacket+0xe>
 8002efe:	e7f0      	b.n	8002ee2 <HAL_ETH_ReleaseTxPacket+0x3a>

08002f00 <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <HAL_ETH_EEECallback>:
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop

08002f08 <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop

08002f0c <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002f0c:	6803      	ldr	r3, [r0, #0]
 8002f0e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8002f12:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8002f16:	0649      	lsls	r1, r1, #25
{
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002f1c:	d504      	bpl.n	8002f28 <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002f1e:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8002f22:	0649      	lsls	r1, r1, #25
 8002f24:	f100 808a 	bmi.w	800303c <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002f28:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8002f2c:	07c8      	lsls	r0, r1, #31
 8002f2e:	d503      	bpl.n	8002f38 <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002f30:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8002f34:	07c9      	lsls	r1, r1, #31
 8002f36:	d476      	bmi.n	8003026 <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002f38:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 8002f3c:	0448      	lsls	r0, r1, #17
 8002f3e:	d503      	bpl.n	8002f48 <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002f40:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 8002f44:	0449      	lsls	r1, r1, #17
 8002f46:	d41b      	bmi.n	8002f80 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 8002f48:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002f4c:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 8002f50:	d133      	bne.n	8002fba <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002f52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f56:	06d0      	lsls	r0, r2, #27
 8002f58:	d447      	bmi.n	8002fea <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002f5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f5e:	0691      	lsls	r1, r2, #26
 8002f60:	d454      	bmi.n	800300c <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f66:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002f6a:	0252      	lsls	r2, r2, #9
 8002f6c:	d400      	bmi.n	8002f70 <HAL_ETH_IRQHandler+0x64>
}
 8002f6e:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002f70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8002f74:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002f76:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    HAL_ETH_WakeUpCallback(heth);
 8002f7a:	f7ff ffc5 	bl	8002f08 <HAL_ETH_WakeUpCallback>
}
 8002f7e:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002f80:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002f8c:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
 8002f90:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002f94:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002f98:	d15a      	bne.n	8003050 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002f9a:	f44f 41cd 	mov.w	r1, #26240	@ 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002f9e:	400b      	ands	r3, r1
 8002fa0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002fa4:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
      HAL_ETH_ErrorCallback(heth);
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f003 ff3b 	bl	8006e24 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002fb4:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 8002fb8:	d0cb      	beq.n	8002f52 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002fba:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002fbe:	21e0      	movs	r1, #224	@ 0xe0
    HAL_ETH_ErrorCallback(heth);
 8002fc0:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002fc2:	f042 0210 	orr.w	r2, r2, #16
 8002fc6:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002fca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002fce:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002fd2:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8002fd6:	f003 ff25 	bl	8006e24 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002fda:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002fdc:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002fde:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002fe2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002fe6:	06d0      	lsls	r0, r2, #27
 8002fe8:	d5b7      	bpl.n	8002f5a <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002fea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    HAL_ETH_PMTCallback(heth);
 8002fee:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002ff0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002ff4:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 8002ff8:	f7ff ff82 	bl	8002f00 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002ffc:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002ffe:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003000:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8003004:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003008:	0691      	lsls	r1, r2, #26
 800300a:	d5aa      	bpl.n	8002f62 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800300c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    HAL_ETH_EEECallback(heth);
 8003010:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    HAL_ETH_EEECallback(heth);
 800301a:	f7ff ff73 	bl	8002f04 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 800301e:	2300      	movs	r3, #0
 8003020:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003024:	e79d      	b.n	8002f62 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003026:	f248 0301 	movw	r3, #32769	@ 0x8001
      HAL_ETH_TxCpltCallback(heth);
 800302a:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800302c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      HAL_ETH_TxCpltCallback(heth);
 8003030:	f003 fef2 	bl	8006e18 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800303a:	e77d      	b.n	8002f38 <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800303c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8003040:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      HAL_ETH_RxCpltCallback(heth);
 8003044:	f003 fee2 	bl	8006e0c <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800304e:	e76b      	b.n	8002f28 <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8003050:	f241 1002 	movw	r0, #4354	@ 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8003054:	21e0      	movs	r1, #224	@ 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8003056:	4003      	ands	r3, r0
 8003058:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800305c:	f8d2 3134 	ldr.w	r3, [r2, #308]	@ 0x134
 8003060:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003064:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8003068:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 800306c:	e79c      	b.n	8002fa8 <HAL_ETH_IRQHandler+0x9c>
 800306e:	bf00      	nop

08003070 <HAL_ETH_ReadPHYRegister>:
{
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003074:	6800      	ldr	r0, [r0, #0]
{
 8003076:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003078:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 800307c:	07db      	lsls	r3, r3, #31
 800307e:	d501      	bpl.n	8003084 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8003080:	2001      	movs	r0, #1
}
 8003082:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003084:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003088:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 800308c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003090:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003094:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003098:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800309c:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
  tickstart = HAL_GetTick();
 80030a0:	f7fe ffae 	bl	8002000 <HAL_GetTick>
 80030a4:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80030a6:	e005      	b.n	80030b4 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80030a8:	f7fe ffaa 	bl	8002000 <HAL_GetTick>
 80030ac:	1b82      	subs	r2, r0, r6
 80030ae:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80030b2:	d8e5      	bhi.n	8003080 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80030b4:	6821      	ldr	r1, [r4, #0]
 80030b6:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 80030ba:	f012 0201 	ands.w	r2, r2, #1
 80030be:	d1f3      	bne.n	80030a8 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80030c0:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
  return HAL_OK;
 80030c4:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	602b      	str	r3, [r5, #0]
}
 80030ca:	bd70      	pop	{r4, r5, r6, pc}

080030cc <HAL_ETH_WritePHYRegister>:
{
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80030d0:	6800      	ldr	r0, [r0, #0]
 80030d2:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 80030d6:	07ed      	lsls	r5, r5, #31
 80030d8:	d501      	bpl.n	80030de <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 80030da:	2001      	movs	r0, #1
}
 80030dc:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80030de:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80030e2:	b29d      	uxth	r5, r3
 80030e4:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 80030e8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80030ec:	490f      	ldr	r1, [pc, #60]	@ (800312c <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80030ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80030f2:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80030f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80030fa:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80030fe:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003102:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
  tickstart = HAL_GetTick();
 8003106:	f7fe ff7b 	bl	8002000 <HAL_GetTick>
 800310a:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800310c:	e005      	b.n	800311a <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800310e:	f7fe ff77 	bl	8002000 <HAL_GetTick>
 8003112:	1b43      	subs	r3, r0, r5
 8003114:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003118:	d8df      	bhi.n	80030da <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003120:	f013 0301 	ands.w	r3, r3, #1
 8003124:	d1f3      	bne.n	800310e <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 8003126:	4618      	mov	r0, r3
}
 8003128:	bd38      	pop	{r3, r4, r5, pc}
 800312a:	bf00      	nop
 800312c:	40028000 	.word	0x40028000

08003130 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8003130:	2900      	cmp	r1, #0
 8003132:	f000 80c4 	beq.w	80032be <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003136:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8003138:	2000      	movs	r0, #0
{
 800313a:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800313c:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800313e:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003140:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003144:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003148:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800314c:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800314e:	62cc      	str	r4, [r1, #44]	@ 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003150:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8003154:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 800315c:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8003160:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003164:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8003166:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800316a:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 8003172:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8003176:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8003178:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800317a:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800317e:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003186:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003188:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800318a:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800318c:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003190:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003194:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f3c2 4200 	ubfx	r2, r2, #16, #1
 800319e:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 80031a6:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80031aa:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80031b2:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 80031b6:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	f3c2 5200 	ubfx	r2, r2, #20, #1
 80031be:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80031c6:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	f3c2 5280 	ubfx	r2, r2, #22, #1
 80031ce:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80031d0:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80031d2:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80031d6:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80031d8:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80031da:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80031dc:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80031e0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80031e4:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80031e6:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80031e8:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80031ea:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80031ec:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80031f0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80031f4:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80031f6:	634a      	str	r2, [r1, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 80031fe:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8003202:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800320c:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003210:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003212:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003216:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800321a:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 800321c:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003220:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003224:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003226:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003228:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800322c:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003230:	63cc      	str	r4, [r1, #60]	@ 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003232:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003236:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003238:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800323a:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800323e:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003242:	644c      	str	r4, [r1, #68]	@ 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003244:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003248:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800324a:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 800324e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8003252:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003256:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003258:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800325a:	f004 0470 	and.w	r4, r4, #112	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800325e:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003260:	650c      	str	r4, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003262:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003264:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003268:	f002 0201 	and.w	r2, r2, #1
 800326c:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003270:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
                                      ? ENABLE : DISABLE;
 8003274:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003278:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800327c:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003280:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003284:	f004 0472 	and.w	r4, r4, #114	@ 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003288:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 800328c:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003290:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
}
 8003294:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003298:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800329c:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80032a0:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 80032a4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80032a8:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80032ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80032b0:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80032b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80032b8:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
}
 80032bc:	4770      	bx	lr
    return HAL_ERROR;
 80032be:	2001      	movs	r0, #1
}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop

080032c4 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 80032c4:	b131      	cbz	r1, 80032d4 <HAL_ETH_SetMACConfig+0x10>
{
 80032c6:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80032c8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d003      	beq.n	80032d8 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 80032d0:	2001      	movs	r0, #1
}
 80032d2:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80032d4:	2001      	movs	r0, #1
}
 80032d6:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 80032d8:	f7ff f9ae 	bl	8002638 <ETH_SetMACConfig>
    return HAL_OK;
 80032dc:	2000      	movs	r0, #0
}
 80032de:	bd08      	pop	{r3, pc}

080032e0 <HAL_ETH_SetMDIOClockRange>:
{
 80032e0:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 80032e2:	6803      	ldr	r3, [r0, #0]
{
 80032e4:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 80032e6:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 80032ea:	f000 ff55 	bl	8004198 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80032ee:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <HAL_ETH_SetMDIOClockRange+0x64>)
 80032f0:	4a15      	ldr	r2, [pc, #84]	@ (8003348 <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80032f2:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80032f6:	4403      	add	r3, r0
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d205      	bcs.n	8003308 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80032fc:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003300:	682b      	ldr	r3, [r5, #0]
 8003302:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8003306:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003308:	4b10      	ldr	r3, [pc, #64]	@ (800334c <HAL_ETH_SetMDIOClockRange+0x6c>)
 800330a:	4a11      	ldr	r2, [pc, #68]	@ (8003350 <HAL_ETH_SetMDIOClockRange+0x70>)
 800330c:	4403      	add	r3, r0
 800330e:	4293      	cmp	r3, r2
 8003310:	d805      	bhi.n	800331e <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003312:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003316:	682b      	ldr	r3, [r5, #0]
 8003318:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 800331c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800331e:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <HAL_ETH_SetMDIOClockRange+0x74>)
 8003320:	4a0d      	ldr	r2, [pc, #52]	@ (8003358 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003322:	4403      	add	r3, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d3eb      	bcc.n	8003300 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <HAL_ETH_SetMDIOClockRange+0x7c>)
 800332a:	4a0d      	ldr	r2, [pc, #52]	@ (8003360 <HAL_ETH_SetMDIOClockRange+0x80>)
 800332c:	4403      	add	r3, r0
 800332e:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003330:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003332:	bf94      	ite	ls
 8003334:	f444 7480 	orrls.w	r4, r4, #256	@ 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003338:	f444 6480 	orrhi.w	r4, r4, #1024	@ 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800333c:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8003340:	bd38      	pop	{r3, r4, r5, pc}
 8003342:	bf00      	nop
 8003344:	feced300 	.word	0xfeced300
 8003348:	00e4e1c0 	.word	0x00e4e1c0
 800334c:	fde9f140 	.word	0xfde9f140
 8003350:	017d783f 	.word	0x017d783f
 8003354:	fc6c7900 	.word	0xfc6c7900
 8003358:	02625a00 	.word	0x02625a00
 800335c:	fa0a1f00 	.word	0xfa0a1f00
 8003360:	02faf07f 	.word	0x02faf07f

08003364 <HAL_ETH_Init>:
  if (heth == NULL)
 8003364:	2800      	cmp	r0, #0
 8003366:	f000 810b 	beq.w	8003580 <HAL_ETH_Init+0x21c>
  if (heth->gState == HAL_ETH_STATE_RESET)
 800336a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800336e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003370:	4605      	mov	r5, r0
 8003372:	b0a5      	sub	sp, #148	@ 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80af 	beq.w	80034d8 <HAL_ETH_Init+0x174>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	4b82      	ldr	r3, [pc, #520]	@ (8003584 <HAL_ETH_Init+0x220>)
 800337c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8003380:	f042 0202 	orr.w	r2, r2, #2
 8003384:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8003388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800338c:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003396:	2800      	cmp	r0, #0
 8003398:	f040 8094 	bne.w	80034c4 <HAL_ETH_Init+0x160>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800339c:	f7fe fe3c 	bl	8002018 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80033a0:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 80033a2:	4a79      	ldr	r2, [pc, #484]	@ (8003588 <HAL_ETH_Init+0x224>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80033a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  (void)SYSCFG->PMCR;
 80033a8:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80033b2:	f7fe fe25 	bl	8002000 <HAL_GetTick>
 80033b6:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80033b8:	e006      	b.n	80033c8 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80033ba:	f7fe fe21 	bl	8002000 <HAL_GetTick>
 80033be:	1b80      	subs	r0, r0, r6
 80033c0:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80033c4:	f200 8081 	bhi.w	80034ca <HAL_ETH_Init+0x166>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ce:	681c      	ldr	r4, [r3, #0]
 80033d0:	f014 0401 	ands.w	r4, r4, #1
 80033d4:	d1f1      	bne.n	80033ba <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 80033d6:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 80033d8:	2701      	movs	r7, #1
  HAL_ETH_SetMDIOClockRange(heth);
 80033da:	f7ff ff81 	bl	80032e0 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80033de:	f000 fedb 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80033e2:	4b6a      	ldr	r3, [pc, #424]	@ (800358c <HAL_ETH_Init+0x228>)
 80033e4:	682e      	ldr	r6, [r5, #0]
  ETH_SetMACConfig(heth, &macDefaultConf);
 80033e6:	a90b      	add	r1, sp, #44	@ 0x2c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80033e8:	fba3 2300 	umull	r2, r3, r3, r0
  ETH_SetMACConfig(heth, &macDefaultConf);
 80033ec:	4628      	mov	r0, r5
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033ee:	9414      	str	r4, [sp, #80]	@ 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80033f0:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 80033f2:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80033f6:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80033fa:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80033fc:	941a      	str	r4, [sp, #104]	@ 0x68
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80033fe:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003402:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800340a:	940d      	str	r4, [sp, #52]	@ 0x34
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800340c:	9311      	str	r3, [sp, #68]	@ 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800340e:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
  macDefaultConf.ChecksumOffload = ENABLE;
 8003412:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003416:	9318      	str	r3, [sp, #96]	@ 0x60
  macDefaultConf.LoopbackMode = DISABLE;
 8003418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800341c:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
  macDefaultConf.LoopbackMode = DISABLE;
 8003420:	9312      	str	r3, [sp, #72]	@ 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003422:	2320      	movs	r3, #32
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003424:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003428:	9322      	str	r3, [sp, #136]	@ 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800342a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
  macDefaultConf.JumboPacket = DISABLE;
 800342e:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003432:	930b      	str	r3, [sp, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003434:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003438:	941f      	str	r4, [sp, #124]	@ 0x7c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800343a:	9310      	str	r3, [sp, #64]	@ 0x40
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800343c:	4b54      	ldr	r3, [pc, #336]	@ (8003590 <HAL_ETH_Init+0x22c>)
  macDefaultConf.PauseTime = 0x0;
 800343e:	941d      	str	r4, [sp, #116]	@ 0x74
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003440:	930e      	str	r3, [sp, #56]	@ 0x38
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003442:	2302      	movs	r3, #2
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003444:	9416      	str	r4, [sp, #88]	@ 0x58
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003446:	9321      	str	r3, [sp, #132]	@ 0x84
  macDefaultConf.Watchdog = ENABLE;
 8003448:	f240 1301 	movw	r3, #257	@ 0x101
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800344c:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
  macDefaultConf.Watchdog = ENABLE;
 8003450:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003454:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
  macDefaultConf.RetryTransmission = ENABLE;
 8003458:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
  macDefaultConf.TransmitFlowControl = DISABLE;
 800345c:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003460:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003464:	941c      	str	r4, [sp, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003466:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 800346a:	f7ff f8e5 	bl	8002638 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800346e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003472:	a902      	add	r1, sp, #8
 8003474:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003476:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800347a:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800347c:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800347e:	f44f 7306 	mov.w	r3, #536	@ 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003482:	9704      	str	r7, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003484:	930a      	str	r3, [sp, #40]	@ 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003486:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003488:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800348c:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003490:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003494:	f7ff f98c 	bl	80027b0 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003498:	f506 5180 	add.w	r1, r6, #4096	@ 0x1000
 800349c:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 80034a0:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80034a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034a8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80034ac:	696b      	ldr	r3, [r5, #20]
 80034ae:	f013 0203 	ands.w	r2, r3, #3
 80034b2:	d017      	beq.n	80034e4 <HAL_ETH_Init+0x180>
    heth->gState = HAL_ETH_STATE_ERROR;
 80034b4:	23e0      	movs	r3, #224	@ 0xe0
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80034b6:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 80034ba:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
    return HAL_ERROR;
 80034be:	2001      	movs	r0, #1
}
 80034c0:	b025      	add	sp, #148	@ 0x94
 80034c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80034c4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80034c8:	e768      	b.n	800339c <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034ca:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 80034cc:	23e0      	movs	r3, #224	@ 0xe0
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034ce:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 80034d2:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
      return HAL_ERROR;
 80034d6:	e7f2      	b.n	80034be <HAL_ETH_Init+0x15a>
    heth->gState = HAL_ETH_STATE_BUSY;
 80034d8:	2323      	movs	r3, #35	@ 0x23
 80034da:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 80034de:	f003 fd9f 	bl	8007020 <HAL_ETH_MspInit>
 80034e2:	e74a      	b.n	800337a <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80034e4:	f8d1 4108 	ldr.w	r4, [r1, #264]	@ 0x108
 80034e8:	482a      	ldr	r0, [pc, #168]	@ (8003594 <HAL_ETH_Init+0x230>)
 80034ea:	68ef      	ldr	r7, [r5, #12]
 80034ec:	4020      	ands	r0, r4
 80034ee:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 80034f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 80034f6:	463b      	mov	r3, r7
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80034f8:	f8c1 0108 	str.w	r0, [r1, #264]	@ 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034fc:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003500:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003502:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003504:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003506:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003508:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800350c:	3318      	adds	r3, #24
 800350e:	429c      	cmp	r4, r3
 8003510:	d1f6      	bne.n	8003500 <HAL_ETH_Init+0x19c>
    dmarxdesc =  heth->Init.RxDesc + i;
 8003512:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003514:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8003516:	62aa      	str	r2, [r5, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003518:	f105 0044 	add.w	r0, r5, #68	@ 0x44
 800351c:	f8c1 312c 	str.w	r3, [r1, #300]	@ 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003520:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003522:	f8c1 7114 	str.w	r7, [r1, #276]	@ 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8003526:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003528:	f8c1 7120 	str.w	r7, [r1, #288]	@ 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800352c:	f105 0754 	add.w	r7, r5, #84	@ 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003530:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003532:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003534:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003536:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003538:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800353a:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800353c:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003540:	4287      	cmp	r7, r0
 8003542:	f103 0318 	add.w	r3, r3, #24
 8003546:	d1f3      	bne.n	8003530 <HAL_ETH_Init+0x1cc>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003548:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800354a:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800354c:	65aa      	str	r2, [r5, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800354e:	e9c5 2217 	strd	r2, r2, [r5, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003552:	e9c5 221a 	strd	r2, r2, [r5, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003556:	f8c1 0130 	str.w	r0, [r1, #304]	@ 0x130
  return HAL_OK;
 800355a:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800355c:	f8c1 411c 	str.w	r4, [r1, #284]	@ 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003560:	3448      	adds	r4, #72	@ 0x48
 8003562:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003566:	8899      	ldrh	r1, [r3, #4]
 8003568:	f8c6 1300 	str.w	r1, [r6, #768]	@ 0x300
  heth->gState = HAL_ETH_STATE_READY;
 800356c:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800356e:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003570:	f8c6 3304 	str.w	r3, [r6, #772]	@ 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003574:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003578:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
}
 800357c:	b025      	add	sp, #148	@ 0x94
 800357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003580:	2001      	movs	r0, #1
}
 8003582:	4770      	bx	lr
 8003584:	58024400 	.word	0x58024400
 8003588:	58000400 	.word	0x58000400
 800358c:	431bde83 	.word	0x431bde83
 8003590:	01010000 	.word	0x01010000
 8003594:	ffff8001 	.word	0xffff8001

08003598 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8003598:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035a4:	680c      	ldr	r4, [r1, #0]
{
 80035a6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035a8:	2c00      	cmp	r4, #0
 80035aa:	f000 80a5 	beq.w	80036f8 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 80035ae:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035b0:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035b4:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035b8:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035ba:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 80035be:	ea1c 0a04 	ands.w	sl, ip, r4
 80035c2:	f000 8094 	beq.w	80036ee <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c6:	9900      	ldr	r1, [sp, #0]
 80035c8:	005f      	lsls	r7, r3, #1
 80035ca:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035cc:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ce:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035d2:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035d6:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035da:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035dc:	f1b8 0f01 	cmp.w	r8, #1
 80035e0:	f240 808d 	bls.w	80036fe <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e4:	2a03      	cmp	r2, #3
 80035e6:	f040 80cb 	bne.w	8003780 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ea:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80035ec:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035ee:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035f2:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f6:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 80035fa:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035fc:	d077      	beq.n	80036ee <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fe:	4e7f      	ldr	r6, [pc, #508]	@ (80037fc <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003600:	f003 0703 	and.w	r7, r3, #3
 8003604:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003606:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800360a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360c:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003610:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003614:	497a      	ldr	r1, [pc, #488]	@ (8003800 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003616:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 800361a:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 800361e:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003622:	4288      	cmp	r0, r1
 8003624:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003628:	f002 0202 	and.w	r2, r2, #2
 800362c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003630:	9203      	str	r2, [sp, #12]
 8003632:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003634:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003636:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800363a:	d031      	beq.n	80036a0 <HAL_GPIO_Init+0x100>
 800363c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003640:	4288      	cmp	r0, r1
 8003642:	f000 80b0 	beq.w	80037a6 <HAL_GPIO_Init+0x206>
 8003646:	496f      	ldr	r1, [pc, #444]	@ (8003804 <HAL_GPIO_Init+0x264>)
 8003648:	4288      	cmp	r0, r1
 800364a:	f000 80b2 	beq.w	80037b2 <HAL_GPIO_Init+0x212>
 800364e:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8003808 <HAL_GPIO_Init+0x268>
 8003652:	4560      	cmp	r0, ip
 8003654:	f000 80a1 	beq.w	800379a <HAL_GPIO_Init+0x1fa>
 8003658:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 800380c <HAL_GPIO_Init+0x26c>
 800365c:	4560      	cmp	r0, ip
 800365e:	f000 80b4 	beq.w	80037ca <HAL_GPIO_Init+0x22a>
 8003662:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8003810 <HAL_GPIO_Init+0x270>
 8003666:	4560      	cmp	r0, ip
 8003668:	f000 80b5 	beq.w	80037d6 <HAL_GPIO_Init+0x236>
 800366c:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8003814 <HAL_GPIO_Init+0x274>
 8003670:	4560      	cmp	r0, ip
 8003672:	f000 80a4 	beq.w	80037be <HAL_GPIO_Init+0x21e>
 8003676:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8003818 <HAL_GPIO_Init+0x278>
 800367a:	4560      	cmp	r0, ip
 800367c:	f000 80b1 	beq.w	80037e2 <HAL_GPIO_Init+0x242>
 8003680:	f8df c198 	ldr.w	ip, [pc, #408]	@ 800381c <HAL_GPIO_Init+0x27c>
 8003684:	4560      	cmp	r0, ip
 8003686:	f000 80b2 	beq.w	80037ee <HAL_GPIO_Init+0x24e>
 800368a:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8003820 <HAL_GPIO_Init+0x280>
 800368e:	4560      	cmp	r0, ip
 8003690:	bf0c      	ite	eq
 8003692:	f04f 0c09 	moveq.w	ip, #9
 8003696:	f04f 0c0a 	movne.w	ip, #10
 800369a:	fa0c f707 	lsl.w	r7, ip, r7
 800369e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a0:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036a2:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 80036a4:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 80036a8:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 80036ac:	bf4c      	ite	mi
 80036ae:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 80036b2:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b4:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 80036b6:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 80036ba:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 80036be:	bf54      	ite	pl
 80036c0:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80036c2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c6:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80036c8:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80036cc:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 80036d0:	bf54      	ite	pl
 80036d2:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80036d4:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d8:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80036da:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80036de:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 80036e2:	bf54      	ite	pl
 80036e4:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80036e6:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036ea:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 80036ee:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036f0:	fa34 f203 	lsrs.w	r2, r4, r3
 80036f4:	f47f af61 	bne.w	80035ba <HAL_GPIO_Init+0x1a>
  }
}
 80036f8:	b005      	add	sp, #20
 80036fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fe:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003700:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8003702:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003706:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003708:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800370c:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003710:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003712:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003716:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8003718:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371c:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003720:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003724:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003728:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372c:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8003730:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003734:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8003738:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800373c:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003740:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003744:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003748:	f47f af4f 	bne.w	80035ea <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800374c:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003750:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8003752:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003756:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800375a:	6909      	ldr	r1, [r1, #16]
 800375c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003760:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8003764:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003768:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800376a:	210f      	movs	r1, #15
 800376c:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003770:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003772:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003776:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 800377a:	f8c8 c020 	str.w	ip, [r8, #32]
 800377e:	e734      	b.n	80035ea <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003780:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 8003782:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003786:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003788:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800378c:	fa01 fc07 	lsl.w	ip, r1, r7
 8003790:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003794:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003798:	e727      	b.n	80035ea <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800379a:	f04f 0c03 	mov.w	ip, #3
 800379e:	fa0c f707 	lsl.w	r7, ip, r7
 80037a2:	433a      	orrs	r2, r7
 80037a4:	e77c      	b.n	80036a0 <HAL_GPIO_Init+0x100>
 80037a6:	f04f 0c01 	mov.w	ip, #1
 80037aa:	fa0c f707 	lsl.w	r7, ip, r7
 80037ae:	433a      	orrs	r2, r7
 80037b0:	e776      	b.n	80036a0 <HAL_GPIO_Init+0x100>
 80037b2:	f04f 0c02 	mov.w	ip, #2
 80037b6:	fa0c f707 	lsl.w	r7, ip, r7
 80037ba:	433a      	orrs	r2, r7
 80037bc:	e770      	b.n	80036a0 <HAL_GPIO_Init+0x100>
 80037be:	f04f 0c06 	mov.w	ip, #6
 80037c2:	fa0c f707 	lsl.w	r7, ip, r7
 80037c6:	433a      	orrs	r2, r7
 80037c8:	e76a      	b.n	80036a0 <HAL_GPIO_Init+0x100>
 80037ca:	f04f 0c04 	mov.w	ip, #4
 80037ce:	fa0c f707 	lsl.w	r7, ip, r7
 80037d2:	433a      	orrs	r2, r7
 80037d4:	e764      	b.n	80036a0 <HAL_GPIO_Init+0x100>
 80037d6:	f04f 0c05 	mov.w	ip, #5
 80037da:	fa0c f707 	lsl.w	r7, ip, r7
 80037de:	433a      	orrs	r2, r7
 80037e0:	e75e      	b.n	80036a0 <HAL_GPIO_Init+0x100>
 80037e2:	f04f 0c07 	mov.w	ip, #7
 80037e6:	fa0c f707 	lsl.w	r7, ip, r7
 80037ea:	433a      	orrs	r2, r7
 80037ec:	e758      	b.n	80036a0 <HAL_GPIO_Init+0x100>
 80037ee:	f04f 0c08 	mov.w	ip, #8
 80037f2:	fa0c f707 	lsl.w	r7, ip, r7
 80037f6:	433a      	orrs	r2, r7
 80037f8:	e752      	b.n	80036a0 <HAL_GPIO_Init+0x100>
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
 8003800:	58020000 	.word	0x58020000
 8003804:	58020800 	.word	0x58020800
 8003808:	58020c00 	.word	0x58020c00
 800380c:	58021000 	.word	0x58021000
 8003810:	58021400 	.word	0x58021400
 8003814:	58021800 	.word	0x58021800
 8003818:	58021c00 	.word	0x58021c00
 800381c:	58022000 	.word	0x58022000
 8003820:	58022400 	.word	0x58022400

08003824 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003824:	b902      	cbnz	r2, 8003828 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003826:	0409      	lsls	r1, r1, #16
 8003828:	6181      	str	r1, [r0, #24]
  }
}
 800382a:	4770      	bx	lr

0800382c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800382c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800382e:	4c10      	ldr	r4, [pc, #64]	@ (8003870 <HAL_PWREx_ConfigSupply+0x44>)
 8003830:	68e3      	ldr	r3, [r4, #12]
 8003832:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003836:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003838:	d105      	bne.n	8003846 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	1a18      	subs	r0, r3, r0
 8003840:	bf18      	it	ne
 8003842:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003844:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003846:	f023 0307 	bic.w	r3, r3, #7
 800384a:	4303      	orrs	r3, r0
 800384c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800384e:	f7fe fbd7 	bl	8002000 <HAL_GetTick>
 8003852:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003854:	e005      	b.n	8003862 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003856:	f7fe fbd3 	bl	8002000 <HAL_GetTick>
 800385a:	1b40      	subs	r0, r0, r5
 800385c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003860:	d804      	bhi.n	800386c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003862:	6863      	ldr	r3, [r4, #4]
 8003864:	049b      	lsls	r3, r3, #18
 8003866:	d5f6      	bpl.n	8003856 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8003868:	2000      	movs	r0, #0
}
 800386a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800386c:	2001      	movs	r0, #1
}
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	58024800 	.word	0x58024800

08003874 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003874:	4b33      	ldr	r3, [pc, #204]	@ (8003944 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003876:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003878:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800387a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800387c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800387e:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003884:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8003888:	d036      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq.part.0+0x84>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800388a:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800388e:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003892:	f001 0103 	and.w	r1, r1, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003896:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800389a:	fb05 f202 	mul.w	r2, r5, r2
 800389e:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038a4:	ee06 2a90 	vmov	s13, r2
 80038a8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80038ac:	d002      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 80038ae:	2902      	cmp	r1, #2
 80038b0:	d042      	beq.n	8003938 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 80038b2:	b319      	cbz	r1, 80038fc <HAL_RCC_GetSysClockFreq.part.0+0x88>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038b4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003948 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80038b8:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80038ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80038d6:	ee67 7a86 	vmul.f32	s15, s15, s12
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80038da:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80038e2:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80038e4:	ee07 3a10 	vmov	s14, r3
 80038e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80038ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038f0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80038f4:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80038f8:	bc30      	pop	{r4, r5}
 80038fa:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	0692      	lsls	r2, r2, #26
 8003900:	d51d      	bpl.n	800393e <HAL_RCC_GetSysClockFreq.part.0+0xca>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003902:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003904:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003908:	4a10      	ldr	r2, [pc, #64]	@ (800394c <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800390c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003910:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003914:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	ee06 2a10 	vmov	s12, r2
 800391e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003922:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003926:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800392a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800392e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8003932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003936:	e7d0      	b.n	80038da <HAL_RCC_GetSysClockFreq.part.0+0x66>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003938:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003950 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 800393c:	e7bc      	b.n	80038b8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800393e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003954 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8003942:	e7b9      	b.n	80038b8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003944:	58024400 	.word	0x58024400
 8003948:	4a742400 	.word	0x4a742400
 800394c:	03d09000 	.word	0x03d09000
 8003950:	4bbebc20 	.word	0x4bbebc20
 8003954:	4c742400 	.word	0x4c742400

08003958 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003958:	2800      	cmp	r0, #0
 800395a:	f000 82cc 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x59e>
{
 800395e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003960:	6803      	ldr	r3, [r0, #0]
 8003962:	4604      	mov	r4, r0
 8003964:	07d9      	lsls	r1, r3, #31
 8003966:	d52e      	bpl.n	80039c6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003968:	49a4      	ldr	r1, [pc, #656]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 800396a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800396c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003972:	2a10      	cmp	r2, #16
 8003974:	f000 8107 	beq.w	8003b86 <HAL_RCC_OscConfig+0x22e>
 8003978:	2a18      	cmp	r2, #24
 800397a:	f000 80ff 	beq.w	8003b7c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397e:	6863      	ldr	r3, [r4, #4]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003984:	f000 812a 	beq.w	8003bdc <HAL_RCC_OscConfig+0x284>
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8168 	beq.w	8003c5e <HAL_RCC_OscConfig+0x306>
 800398e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003992:	4b9a      	ldr	r3, [pc, #616]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	f000 8267 	beq.w	8003e68 <HAL_RCC_OscConfig+0x510>
 800399a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039a8:	f7fe fb2a 	bl	8002000 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039ac:	4e93      	ldr	r6, [pc, #588]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80039ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b0:	e005      	b.n	80039be <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b2:	f7fe fb25 	bl	8002000 <HAL_GetTick>
 80039b6:	1b40      	subs	r0, r0, r5
 80039b8:	2864      	cmp	r0, #100	@ 0x64
 80039ba:	f200 814e 	bhi.w	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039be:	6833      	ldr	r3, [r6, #0]
 80039c0:	039b      	lsls	r3, r3, #14
 80039c2:	d5f6      	bpl.n	80039b2 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	079d      	lsls	r5, r3, #30
 80039c8:	f100 808a 	bmi.w	8003ae0 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039cc:	06d9      	lsls	r1, r3, #27
 80039ce:	d533      	bpl.n	8003a38 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d0:	4a8a      	ldr	r2, [pc, #552]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 80039d2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039da:	2b08      	cmp	r3, #8
 80039dc:	f000 80e3 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x24e>
 80039e0:	2b18      	cmp	r3, #24
 80039e2:	f000 80db 	beq.w	8003b9c <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039e6:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80039e8:	4d84      	ldr	r5, [pc, #528]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 816f 	beq.w	8003cce <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039f8:	f7fe fb02 	bl	8002000 <HAL_GetTick>
 80039fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039fe:	e005      	b.n	8003a0c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a00:	f7fe fafe 	bl	8002000 <HAL_GetTick>
 8003a04:	1b80      	subs	r0, r0, r6
 8003a06:	2802      	cmp	r0, #2
 8003a08:	f200 8127 	bhi.w	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	05db      	lsls	r3, r3, #23
 8003a10:	d5f6      	bpl.n	8003a00 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a12:	f7fe fafb 	bl	800200c <HAL_GetREVID>
 8003a16:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003a1a:	4298      	cmp	r0, r3
 8003a1c:	f200 8245 	bhi.w	8003eaa <HAL_RCC_OscConfig+0x552>
 8003a20:	6a22      	ldr	r2, [r4, #32]
 8003a22:	686b      	ldr	r3, [r5, #4]
 8003a24:	2a20      	cmp	r2, #32
 8003a26:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a2a:	bf0c      	ite	eq
 8003a2c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003a30:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003a34:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	071d      	lsls	r5, r3, #28
 8003a3a:	d516      	bpl.n	8003a6a <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a3c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003a3e:	4d6f      	ldr	r5, [pc, #444]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8122 	beq.w	8003c8a <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8003a46:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003a4e:	f7fe fad7 	bl	8002000 <HAL_GetTick>
 8003a52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a54:	e005      	b.n	8003a62 <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fe fad3 	bl	8002000 <HAL_GetTick>
 8003a5a:	1b80      	subs	r0, r0, r6
 8003a5c:	2802      	cmp	r0, #2
 8003a5e:	f200 80fc 	bhi.w	8003c5a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a62:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003a64:	0798      	lsls	r0, r3, #30
 8003a66:	d5f6      	bpl.n	8003a56 <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	069a      	lsls	r2, r3, #26
 8003a6c:	d516      	bpl.n	8003a9c <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a6e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003a70:	4d62      	ldr	r5, [pc, #392]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 811a 	beq.w	8003cac <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a7e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003a80:	f7fe fabe 	bl	8002000 <HAL_GetTick>
 8003a84:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a88:	f7fe faba 	bl	8002000 <HAL_GetTick>
 8003a8c:	1b80      	subs	r0, r0, r6
 8003a8e:	2802      	cmp	r0, #2
 8003a90:	f200 80e3 	bhi.w	8003c5a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	049f      	lsls	r7, r3, #18
 8003a98:	d5f6      	bpl.n	8003a88 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	0759      	lsls	r1, r3, #29
 8003a9e:	f100 80a3 	bmi.w	8003be8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003aa4:	b1d2      	cbz	r2, 8003adc <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003aa6:	4d55      	ldr	r5, [pc, #340]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 8003aa8:	692b      	ldr	r3, [r5, #16]
 8003aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aae:	2b18      	cmp	r3, #24
 8003ab0:	f000 81ac 	beq.w	8003e0c <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003abc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003abe:	f000 8140 	beq.w	8003d42 <HAL_RCC_OscConfig+0x3ea>
        tickstart = HAL_GetTick();
 8003ac2:	f7fe fa9d 	bl	8002000 <HAL_GetTick>
 8003ac6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ac8:	e005      	b.n	8003ad6 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aca:	f7fe fa99 	bl	8002000 <HAL_GetTick>
 8003ace:	1b00      	subs	r0, r0, r4
 8003ad0:	2802      	cmp	r0, #2
 8003ad2:	f200 80c2 	bhi.w	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ad6:	682b      	ldr	r3, [r5, #0]
 8003ad8:	019b      	lsls	r3, r3, #6
 8003ada:	d4f6      	bmi.n	8003aca <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8003adc:	2000      	movs	r0, #0
}
 8003ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae0:	4a46      	ldr	r2, [pc, #280]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 8003ae2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ae4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ae6:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003aea:	d12d      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aec:	4b43      	ldr	r3, [pc, #268]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aee:	68e2      	ldr	r2, [r4, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	0759      	lsls	r1, r3, #29
 8003af4:	d501      	bpl.n	8003afa <HAL_RCC_OscConfig+0x1a2>
 8003af6:	2a00      	cmp	r2, #0
 8003af8:	d04e      	beq.n	8003b98 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003afa:	4d40      	ldr	r5, [pc, #256]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	f023 0319 	bic.w	r3, r3, #25
 8003b02:	4313      	orrs	r3, r2
 8003b04:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8003b06:	f7fe fa7b 	bl	8002000 <HAL_GetTick>
 8003b0a:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b0c:	e005      	b.n	8003b1a <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fe fa77 	bl	8002000 <HAL_GetTick>
 8003b12:	1b80      	subs	r0, r0, r6
 8003b14:	2802      	cmp	r0, #2
 8003b16:	f200 80a0 	bhi.w	8003c5a <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b1a:	682b      	ldr	r3, [r5, #0]
 8003b1c:	075b      	lsls	r3, r3, #29
 8003b1e:	d5f6      	bpl.n	8003b0e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b20:	f7fe fa74 	bl	800200c <HAL_GetREVID>
 8003b24:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003b28:	4298      	cmp	r0, r3
 8003b2a:	f200 80f7 	bhi.w	8003d1c <HAL_RCC_OscConfig+0x3c4>
 8003b2e:	6922      	ldr	r2, [r4, #16]
 8003b30:	686b      	ldr	r3, [r5, #4]
 8003b32:	2a40      	cmp	r2, #64	@ 0x40
 8003b34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b38:	bf0c      	ite	eq
 8003b3a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003b3e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003b42:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	e741      	b.n	80039cc <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b48:	2b18      	cmp	r3, #24
 8003b4a:	f000 80e3 	beq.w	8003d14 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b4e:	4d2b      	ldr	r5, [pc, #172]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b50:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b52:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b54:	2a00      	cmp	r2, #0
 8003b56:	f000 80cc 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b5a:	f023 0319 	bic.w	r3, r3, #25
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b62:	f7fe fa4d 	bl	8002000 <HAL_GetTick>
 8003b66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b68:	e004      	b.n	8003b74 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fe fa49 	bl	8002000 <HAL_GetTick>
 8003b6e:	1b80      	subs	r0, r0, r6
 8003b70:	2802      	cmp	r0, #2
 8003b72:	d872      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	075f      	lsls	r7, r3, #29
 8003b78:	d5f7      	bpl.n	8003b6a <HAL_RCC_OscConfig+0x212>
 8003b7a:	e7d1      	b.n	8003b20 <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b7c:	f001 0103 	and.w	r1, r1, #3
 8003b80:	2902      	cmp	r1, #2
 8003b82:	f47f aefc 	bne.w	800397e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b86:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	0392      	lsls	r2, r2, #14
 8003b8c:	f57f af1b 	bpl.w	80039c6 <HAL_RCC_OscConfig+0x6e>
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	f47f af17 	bne.w	80039c6 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8003b98:	2001      	movs	r0, #1
}
 8003b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b9c:	f002 0203 	and.w	r2, r2, #3
 8003ba0:	2a01      	cmp	r2, #1
 8003ba2:	f47f af20 	bne.w	80039e6 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ba6:	4b15      	ldr	r3, [pc, #84]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	05da      	lsls	r2, r3, #23
 8003bac:	d502      	bpl.n	8003bb4 <HAL_RCC_OscConfig+0x25c>
 8003bae:	69e3      	ldr	r3, [r4, #28]
 8003bb0:	2b80      	cmp	r3, #128	@ 0x80
 8003bb2:	d1f1      	bne.n	8003b98 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bb4:	f7fe fa2a 	bl	800200c <HAL_GetREVID>
 8003bb8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003bbc:	4298      	cmp	r0, r3
 8003bbe:	f200 80b6 	bhi.w	8003d2e <HAL_RCC_OscConfig+0x3d6>
 8003bc2:	6a22      	ldr	r2, [r4, #32]
 8003bc4:	2a20      	cmp	r2, #32
 8003bc6:	f000 8185 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x57c>
 8003bca:	490c      	ldr	r1, [pc, #48]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 8003bcc:	684b      	ldr	r3, [r1, #4]
 8003bce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003bd2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003bd6:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	e72d      	b.n	8003a38 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bdc:	4a07      	ldr	r2, [pc, #28]	@ (8003bfc <HAL_RCC_OscConfig+0x2a4>)
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be6:	e6df      	b.n	80039a8 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8003be8:	4d05      	ldr	r5, [pc, #20]	@ (8003c00 <HAL_RCC_OscConfig+0x2a8>)
 8003bea:	682b      	ldr	r3, [r5, #0]
 8003bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003bf2:	f7fe fa05 	bl	8002000 <HAL_GetTick>
 8003bf6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf8:	e009      	b.n	8003c0e <HAL_RCC_OscConfig+0x2b6>
 8003bfa:	bf00      	nop
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fe f9fc 	bl	8002000 <HAL_GetTick>
 8003c08:	1b80      	subs	r0, r0, r6
 8003c0a:	2864      	cmp	r0, #100	@ 0x64
 8003c0c:	d825      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	05da      	lsls	r2, r3, #23
 8003c12:	d5f7      	bpl.n	8003c04 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c14:	68a3      	ldr	r3, [r4, #8]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	f000 8150 	beq.w	8003ebc <HAL_RCC_OscConfig+0x564>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 812b 	beq.w	8003e78 <HAL_RCC_OscConfig+0x520>
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	4ba8      	ldr	r3, [pc, #672]	@ (8003ec8 <HAL_RCC_OscConfig+0x570>)
 8003c26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c28:	f000 815d 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x58e>
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	671a      	str	r2, [r3, #112]	@ 0x70
 8003c32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c34:	f022 0204 	bic.w	r2, r2, #4
 8003c38:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003c3a:	f7fe f9e1 	bl	8002000 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c3e:	4ea2      	ldr	r6, [pc, #648]	@ (8003ec8 <HAL_RCC_OscConfig+0x570>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003c44:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c46:	e004      	b.n	8003c52 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fe f9da 	bl	8002000 <HAL_GetTick>
 8003c4c:	1b40      	subs	r0, r0, r5
 8003c4e:	42b8      	cmp	r0, r7
 8003c50:	d803      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c52:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003c54:	079b      	lsls	r3, r3, #30
 8003c56:	d5f7      	bpl.n	8003c48 <HAL_RCC_OscConfig+0x2f0>
 8003c58:	e723      	b.n	8003aa2 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8003c5a:	2003      	movs	r0, #3
}
 8003c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5e:	4d9a      	ldr	r5, [pc, #616]	@ (8003ec8 <HAL_RCC_OscConfig+0x570>)
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c70:	f7fe f9c6 	bl	8002000 <HAL_GetTick>
 8003c74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c76:	e004      	b.n	8003c82 <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe f9c2 	bl	8002000 <HAL_GetTick>
 8003c7c:	1b80      	subs	r0, r0, r6
 8003c7e:	2864      	cmp	r0, #100	@ 0x64
 8003c80:	d8eb      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	039f      	lsls	r7, r3, #14
 8003c86:	d4f7      	bmi.n	8003c78 <HAL_RCC_OscConfig+0x320>
 8003c88:	e69c      	b.n	80039c4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8003c8a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003c92:	f7fe f9b5 	bl	8002000 <HAL_GetTick>
 8003c96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c98:	e004      	b.n	8003ca4 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fe f9b1 	bl	8002000 <HAL_GetTick>
 8003c9e:	1b80      	subs	r0, r0, r6
 8003ca0:	2802      	cmp	r0, #2
 8003ca2:	d8da      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ca4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003ca6:	0799      	lsls	r1, r3, #30
 8003ca8:	d4f7      	bmi.n	8003c9a <HAL_RCC_OscConfig+0x342>
 8003caa:	e6dd      	b.n	8003a68 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cb2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003cb4:	f7fe f9a4 	bl	8002000 <HAL_GetTick>
 8003cb8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cba:	e004      	b.n	8003cc6 <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cbc:	f7fe f9a0 	bl	8002000 <HAL_GetTick>
 8003cc0:	1b80      	subs	r0, r0, r6
 8003cc2:	2802      	cmp	r0, #2
 8003cc4:	d8c9      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cc6:	682b      	ldr	r3, [r5, #0]
 8003cc8:	0498      	lsls	r0, r3, #18
 8003cca:	d4f7      	bmi.n	8003cbc <HAL_RCC_OscConfig+0x364>
 8003ccc:	e6e5      	b.n	8003a9a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8003cce:	682b      	ldr	r3, [r5, #0]
 8003cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cd6:	f7fe f993 	bl	8002000 <HAL_GetTick>
 8003cda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cdc:	e004      	b.n	8003ce8 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cde:	f7fe f98f 	bl	8002000 <HAL_GetTick>
 8003ce2:	1b80      	subs	r0, r0, r6
 8003ce4:	2802      	cmp	r0, #2
 8003ce6:	d8b8      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	05df      	lsls	r7, r3, #23
 8003cec:	d4f7      	bmi.n	8003cde <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	e6a2      	b.n	8003a38 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cf8:	f7fe f982 	bl	8002000 <HAL_GetTick>
 8003cfc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cfe:	e004      	b.n	8003d0a <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d00:	f7fe f97e 	bl	8002000 <HAL_GetTick>
 8003d04:	1b80      	subs	r0, r0, r6
 8003d06:	2802      	cmp	r0, #2
 8003d08:	d8a7      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d0a:	682b      	ldr	r3, [r5, #0]
 8003d0c:	0758      	lsls	r0, r3, #29
 8003d0e:	d4f7      	bmi.n	8003d00 <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	e65b      	b.n	80039cc <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d14:	0790      	lsls	r0, r2, #30
 8003d16:	f47f af1a 	bne.w	8003b4e <HAL_RCC_OscConfig+0x1f6>
 8003d1a:	e6e7      	b.n	8003aec <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1c:	686b      	ldr	r3, [r5, #4]
 8003d1e:	6922      	ldr	r2, [r4, #16]
 8003d20:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003d24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003d28:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	e64e      	b.n	80039cc <HAL_RCC_OscConfig+0x74>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d2e:	4a66      	ldr	r2, [pc, #408]	@ (8003ec8 <HAL_RCC_OscConfig+0x570>)
 8003d30:	6a21      	ldr	r1, [r4, #32]
 8003d32:	68d3      	ldr	r3, [r2, #12]
 8003d34:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003d38:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d3c:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	e67a      	b.n	8003a38 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8003d42:	f7fe f95d 	bl	8002000 <HAL_GetTick>
 8003d46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d48:	e004      	b.n	8003d54 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fe f959 	bl	8002000 <HAL_GetTick>
 8003d4e:	1b80      	subs	r0, r0, r6
 8003d50:	2802      	cmp	r0, #2
 8003d52:	d882      	bhi.n	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	0199      	lsls	r1, r3, #6
 8003d58:	d4f7      	bmi.n	8003d4a <HAL_RCC_OscConfig+0x3f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d5a:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8003ecc <HAL_RCC_OscConfig+0x574>)
 8003d5e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003d60:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d62:	495b      	ldr	r1, [pc, #364]	@ (8003ed0 <HAL_RCC_OscConfig+0x578>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d64:	4e58      	ldr	r6, [pc, #352]	@ (8003ec8 <HAL_RCC_OscConfig+0x570>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d66:	4313      	orrs	r3, r2
 8003d68:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003d6a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003d6e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003d70:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8003d74:	3b01      	subs	r3, #1
 8003d76:	3a01      	subs	r2, #1
 8003d78:	025b      	lsls	r3, r3, #9
 8003d7a:	0412      	lsls	r2, r2, #16
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003d82:	4313      	orrs	r3, r2
 8003d84:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003d86:	3a01      	subs	r2, #1
 8003d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003d90:	3a01      	subs	r2, #1
 8003d92:	0612      	lsls	r2, r2, #24
 8003d94:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	632b      	str	r3, [r5, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d9c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003da4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003da6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003da8:	4011      	ands	r1, r2
 8003daa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003dae:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003db0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003db2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003db4:	f023 030c 	bic.w	r3, r3, #12
 8003db8:	4313      	orrs	r3, r2
 8003dba:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dbc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003dbe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003dc0:	f023 0302 	bic.w	r3, r3, #2
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dc8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dce:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd6:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dd8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003dda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dde:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003de0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003df0:	f7fe f906 	bl	8002000 <HAL_GetTick>
 8003df4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003df6:	e005      	b.n	8003e04 <HAL_RCC_OscConfig+0x4ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fe f902 	bl	8002000 <HAL_GetTick>
 8003dfc:	1b00      	subs	r0, r0, r4
 8003dfe:	2802      	cmp	r0, #2
 8003e00:	f63f af2b 	bhi.w	8003c5a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e04:	6833      	ldr	r3, [r6, #0]
 8003e06:	019a      	lsls	r2, r3, #6
 8003e08:	d5f6      	bpl.n	8003df8 <HAL_RCC_OscConfig+0x4a0>
 8003e0a:	e667      	b.n	8003adc <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0c:	2a01      	cmp	r2, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e0e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e12:	f43f aec1 	beq.w	8003b98 <HAL_RCC_OscConfig+0x240>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003e1c:	4282      	cmp	r2, r0
 8003e1e:	f47f aebb 	bne.w	8003b98 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e22:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003e28:	4291      	cmp	r1, r2
 8003e2a:	f47f aeb5 	bne.w	8003b98 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e2e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e30:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8003e34:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e36:	4291      	cmp	r1, r2
 8003e38:	f47f aeae 	bne.w	8003b98 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e3c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003e3e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8003e42:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e44:	4291      	cmp	r1, r2
 8003e46:	f47f aea7 	bne.w	8003b98 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e4a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e4c:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8003e50:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e52:	4291      	cmp	r1, r2
 8003e54:	f47f aea0 	bne.w	8003b98 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e58:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003e5a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003e5e:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e60:	1a98      	subs	r0, r3, r2
 8003e62:	bf18      	it	ne
 8003e64:	2001      	movne	r0, #1
}
 8003e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e74:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e76:	e597      	b.n	80039a8 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e78:	4d13      	ldr	r5, [pc, #76]	@ (8003ec8 <HAL_RCC_OscConfig+0x570>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	672b      	str	r3, [r5, #112]	@ 0x70
 8003e86:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003e88:	f023 0304 	bic.w	r3, r3, #4
 8003e8c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003e8e:	f7fe f8b7 	bl	8002000 <HAL_GetTick>
 8003e92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e94:	e005      	b.n	8003ea2 <HAL_RCC_OscConfig+0x54a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fe f8b3 	bl	8002000 <HAL_GetTick>
 8003e9a:	1b80      	subs	r0, r0, r6
 8003e9c:	42b8      	cmp	r0, r7
 8003e9e:	f63f aedc 	bhi.w	8003c5a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ea2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003ea4:	0798      	lsls	r0, r3, #30
 8003ea6:	d4f6      	bmi.n	8003e96 <HAL_RCC_OscConfig+0x53e>
 8003ea8:	e5fb      	b.n	8003aa2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eaa:	68eb      	ldr	r3, [r5, #12]
 8003eac:	6a22      	ldr	r2, [r4, #32]
 8003eae:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003eb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003eb6:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	e5bd      	b.n	8003a38 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebc:	4a02      	ldr	r2, [pc, #8]	@ (8003ec8 <HAL_RCC_OscConfig+0x570>)
 8003ebe:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec6:	e6b8      	b.n	8003c3a <HAL_RCC_OscConfig+0x2e2>
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	fffffc0c 	.word	0xfffffc0c
 8003ed0:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ed4:	4a09      	ldr	r2, [pc, #36]	@ (8003efc <HAL_RCC_OscConfig+0x5a4>)
 8003ed6:	6853      	ldr	r3, [r2, #4]
 8003ed8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ee0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	e5a8      	b.n	8003a38 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee6:	f042 0204 	orr.w	r2, r2, #4
 8003eea:	671a      	str	r2, [r3, #112]	@ 0x70
 8003eec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef4:	e6a1      	b.n	8003c3a <HAL_RCC_OscConfig+0x2e2>
    return HAL_ERROR;
 8003ef6:	2001      	movs	r0, #1
}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400

08003f00 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f00:	4a0c      	ldr	r2, [pc, #48]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x34>)
 8003f02:	6913      	ldr	r3, [r2, #16]
 8003f04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d004      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x16>
 8003f0c:	2b18      	cmp	r3, #24
 8003f0e:	d00d      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x2c>
 8003f10:	b11b      	cbz	r3, 8003f1a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8003f12:	4809      	ldr	r0, [pc, #36]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x38>)
 8003f14:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f16:	4809      	ldr	r0, [pc, #36]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f18:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f1a:	6813      	ldr	r3, [r2, #0]
 8003f1c:	069b      	lsls	r3, r3, #26
 8003f1e:	d507      	bpl.n	8003f30 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f20:	6813      	ldr	r3, [r2, #0]
 8003f22:	4807      	ldr	r0, [pc, #28]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x40>)
 8003f24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003f28:	40d8      	lsrs	r0, r3
 8003f2a:	4770      	bx	lr
 8003f2c:	f7ff bca2 	b.w	8003874 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f30:	4803      	ldr	r0, [pc, #12]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003f32:	4770      	bx	lr
 8003f34:	58024400 	.word	0x58024400
 8003f38:	003d0900 	.word	0x003d0900
 8003f3c:	017d7840 	.word	0x017d7840
 8003f40:	03d09000 	.word	0x03d09000

08003f44 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003f44:	2800      	cmp	r0, #0
 8003f46:	f000 810e 	beq.w	8004166 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f4a:	4a8d      	ldr	r2, [pc, #564]	@ (8004180 <HAL_RCC_ClockConfig+0x23c>)
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	428b      	cmp	r3, r1
{
 8003f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f58:	4604      	mov	r4, r0
 8003f5a:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f5c:	d20c      	bcs.n	8003f78 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	f023 030f 	bic.w	r3, r3, #15
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	428b      	cmp	r3, r1
 8003f70:	d002      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003f72:	2001      	movs	r0, #1
}
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	0758      	lsls	r0, r3, #29
 8003f7c:	d50b      	bpl.n	8003f96 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f7e:	4981      	ldr	r1, [pc, #516]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 8003f80:	6920      	ldr	r0, [r4, #16]
 8003f82:	698a      	ldr	r2, [r1, #24]
 8003f84:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003f88:	4290      	cmp	r0, r2
 8003f8a:	d904      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f8c:	698a      	ldr	r2, [r1, #24]
 8003f8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f92:	4302      	orrs	r2, r0
 8003f94:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f96:	0719      	lsls	r1, r3, #28
 8003f98:	d50b      	bpl.n	8003fb2 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f9a:	497a      	ldr	r1, [pc, #488]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 8003f9c:	6960      	ldr	r0, [r4, #20]
 8003f9e:	69ca      	ldr	r2, [r1, #28]
 8003fa0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003fa4:	4290      	cmp	r0, r2
 8003fa6:	d904      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fa8:	69ca      	ldr	r2, [r1, #28]
 8003faa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003fae:	4302      	orrs	r2, r0
 8003fb0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb2:	06da      	lsls	r2, r3, #27
 8003fb4:	d50b      	bpl.n	8003fce <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fb6:	4973      	ldr	r1, [pc, #460]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 8003fb8:	69a0      	ldr	r0, [r4, #24]
 8003fba:	69ca      	ldr	r2, [r1, #28]
 8003fbc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003fc0:	4290      	cmp	r0, r2
 8003fc2:	d904      	bls.n	8003fce <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fc4:	69ca      	ldr	r2, [r1, #28]
 8003fc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fca:	4302      	orrs	r2, r0
 8003fcc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fce:	069f      	lsls	r7, r3, #26
 8003fd0:	d50b      	bpl.n	8003fea <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fd2:	496c      	ldr	r1, [pc, #432]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 8003fd4:	69e0      	ldr	r0, [r4, #28]
 8003fd6:	6a0a      	ldr	r2, [r1, #32]
 8003fd8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003fdc:	4290      	cmp	r0, r2
 8003fde:	d904      	bls.n	8003fea <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fe0:	6a0a      	ldr	r2, [r1, #32]
 8003fe2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003fe6:	4302      	orrs	r2, r0
 8003fe8:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fea:	079e      	lsls	r6, r3, #30
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fec:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	f140 80ab 	bpl.w	800414a <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff4:	4e63      	ldr	r6, [pc, #396]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 8003ff6:	68e0      	ldr	r0, [r4, #12]
 8003ff8:	69b1      	ldr	r1, [r6, #24]
 8003ffa:	f001 010f 	and.w	r1, r1, #15
 8003ffe:	4288      	cmp	r0, r1
 8004000:	d904      	bls.n	800400c <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004002:	69b1      	ldr	r1, [r6, #24]
 8004004:	f021 010f 	bic.w	r1, r1, #15
 8004008:	4301      	orrs	r1, r0
 800400a:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400c:	2a00      	cmp	r2, #0
 800400e:	d030      	beq.n	8004072 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004010:	4a5c      	ldr	r2, [pc, #368]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 8004012:	68a1      	ldr	r1, [r4, #8]
 8004014:	6993      	ldr	r3, [r2, #24]
 8004016:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800401a:	430b      	orrs	r3, r1
 800401c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004020:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	2902      	cmp	r1, #2
 8004024:	f000 80a1 	beq.w	800416a <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004028:	2903      	cmp	r1, #3
 800402a:	f000 8098 	beq.w	800415e <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800402e:	2901      	cmp	r1, #1
 8004030:	f000 80a1 	beq.w	8004176 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004034:	075f      	lsls	r7, r3, #29
 8004036:	d59c      	bpl.n	8003f72 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004038:	4e52      	ldr	r6, [pc, #328]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403a:	f241 3888 	movw	r8, #5000	@ 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800403e:	6933      	ldr	r3, [r6, #16]
 8004040:	f023 0307 	bic.w	r3, r3, #7
 8004044:	430b      	orrs	r3, r1
 8004046:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8004048:	f7fd ffda 	bl	8002000 <HAL_GetTick>
 800404c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e005      	b.n	800405c <HAL_RCC_ClockConfig+0x118>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fd ffd6 	bl	8002000 <HAL_GetTick>
 8004054:	1bc0      	subs	r0, r0, r7
 8004056:	4540      	cmp	r0, r8
 8004058:	f200 808b 	bhi.w	8004172 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405c:	6933      	ldr	r3, [r6, #16]
 800405e:	6862      	ldr	r2, [r4, #4]
 8004060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004064:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004068:	d1f2      	bne.n	8004050 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	079e      	lsls	r6, r3, #30
 800406e:	d506      	bpl.n	800407e <HAL_RCC_ClockConfig+0x13a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004070:	68e0      	ldr	r0, [r4, #12]
 8004072:	4944      	ldr	r1, [pc, #272]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 8004074:	698a      	ldr	r2, [r1, #24]
 8004076:	f002 020f 	and.w	r2, r2, #15
 800407a:	4282      	cmp	r2, r0
 800407c:	d869      	bhi.n	8004152 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800407e:	4940      	ldr	r1, [pc, #256]	@ (8004180 <HAL_RCC_ClockConfig+0x23c>)
 8004080:	680a      	ldr	r2, [r1, #0]
 8004082:	f002 020f 	and.w	r2, r2, #15
 8004086:	42aa      	cmp	r2, r5
 8004088:	d90a      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	680a      	ldr	r2, [r1, #0]
 800408c:	f022 020f 	bic.w	r2, r2, #15
 8004090:	432a      	orrs	r2, r5
 8004092:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004094:	680a      	ldr	r2, [r1, #0]
 8004096:	f002 020f 	and.w	r2, r2, #15
 800409a:	42aa      	cmp	r2, r5
 800409c:	f47f af69 	bne.w	8003f72 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040a0:	0758      	lsls	r0, r3, #29
 80040a2:	d50b      	bpl.n	80040bc <HAL_RCC_ClockConfig+0x178>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040a4:	4937      	ldr	r1, [pc, #220]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 80040a6:	6920      	ldr	r0, [r4, #16]
 80040a8:	698a      	ldr	r2, [r1, #24]
 80040aa:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80040ae:	4290      	cmp	r0, r2
 80040b0:	d204      	bcs.n	80040bc <HAL_RCC_ClockConfig+0x178>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040b2:	698a      	ldr	r2, [r1, #24]
 80040b4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80040b8:	4302      	orrs	r2, r0
 80040ba:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	0719      	lsls	r1, r3, #28
 80040be:	d50b      	bpl.n	80040d8 <HAL_RCC_ClockConfig+0x194>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040c0:	4930      	ldr	r1, [pc, #192]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 80040c2:	6960      	ldr	r0, [r4, #20]
 80040c4:	69ca      	ldr	r2, [r1, #28]
 80040c6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80040ca:	4290      	cmp	r0, r2
 80040cc:	d204      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x194>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ce:	69ca      	ldr	r2, [r1, #28]
 80040d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80040d4:	4302      	orrs	r2, r0
 80040d6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	06da      	lsls	r2, r3, #27
 80040da:	d50b      	bpl.n	80040f4 <HAL_RCC_ClockConfig+0x1b0>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040dc:	4929      	ldr	r1, [pc, #164]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 80040de:	69a0      	ldr	r0, [r4, #24]
 80040e0:	69ca      	ldr	r2, [r1, #28]
 80040e2:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80040e6:	4290      	cmp	r0, r2
 80040e8:	d204      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x1b0>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040ea:	69ca      	ldr	r2, [r1, #28]
 80040ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040f0:	4302      	orrs	r2, r0
 80040f2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040f4:	069b      	lsls	r3, r3, #26
 80040f6:	d50b      	bpl.n	8004110 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040f8:	4a22      	ldr	r2, [pc, #136]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 80040fa:	69e1      	ldr	r1, [r4, #28]
 80040fc:	6a13      	ldr	r3, [r2, #32]
 80040fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004102:	4299      	cmp	r1, r3
 8004104:	d204      	bcs.n	8004110 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004106:	6a13      	ldr	r3, [r2, #32]
 8004108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410c:	430b      	orrs	r3, r1
 800410e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004110:	f7ff fef6 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8004114:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <HAL_RCC_ClockConfig+0x240>)
 8004116:	4603      	mov	r3, r0
 8004118:	481b      	ldr	r0, [pc, #108]	@ (8004188 <HAL_RCC_ClockConfig+0x244>)
 800411a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800411c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800411e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004122:	4d1a      	ldr	r5, [pc, #104]	@ (800418c <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004124:	f002 020f 	and.w	r2, r2, #15
 8004128:	4c19      	ldr	r4, [pc, #100]	@ (8004190 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800412a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800412c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800412e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8004132:	4818      	ldr	r0, [pc, #96]	@ (8004194 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004134:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004138:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 800413a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800413c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800413e:	40d3      	lsrs	r3, r2
 8004140:	6023      	str	r3, [r4, #0]
}
 8004142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8004146:	f7fd bb9b 	b.w	8001880 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	2a00      	cmp	r2, #0
 800414c:	f47f af60 	bne.w	8004010 <HAL_RCC_ClockConfig+0xcc>
 8004150:	e795      	b.n	800407e <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004152:	698a      	ldr	r2, [r1, #24]
 8004154:	f022 020f 	bic.w	r2, r2, #15
 8004158:	4302      	orrs	r2, r0
 800415a:	618a      	str	r2, [r1, #24]
 800415c:	e78f      	b.n	800407e <HAL_RCC_ClockConfig+0x13a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	f53f af6a 	bmi.w	8004038 <HAL_RCC_ClockConfig+0xf4>
 8004164:	e705      	b.n	8003f72 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004166:	2001      	movs	r0, #1
}
 8004168:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800416a:	0398      	lsls	r0, r3, #14
 800416c:	f53f af64 	bmi.w	8004038 <HAL_RCC_ClockConfig+0xf4>
 8004170:	e6ff      	b.n	8003f72 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8004172:	2003      	movs	r0, #3
 8004174:	e6fe      	b.n	8003f74 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004176:	05db      	lsls	r3, r3, #23
 8004178:	f53f af5e 	bmi.w	8004038 <HAL_RCC_ClockConfig+0xf4>
 800417c:	e6f9      	b.n	8003f72 <HAL_RCC_ClockConfig+0x2e>
 800417e:	bf00      	nop
 8004180:	52002000 	.word	0x52002000
 8004184:	58024400 	.word	0x58024400
 8004188:	0801495c 	.word	0x0801495c
 800418c:	2400000c 	.word	0x2400000c
 8004190:	24000008 	.word	0x24000008
 8004194:	24000014 	.word	0x24000014

08004198 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004198:	4a18      	ldr	r2, [pc, #96]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800419a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419c:	6913      	ldr	r3, [r2, #16]
 800419e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d019      	beq.n	80041da <HAL_RCC_GetHCLKFreq+0x42>
 80041a6:	2b18      	cmp	r3, #24
 80041a8:	d022      	beq.n	80041f0 <HAL_RCC_GetHCLKFreq+0x58>
 80041aa:	b1c3      	cbz	r3, 80041de <HAL_RCC_GetHCLKFreq+0x46>
    sysclockfreq = CSI_VALUE;
 80041ac:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041ae:	4913      	ldr	r1, [pc, #76]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x64>)
 80041b0:	4814      	ldr	r0, [pc, #80]	@ (8004204 <HAL_RCC_GetHCLKFreq+0x6c>)
 80041b2:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041b4:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041b6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ba:	4c13      	ldr	r4, [pc, #76]	@ (8004208 <HAL_RCC_GetHCLKFreq+0x70>)
 80041bc:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041c0:	4d12      	ldr	r5, [pc, #72]	@ (800420c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041c2:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041c4:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041c6:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ca:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041ce:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041d0:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80041d4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041d6:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80041d8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <HAL_RCC_GetHCLKFreq+0x78>)
 80041dc:	e7e7      	b.n	80041ae <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041de:	6813      	ldr	r3, [r2, #0]
 80041e0:	069b      	lsls	r3, r3, #26
 80041e2:	d509      	bpl.n	80041f8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004214 <HAL_RCC_GetHCLKFreq+0x7c>)
 80041e8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80041ec:	40d3      	lsrs	r3, r2
 80041ee:	e7de      	b.n	80041ae <HAL_RCC_GetHCLKFreq+0x16>
 80041f0:	f7ff fb40 	bl	8003874 <HAL_RCC_GetSysClockFreq.part.0>
 80041f4:	4603      	mov	r3, r0
 80041f6:	e7da      	b.n	80041ae <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041f8:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <HAL_RCC_GetHCLKFreq+0x7c>)
 80041fa:	e7d8      	b.n	80041ae <HAL_RCC_GetHCLKFreq+0x16>
 80041fc:	58024400 	.word	0x58024400
 8004200:	003d0900 	.word	0x003d0900
 8004204:	0801495c 	.word	0x0801495c
 8004208:	24000008 	.word	0x24000008
 800420c:	2400000c 	.word	0x2400000c
 8004210:	017d7840 	.word	0x017d7840
 8004214:	03d09000 	.word	0x03d09000

08004218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004218:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800421a:	f7ff ffbd 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 800421e:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004220:	4a05      	ldr	r2, [pc, #20]	@ (8004238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800422e:	40d8      	lsrs	r0, r3
 8004230:	bd08      	pop	{r3, pc}
 8004232:	bf00      	nop
 8004234:	58024400 	.word	0x58024400
 8004238:	0801495c 	.word	0x0801495c

0800423c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800423c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800423e:	f7ff ffab 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 8004242:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004244:	4a05      	ldr	r2, [pc, #20]	@ (800425c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800424c:	5cd3      	ldrb	r3, [r2, r3]
 800424e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004252:	40d8      	lsrs	r0, r3
 8004254:	bd08      	pop	{r3, pc}
 8004256:	bf00      	nop
 8004258:	58024400 	.word	0x58024400
 800425c:	0801495c 	.word	0x0801495c

08004260 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004260:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004262:	223f      	movs	r2, #63	@ 0x3f
 8004264:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	f002 0207 	and.w	r2, r2, #7
 800426c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8004274:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	f002 020f 	and.w	r2, r2, #15
 800427c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004284:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800428c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004294:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004296:	6a1b      	ldr	r3, [r3, #32]
{
 8004298:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800429a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800429e:	4c05      	ldr	r4, [pc, #20]	@ (80042b4 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80042a0:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042a2:	6823      	ldr	r3, [r4, #0]
}
 80042a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	600b      	str	r3, [r1, #0]
}
 80042ae:	4770      	bx	lr
 80042b0:	58024400 	.word	0x58024400
 80042b4:	52002000 	.word	0x52002000

080042b8 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042ba:	4c36      	ldr	r4, [pc, #216]	@ (8004394 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80042bc:	4606      	mov	r6, r0
 80042be:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042c6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c8:	f7fd fe9a 	bl	8002000 <HAL_GetTick>
 80042cc:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042ce:	e004      	b.n	80042da <RCCEx_PLL2_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042d0:	f7fd fe96 	bl	8002000 <HAL_GetTick>
 80042d4:	1b40      	subs	r0, r0, r5
 80042d6:	2802      	cmp	r0, #2
 80042d8:	d856      	bhi.n	8004388 <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	011a      	lsls	r2, r3, #4
 80042de:	d4f7      	bmi.n	80042d0 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042e2:	6832      	ldr	r2, [r6, #0]
 80042e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80042e8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80042ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ee:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	3a01      	subs	r2, #1
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	0412      	lsls	r2, r2, #16
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004300:	4313      	orrs	r3, r2
 8004302:	6872      	ldr	r2, [r6, #4]
 8004304:	3a01      	subs	r2, #1
 8004306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800430a:	4313      	orrs	r3, r2
 800430c:	6932      	ldr	r2, [r6, #16]
 800430e:	3a01      	subs	r2, #1
 8004310:	0612      	lsls	r2, r2, #24
 8004312:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004316:	4313      	orrs	r3, r2
 8004318:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800431a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800431c:	6972      	ldr	r2, [r6, #20]
 800431e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004322:	4313      	orrs	r3, r2
 8004324:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004326:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004328:	69b3      	ldr	r3, [r6, #24]
 800432a:	f022 0220 	bic.w	r2, r2, #32
 800432e:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004330:	4b19      	ldr	r3, [pc, #100]	@ (8004398 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004332:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004334:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004336:	f022 0210 	bic.w	r2, r2, #16
 800433a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800433c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800433e:	69f2      	ldr	r2, [r6, #28]
 8004340:	400b      	ands	r3, r1
 8004342:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004346:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004348:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800434a:	f043 0310 	orr.w	r3, r3, #16
 800434e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004350:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004352:	b1df      	cbz	r7, 800438c <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004354:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004356:	bf0c      	ite	eq
 8004358:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800435c:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004360:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004362:	4c0c      	ldr	r4, [pc, #48]	@ (8004394 <RCCEx_PLL2_Config.part.0+0xdc>)
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800436a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436c:	f7fd fe48 	bl	8002000 <HAL_GetTick>
 8004370:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004372:	e004      	b.n	800437e <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004374:	f7fd fe44 	bl	8002000 <HAL_GetTick>
 8004378:	1b40      	subs	r0, r0, r5
 800437a:	2802      	cmp	r0, #2
 800437c:	d804      	bhi.n	8004388 <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	d5f7      	bpl.n	8004374 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8004384:	2000      	movs	r0, #0
}
 8004386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004388:	2003      	movs	r0, #3
}
 800438a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800438c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004392:	e7e6      	b.n	8004362 <RCCEx_PLL2_Config.part.0+0xaa>
 8004394:	58024400 	.word	0x58024400
 8004398:	ffff0007 	.word	0xffff0007

0800439c <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800439e:	4c36      	ldr	r4, [pc, #216]	@ (8004478 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80043a0:	4606      	mov	r6, r0
 80043a2:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ac:	f7fd fe28 	bl	8002000 <HAL_GetTick>
 80043b0:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043b2:	e004      	b.n	80043be <RCCEx_PLL3_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043b4:	f7fd fe24 	bl	8002000 <HAL_GetTick>
 80043b8:	1b40      	subs	r0, r0, r5
 80043ba:	2802      	cmp	r0, #2
 80043bc:	d856      	bhi.n	800446c <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	009a      	lsls	r2, r3, #2
 80043c2:	d4f7      	bmi.n	80043b4 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80043c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80043c6:	6832      	ldr	r2, [r6, #0]
 80043c8:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80043cc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80043d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043d2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	3a01      	subs	r2, #1
 80043da:	025b      	lsls	r3, r3, #9
 80043dc:	0412      	lsls	r2, r2, #16
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80043e4:	4313      	orrs	r3, r2
 80043e6:	6872      	ldr	r2, [r6, #4]
 80043e8:	3a01      	subs	r2, #1
 80043ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ee:	4313      	orrs	r3, r2
 80043f0:	6932      	ldr	r2, [r6, #16]
 80043f2:	3a01      	subs	r2, #1
 80043f4:	0612      	lsls	r2, r2, #24
 80043f6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80043fa:	4313      	orrs	r3, r2
 80043fc:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004400:	6972      	ldr	r2, [r6, #20]
 8004402:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004406:	4313      	orrs	r3, r2
 8004408:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800440a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800440c:	69b3      	ldr	r3, [r6, #24]
 800440e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004412:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004414:	4b19      	ldr	r3, [pc, #100]	@ (800447c <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004416:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004418:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800441a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800441e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004420:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004422:	69f2      	ldr	r2, [r6, #28]
 8004424:	400b      	ands	r3, r1
 8004426:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800442a:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800442c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800442e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004432:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004434:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004436:	b1df      	cbz	r7, 8004470 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004438:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800443a:	bf0c      	ite	eq
 800443c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004440:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004444:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004446:	4c0c      	ldr	r4, [pc, #48]	@ (8004478 <RCCEx_PLL3_Config.part.0+0xdc>)
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fd fdd6 	bl	8002000 <HAL_GetTick>
 8004454:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004456:	e004      	b.n	8004462 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004458:	f7fd fdd2 	bl	8002000 <HAL_GetTick>
 800445c:	1b40      	subs	r0, r0, r5
 800445e:	2802      	cmp	r0, #2
 8004460:	d804      	bhi.n	800446c <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	d5f7      	bpl.n	8004458 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8004468:	2000      	movs	r0, #0
}
 800446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800446c:	2003      	movs	r0, #3
}
 800446e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004470:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004474:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004476:	e7e6      	b.n	8004446 <RCCEx_PLL3_Config.part.0+0xaa>
 8004478:	58024400 	.word	0x58024400
 800447c:	ffff0007 	.word	0xffff0007

08004480 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004484:	6803      	ldr	r3, [r0, #0]
{
 8004486:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004488:	f013 6600 	ands.w	r6, r3, #134217728	@ 0x8000000
 800448c:	d025      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800448e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8004490:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8004494:	f000 85a9 	beq.w	8004fea <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8004498:	d814      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800449a:	2a00      	cmp	r2, #0
 800449c:	f000 8626 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80044a0:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80044a4:	f040 83ec 	bne.w	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x800>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044a8:	4aa7      	ldr	r2, [pc, #668]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80044aa:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044ac:	f002 0203 	and.w	r2, r2, #3
 80044b0:	2a03      	cmp	r2, #3
 80044b2:	f000 83e5 	beq.w	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80044b6:	2102      	movs	r1, #2
 80044b8:	3004      	adds	r0, #4
 80044ba:	f7ff fefd 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
 80044be:	4606      	mov	r6, r0
 80044c0:	f000 bd9f 	b.w	8005002 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80044c4:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 80044c8:	f040 83da 	bne.w	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x800>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044cc:	489e      	ldr	r0, [pc, #632]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044ce:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044d0:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80044d2:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80044d6:	430a      	orrs	r2, r1
 80044d8:	6502      	str	r2, [r0, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044da:	05dd      	lsls	r5, r3, #23
 80044dc:	d50a      	bpl.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai1ClockSelection)
 80044de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044e0:	2a04      	cmp	r2, #4
 80044e2:	d806      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80044e4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80044e8:	054f0419 	.word	0x054f0419
 80044ec:	041e0562 	.word	0x041e0562
 80044f0:	041e      	.short	0x041e
      ret = HAL_ERROR;
 80044f2:	2601      	movs	r6, #1
 80044f4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044f6:	0598      	lsls	r0, r3, #22
 80044f8:	d522      	bpl.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    switch(PeriphClkInit->Sai23ClockSelection)
 80044fa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80044fc:	2a80      	cmp	r2, #128	@ 0x80
 80044fe:	f000 8532 	beq.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8004502:	f200 8116 	bhi.w	8004732 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8004506:	2a00      	cmp	r2, #0
 8004508:	f000 8423 	beq.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 800450c:	2a40      	cmp	r2, #64	@ 0x40
 800450e:	f040 8117 	bne.w	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004512:	4a8d      	ldr	r2, [pc, #564]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004514:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004516:	f002 0203 	and.w	r2, r2, #3
 800451a:	2a03      	cmp	r2, #3
 800451c:	f000 8110 	beq.w	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004520:	2100      	movs	r1, #0
 8004522:	1d20      	adds	r0, r4, #4
 8004524:	f7ff fec8 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800452c:	2d00      	cmp	r5, #0
 800452e:	f040 8418 	bne.w	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004532:	4985      	ldr	r1, [pc, #532]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004536:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004538:	f422 72e0 	bic.w	r2, r2, #448	@ 0x1c0
 800453c:	4302      	orrs	r2, r0
 800453e:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004540:	0559      	lsls	r1, r3, #21
 8004542:	d526      	bpl.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x112>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004544:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8004548:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800454c:	f000 8560 	beq.w	8005010 <HAL_RCCEx_PeriphCLKConfig+0xb90>
 8004550:	f200 80fc 	bhi.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004554:	2a00      	cmp	r2, #0
 8004556:	f000 83d6 	beq.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800455a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800455e:	f040 80fd 	bne.w	800475c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004562:	4a79      	ldr	r2, [pc, #484]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004564:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004566:	f002 0203 	and.w	r2, r2, #3
 800456a:	2a03      	cmp	r2, #3
 800456c:	f000 80f6 	beq.w	800475c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004570:	2100      	movs	r1, #0
 8004572:	1d20      	adds	r0, r4, #4
 8004574:	f7ff fea0 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800457c:	2d00      	cmp	r5, #0
 800457e:	f040 83ca 	bne.w	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004582:	4971      	ldr	r1, [pc, #452]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004584:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8004588:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800458a:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 800458e:	4302      	orrs	r2, r0
 8004590:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004592:	051a      	lsls	r2, r3, #20
 8004594:	d526      	bpl.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004596:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 800459a:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800459e:	f000 8514 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 80045a2:	f200 80de 	bhi.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80045a6:	2a00      	cmp	r2, #0
 80045a8:	f000 83c9 	beq.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80045ac:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80045b0:	f040 80df 	bne.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045b4:	4a64      	ldr	r2, [pc, #400]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80045b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045b8:	f002 0203 	and.w	r2, r2, #3
 80045bc:	2a03      	cmp	r2, #3
 80045be:	f000 80d8 	beq.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 80045c2:	2100      	movs	r1, #0
 80045c4:	1d20      	adds	r0, r4, #4
 80045c6:	f7ff fe77 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80045ce:	2d00      	cmp	r5, #0
 80045d0:	f040 83bd 	bne.w	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80045d4:	495c      	ldr	r1, [pc, #368]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80045d6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80045da:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80045dc:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 80045e0:	4302      	orrs	r2, r0
 80045e2:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045e4:	019f      	lsls	r7, r3, #6
 80045e6:	d518      	bpl.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->QspiClockSelection)
 80045e8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80045ea:	2a20      	cmp	r2, #32
 80045ec:	f000 8402 	beq.w	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80045f0:	f200 80c2 	bhi.w	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80045f4:	b13a      	cbz	r2, 8004606 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80045f6:	2a10      	cmp	r2, #16
 80045f8:	f040 80c1 	bne.w	800477e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045fc:	4952      	ldr	r1, [pc, #328]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80045fe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004600:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004604:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004606:	2d00      	cmp	r5, #0
 8004608:	f040 83ee 	bne.w	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x968>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800460c:	494e      	ldr	r1, [pc, #312]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800460e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004610:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8004612:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8004616:	4302      	orrs	r2, r0
 8004618:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800461a:	04d8      	lsls	r0, r3, #19
 800461c:	d524      	bpl.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi123ClockSelection)
 800461e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004620:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004624:	f000 8504 	beq.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004628:	f200 80ac 	bhi.w	8004784 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800462c:	2a00      	cmp	r2, #0
 800462e:	f000 839b 	beq.w	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8004632:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004636:	f040 80ad 	bne.w	8004794 <HAL_RCCEx_PeriphCLKConfig+0x314>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800463a:	4a43      	ldr	r2, [pc, #268]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800463c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800463e:	f002 0203 	and.w	r2, r2, #3
 8004642:	2a03      	cmp	r2, #3
 8004644:	f000 80a6 	beq.w	8004794 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004648:	2100      	movs	r1, #0
 800464a:	1d20      	adds	r0, r4, #4
 800464c:	f7ff fe34 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004654:	2d00      	cmp	r5, #0
 8004656:	f040 838f 	bne.w	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800465a:	493b      	ldr	r1, [pc, #236]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800465c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800465e:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004660:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004664:	4302      	orrs	r2, r0
 8004666:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004668:	0499      	lsls	r1, r3, #18
 800466a:	d522      	bpl.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    switch(PeriphClkInit->Spi45ClockSelection)
 800466c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800466e:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8004672:	f000 8440 	beq.w	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004676:	f200 8090 	bhi.w	800479a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800467a:	b182      	cbz	r2, 800469e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800467c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004680:	f040 8095 	bne.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x32e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004684:	4a30      	ldr	r2, [pc, #192]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004686:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004688:	f002 0203 	and.w	r2, r2, #3
 800468c:	2a03      	cmp	r2, #3
 800468e:	f000 808e 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004692:	2101      	movs	r1, #1
 8004694:	1d20      	adds	r0, r4, #4
 8004696:	f7ff fe0f 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800469e:	2d00      	cmp	r5, #0
 80046a0:	f040 84e6 	bne.w	8005070 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80046a4:	4928      	ldr	r1, [pc, #160]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80046a6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80046a8:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80046aa:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80046ae:	4302      	orrs	r2, r0
 80046b0:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046b2:	045a      	lsls	r2, r3, #17
 80046b4:	d521      	bpl.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch(PeriphClkInit->Spi6ClockSelection)
 80046b6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 80046ba:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80046be:	f000 83e4 	beq.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80046c2:	d877      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
 80046c4:	b172      	cbz	r2, 80046e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80046c6:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80046ca:	d17b      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80046ce:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046d0:	f002 0203 	and.w	r2, r2, #3
 80046d4:	2a03      	cmp	r2, #3
 80046d6:	d075      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80046d8:	2101      	movs	r1, #1
 80046da:	1d20      	adds	r0, r4, #4
 80046dc:	f7ff fdec 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	f040 84b3 	bne.w	8005050 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046ea:	4917      	ldr	r1, [pc, #92]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80046ec:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80046f0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80046f2:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 80046f6:	4302      	orrs	r2, r0
 80046f8:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046fa:	041f      	lsls	r7, r3, #16
 80046fc:	d50d      	bpl.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch(PeriphClkInit->FdcanClockSelection)
 80046fe:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004700:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8004704:	f000 827a 	beq.w	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8004708:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800470c:	f000 8359 	beq.w	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x942>
 8004710:	2a00      	cmp	r2, #0
 8004712:	f000 8278 	beq.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = HAL_ERROR;
 8004716:	2601      	movs	r6, #1
 8004718:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800471a:	01d8      	lsls	r0, r3, #7
 800471c:	d564      	bpl.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->FmcClockSelection)
 800471e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004720:	2a03      	cmp	r2, #3
 8004722:	f200 84f2 	bhi.w	800510a <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8004726:	e8df f012 	tbh	[pc, r2, lsl #1]
 800472a:	0055      	.short	0x0055
 800472c:	039f0050 	.word	0x039f0050
 8004730:	0055      	.short	0x0055
    switch(PeriphClkInit->Sai23ClockSelection)
 8004732:	2ac0      	cmp	r2, #192	@ 0xc0
 8004734:	f43f aefa 	beq.w	800452c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004738:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800473c:	f43f aef6 	beq.w	800452c <HAL_RCCEx_PeriphCLKConfig+0xac>
      ret = HAL_ERROR;
 8004740:	2601      	movs	r6, #1
 8004742:	4635      	mov	r5, r6
 8004744:	e6fc      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4AClockSelection)
 800474c:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8004750:	f43f af14 	beq.w	800457c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8004754:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004758:	f43f af10 	beq.w	800457c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = HAL_ERROR;
 800475c:	2601      	movs	r6, #1
 800475e:	4635      	mov	r5, r6
 8004760:	e717      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x112>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004762:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8004766:	f43f af32 	beq.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800476a:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800476e:	f43f af2e 	beq.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = HAL_ERROR;
 8004772:	2601      	movs	r6, #1
 8004774:	4635      	mov	r5, r6
 8004776:	e735      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->QspiClockSelection)
 8004778:	2a30      	cmp	r2, #48	@ 0x30
 800477a:	f43f af44 	beq.w	8004606 <HAL_RCCEx_PeriphCLKConfig+0x186>
      ret = HAL_ERROR;
 800477e:	2601      	movs	r6, #1
 8004780:	4635      	mov	r5, r6
 8004782:	e74a      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004784:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8004788:	f43f af64 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800478c:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8004790:	f43f af60 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = HAL_ERROR;
 8004794:	2601      	movs	r6, #1
 8004796:	4635      	mov	r5, r6
 8004798:	e766      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 800479a:	f422 3180 	bic.w	r1, r2, #65536	@ 0x10000
 800479e:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 80047a2:	f43f af7c 	beq.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80047a6:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 80047aa:	f43f af78 	beq.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 80047ae:	2601      	movs	r6, #1
 80047b0:	4635      	mov	r5, r6
 80047b2:	e77e      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    switch(PeriphClkInit->Spi6ClockSelection)
 80047b4:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 80047b8:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80047bc:	d092      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80047be:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 80047c2:	d08f      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      ret = HAL_ERROR;
 80047c4:	2601      	movs	r6, #1
 80047c6:	4635      	mov	r5, r6
 80047c8:	e797      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ca:	493c      	ldr	r1, [pc, #240]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80047cc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80047ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80047d2:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	f040 830b 	bne.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047da:	4938      	ldr	r1, [pc, #224]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80047dc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80047de:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80047e0:	f022 0203 	bic.w	r2, r2, #3
 80047e4:	4302      	orrs	r2, r0
 80047e6:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047e8:	0259      	lsls	r1, r3, #9
 80047ea:	f100 824b 	bmi.w	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047ee:	07df      	lsls	r7, r3, #31
 80047f0:	d52f      	bpl.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch(PeriphClkInit->Usart16ClockSelection)
 80047f2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80047f4:	2a28      	cmp	r2, #40	@ 0x28
 80047f6:	d82a      	bhi.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80047f8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80047fc:	00290237 	.word	0x00290237
 8004800:	00290029 	.word	0x00290029
 8004804:	00290029 	.word	0x00290029
 8004808:	00290029 	.word	0x00290029
 800480c:	0029022a 	.word	0x0029022a
 8004810:	00290029 	.word	0x00290029
 8004814:	00290029 	.word	0x00290029
 8004818:	00290029 	.word	0x00290029
 800481c:	00290461 	.word	0x00290461
 8004820:	00290029 	.word	0x00290029
 8004824:	00290029 	.word	0x00290029
 8004828:	00290029 	.word	0x00290029
 800482c:	00290237 	.word	0x00290237
 8004830:	00290029 	.word	0x00290029
 8004834:	00290029 	.word	0x00290029
 8004838:	00290029 	.word	0x00290029
 800483c:	00290237 	.word	0x00290237
 8004840:	00290029 	.word	0x00290029
 8004844:	00290029 	.word	0x00290029
 8004848:	00290029 	.word	0x00290029
 800484c:	0237      	.short	0x0237
      ret = HAL_ERROR;
 800484e:	2601      	movs	r6, #1
 8004850:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004852:	0798      	lsls	r0, r3, #30
 8004854:	d522      	bpl.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004856:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004858:	2a05      	cmp	r2, #5
 800485a:	f200 844e 	bhi.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800485e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004862:	0013      	.short	0x0013
 8004864:	041d0006 	.word	0x041d0006
 8004868:	00130013 	.word	0x00130013
 800486c:	0013      	.short	0x0013
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800486e:	4a13      	ldr	r2, [pc, #76]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8004870:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004872:	f002 0203 	and.w	r2, r2, #3
 8004876:	2a03      	cmp	r2, #3
 8004878:	f000 843f 	beq.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800487c:	2101      	movs	r1, #1
 800487e:	1d20      	adds	r0, r4, #4
 8004880:	f7ff fd1a 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004888:	2d00      	cmp	r5, #0
 800488a:	f040 83f4 	bne.w	8005076 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800488e:	490b      	ldr	r1, [pc, #44]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8004890:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004892:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004894:	f022 0207 	bic.w	r2, r2, #7
 8004898:	4302      	orrs	r2, r0
 800489a:	654a      	str	r2, [r1, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800489c:	0759      	lsls	r1, r3, #29
 800489e:	d527      	bpl.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x470>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80048a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80048a4:	2a05      	cmp	r2, #5
 80048a6:	f200 842c 	bhi.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc82>
 80048aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80048ae:	0016      	.short	0x0016
 80048b0:	03e60009 	.word	0x03e60009
 80048b4:	00160016 	.word	0x00160016
 80048b8:	0016      	.short	0x0016
 80048ba:	bf00      	nop
 80048bc:	58024400 	.word	0x58024400
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048c0:	4aac      	ldr	r2, [pc, #688]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80048c2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80048c4:	f002 0203 	and.w	r2, r2, #3
 80048c8:	2a03      	cmp	r2, #3
 80048ca:	f000 841a 	beq.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc82>
 80048ce:	2101      	movs	r1, #1
 80048d0:	1d20      	adds	r0, r4, #4
 80048d2:	f7ff fcf1 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80048da:	2d00      	cmp	r5, #0
 80048dc:	f040 83c4 	bne.w	8005068 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e0:	49a4      	ldr	r1, [pc, #656]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80048e2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80048e6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80048e8:	f022 0207 	bic.w	r2, r2, #7
 80048ec:	4302      	orrs	r2, r0
 80048ee:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f0:	069a      	lsls	r2, r3, #26
 80048f2:	d524      	bpl.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x4be>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80048f4:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80048f8:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80048fc:	f000 82e9 	beq.w	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
 8004900:	f200 8110 	bhi.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004904:	b182      	cbz	r2, 8004928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004906:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 800490a:	f040 8115 	bne.w	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800490e:	4a99      	ldr	r2, [pc, #612]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004910:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004912:	f002 0203 	and.w	r2, r2, #3
 8004916:	2a03      	cmp	r2, #3
 8004918:	f000 810e 	beq.w	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800491c:	2100      	movs	r1, #0
 800491e:	1d20      	adds	r0, r4, #4
 8004920:	f7ff fcca 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004928:	2d00      	cmp	r5, #0
 800492a:	f040 8396 	bne.w	800505a <HAL_RCCEx_PeriphCLKConfig+0xbda>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800492e:	4991      	ldr	r1, [pc, #580]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004930:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8004934:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004936:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 800493a:	4302      	orrs	r2, r0
 800493c:	654a      	str	r2, [r1, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800493e:	065f      	lsls	r7, r3, #25
 8004940:	d524      	bpl.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004942:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8004946:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800494a:	f000 82b0 	beq.w	8004eae <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 800494e:	f200 80f6 	bhi.w	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8004952:	b182      	cbz	r2, 8004976 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004954:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004958:	f040 80fb 	bne.w	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800495c:	4a85      	ldr	r2, [pc, #532]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800495e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004960:	f002 0203 	and.w	r2, r2, #3
 8004964:	2a03      	cmp	r2, #3
 8004966:	f000 80f4 	beq.w	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 800496a:	2100      	movs	r1, #0
 800496c:	1d20      	adds	r0, r4, #4
 800496e:	f7ff fca3 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004976:	2d00      	cmp	r5, #0
 8004978:	f040 836d 	bne.w	8005056 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800497c:	497d      	ldr	r1, [pc, #500]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800497e:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8004982:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004984:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004988:	4302      	orrs	r2, r0
 800498a:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800498c:	0618      	lsls	r0, r3, #24
 800498e:	d524      	bpl.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004990:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8004994:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8004998:	f000 824f 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800499c:	f200 80dc 	bhi.w	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80049a0:	b182      	cbz	r2, 80049c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80049a2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80049a6:	f040 80e1 	bne.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049aa:	4a72      	ldr	r2, [pc, #456]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80049ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049ae:	f002 0203 	and.w	r2, r2, #3
 80049b2:	2a03      	cmp	r2, #3
 80049b4:	f000 80da 	beq.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80049b8:	2100      	movs	r1, #0
 80049ba:	1d20      	adds	r0, r4, #4
 80049bc:	f7ff fc7c 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	f040 8351 	bne.w	800506c <HAL_RCCEx_PeriphCLKConfig+0xbec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049ca:	496a      	ldr	r1, [pc, #424]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80049cc:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80049d0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80049d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80049d6:	4302      	orrs	r2, r0
 80049d8:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049da:	0719      	lsls	r1, r3, #28
 80049dc:	d50b      	bpl.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x576>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80049de:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80049e2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80049e6:	f000 8298 	beq.w	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049ea:	4862      	ldr	r0, [pc, #392]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80049ec:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80049ee:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80049f2:	430a      	orrs	r2, r1
 80049f4:	6542      	str	r2, [r0, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049f6:	06da      	lsls	r2, r3, #27
 80049f8:	d50b      	bpl.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x592>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80049fa:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80049fe:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004a02:	f000 829d 	beq.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a06:	485b      	ldr	r0, [pc, #364]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004a08:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004a0a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	6582      	str	r2, [r0, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a12:	031f      	lsls	r7, r3, #12
 8004a14:	d50e      	bpl.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    switch(PeriphClkInit->AdcClockSelection)
 8004a16:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8004a1a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004a1e:	f000 80fd 	beq.w	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
 8004a22:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004a26:	f000 8107 	beq.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004a2a:	2900      	cmp	r1, #0
 8004a2c:	f000 81b9 	beq.w	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      ret = HAL_ERROR;
 8004a30:	2601      	movs	r6, #1
 8004a32:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a34:	0358      	lsls	r0, r3, #13
 8004a36:	d50f      	bpl.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
    switch(PeriphClkInit->UsbClockSelection)
 8004a38:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8004a3c:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8004a40:	f000 81e9 	beq.w	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x996>
 8004a44:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8004a48:	f000 80cc 	beq.w	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004a4c:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8004a50:	f000 80c3 	beq.w	8004bda <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = HAL_ERROR;
 8004a54:	2601      	movs	r6, #1
 8004a56:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a58:	03d9      	lsls	r1, r3, #15
 8004a5a:	d51e      	bpl.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004a5c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	f000 818c 	beq.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004a64:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004a68:	f040 80a1 	bne.w	8004bae <HAL_RCCEx_PeriphCLKConfig+0x72e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a6c:	4a41      	ldr	r2, [pc, #260]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004a6e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a70:	f002 0203 	and.w	r2, r2, #3
 8004a74:	2a03      	cmp	r2, #3
 8004a76:	f000 809a 	beq.w	8004bae <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	1d20      	adds	r0, r4, #4
 8004a7e:	f7ff fc1b 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
 8004a82:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a84:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004a86:	2d00      	cmp	r5, #0
 8004a88:	f040 8180 	bne.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a8c:	4939      	ldr	r1, [pc, #228]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004a8e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004a90:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8004a92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a96:	4302      	orrs	r2, r0
 8004a98:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a9a:	009a      	lsls	r2, r3, #2
 8004a9c:	f100 808c 	bmi.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004aa0:	039f      	lsls	r7, r3, #14
 8004aa2:	d469      	bmi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
  if (status == HAL_OK)
 8004aa4:	1e30      	subs	r0, r6, #0
 8004aa6:	bf18      	it	ne
 8004aa8:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004aaa:	02de      	lsls	r6, r3, #11
 8004aac:	d506      	bpl.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x63c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aae:	4931      	ldr	r1, [pc, #196]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004ab0:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8004ab2:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004ab4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ab8:	432a      	orrs	r2, r5
 8004aba:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004abc:	00dd      	lsls	r5, r3, #3
 8004abe:	d507      	bpl.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ac0:	492c      	ldr	r1, [pc, #176]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004ac2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8004ac6:	690a      	ldr	r2, [r1, #16]
 8004ac8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004acc:	432a      	orrs	r2, r5
 8004ace:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad0:	0299      	lsls	r1, r3, #10
 8004ad2:	d506      	bpl.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x662>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ad4:	4927      	ldr	r1, [pc, #156]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004ad6:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8004ad8:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004ada:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8004ade:	432a      	orrs	r2, r5
 8004ae0:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ae2:	005a      	lsls	r2, r3, #1
 8004ae4:	d509      	bpl.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x67a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ae6:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004ae8:	6911      	ldr	r1, [r2, #16]
 8004aea:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8004aee:	6111      	str	r1, [r2, #16]
 8004af0:	6911      	ldr	r1, [r2, #16]
 8004af2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8004af6:	4329      	orrs	r1, r5
 8004af8:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	da06      	bge.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004afe:	491d      	ldr	r1, [pc, #116]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004b00:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8004b02:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8004b04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b08:	432a      	orrs	r2, r5
 8004b0a:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	d507      	bpl.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b10:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004b12:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8004b16:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004b18:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6553      	str	r3, [r2, #84]	@ 0x54
}
 8004b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b24:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8004b28:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8004b2c:	f43f aefc 	beq.w	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004b30:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8004b34:	f43f aef8 	beq.w	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      ret = HAL_ERROR;
 8004b38:	2601      	movs	r6, #1
 8004b3a:	4635      	mov	r5, r6
 8004b3c:	e6ff      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x4be>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b3e:	f422 6180 	bic.w	r1, r2, #1024	@ 0x400
 8004b42:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004b46:	f43f af16 	beq.w	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b4a:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8004b4e:	f43f af12 	beq.w	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      ret = HAL_ERROR;
 8004b52:	2601      	movs	r6, #1
 8004b54:	4635      	mov	r5, r6
 8004b56:	e719      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b58:	f422 5100 	bic.w	r1, r2, #8192	@ 0x2000
 8004b5c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004b60:	f43f af30 	beq.w	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8004b64:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 8004b68:	f43f af2c 	beq.w	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = HAL_ERROR;
 8004b6c:	2601      	movs	r6, #1
 8004b6e:	4635      	mov	r5, r6
 8004b70:	e733      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
    switch(PeriphClkInit->RngClockSelection)
 8004b78:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8004b7a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8004b7e:	f000 8107 	beq.w	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8004b82:	d906      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8004b84:	f422 7180 	bic.w	r1, r2, #256	@ 0x100
 8004b88:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x716>
      status=HAL_ERROR;
 8004b8e:	2001      	movs	r0, #1
 8004b90:	e78b      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch(PeriphClkInit->RngClockSelection)
 8004b92:	2a00      	cmp	r2, #0
 8004b94:	d1fb      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    if(ret == HAL_OK)
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	d1f9      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x70e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b9a:	4db1      	ldr	r5, [pc, #708]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
  if (status == HAL_OK)
 8004b9c:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b9e:	6d69      	ldr	r1, [r5, #84]	@ 0x54
  if (status == HAL_OK)
 8004ba0:	bf18      	it	ne
 8004ba2:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ba4:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	656a      	str	r2, [r5, #84]	@ 0x54
 8004bac:	e77d      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x62a>
      ret = HAL_ERROR;
 8004bae:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bb0:	009a      	lsls	r2, r3, #2
      ret = HAL_ERROR;
 8004bb2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bb4:	f57f af74 	bpl.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bb8:	4aa9      	ldr	r2, [pc, #676]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004bba:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004bbc:	f002 0203 	and.w	r2, r2, #3
 8004bc0:	2a03      	cmp	r2, #3
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x756>
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004bca:	f7ff fbe7 	bl	800439c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bce:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	f43f af65 	beq.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      status=HAL_ERROR;
 8004bd6:	2601      	movs	r6, #1
 8004bd8:	e762      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bda:	49a1      	ldr	r1, [pc, #644]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004bdc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004bde:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004be2:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004be4:	2d00      	cmp	r5, #0
 8004be6:	f040 80fd 	bne.w	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bea:	499d      	ldr	r1, [pc, #628]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004bec:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004bf0:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004bf2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004bf6:	4302      	orrs	r2, r0
 8004bf8:	654a      	str	r2, [r1, #84]	@ 0x54
 8004bfa:	e72d      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfc:	4998      	ldr	r1, [pc, #608]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004bfe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004c00:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004c04:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004c06:	2d00      	cmp	r5, #0
 8004c08:	f040 80f0 	bne.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x96c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c0c:	4994      	ldr	r1, [pc, #592]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004c0e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8004c10:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004c12:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c16:	4302      	orrs	r2, r0
 8004c18:	650a      	str	r2, [r1, #80]	@ 0x50
 8004c1a:	e57e      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c1c:	4a90      	ldr	r2, [pc, #576]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004c1e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c20:	f002 0203 	and.w	r2, r2, #3
 8004c24:	2a03      	cmp	r2, #3
 8004c26:	f43f af03 	beq.w	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8004c2a:	2102      	movs	r1, #2
 8004c2c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004c30:	f7ff fbb4 	bl	800439c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004c38:	2d00      	cmp	r5, #0
 8004c3a:	f040 8213 	bne.w	8005064 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c3e:	4988      	ldr	r1, [pc, #544]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004c40:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8004c44:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004c46:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004c4a:	4302      	orrs	r2, r0
 8004c4c:	658a      	str	r2, [r1, #88]	@ 0x58
 8004c4e:	e6f1      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c50:	4a83      	ldr	r2, [pc, #524]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004c52:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c54:	f002 0203 	and.w	r2, r2, #3
 8004c58:	2a03      	cmp	r2, #3
 8004c5a:	f43f adf8 	beq.w	800484e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004c5e:	2101      	movs	r1, #1
 8004c60:	1d20      	adds	r0, r4, #4
 8004c62:	f7ff fb29 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004c6a:	2d00      	cmp	r5, #0
 8004c6c:	f040 81f7 	bne.w	800505e <HAL_RCCEx_PeriphCLKConfig+0xbde>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c70:	497b      	ldr	r1, [pc, #492]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004c72:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8004c74:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004c76:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8004c7a:	4302      	orrs	r2, r0
 8004c7c:	654a      	str	r2, [r1, #84]	@ 0x54
 8004c7e:	e5e8      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = HAL_ERROR;
 8004c80:	2601      	movs	r6, #1
 8004c82:	e42a      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c84:	4f77      	ldr	r7, [pc, #476]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004c8e:	f7fd f9b7 	bl	8002000 <HAL_GetTick>
 8004c92:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c94:	e006      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fd f9b3 	bl	8002000 <HAL_GetTick>
 8004c9a:	eba0 0008 	sub.w	r0, r0, r8
 8004c9e:	2864      	cmp	r0, #100	@ 0x64
 8004ca0:	f200 821f 	bhi.w	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	05da      	lsls	r2, r3, #23
 8004ca8:	d5f5      	bpl.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x816>
    if(ret == HAL_OK)
 8004caa:	2d00      	cmp	r5, #0
 8004cac:	f040 821a 	bne.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004cb2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8004cb6:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004cb8:	4059      	eors	r1, r3
 8004cba:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc2:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc4:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc8:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8004ccc:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cce:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8004cd0:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8004cd4:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8004cd6:	6711      	str	r1, [r2, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cdc:	f000 8219 	beq.w	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc92>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004ce4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004ce8:	f000 8227 	beq.w	800513a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004cec:	495c      	ldr	r1, [pc, #368]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004cee:	690a      	ldr	r2, [r1, #16]
 8004cf0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004cf4:	610a      	str	r2, [r1, #16]
 8004cf6:	4a5a      	ldr	r2, [pc, #360]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	e573      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d06:	4956      	ldr	r1, [pc, #344]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004d08:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004d0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d0e:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004d10:	2d00      	cmp	r5, #0
 8004d12:	f43f ac36 	beq.w	8004582 <HAL_RCCEx_PeriphCLKConfig+0x102>
 8004d16:	462e      	mov	r6, r5
 8004d18:	e43b      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1a:	4951      	ldr	r1, [pc, #324]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004d1c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004d1e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d22:	62ca      	str	r2, [r1, #44]	@ 0x2c
      ret = HAL_ERROR;
 8004d24:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8004d26:	2d00      	cmp	r5, #0
 8004d28:	f040 813d 	bne.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d2c:	494c      	ldr	r1, [pc, #304]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004d2e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004d30:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004d32:	f022 0207 	bic.w	r2, r2, #7
 8004d36:	4302      	orrs	r2, r0
 8004d38:	650a      	str	r2, [r1, #80]	@ 0x50
 8004d3a:	f7ff bbdc 	b.w	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3e:	4948      	ldr	r1, [pc, #288]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004d40:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004d42:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d46:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	f43f ac43 	beq.w	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d4e:	462e      	mov	r6, r5
 8004d50:	e448      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d52:	4943      	ldr	r1, [pc, #268]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004d54:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004d56:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d5a:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	f43f abe8 	beq.w	8004532 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8004d62:	462e      	mov	r6, r5
 8004d64:	f7ff bbec 	b.w	8004540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d68:	493d      	ldr	r1, [pc, #244]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004d6a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004d6c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d70:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	f43f ac71 	beq.w	800465a <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004d78:	462e      	mov	r6, r5
 8004d7a:	e475      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7c:	4938      	ldr	r1, [pc, #224]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004d7e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004d80:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d84:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	f43f ae80 	beq.w	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004d8c:	462e      	mov	r6, r5
 8004d8e:	e684      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d90:	4833      	ldr	r0, [pc, #204]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004d92:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004d94:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004d98:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	f47f aef7 	bne.w	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004da0:	e6fb      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004da2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004da4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004da6:	f002 0203 	and.w	r2, r2, #3
 8004daa:	2a03      	cmp	r2, #3
 8004dac:	f43f ae40 	beq.w	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8004db0:	1d20      	adds	r0, r4, #4
 8004db2:	f7ff fa81 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
 8004db6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004db8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004dba:	2d00      	cmp	r5, #0
 8004dbc:	f43f af3f 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8004dc0:	e150      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dc2:	4a27      	ldr	r2, [pc, #156]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004dc4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004dc6:	f002 0203 	and.w	r2, r2, #3
 8004dca:	2a03      	cmp	r2, #3
 8004dcc:	f43f aca3 	beq.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	1d20      	adds	r0, r4, #4
 8004dd4:	f7ff fa70 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
 8004dd8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004dda:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	f43f af15 	beq.w	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x78c>
 8004de2:	e003      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x96c>
 8004de4:	462e      	mov	r6, r5
 8004de6:	e637      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8004de8:	462e      	mov	r6, r5
 8004dea:	e416      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004dec:	462e      	mov	r6, r5
 8004dee:	e494      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004df0:	462e      	mov	r6, r5
 8004df2:	e4f9      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004df4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004df6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004df8:	f002 0203 	and.w	r2, r2, #3
 8004dfc:	2a03      	cmp	r2, #3
 8004dfe:	f43f acbe 	beq.w	800477e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004e02:	2102      	movs	r1, #2
 8004e04:	1d20      	adds	r0, r4, #4
 8004e06:	f7ff fa57 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
 8004e0a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e0c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004e0e:	2d00      	cmp	r5, #0
 8004e10:	f43f abfc 	beq.w	800460c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004e14:	e7e8      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x968>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e16:	4a12      	ldr	r2, [pc, #72]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004e18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e1a:	f002 0203 	and.w	r2, r2, #3
 8004e1e:	2a03      	cmp	r2, #3
 8004e20:	f43f ae18 	beq.w	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e24:	2101      	movs	r1, #1
 8004e26:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004e2a:	f7ff fab7 	bl	800439c <RCCEx_PLL3_Config.part.0>
 8004e2e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e30:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	f43f aed9 	beq.w	8004bea <HAL_RCCEx_PeriphCLKConfig+0x76a>
 8004e38:	e7d4      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x964>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e3a:	4a09      	ldr	r2, [pc, #36]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004e3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e3e:	f002 0203 	and.w	r2, r2, #3
 8004e42:	2a03      	cmp	r2, #3
 8004e44:	f43f ae92 	beq.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004e48:	2102      	movs	r1, #2
 8004e4a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004e4e:	f7ff faa5 	bl	800439c <RCCEx_PLL3_Config.part.0>
 8004e52:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e54:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	f43f adb7 	beq.w	80049ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8004e5c:	e106      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004e5e:	bf00      	nop
 8004e60:	58024400 	.word	0x58024400
 8004e64:	58024800 	.word	0x58024800
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e68:	4abb      	ldr	r2, [pc, #748]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004e6a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e6c:	f002 0203 	and.w	r2, r2, #3
 8004e70:	2a03      	cmp	r2, #3
 8004e72:	f000 814a 	beq.w	800510a <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8004e76:	2102      	movs	r1, #2
 8004e78:	1d20      	adds	r0, r4, #4
 8004e7a:	f7ff fa1d 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
 8004e7e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e80:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004e82:	2d00      	cmp	r5, #0
 8004e84:	f43f aca9 	beq.w	80047da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004e88:	e7b2      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x970>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e8a:	4ab3      	ldr	r2, [pc, #716]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004e8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e8e:	f002 0203 	and.w	r2, r2, #3
 8004e92:	2a03      	cmp	r2, #3
 8004e94:	f43f ac96 	beq.w	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004e98:	2101      	movs	r1, #1
 8004e9a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004e9e:	f7ff fa7d 	bl	800439c <RCCEx_PLL3_Config.part.0>
 8004ea2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ea4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	f43f ac1f 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eac:	e0d0      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eae:	4aaa      	ldr	r2, [pc, #680]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004eb0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004eb2:	f002 0203 	and.w	r2, r2, #3
 8004eb6:	2a03      	cmp	r2, #3
 8004eb8:	f43f ae4b 	beq.w	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004ec2:	f7ff fa6b 	bl	800439c <RCCEx_PLL3_Config.part.0>
 8004ec6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ec8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004eca:	2d00      	cmp	r5, #0
 8004ecc:	f43f ad56 	beq.w	800497c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8004ed0:	e0c1      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ed2:	4aa1      	ldr	r2, [pc, #644]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004ed4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ed6:	f002 0203 	and.w	r2, r2, #3
 8004eda:	2a03      	cmp	r2, #3
 8004edc:	f43f ae2c 	beq.w	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004ee6:	f7ff fa59 	bl	800439c <RCCEx_PLL3_Config.part.0>
 8004eea:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004eec:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004eee:	2d00      	cmp	r5, #0
 8004ef0:	f43f ad1d 	beq.w	800492e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ef4:	e0b1      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ef6:	4a98      	ldr	r2, [pc, #608]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004ef8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004efa:	f002 0203 	and.w	r2, r2, #3
 8004efe:	2a03      	cmp	r2, #3
 8004f00:	f43f ac55 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004f04:	2101      	movs	r1, #1
 8004f06:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004f0a:	f7ff fa47 	bl	800439c <RCCEx_PLL3_Config.part.0>
 8004f0e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f10:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004f12:	2d00      	cmp	r5, #0
 8004f14:	f43f abc6 	beq.w	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8004f18:	e0aa      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f1a:	4a8f      	ldr	r2, [pc, #572]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004f1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f1e:	f002 0203 	and.w	r2, r2, #3
 8004f22:	2a03      	cmp	r2, #3
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8004f26:	2102      	movs	r1, #2
 8004f28:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004f2c:	f7ff fa36 	bl	800439c <RCCEx_PLL3_Config.part.0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f30:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f34:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f43f ad57 	beq.w	80049ea <HAL_RCCEx_PeriphCLKConfig+0x56a>
          status = HAL_ERROR;
 8004f3c:	2601      	movs	r6, #1
 8004f3e:	e554      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x56a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f40:	4a85      	ldr	r2, [pc, #532]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004f42:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f44:	f002 0203 	and.w	r2, r2, #3
 8004f48:	2a03      	cmp	r2, #3
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8004f4c:	2102      	movs	r1, #2
 8004f4e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004f52:	f7ff fa23 	bl	800439c <RCCEx_PLL3_Config.part.0>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f56:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f5a:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f43f ad52 	beq.w	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x586>
        status = HAL_ERROR;
 8004f62:	2601      	movs	r6, #1
 8004f64:	e54f      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x586>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f66:	4a7c      	ldr	r2, [pc, #496]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004f68:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f6a:	f002 0203 	and.w	r2, r2, #3
 8004f6e:	2a03      	cmp	r2, #3
 8004f70:	f43f abe6 	beq.w	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004f74:	2100      	movs	r1, #0
 8004f76:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004f7a:	f7ff fa0f 	bl	800439c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	4605      	mov	r5, r0
 8004f82:	f7ff bad3 	b.w	800452c <HAL_RCCEx_PeriphCLKConfig+0xac>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f86:	4a74      	ldr	r2, [pc, #464]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004f88:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f8a:	f002 0203 	and.w	r2, r2, #3
 8004f8e:	2a03      	cmp	r2, #3
 8004f90:	f43f aaaf 	beq.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004f94:	2100      	movs	r1, #0
 8004f96:	1d20      	adds	r0, r4, #4
 8004f98:	f7ff f98e 	bl	80042b8 <RCCEx_PLL2_Config.part.0>
 8004f9c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f9e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	f43f aec3 	beq.w	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8004fa6:	462e      	mov	r6, r5
 8004fa8:	f7ff baa5 	b.w	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fac:	4a6a      	ldr	r2, [pc, #424]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004fae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fb0:	f002 0203 	and.w	r2, r2, #3
 8004fb4:	2a03      	cmp	r2, #3
 8004fb6:	f43f aa9c 	beq.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004fc0:	f7ff f9ec 	bl	800439c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	e6ad      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fca:	4a63      	ldr	r2, [pc, #396]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004fcc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fce:	f002 0203 	and.w	r2, r2, #3
 8004fd2:	2a03      	cmp	r2, #3
 8004fd4:	f43f abcd 	beq.w	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8004fd8:	2100      	movs	r1, #0
 8004fda:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004fde:	f7ff f9dd 	bl	800439c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	f7ff baf2 	b.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fea:	4a5b      	ldr	r2, [pc, #364]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004fec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fee:	f002 0203 	and.w	r2, r2, #3
 8004ff2:	2a03      	cmp	r2, #3
 8004ff4:	f43f ae44 	beq.w	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	3024      	adds	r0, #36	@ 0x24
 8004ffc:	f7ff f9ce 	bl	800439c <RCCEx_PLL3_Config.part.0>
 8005000:	4606      	mov	r6, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005002:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005004:	2e00      	cmp	r6, #0
 8005006:	f47f aa68 	bne.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x5a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800500a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800500c:	f7ff ba5e 	b.w	80044cc <HAL_RCCEx_PeriphCLKConfig+0x4c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005010:	4a51      	ldr	r2, [pc, #324]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005012:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005014:	f002 0203 	and.w	r2, r2, #3
 8005018:	2a03      	cmp	r2, #3
 800501a:	f43f ab9f 	beq.w	800475c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800501e:	2100      	movs	r1, #0
 8005020:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005024:	f7ff f9ba 	bl	800439c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	4605      	mov	r5, r0
 800502c:	f7ff baa6 	b.w	800457c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005030:	4a49      	ldr	r2, [pc, #292]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005032:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005034:	f002 0203 	and.w	r2, r2, #3
 8005038:	2a03      	cmp	r2, #3
 800503a:	f43f abab 	beq.w	8004794 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800503e:	2100      	movs	r1, #0
 8005040:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005044:	f7ff f9aa 	bl	800439c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	4605      	mov	r5, r0
 800504c:	f7ff bb02 	b.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005050:	462e      	mov	r6, r5
 8005052:	f7ff bb52 	b.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8005056:	462e      	mov	r6, r5
 8005058:	e498      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800505a:	462e      	mov	r6, r5
 800505c:	e46f      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800505e:	462e      	mov	r6, r5
 8005060:	f7ff bbf7 	b.w	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005064:	462e      	mov	r6, r5
 8005066:	e4e5      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005068:	462e      	mov	r6, r5
 800506a:	e441      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800506c:	462e      	mov	r6, r5
 800506e:	e4b4      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8005070:	462e      	mov	r6, r5
 8005072:	f7ff bb1e 	b.w	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005076:	462e      	mov	r6, r5
 8005078:	e410      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800507a:	4a37      	ldr	r2, [pc, #220]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800507c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800507e:	f002 0203 	and.w	r2, r2, #3
 8005082:	2a03      	cmp	r2, #3
 8005084:	d03d      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc82>
 8005086:	2101      	movs	r1, #1
 8005088:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800508c:	f7ff f986 	bl	800439c <RCCEx_PLL3_Config.part.0>
 8005090:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005092:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005094:	2d00      	cmp	r5, #0
 8005096:	f43f ac23 	beq.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800509a:	e7e5      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800509c:	4a2e      	ldr	r2, [pc, #184]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800509e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80050a0:	f002 0203 	and.w	r2, r2, #3
 80050a4:	2a03      	cmp	r2, #3
 80050a6:	d028      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80050a8:	2101      	movs	r1, #1
 80050aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80050ae:	f7ff f975 	bl	800439c <RCCEx_PLL3_Config.part.0>
 80050b2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050b4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	f43f abe9 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80050bc:	e7db      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050be:	4a26      	ldr	r2, [pc, #152]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80050c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80050c2:	f002 0203 	and.w	r2, r2, #3
 80050c6:	2a03      	cmp	r2, #3
 80050c8:	f43f abc1 	beq.w	800484e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80050cc:	2101      	movs	r1, #1
 80050ce:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80050d2:	f7ff f963 	bl	800439c <RCCEx_PLL3_Config.part.0>
 80050d6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050d8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80050da:	2d00      	cmp	r5, #0
 80050dc:	f43f adc8 	beq.w	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 80050e0:	e7bd      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        ret = HAL_TIMEOUT;
 80050e2:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	462e      	mov	r6, r5
 80050e8:	f7ff bb81 	b.w	80047ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ec:	481a      	ldr	r0, [pc, #104]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 80050ee:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80050f0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80050f4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 80050f6:	f7ff b9e9 	b.w	80044cc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80050fa:	2601      	movs	r6, #1
 80050fc:	4635      	mov	r5, r6
 80050fe:	f7ff bbcd 	b.w	800489c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      ret = HAL_ERROR;
 8005102:	2601      	movs	r6, #1
 8005104:	4635      	mov	r5, r6
 8005106:	f7ff bbf3 	b.w	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x470>
      ret = HAL_ERROR;
 800510a:	2601      	movs	r6, #1
 800510c:	4635      	mov	r5, r6
 800510e:	f7ff bb6b 	b.w	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        tickstart = HAL_GetTick();
 8005112:	f7fc ff75 	bl	8002000 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005116:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
        tickstart = HAL_GetTick();
 800511a:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f241 3988 	movw	r9, #5000	@ 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005120:	e004      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xcac>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7fc ff6d 	bl	8002000 <HAL_GetTick>
 8005126:	1bc0      	subs	r0, r0, r7
 8005128:	4548      	cmp	r0, r9
 800512a:	d810      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800512c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8005130:	079b      	lsls	r3, r3, #30
 8005132:	d5f6      	bpl.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xca2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005134:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8005138:	e5d2      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800513a:	4807      	ldr	r0, [pc, #28]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 800513c:	4a07      	ldr	r2, [pc, #28]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0xcdc>)
 800513e:	6901      	ldr	r1, [r0, #16]
 8005140:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005144:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8005148:	430a      	orrs	r2, r1
 800514a:	6102      	str	r2, [r0, #16]
 800514c:	e5d3      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x876>
        status = ret;
 800514e:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	4635      	mov	r5, r6
 8005154:	f7ff bb4b 	b.w	80047ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005158:	58024400 	.word	0x58024400
 800515c:	00ffffcf 	.word	0x00ffffcf

08005160 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005160:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005162:	f7ff f819 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 8005166:	4b05      	ldr	r3, [pc, #20]	@ (800517c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005168:	4a05      	ldr	r2, [pc, #20]	@ (8005180 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005170:	5cd3      	ldrb	r3, [r2, r3]
 8005172:	f003 031f 	and.w	r3, r3, #31
}
 8005176:	40d8      	lsrs	r0, r3
 8005178:	bd08      	pop	{r3, pc}
 800517a:	bf00      	nop
 800517c:	58024400 	.word	0x58024400
 8005180:	0801495c 	.word	0x0801495c

08005184 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005184:	4a47      	ldr	r2, [pc, #284]	@ (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8005186:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005188:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800518a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800518c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800518e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005192:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005196:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8005198:	d05b      	beq.n	8005252 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800519a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800519e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051a2:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051a6:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80051aa:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80051ae:	2c01      	cmp	r4, #1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b4:	ee06 1a90 	vmov	s13, r1
 80051b8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80051bc:	d003      	beq.n	80051c6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80051be:	2c02      	cmp	r4, #2
 80051c0:	d06a      	beq.n	8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 80051c2:	2c00      	cmp	r4, #0
 80051c4:	d04a      	beq.n	800525c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051c6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80051ca:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80051ce:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80051d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d4:	ee07 3a90 	vmov	s15, r3
 80051d8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80051dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80051e8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80051ec:	4a2d      	ldr	r2, [pc, #180]	@ (80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80051ee:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80051f2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80051f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80051f8:	ee07 3a10 	vmov	s14, r3
 80051fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005200:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005202:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005206:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800520a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800520e:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005212:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005214:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005218:	ee07 3a10 	vmov	s14, r3
 800521c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005220:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005224:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005228:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800522c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005230:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005232:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005236:	ee06 3a90 	vmov	s13, r3
 800523a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800523e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005242:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005246:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800524a:	ee17 3a90 	vmov	r3, s15
 800524e:	6083      	str	r3, [r0, #8]
}
 8005250:	4770      	bx	lr
 8005252:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005254:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005258:	6083      	str	r3, [r0, #8]
}
 800525a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800525c:	6813      	ldr	r3, [r2, #0]
 800525e:	069b      	lsls	r3, r3, #26
 8005260:	d51d      	bpl.n	800529e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005262:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005264:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005268:	6b93      	ldr	r3, [r2, #56]	@ 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800526a:	4910      	ldr	r1, [pc, #64]	@ (80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800526c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005270:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005274:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	ee06 1a10 	vmov	s12, r1
 800527e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005282:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005286:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800528a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800528e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005296:	e7a9      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x68>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005298:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800529c:	e795      	b.n	80051ca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800529e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 80052a2:	e792      	b.n	80051ca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80052a4:	58024400 	.word	0x58024400
 80052a8:	4a742400 	.word	0x4a742400
 80052ac:	03d09000 	.word	0x03d09000
 80052b0:	4bbebc20 	.word	0x4bbebc20
 80052b4:	4c742400 	.word	0x4c742400

080052b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052b8:	4a47      	ldr	r2, [pc, #284]	@ (80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 80052ba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052bc:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052be:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052c0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 80052c2:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052c6:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052ca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 80052cc:	d05b      	beq.n	8005386 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052ce:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052d2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052d6:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052da:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052de:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80052e2:	2c01      	cmp	r4, #1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052e8:	ee06 1a90 	vmov	s13, r1
 80052ec:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80052f0:	d003      	beq.n	80052fa <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80052f2:	2c02      	cmp	r4, #2
 80052f4:	d06a      	beq.n	80053cc <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	d04a      	beq.n	8005390 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052fa:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80052fe:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005302:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005308:	ee07 3a90 	vmov	s15, r3
 800530c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005318:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800531c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005320:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8005322:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005326:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005328:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800532c:	ee07 3a10 	vmov	s14, r3
 8005330:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005334:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005336:	ee37 7a06 	vadd.f32	s14, s14, s12
 800533a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800533e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005342:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005346:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005348:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800534c:	ee07 3a10 	vmov	s14, r3
 8005350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005354:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005358:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800535c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005360:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005364:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005366:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800536a:	ee06 3a90 	vmov	s13, r3
 800536e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005372:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005376:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800537a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800537e:	ee17 3a90 	vmov	r3, s15
 8005382:	6083      	str	r3, [r0, #8]
}
 8005384:	4770      	bx	lr
 8005386:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005388:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800538c:	6083      	str	r3, [r0, #8]
}
 800538e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005390:	6813      	ldr	r3, [r2, #0]
 8005392:	069b      	lsls	r3, r3, #26
 8005394:	d51d      	bpl.n	80053d2 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005396:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005398:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800539c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800539e:	4910      	ldr	r1, [pc, #64]	@ (80053e0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80053a0:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053a8:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	ee06 1a10 	vmov	s12, r1
 80053b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80053ba:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80053be:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80053c2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80053c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ca:	e7a9      	b.n	8005320 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80053d0:	e795      	b.n	80052fe <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053d2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80053e8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 80053d6:	e792      	b.n	80052fe <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80053d8:	58024400 	.word	0x58024400
 80053dc:	4a742400 	.word	0x4a742400
 80053e0:	03d09000 	.word	0x03d09000
 80053e4:	4bbebc20 	.word	0x4bbebc20
 80053e8:	4c742400 	.word	0x4c742400

080053ec <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d13d      	bne.n	8005470 <HAL_TIM_Base_Start_IT+0x84>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80053f6:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_TIM_Base_Start_IT+0x88>)
 80053fa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80053fe:	bf18      	it	ne
 8005400:	429a      	cmpne	r2, r3
{
 8005402:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	4d1b      	ldr	r5, [pc, #108]	@ (8005478 <HAL_TIM_Base_Start_IT+0x8c>)
 800540c:	4c1b      	ldr	r4, [pc, #108]	@ (800547c <HAL_TIM_Base_Start_IT+0x90>)
 800540e:	42aa      	cmp	r2, r5
 8005410:	bf08      	it	eq
 8005412:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005416:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800541a:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541c:	42a2      	cmp	r2, r4
 800541e:	bf08      	it	eq
 8005420:	f043 0301 	orreq.w	r3, r3, #1
 8005424:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005428:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542c:	4814      	ldr	r0, [pc, #80]	@ (8005480 <HAL_TIM_Base_Start_IT+0x94>)
 800542e:	42a2      	cmp	r2, r4
 8005430:	bf08      	it	eq
 8005432:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005436:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005438:	4282      	cmp	r2, r0
 800543a:	bf08      	it	eq
 800543c:	f043 0301 	orreq.w	r3, r3, #1
 8005440:	4910      	ldr	r1, [pc, #64]	@ (8005484 <HAL_TIM_Base_Start_IT+0x98>)
 8005442:	428a      	cmp	r2, r1
 8005444:	bf08      	it	eq
 8005446:	f043 0301 	orreq.w	r3, r3, #1
 800544a:	b913      	cbnz	r3, 8005452 <HAL_TIM_Base_Start_IT+0x66>
 800544c:	4b0e      	ldr	r3, [pc, #56]	@ (8005488 <HAL_TIM_Base_Start_IT+0x9c>)
 800544e:	429a      	cmp	r2, r3
 8005450:	d107      	bne.n	8005462 <HAL_TIM_Base_Start_IT+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005452:	6891      	ldr	r1, [r2, #8]
 8005454:	4b0d      	ldr	r3, [pc, #52]	@ (800548c <HAL_TIM_Base_Start_IT+0xa0>)
 8005456:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	2b06      	cmp	r3, #6
 800545a:	d006      	beq.n	800546a <HAL_TIM_Base_Start_IT+0x7e>
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005460:	d003      	beq.n	800546a <HAL_TIM_Base_Start_IT+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8005462:	6813      	ldr	r3, [r2, #0]
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800546a:	2000      	movs	r0, #0
}
 800546c:	bc30      	pop	{r4, r5}
 800546e:	4770      	bx	lr
    return HAL_ERROR;
 8005470:	2001      	movs	r0, #1
}
 8005472:	4770      	bx	lr
 8005474:	40010000 	.word	0x40010000
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40010400 	.word	0x40010400
 8005484:	40001800 	.word	0x40001800
 8005488:	40014000 	.word	0x40014000
 800548c:	00010007 	.word	0x00010007

08005490 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005490:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d07e      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x106>
 8005498:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 800549a:	2302      	movs	r3, #2
{
 800549c:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800549e:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 80054a0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80054a2:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80054a6:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054aa:	4b58      	ldr	r3, [pc, #352]	@ (800560c <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ae:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80054b0:	60a3      	str	r3, [r4, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b2:	680b      	ldr	r3, [r1, #0]
 80054b4:	2b70      	cmp	r3, #112	@ 0x70
 80054b6:	f000 8098 	beq.w	80055ea <HAL_TIM_ConfigClockSource+0x15a>
 80054ba:	d825      	bhi.n	8005508 <HAL_TIM_ConfigClockSource+0x78>
 80054bc:	2b50      	cmp	r3, #80	@ 0x50
 80054be:	d06c      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x10a>
 80054c0:	d938      	bls.n	8005534 <HAL_TIM_ConfigClockSource+0xa4>
 80054c2:	2b60      	cmp	r3, #96	@ 0x60
 80054c4:	d118      	bne.n	80054f8 <HAL_TIM_ConfigClockSource+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c6:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c8:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ca:	f023 0310 	bic.w	r3, r3, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ce:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d2:	69a3      	ldr	r3, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054d8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 80054dc:	6a21      	ldr	r1, [r4, #32]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054de:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054e2:	61a3      	str	r3, [r4, #24]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005610 <HAL_TIM_ConfigClockSource+0x180>)
  tmpccer |= (TIM_ICPolarity << 4U);
 80054e6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80054ec:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80054ee:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f0:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f2:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f6:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80054fa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005500:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005504:	bc30      	pop	{r4, r5}
 8005506:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800550c:	d05d      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x13a>
 800550e:	d931      	bls.n	8005574 <HAL_TIM_ConfigClockSource+0xe4>
 8005510:	4940      	ldr	r1, [pc, #256]	@ (8005614 <HAL_TIM_ConfigClockSource+0x184>)
 8005512:	428b      	cmp	r3, r1
 8005514:	d006      	beq.n	8005524 <HAL_TIM_ConfigClockSource+0x94>
 8005516:	d927      	bls.n	8005568 <HAL_TIM_ConfigClockSource+0xd8>
 8005518:	493f      	ldr	r1, [pc, #252]	@ (8005618 <HAL_TIM_ConfigClockSource+0x188>)
 800551a:	428b      	cmp	r3, r1
 800551c:	d002      	beq.n	8005524 <HAL_TIM_ConfigClockSource+0x94>
 800551e:	3110      	adds	r1, #16
 8005520:	428b      	cmp	r3, r1
 8005522:	d1e9      	bne.n	80054f8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8005524:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005526:	493a      	ldr	r1, [pc, #232]	@ (8005610 <HAL_TIM_ConfigClockSource+0x180>)
 8005528:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800552a:	4319      	orrs	r1, r3
 800552c:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8005530:	60a1      	str	r1, [r4, #8]
}
 8005532:	e022      	b.n	800557a <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8005534:	2b40      	cmp	r3, #64	@ 0x40
 8005536:	d122      	bne.n	800557e <HAL_TIM_ConfigClockSource+0xee>
  tmpccer = TIMx->CCER;
 8005538:	6a23      	ldr	r3, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	6848      	ldr	r0, [r1, #4]
 800553c:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800553e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005542:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 8005544:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8005546:	4b32      	ldr	r3, [pc, #200]	@ (8005610 <HAL_TIM_ConfigClockSource+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005548:	f021 0101 	bic.w	r1, r1, #1
 800554c:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800554e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005550:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005554:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005558:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800555a:	6220      	str	r0, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800555c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800555e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005560:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005564:	60a3      	str	r3, [r4, #8]
}
 8005566:	e008      	b.n	800557a <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8005568:	f023 0110 	bic.w	r1, r3, #16
 800556c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005570:	d1c2      	bne.n	80054f8 <HAL_TIM_ConfigClockSource+0x68>
 8005572:	e7d7      	b.n	8005524 <HAL_TIM_ConfigClockSource+0x94>
 8005574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005578:	d1be      	bne.n	80054f8 <HAL_TIM_ConfigClockSource+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2000      	movs	r0, #0
 800557c:	e7bc      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800557e:	d8bb      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x68>
 8005580:	2b20      	cmp	r3, #32
 8005582:	d0cf      	beq.n	8005524 <HAL_TIM_ConfigClockSource+0x94>
 8005584:	d903      	bls.n	800558e <HAL_TIM_ConfigClockSource+0xfe>
 8005586:	2b30      	cmp	r3, #48	@ 0x30
 8005588:	d0cc      	beq.n	8005524 <HAL_TIM_ConfigClockSource+0x94>
      status = HAL_ERROR;
 800558a:	2001      	movs	r0, #1
 800558c:	e7b4      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800558e:	f033 0110 	bics.w	r1, r3, #16
 8005592:	d1b1      	bne.n	80054f8 <HAL_TIM_ConfigClockSource+0x68>
 8005594:	e7c6      	b.n	8005524 <HAL_TIM_ConfigClockSource+0x94>
  __HAL_LOCK(htim);
 8005596:	2002      	movs	r0, #2
}
 8005598:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800559a:	6a23      	ldr	r3, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559c:	6848      	ldr	r0, [r1, #4]
 800559e:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a0:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a4:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 80055a6:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 80055a8:	4b19      	ldr	r3, [pc, #100]	@ (8005610 <HAL_TIM_ConfigClockSource+0x180>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055aa:	f021 0101 	bic.w	r1, r1, #1
 80055ae:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b0:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b2:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80055ba:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80055bc:	6220      	str	r0, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80055be:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80055c0:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80055c6:	60a3      	str	r3, [r4, #8]
}
 80055c8:	e7d7      	b.n	800557a <HAL_TIM_ConfigClockSource+0xea>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055ca:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80055ce:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d0:	432b      	orrs	r3, r5
 80055d2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d4:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80055dc:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055de:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e0:	68a3      	ldr	r3, [r4, #8]
 80055e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055e6:	60a3      	str	r3, [r4, #8]
      break;
 80055e8:	e7c7      	b.n	800557a <HAL_TIM_ConfigClockSource+0xea>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055ea:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80055ee:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f0:	432b      	orrs	r3, r5
 80055f2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80055fc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80055fe:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005600:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005602:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005606:	60a3      	str	r3, [r4, #8]
      break;
 8005608:	e7b7      	b.n	800557a <HAL_TIM_ConfigClockSource+0xea>
 800560a:	bf00      	nop
 800560c:	ffce0088 	.word	0xffce0088
 8005610:	ffcfff8f 	.word	0xffcfff8f
 8005614:	00100020 	.word	0x00100020
 8005618:	00100030 	.word	0x00100030

0800561c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop

08005620 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop

08005624 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop

08005628 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop

0800562c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800562c:	6803      	ldr	r3, [r0, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	0791      	lsls	r1, r2, #30
{
 8005632:	b510      	push	{r4, lr}
 8005634:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005636:	d502      	bpl.n	800563e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	0792      	lsls	r2, r2, #30
 800563c:	d468      	bmi.n	8005710 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	0752      	lsls	r2, r2, #29
 8005642:	d502      	bpl.n	800564a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	0750      	lsls	r0, r2, #29
 8005648:	d44f      	bmi.n	80056ea <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	0711      	lsls	r1, r2, #28
 800564e:	d502      	bpl.n	8005656 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	0712      	lsls	r2, r2, #28
 8005654:	d437      	bmi.n	80056c6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	06d0      	lsls	r0, r2, #27
 800565a:	d502      	bpl.n	8005662 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	06d1      	lsls	r1, r2, #27
 8005660:	d41e      	bmi.n	80056a0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	07d2      	lsls	r2, r2, #31
 8005666:	d502      	bpl.n	800566e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	07d0      	lsls	r0, r2, #31
 800566c:	d469      	bmi.n	8005742 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	0611      	lsls	r1, r2, #24
 8005672:	d502      	bpl.n	800567a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	0612      	lsls	r2, r2, #24
 8005678:	d46b      	bmi.n	8005752 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	05d0      	lsls	r0, r2, #23
 800567e:	d502      	bpl.n	8005686 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	0611      	lsls	r1, r2, #24
 8005684:	d46d      	bmi.n	8005762 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	0652      	lsls	r2, r2, #25
 800568a:	d502      	bpl.n	8005692 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	0650      	lsls	r0, r2, #25
 8005690:	d46f      	bmi.n	8005772 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	0691      	lsls	r1, r2, #26
 8005696:	d502      	bpl.n	800569e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	0692      	lsls	r2, r2, #26
 800569c:	d449      	bmi.n	8005732 <HAL_TIM_IRQHandler+0x106>
}
 800569e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80056b2:	d16f      	bne.n	8005794 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b4:	f7ff ffb2 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	4620      	mov	r0, r4
 80056ba:	f7ff ffb3 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056c0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	7722      	strb	r2, [r4, #28]
 80056c4:	e7cd      	b.n	8005662 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056c6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ca:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80056cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ce:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	079b      	lsls	r3, r3, #30
 80056d6:	d15a      	bne.n	800578e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d8:	f7ff ffa0 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff ffa1 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	7722      	strb	r2, [r4, #28]
 80056e8:	e7b5      	b.n	8005656 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056ea:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ee:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80056f0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056f2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80056fc:	d144      	bne.n	8005788 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fe:	f7ff ff8d 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005702:	4620      	mov	r0, r4
 8005704:	f7ff ff8e 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005708:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800570a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570c:	7722      	strb	r2, [r4, #28]
 800570e:	e79c      	b.n	800564a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005710:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005714:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005716:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005718:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	0799      	lsls	r1, r3, #30
 800571e:	d130      	bne.n	8005782 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005720:	f7ff ff7c 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	4620      	mov	r0, r4
 8005726:	f7ff ff7d 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800572c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	7722      	strb	r2, [r4, #28]
 8005730:	e785      	b.n	800563e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005732:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005736:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005738:	611a      	str	r2, [r3, #16]
}
 800573a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800573e:	f000 b927 	b.w	8005990 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005742:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005746:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005748:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800574a:	f7fb ff57 	bl	80015fc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	e78d      	b.n	800566e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005752:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005756:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005758:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800575a:	f000 f91b 	bl	8005994 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	e78b      	b.n	800567a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005762:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8005766:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005768:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800576a:	f000 f915 	bl	8005998 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	e789      	b.n	8005686 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005772:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8005776:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005778:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800577a:	f7ff ff55 	bl	8005628 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	e787      	b.n	8005692 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8005782:	f7ff ff4d 	bl	8005620 <HAL_TIM_IC_CaptureCallback>
 8005786:	e7d0      	b.n	800572a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8005788:	f7ff ff4a 	bl	8005620 <HAL_TIM_IC_CaptureCallback>
 800578c:	e7bc      	b.n	8005708 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	f7ff ff47 	bl	8005620 <HAL_TIM_IC_CaptureCallback>
 8005792:	e7a6      	b.n	80056e2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005794:	f7ff ff44 	bl	8005620 <HAL_TIM_IC_CaptureCallback>
 8005798:	e791      	b.n	80056be <HAL_TIM_IRQHandler+0x92>
 800579a:	bf00      	nop

0800579c <TIM_Base_SetConfig>:
{
 800579c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800579e:	4a31      	ldr	r2, [pc, #196]	@ (8005864 <TIM_Base_SetConfig+0xc8>)
 80057a0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80057a4:	4c30      	ldr	r4, [pc, #192]	@ (8005868 <TIM_Base_SetConfig+0xcc>)
 80057a6:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 80057aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ac:	eba0 0e04 	sub.w	lr, r0, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b0:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b2:	fab2 f282 	clz	r2, r2
  TIMx->PSC = Structure->Prescaler;
 80057b6:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057bc:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057be:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80057c2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80057c6:	d020      	beq.n	800580a <TIM_Base_SetConfig+0x6e>
 80057c8:	b9fa      	cbnz	r2, 800580a <TIM_Base_SetConfig+0x6e>
 80057ca:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8005874 <TIM_Base_SetConfig+0xd8>
 80057ce:	4560      	cmp	r0, ip
 80057d0:	d01b      	beq.n	800580a <TIM_Base_SetConfig+0x6e>
 80057d2:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80057d6:	4560      	cmp	r0, ip
 80057d8:	d017      	beq.n	800580a <TIM_Base_SetConfig+0x6e>
 80057da:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80057de:	4560      	cmp	r0, ip
 80057e0:	d013      	beq.n	800580a <TIM_Base_SetConfig+0x6e>
 80057e2:	f1be 0f00 	cmp.w	lr, #0
 80057e6:	d110      	bne.n	800580a <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e8:	4c20      	ldr	r4, [pc, #128]	@ (800586c <TIM_Base_SetConfig+0xd0>)
 80057ea:	4a21      	ldr	r2, [pc, #132]	@ (8005870 <TIM_Base_SetConfig+0xd4>)
 80057ec:	4290      	cmp	r0, r2
 80057ee:	bf18      	it	ne
 80057f0:	42a0      	cmpne	r0, r4
 80057f2:	d02b      	beq.n	800584c <TIM_Base_SetConfig+0xb0>
 80057f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057f8:	4290      	cmp	r0, r2
 80057fa:	d027      	beq.n	800584c <TIM_Base_SetConfig+0xb0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005800:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005802:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005804:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005806:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005808:	e01d      	b.n	8005846 <TIM_Base_SetConfig+0xaa>
    tmpcr1 |= Structure->CounterMode;
 800580a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800580c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005810:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005812:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005818:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800581a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800581e:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005820:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005822:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005824:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005826:	b962      	cbnz	r2, 8005842 <TIM_Base_SetConfig+0xa6>
 8005828:	f1be 0f00 	cmp.w	lr, #0
 800582c:	d109      	bne.n	8005842 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582e:	4a10      	ldr	r2, [pc, #64]	@ (8005870 <TIM_Base_SetConfig+0xd4>)
 8005830:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <TIM_Base_SetConfig+0xd0>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005832:	4298      	cmp	r0, r3
 8005834:	bf18      	it	ne
 8005836:	4290      	cmpne	r0, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800583a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800583e:	4298      	cmp	r0, r3
 8005840:	d101      	bne.n	8005846 <TIM_Base_SetConfig+0xaa>
    TIMx->RCR = Structure->RepetitionCounter;
 8005842:	690b      	ldr	r3, [r1, #16]
 8005844:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005846:	2301      	movs	r3, #1
 8005848:	6143      	str	r3, [r0, #20]
}
 800584a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800584e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005852:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005858:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800585a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585c:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800585e:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005860:	e7e5      	b.n	800582e <TIM_Base_SetConfig+0x92>
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400
 8005874:	40000400 	.word	0x40000400

08005878 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005878:	b370      	cbz	r0, 80058d8 <HAL_TIM_Base_Init+0x60>
{
 800587a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800587c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005880:	4604      	mov	r4, r0
 8005882:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005886:	b313      	cbz	r3, 80058ce <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005888:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800588a:	2302      	movs	r3, #2
 800588c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005890:	f851 0b04 	ldr.w	r0, [r1], #4
 8005894:	f7ff ff82 	bl	800579c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005898:	2301      	movs	r3, #1
  return HAL_OK;
 800589a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80058a4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80058a8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80058ac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80058b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80058bc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80058c0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80058c4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80058c8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80058cc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80058ce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80058d2:	f7fb fefd 	bl	80016d0 <HAL_TIM_Base_MspInit>
 80058d6:	e7d7      	b.n	8005888 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80058d8:	2001      	movs	r0, #1
}
 80058da:	4770      	bx	lr

080058dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058dc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d04b      	beq.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e4:	6803      	ldr	r3, [r0, #0]
 80058e6:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	2002      	movs	r0, #2
{
 80058ea:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058ec:	4d24      	ldr	r5, [pc, #144]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80058ee:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80058f4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80058f6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f8:	d029      	beq.n	800594e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80058fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80058fe:	42ab      	cmp	r3, r5
 8005900:	d025      	beq.n	800594e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005902:	4d20      	ldr	r5, [pc, #128]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005904:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005908:	42ab      	cmp	r3, r5
 800590a:	bf18      	it	ne
 800590c:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8005910:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005914:	bf0c      	ite	eq
 8005916:	f04f 0c01 	moveq.w	ip, #1
 800591a:	f04f 0c00 	movne.w	ip, #0
 800591e:	42ab      	cmp	r3, r5
 8005920:	bf08      	it	eq
 8005922:	f04c 0c01 	orreq.w	ip, ip, #1
 8005926:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800592a:	42ab      	cmp	r3, r5
 800592c:	bf08      	it	eq
 800592e:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005932:	680d      	ldr	r5, [r1, #0]
 8005934:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005936:	4d14      	ldr	r5, [pc, #80]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8005938:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593a:	42ab      	cmp	r3, r5
 800593c:	bf14      	ite	ne
 800593e:	4660      	movne	r0, ip
 8005940:	f04c 0001 	orreq.w	r0, ip, #1
 8005944:	b960      	cbnz	r0, 8005960 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005946:	4811      	ldr	r0, [pc, #68]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005948:	4283      	cmp	r3, r0
 800594a:	d009      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800594c:	e00d      	b.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800594e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005950:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005954:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005956:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005958:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595c:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800595e:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005960:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005962:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005966:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005968:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800596a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800596c:	2101      	movs	r1, #1

  return HAL_OK;
 800596e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8005970:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005974:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005978:	bc30      	pop	{r4, r5}
 800597a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800597c:	2002      	movs	r0, #2
}
 800597e:	4770      	bx	lr
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40001800 	.word	0x40001800
 800598c:	40014000 	.word	0x40014000

08005990 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop

08005994 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop

08005998 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800599c:	6802      	ldr	r2, [r0, #0]
 800599e:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	e842 3100 	strex	r1, r3, [r2]
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d1f7      	bne.n	80059a0 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059b0:	4c14      	ldr	r4, [pc, #80]	@ (8005a04 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	f102 0308 	add.w	r3, r2, #8
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	f102 0c08 	add.w	ip, r2, #8
 80059c0:	e84c 3100 	strex	r1, r3, [ip]
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d1f4      	bne.n	80059b2 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d008      	beq.n	80059e0 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ce:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80059d0:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 80059d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 80059d6:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  huart->RxISR = NULL;
 80059da:	6703      	str	r3, [r0, #112]	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059dc:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 80059de:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	e842 3100 	strex	r1, r3, [r2]
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d0ee      	beq.n	80059ce <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	e852 3f00 	ldrex	r3, [r2]
 80059f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	e842 3100 	strex	r1, r3, [r2]
 80059fc:	2900      	cmp	r1, #0
 80059fe:	d1ef      	bne.n	80059e0 <UART_EndRxTransfer+0x44>
 8005a00:	e7e5      	b.n	80059ce <UART_EndRxTransfer+0x32>
 8005a02:	bf00      	nop
 8005a04:	effffffe 	.word	0xeffffffe

08005a08 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop

08005a0c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a10:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a12:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005a1a:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a1e:	f7ff fff5 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a22:	bd08      	pop	{r3, pc}

08005a24 <HAL_UARTEx_RxEventCallback>:
}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop

08005a28 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a28:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a2a:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a2e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a30:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8005a32:	ea12 0f0c 	tst.w	r2, ip
{
 8005a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a3c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8005a3e:	d133      	bne.n	8005aa8 <HAL_UART_IRQHandler+0x80>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a40:	0696      	lsls	r6, r2, #26
 8005a42:	d507      	bpl.n	8005a54 <HAL_UART_IRQHandler+0x2c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a44:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a48:	f005 5c80 	and.w	ip, r5, #268435456	@ 0x10000000
 8005a4c:	ea56 060c 	orrs.w	r6, r6, ip
 8005a50:	f040 8126 	bne.w	8005ca0 <HAL_UART_IRQHandler+0x278>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a54:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005a56:	2801      	cmp	r0, #1
 8005a58:	f000 80b4 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x19c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a5c:	02d7      	lsls	r7, r2, #11
 8005a5e:	d419      	bmi.n	8005a94 <HAL_UART_IRQHandler+0x6c>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a60:	0610      	lsls	r0, r2, #24
 8005a62:	d506      	bpl.n	8005a72 <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a64:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a68:	f001 0080 	and.w	r0, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a6c:	4328      	orrs	r0, r5
 8005a6e:	f040 811e 	bne.w	8005cae <HAL_UART_IRQHandler+0x286>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a72:	0657      	lsls	r7, r2, #25
 8005a74:	d502      	bpl.n	8005a7c <HAL_UART_IRQHandler+0x54>
 8005a76:	064e      	lsls	r6, r1, #25
 8005a78:	f100 80fa 	bmi.w	8005c70 <HAL_UART_IRQHandler+0x248>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a7c:	0215      	lsls	r5, r2, #8
 8005a7e:	d502      	bpl.n	8005a86 <HAL_UART_IRQHandler+0x5e>
 8005a80:	0048      	lsls	r0, r1, #1
 8005a82:	f100 8128 	bmi.w	8005cd6 <HAL_UART_IRQHandler+0x2ae>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a86:	01d3      	lsls	r3, r2, #7
 8005a88:	d502      	bpl.n	8005a90 <HAL_UART_IRQHandler+0x68>
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	f2c0 8128 	blt.w	8005ce0 <HAL_UART_IRQHandler+0x2b8>
}
 8005a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a94:	026e      	lsls	r6, r5, #9
 8005a96:	d5e3      	bpl.n	8005a60 <HAL_UART_IRQHandler+0x38>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005a9c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005aa4:	f001 b80e 	b.w	8006ac4 <HAL_UARTEx_WakeupCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005aa8:	48ac      	ldr	r0, [pc, #688]	@ (8005d5c <HAL_UART_IRQHandler+0x334>)
 8005aaa:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005aae:	48ac      	ldr	r0, [pc, #688]	@ (8005d60 <HAL_UART_IRQHandler+0x338>)
 8005ab0:	4008      	ands	r0, r1
 8005ab2:	ea50 000c 	orrs.w	r0, r0, ip
 8005ab6:	d0cd      	beq.n	8005a54 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ab8:	07d7      	lsls	r7, r2, #31
 8005aba:	461e      	mov	r6, r3
 8005abc:	d509      	bpl.n	8005ad2 <HAL_UART_IRQHandler+0xaa>
 8005abe:	05c8      	lsls	r0, r1, #23
 8005ac0:	d507      	bpl.n	8005ad2 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ac6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8005aca:	f040 0001 	orr.w	r0, r0, #1
 8005ace:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad2:	0797      	lsls	r7, r2, #30
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad4:	f002 0004 	and.w	r0, r2, #4
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad8:	f140 80db 	bpl.w	8005c92 <HAL_UART_IRQHandler+0x26a>
 8005adc:	07ef      	lsls	r7, r5, #31
 8005ade:	d510      	bpl.n	8005b02 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ae0:	2702      	movs	r7, #2
 8005ae2:	621f      	str	r7, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ae4:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 8005ae8:	f047 0704 	orr.w	r7, r7, #4
 8005aec:	f8c4 708c 	str.w	r7, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005af0:	b138      	cbz	r0, 8005b02 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005af2:	2004      	movs	r0, #4
 8005af4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8005afa:	f040 0002 	orr.w	r0, r0, #2
 8005afe:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b02:	0710      	lsls	r0, r2, #28
 8005b04:	d50c      	bpl.n	8005b20 <HAL_UART_IRQHandler+0xf8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b06:	f001 0020 	and.w	r0, r1, #32
 8005b0a:	ea50 000c 	orrs.w	r0, r0, ip
 8005b0e:	d007      	beq.n	8005b20 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b10:	2008      	movs	r0, #8
 8005b12:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b14:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8005b18:	f040 0008 	orr.w	r0, r0, #8
 8005b1c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b20:	0517      	lsls	r7, r2, #20
 8005b22:	d50a      	bpl.n	8005b3a <HAL_UART_IRQHandler+0x112>
 8005b24:	0148      	lsls	r0, r1, #5
 8005b26:	d508      	bpl.n	8005b3a <HAL_UART_IRQHandler+0x112>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b28:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005b2c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b2e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005b32:	f043 0320 	orr.w	r3, r3, #32
 8005b36:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3a:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0a6      	beq.n	8005a90 <HAL_UART_IRQHandler+0x68>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b42:	0693      	lsls	r3, r2, #26
 8005b44:	d506      	bpl.n	8005b54 <HAL_UART_IRQHandler+0x12c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b46:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b4a:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 8005b4e:	4329      	orrs	r1, r5
 8005b50:	f040 80b5 	bne.w	8005cbe <HAL_UART_IRQHandler+0x296>
      errorcode = huart->ErrorCode;
 8005b54:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
        UART_EndRxTransfer(huart);
 8005b58:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b5a:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b5c:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b64:	ea53 0502 	orrs.w	r5, r3, r2
 8005b68:	f000 80bf 	beq.w	8005cea <HAL_UART_IRQHandler+0x2c2>
        UART_EndRxTransfer(huart);
 8005b6c:	f7ff ff16 	bl	800599c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	68b3      	ldr	r3, [r6, #8]
 8005b72:	065f      	lsls	r7, r3, #25
 8005b74:	f140 80ab 	bpl.w	8005cce <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	f106 0308 	add.w	r3, r6, #8
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	f106 0108 	add.w	r1, r6, #8
 8005b88:	e841 3200 	strex	r2, r3, [r1]
 8005b8c:	b162      	cbz	r2, 8005ba8 <HAL_UART_IRQHandler+0x180>
 8005b8e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	f103 0208 	add.w	r2, r3, #8
 8005b94:	e852 2f00 	ldrex	r2, [r2]
 8005b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	f103 0008 	add.w	r0, r3, #8
 8005ba0:	e840 2100 	strex	r1, r2, [r0]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d1f3      	bne.n	8005b90 <HAL_UART_IRQHandler+0x168>
          if (huart->hdmarx != NULL)
 8005ba8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005baa:	2800      	cmp	r0, #0
 8005bac:	f000 808f 	beq.w	8005cce <HAL_UART_IRQHandler+0x2a6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d64 <HAL_UART_IRQHandler+0x33c>)
 8005bb2:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bb4:	f7fc fc98 	bl	80024e8 <HAL_DMA_Abort_IT>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f43f af69 	beq.w	8005a90 <HAL_UART_IRQHandler+0x68>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bbe:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005bc0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005bc2:	e071      	b.n	8005ca8 <HAL_UART_IRQHandler+0x280>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bc4:	06d6      	lsls	r6, r2, #27
 8005bc6:	f57f af49 	bpl.w	8005a5c <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bca:	06c8      	lsls	r0, r1, #27
 8005bcc:	f57f af46 	bpl.w	8005a5c <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	0652      	lsls	r2, r2, #25
 8005bd8:	f140 808c 	bpl.w	8005cf4 <HAL_UART_IRQHandler+0x2cc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bdc:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005bde:	6801      	ldr	r1, [r0, #0]
 8005be0:	684a      	ldr	r2, [r1, #4]
 8005be2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005be4:	2a00      	cmp	r2, #0
 8005be6:	f43f af53 	beq.w	8005a90 <HAL_UART_IRQHandler+0x68>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	f67f af4e 	bls.w	8005a90 <HAL_UART_IRQHandler+0x68>
        huart->RxXferCount = nb_remaining_rx_data;
 8005bf4:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bf8:	69c2      	ldr	r2, [r0, #28]
 8005bfa:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005bfe:	d02f      	beq.n	8005c60 <HAL_UART_IRQHandler+0x238>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	e843 2100 	strex	r1, r2, [r3]
 8005c0c:	2900      	cmp	r1, #0
 8005c0e:	d1f7      	bne.n	8005c00 <HAL_UART_IRQHandler+0x1d8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	f103 0208 	add.w	r2, r3, #8
 8005c14:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	f103 0508 	add.w	r5, r3, #8
 8005c20:	e845 2100 	strex	r1, r2, [r5]
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d1f3      	bne.n	8005c10 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	f103 0208 	add.w	r2, r3, #8
 8005c2c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	f103 0508 	add.w	r5, r3, #8
 8005c38:	e845 2100 	strex	r1, r2, [r5]
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d1f3      	bne.n	8005c28 <HAL_UART_IRQHandler+0x200>
          huart->RxState = HAL_UART_STATE_READY;
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c46:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c4c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	e843 2100 	strex	r1, r2, [r3]
 8005c54:	2900      	cmp	r1, #0
 8005c56:	d1f7      	bne.n	8005c48 <HAL_UART_IRQHandler+0x220>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c58:	f7fc fa94 	bl	8002184 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c5c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005c60:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005c64:	4620      	mov	r0, r4
 8005c66:	1ac9      	subs	r1, r1, r3
 8005c68:	b289      	uxth	r1, r1
 8005c6a:	f7ff fedb 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
 8005c6e:	e70f      	b.n	8005a90 <HAL_UART_IRQHandler+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	e843 2100 	strex	r1, r2, [r3]
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d1f7      	bne.n	8005c70 <HAL_UART_IRQHandler+0x248>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c80:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c82:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c84:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8005c86:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  huart->TxISR = NULL;
 8005c8a:	6763      	str	r3, [r4, #116]	@ 0x74
  HAL_UART_TxCpltCallback(huart);
 8005c8c:	f7ff febc 	bl	8005a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c90:	e6fe      	b.n	8005a90 <HAL_UART_IRQHandler+0x68>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f43f af35 	beq.w	8005b02 <HAL_UART_IRQHandler+0xda>
 8005c98:	07ef      	lsls	r7, r5, #31
 8005c9a:	f53f af2a 	bmi.w	8005af2 <HAL_UART_IRQHandler+0xca>
 8005c9e:	e730      	b.n	8005b02 <HAL_UART_IRQHandler+0xda>
      if (huart->RxISR != NULL)
 8005ca0:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f43f aef4 	beq.w	8005a90 <HAL_UART_IRQHandler+0x68>
}
 8005ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cac:	4718      	bx	r3
    if (huart->TxISR != NULL)
 8005cae:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f43f aeed 	beq.w	8005a90 <HAL_UART_IRQHandler+0x68>
      huart->TxISR(huart);
 8005cb6:	4620      	mov	r0, r4
}
 8005cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8005cbc:	4718      	bx	r3
        if (huart->RxISR != NULL)
 8005cbe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f43f af47 	beq.w	8005b54 <HAL_UART_IRQHandler+0x12c>
          huart->RxISR(huart);
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cca:	6826      	ldr	r6, [r4, #0]
 8005ccc:	e742      	b.n	8005b54 <HAL_UART_IRQHandler+0x12c>
            HAL_UART_ErrorCallback(huart);
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7ff fe9c 	bl	8005a0c <HAL_UART_ErrorCallback>
 8005cd4:	e6dc      	b.n	8005a90 <HAL_UART_IRQHandler+0x68>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cd6:	4620      	mov	r0, r4
}
 8005cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cdc:	f000 bef6 	b.w	8006acc <HAL_UARTEx_TxFifoEmptyCallback>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ce0:	4620      	mov	r0, r4
}
 8005ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ce6:	f000 beef 	b.w	8006ac8 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8005cea:	f7ff fe8f 	bl	8005a0c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cee:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
 8005cf2:	e6cd      	b.n	8005a90 <HAL_UART_IRQHandler+0x68>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cf4:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
 8005cf8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
      if ((huart->RxXferCount > 0U)
 8005cfc:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d00:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8005d02:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d04:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005d06:	2a00      	cmp	r2, #0
 8005d08:	f43f aec2 	beq.w	8005a90 <HAL_UART_IRQHandler+0x68>
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	f43f aebf 	beq.w	8005a90 <HAL_UART_IRQHandler+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d16:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	e843 2000 	strex	r0, r2, [r3]
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d1f7      	bne.n	8005d12 <HAL_UART_IRQHandler+0x2ea>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d22:	4d11      	ldr	r5, [pc, #68]	@ (8005d68 <HAL_UART_IRQHandler+0x340>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	f103 0208 	add.w	r2, r3, #8
 8005d28:	e852 2f00 	ldrex	r2, [r2]
 8005d2c:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	f103 0608 	add.w	r6, r3, #8
 8005d32:	e846 2000 	strex	r0, r2, [r6]
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1f4      	bne.n	8005d24 <HAL_UART_IRQHandler+0x2fc>
        huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8005d3c:	6720      	str	r0, [r4, #112]	@ 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d42:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d48:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	e843 2000 	strex	r0, r2, [r3]
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d1f7      	bne.n	8005d44 <HAL_UART_IRQHandler+0x31c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d54:	4620      	mov	r0, r4
 8005d56:	f7ff fe65 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
 8005d5a:	e699      	b.n	8005a90 <HAL_UART_IRQHandler+0x68>
 8005d5c:	10000001 	.word	0x10000001
 8005d60:	04000120 	.word	0x04000120
 8005d64:	08005a11 	.word	0x08005a11
 8005d68:	effffffe 	.word	0xeffffffe

08005d6c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d6c:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
  uint16_t uhMask = huart->Mask;
 8005d70:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d74:	2a22      	cmp	r2, #34	@ 0x22
{
 8005d76:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d78:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d7a:	d004      	beq.n	8005d86 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	f042 0208 	orr.w	r2, r2, #8
 8005d82:	619a      	str	r2, [r3, #24]
  }
}
 8005d84:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d88:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005d8a:	400b      	ands	r3, r1
 8005d8c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8005d8e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 8005d92:	6d82      	ldr	r2, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005d94:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 8005d96:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8005d98:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8005d9a:	6582      	str	r2, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005d9c:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8005da0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1ec      	bne.n	8005d84 <UART_RxISR_8BIT+0x18>
 8005daa:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	e843 2100 	strex	r1, r2, [r3]
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d1f7      	bne.n	8005dac <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	f103 0208 	add.w	r2, r3, #8
 8005dc0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	f103 0c08 	add.w	ip, r3, #8
 8005dcc:	e84c 2100 	strex	r1, r2, [ip]
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d1f3      	bne.n	8005dbc <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8005dd6:	6701      	str	r1, [r0, #112]	@ 0x70
      huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8005dde:	2a01      	cmp	r2, #1
 8005de0:	d112      	bne.n	8005e08 <UART_RxISR_8BIT+0x9c>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	66c1      	str	r1, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	e843 2100 	strex	r1, r2, [r3]
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d1f7      	bne.n	8005de4 <UART_RxISR_8BIT+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	06d2      	lsls	r2, r2, #27
 8005df8:	d501      	bpl.n	8005dfe <UART_RxISR_8BIT+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dfa:	2210      	movs	r2, #16
 8005dfc:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dfe:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8005e02:	f7ff fe0f 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
}
 8005e06:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005e08:	f7fb fbd4 	bl	80015b4 <HAL_UART_RxCpltCallback>
}
 8005e0c:	bd08      	pop	{r3, pc}
 8005e0e:	bf00      	nop

08005e10 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e10:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
  uint16_t uhMask = huart->Mask;
 8005e14:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e18:	2922      	cmp	r1, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e1a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e1c:	d004      	beq.n	8005e28 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	f042 0208 	orr.w	r2, r2, #8
 8005e24:	619a      	str	r2, [r3, #24]
 8005e26:	4770      	bx	lr
{
 8005e28:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e2a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e2c:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005e2e:	4022      	ands	r2, r4
 8005e30:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8005e34:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr += 2U;
 8005e38:	6581      	str	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005e3a:	3a01      	subs	r2, #1
 8005e3c:	b292      	uxth	r2, r2
 8005e3e:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8005e42:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8005e46:	b292      	uxth	r2, r2
 8005e48:	bb62      	cbnz	r2, 8005ea4 <UART_RxISR_16BIT+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e4e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	e843 2100 	strex	r1, r2, [r3]
 8005e56:	2900      	cmp	r1, #0
 8005e58:	d1f7      	bne.n	8005e4a <UART_RxISR_16BIT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	f103 0208 	add.w	r2, r3, #8
 8005e5e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	f103 0408 	add.w	r4, r3, #8
 8005e6a:	e844 2100 	strex	r1, r2, [r4]
 8005e6e:	2900      	cmp	r1, #0
 8005e70:	d1f3      	bne.n	8005e5a <UART_RxISR_16BIT+0x4a>
      huart->RxState = HAL_UART_STATE_READY;
 8005e72:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8005e74:	6701      	str	r1, [r0, #112]	@ 0x70
      huart->RxState = HAL_UART_STATE_READY;
 8005e76:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7a:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8005e7c:	2a01      	cmp	r2, #1
 8005e7e:	d112      	bne.n	8005ea6 <UART_RxISR_16BIT+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e80:	66c1      	str	r1, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e86:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	e843 2100 	strex	r1, r2, [r3]
 8005e8e:	2900      	cmp	r1, #0
 8005e90:	d1f7      	bne.n	8005e82 <UART_RxISR_16BIT+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	06d2      	lsls	r2, r2, #27
 8005e96:	d501      	bpl.n	8005e9c <UART_RxISR_16BIT+0x8c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e98:	2210      	movs	r2, #16
 8005e9a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e9c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8005ea0:	f7ff fdc0 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
  }
}
 8005ea4:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005ea6:	f7fb fb85 	bl	80015b4 <HAL_UART_RxCpltCallback>
}
 8005eaa:	bd10      	pop	{r4, pc}

08005eac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005eb0:	6802      	ldr	r2, [r0, #0]
{
 8005eb2:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 8005eb4:	f8b0 a060 	ldrh.w	sl, [r0, #96]	@ 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005eb8:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005eba:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ebc:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ebe:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005ec2:	2922      	cmp	r1, #34	@ 0x22
 8005ec4:	d006      	beq.n	8005ed4 <UART_RxISR_8BIT_FIFOEN+0x28>
 8005ec6:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ec8:	6992      	ldr	r2, [r2, #24]
 8005eca:	f042 0208 	orr.w	r2, r2, #8
 8005ece:	619a      	str	r2, [r3, #24]
  }
}
 8005ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ed4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80b3 	beq.w	8006044 <UART_RxISR_8BIT_FIFOEN+0x198>
 8005ede:	0680      	lsls	r0, r0, #26
 8005ee0:	d579      	bpl.n	8005fd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ee2:	fa5f fa8a 	uxtb.w	sl, sl
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ee6:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eee:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 8006050 <UART_RxISR_8BIT_FIFOEN+0x1a4>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ef2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ef4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005ef6:	ea0a 0303 	and.w	r3, sl, r3
 8005efa:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8005efc:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr++;
 8005f00:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005f02:	3a01      	subs	r2, #1
      isrflags = READ_REG(huart->Instance->ISR);
 8005f04:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr++;
 8005f06:	3101      	adds	r1, #1
      huart->RxXferCount--;
 8005f08:	b292      	uxth	r2, r2
      huart->pRxBuffPtr++;
 8005f0a:	65a1      	str	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005f0c:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f10:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f12:	0769      	lsls	r1, r5, #29
 8005f14:	d01c      	beq.n	8005f50 <UART_RxISR_8BIT_FIFOEN+0xa4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f16:	07ea      	lsls	r2, r5, #31
 8005f18:	d509      	bpl.n	8005f2e <UART_RxISR_8BIT_FIFOEN+0x82>
 8005f1a:	05f8      	lsls	r0, r7, #23
 8005f1c:	d507      	bpl.n	8005f2e <UART_RxISR_8BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f1e:	2201      	movs	r2, #1
 8005f20:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f22:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f2e:	07a9      	lsls	r1, r5, #30
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f30:	f005 0204 	and.w	r2, r5, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f34:	d514      	bpl.n	8005f60 <UART_RxISR_8BIT_FIFOEN+0xb4>
 8005f36:	b146      	cbz	r6, 8005f4a <UART_RxISR_8BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f38:	2102      	movs	r1, #2
 8005f3a:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f3c:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8005f40:	f041 0104 	orr.w	r1, r1, #4
 8005f44:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f48:	b972      	cbnz	r2, 8005f68 <UART_RxISR_8BIT_FIFOEN+0xbc>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f4a:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005f4e:	b9bb      	cbnz	r3, 8005f80 <UART_RxISR_8BIT_FIFOEN+0xd4>
      if (huart->RxXferCount == 0U)
 8005f50:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	b1eb      	cbz	r3, 8005f94 <UART_RxISR_8BIT_FIFOEN+0xe8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f58:	06ab      	lsls	r3, r5, #26
 8005f5a:	d53c      	bpl.n	8005fd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	e7c8      	b.n	8005ef2 <UART_RxISR_8BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f60:	2a00      	cmp	r2, #0
 8005f62:	d0f2      	beq.n	8005f4a <UART_RxISR_8BIT_FIFOEN+0x9e>
 8005f64:	2e00      	cmp	r6, #0
 8005f66:	d0f0      	beq.n	8005f4a <UART_RxISR_8BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f68:	2204      	movs	r2, #4
 8005f6a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f6c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005f70:	f043 0302 	orr.w	r3, r3, #2
 8005f74:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f78:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0e7      	beq.n	8005f50 <UART_RxISR_8BIT_FIFOEN+0xa4>
          HAL_UART_ErrorCallback(huart);
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7ff fd43 	bl	8005a0c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f86:	f8c4 808c 	str.w	r8, [r4, #140]	@ 0x8c
      if (huart->RxXferCount == 0U)
 8005f8a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e1      	bne.n	8005f58 <UART_RxISR_8BIT_FIFOEN+0xac>
 8005f94:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	e843 2100 	strex	r1, r2, [r3]
 8005fa2:	2900      	cmp	r1, #0
 8005fa4:	d1f7      	bne.n	8005f96 <UART_RxISR_8BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	f103 0208 	add.w	r2, r3, #8
 8005faa:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fae:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	f103 0008 	add.w	r0, r3, #8
 8005fb6:	e840 2100 	strex	r1, r2, [r0]
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d1f3      	bne.n	8005fa6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8005fc0:	6721      	str	r1, [r4, #112]	@ 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005fc8:	2a01      	cmp	r2, #1
 8005fca:	d027      	beq.n	800601c <UART_RxISR_8BIT_FIFOEN+0x170>
          HAL_UART_RxCpltCallback(huart);
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f7fb faf1 	bl	80015b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fd2:	06ab      	lsls	r3, r5, #26
 8005fd4:	d4c2      	bmi.n	8005f5c <UART_RxISR_8BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 8005fd6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005fda:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f43f af77 	beq.w	8005ed0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005fe2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	f67f af72 	bls.w	8005ed0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005fec:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	f103 0208 	add.w	r2, r3, #8
 8005ff2:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ff6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	f103 0008 	add.w	r0, r3, #8
 8005ffe:	e840 2100 	strex	r1, r2, [r0]
 8006002:	2900      	cmp	r1, #0
 8006004:	d1f3      	bne.n	8005fee <UART_RxISR_8BIT_FIFOEN+0x142>
      huart->RxISR = UART_RxISR_8BIT;
 8006006:	4a11      	ldr	r2, [pc, #68]	@ (800604c <UART_RxISR_8BIT_FIFOEN+0x1a0>)
 8006008:	6722      	str	r2, [r4, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800600e:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	e843 2100 	strex	r1, r2, [r3]
 8006016:	2900      	cmp	r1, #0
 8006018:	d1f7      	bne.n	800600a <UART_RxISR_8BIT_FIFOEN+0x15e>
 800601a:	e759      	b.n	8005ed0 <UART_RxISR_8BIT_FIFOEN+0x24>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601c:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006022:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	e843 2100 	strex	r1, r2, [r3]
 800602a:	2900      	cmp	r1, #0
 800602c:	d1f7      	bne.n	800601e <UART_RxISR_8BIT_FIFOEN+0x172>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	06d2      	lsls	r2, r2, #27
 8006032:	d501      	bpl.n	8006038 <UART_RxISR_8BIT_FIFOEN+0x18c>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006034:	2210      	movs	r2, #16
 8006036:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006038:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff fcf1 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
 8006042:	e789      	b.n	8005f58 <UART_RxISR_8BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 8006044:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006048:	e742      	b.n	8005ed0 <UART_RxISR_8BIT_FIFOEN+0x24>
 800604a:	bf00      	nop
 800604c:	08005d6d 	.word	0x08005d6d
 8006050:	effffffe 	.word	0xeffffffe

08006054 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006054:	6803      	ldr	r3, [r0, #0]
{
 8006056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800605a:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800605c:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800605e:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006060:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
  uint16_t  uhMask = huart->Mask;
 8006064:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006068:	2a22      	cmp	r2, #34	@ 0x22
 800606a:	d005      	beq.n	8006078 <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	f042 0208 	orr.w	r2, r2, #8
 8006072:	619a      	str	r2, [r3, #24]
  }
}
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006078:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
 800607c:	4682      	mov	sl, r0
 800607e:	2a00      	cmp	r2, #0
 8006080:	f000 80b7 	beq.w	80061f2 <UART_RxISR_16BIT_FIFOEN+0x19e>
 8006084:	0688      	lsls	r0, r1, #26
 8006086:	d57a      	bpl.n	800617e <UART_RxISR_16BIT_FIFOEN+0x12a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006088:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	2700      	movs	r7, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800608e:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 80061fc <UART_RxISR_16BIT_FIFOEN+0x1a8>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8006094:	f8da 1058 	ldr.w	r1, [sl, #88]	@ 0x58
 8006098:	ea09 0202 	and.w	r2, r9, r2
 800609c:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 80060a0:	f8ba 205e 	ldrh.w	r2, [sl, #94]	@ 0x5e
      huart->pRxBuffPtr += 2U;
 80060a4:	f8ca 1058 	str.w	r1, [sl, #88]	@ 0x58
      huart->RxXferCount--;
 80060a8:	3a01      	subs	r2, #1
 80060aa:	b292      	uxth	r2, r2
 80060ac:	f8aa 205e 	strh.w	r2, [sl, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80060b0:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80060b2:	0761      	lsls	r1, r4, #29
 80060b4:	d01c      	beq.n	80060f0 <UART_RxISR_16BIT_FIFOEN+0x9c>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060b6:	07e2      	lsls	r2, r4, #31
 80060b8:	d509      	bpl.n	80060ce <UART_RxISR_16BIT_FIFOEN+0x7a>
 80060ba:	05f0      	lsls	r0, r6, #23
 80060bc:	d507      	bpl.n	80060ce <UART_RxISR_16BIT_FIFOEN+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060be:	2201      	movs	r2, #1
 80060c0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c2:	f8da 208c 	ldr.w	r2, [sl, #140]	@ 0x8c
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	f8ca 208c 	str.w	r2, [sl, #140]	@ 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ce:	07a1      	lsls	r1, r4, #30
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d0:	f004 0204 	and.w	r2, r4, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d4:	d515      	bpl.n	8006102 <UART_RxISR_16BIT_FIFOEN+0xae>
 80060d6:	b145      	cbz	r5, 80060ea <UART_RxISR_16BIT_FIFOEN+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060d8:	2102      	movs	r1, #2
 80060da:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060dc:	f8da 108c 	ldr.w	r1, [sl, #140]	@ 0x8c
 80060e0:	f041 0104 	orr.w	r1, r1, #4
 80060e4:	f8ca 108c 	str.w	r1, [sl, #140]	@ 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060e8:	b97a      	cbnz	r2, 800610a <UART_RxISR_16BIT_FIFOEN+0xb6>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ea:	f8da 308c 	ldr.w	r3, [sl, #140]	@ 0x8c
 80060ee:	b9c3      	cbnz	r3, 8006122 <UART_RxISR_16BIT_FIFOEN+0xce>
      if (huart->RxXferCount == 0U)
 80060f0:	f8ba 305e 	ldrh.w	r3, [sl, #94]	@ 0x5e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	b1f3      	cbz	r3, 8006136 <UART_RxISR_16BIT_FIFOEN+0xe2>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060f8:	06a3      	lsls	r3, r4, #26
 80060fa:	d540      	bpl.n	800617e <UART_RxISR_16BIT_FIFOEN+0x12a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060fc:	f8da 3000 	ldr.w	r3, [sl]
 8006100:	e7c7      	b.n	8006092 <UART_RxISR_16BIT_FIFOEN+0x3e>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006102:	2a00      	cmp	r2, #0
 8006104:	d0f1      	beq.n	80060ea <UART_RxISR_16BIT_FIFOEN+0x96>
 8006106:	2d00      	cmp	r5, #0
 8006108:	d0ef      	beq.n	80060ea <UART_RxISR_16BIT_FIFOEN+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800610a:	2204      	movs	r2, #4
 800610c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800610e:	f8da 308c 	ldr.w	r3, [sl, #140]	@ 0x8c
 8006112:	f043 0302 	orr.w	r3, r3, #2
 8006116:	f8ca 308c 	str.w	r3, [sl, #140]	@ 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800611a:	f8da 308c 	ldr.w	r3, [sl, #140]	@ 0x8c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0e6      	beq.n	80060f0 <UART_RxISR_16BIT_FIFOEN+0x9c>
          HAL_UART_ErrorCallback(huart);
 8006122:	4650      	mov	r0, sl
 8006124:	f7ff fc72 	bl	8005a0c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	f8ca 708c 	str.w	r7, [sl, #140]	@ 0x8c
      if (huart->RxXferCount == 0U)
 800612c:	f8ba 305e 	ldrh.w	r3, [sl, #94]	@ 0x5e
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e0      	bne.n	80060f8 <UART_RxISR_16BIT_FIFOEN+0xa4>
 8006136:	f8da 3000 	ldr.w	r3, [sl]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	e843 2100 	strex	r1, r2, [r3]
 8006146:	2900      	cmp	r1, #0
 8006148:	d1f7      	bne.n	800613a <UART_RxISR_16BIT_FIFOEN+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	f103 0208 	add.w	r2, r3, #8
 800614e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006152:	ea02 0208 	and.w	r2, r2, r8
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	f103 0008 	add.w	r0, r3, #8
 800615a:	e840 2100 	strex	r1, r2, [r0]
 800615e:	2900      	cmp	r1, #0
 8006160:	d1f3      	bne.n	800614a <UART_RxISR_16BIT_FIFOEN+0xf6>
        huart->RxState = HAL_UART_STATE_READY;
 8006162:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8006164:	f8ca 1070 	str.w	r1, [sl, #112]	@ 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8006168:	f8ca 2088 	str.w	r2, [sl, #136]	@ 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	f8da 206c 	ldr.w	r2, [sl, #108]	@ 0x6c
 8006170:	2a01      	cmp	r2, #1
 8006172:	d029      	beq.n	80061c8 <UART_RxISR_16BIT_FIFOEN+0x174>
          HAL_UART_RxCpltCallback(huart);
 8006174:	4650      	mov	r0, sl
 8006176:	f7fb fa1d 	bl	80015b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800617a:	06a3      	lsls	r3, r4, #26
 800617c:	d4be      	bmi.n	80060fc <UART_RxISR_16BIT_FIFOEN+0xa8>
    rxdatacount = huart->RxXferCount;
 800617e:	f8ba 305e 	ldrh.w	r3, [sl, #94]	@ 0x5e
 8006182:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006184:	2b00      	cmp	r3, #0
 8006186:	f43f af75 	beq.w	8006074 <UART_RxISR_16BIT_FIFOEN+0x20>
 800618a:	f8ba 2068 	ldrh.w	r2, [sl, #104]	@ 0x68
 800618e:	429a      	cmp	r2, r3
 8006190:	f67f af70 	bls.w	8006074 <UART_RxISR_16BIT_FIFOEN+0x20>
 8006194:	f8da 3000 	ldr.w	r3, [sl]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	f103 0208 	add.w	r2, r3, #8
 800619c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061a0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	f103 0008 	add.w	r0, r3, #8
 80061a8:	e840 2100 	strex	r1, r2, [r0]
 80061ac:	2900      	cmp	r1, #0
 80061ae:	d1f3      	bne.n	8006198 <UART_RxISR_16BIT_FIFOEN+0x144>
      huart->RxISR = UART_RxISR_16BIT;
 80061b0:	4a11      	ldr	r2, [pc, #68]	@ (80061f8 <UART_RxISR_16BIT_FIFOEN+0x1a4>)
 80061b2:	f8ca 2070 	str.w	r2, [sl, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061ba:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	e843 2100 	strex	r1, r2, [r3]
 80061c2:	2900      	cmp	r1, #0
 80061c4:	d1f7      	bne.n	80061b6 <UART_RxISR_16BIT_FIFOEN+0x162>
 80061c6:	e755      	b.n	8006074 <UART_RxISR_16BIT_FIFOEN+0x20>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c8:	f8ca 106c 	str.w	r1, [sl, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	e843 2100 	strex	r1, r2, [r3]
 80061d8:	2900      	cmp	r1, #0
 80061da:	d1f7      	bne.n	80061cc <UART_RxISR_16BIT_FIFOEN+0x178>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	06d2      	lsls	r2, r2, #27
 80061e0:	d501      	bpl.n	80061e6 <UART_RxISR_16BIT_FIFOEN+0x192>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061e2:	2210      	movs	r2, #16
 80061e4:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061e6:	f8ba 105c 	ldrh.w	r1, [sl, #92]	@ 0x5c
 80061ea:	4650      	mov	r0, sl
 80061ec:	f7ff fc1a 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
 80061f0:	e782      	b.n	80060f8 <UART_RxISR_16BIT_FIFOEN+0xa4>
    rxdatacount = huart->RxXferCount;
 80061f2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061f6:	e73d      	b.n	8006074 <UART_RxISR_16BIT_FIFOEN+0x20>
 80061f8:	08005e11 	.word	0x08005e11
 80061fc:	effffffe 	.word	0xeffffffe

08006200 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006200:	6901      	ldr	r1, [r0, #16]
 8006202:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006204:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006206:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006208:	49a2      	ldr	r1, [pc, #648]	@ (8006494 <UART_SetConfig+0x294>)
{
 800620a:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800620c:	6945      	ldr	r5, [r0, #20]
{
 800620e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006210:	69c0      	ldr	r0, [r0, #28]
{
 8006212:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006214:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006216:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006218:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800621a:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800621c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800621e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006220:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006222:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800622a:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800622c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800622e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006230:	4a99      	ldr	r2, [pc, #612]	@ (8006498 <UART_SetConfig+0x298>)
 8006232:	4293      	cmp	r3, r2
 8006234:	f000 8118 	beq.w	8006468 <UART_SetConfig+0x268>
    tmpreg |= huart->Init.OneBitSampling;
 8006238:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800623a:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800623c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800623e:	4a97      	ldr	r2, [pc, #604]	@ (800649c <UART_SetConfig+0x29c>)
 8006240:	4032      	ands	r2, r6
 8006242:	4311      	orrs	r1, r2
 8006244:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006248:	f022 020f 	bic.w	r2, r2, #15
 800624c:	432a      	orrs	r2, r5
 800624e:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006250:	4a93      	ldr	r2, [pc, #588]	@ (80064a0 <UART_SetConfig+0x2a0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d028      	beq.n	80062a8 <UART_SetConfig+0xa8>
 8006256:	4a93      	ldr	r2, [pc, #588]	@ (80064a4 <UART_SetConfig+0x2a4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d01a      	beq.n	8006292 <UART_SetConfig+0x92>
 800625c:	4a92      	ldr	r2, [pc, #584]	@ (80064a8 <UART_SetConfig+0x2a8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d017      	beq.n	8006292 <UART_SetConfig+0x92>
 8006262:	4a92      	ldr	r2, [pc, #584]	@ (80064ac <UART_SetConfig+0x2ac>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d014      	beq.n	8006292 <UART_SetConfig+0x92>
 8006268:	4a91      	ldr	r2, [pc, #580]	@ (80064b0 <UART_SetConfig+0x2b0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d011      	beq.n	8006292 <UART_SetConfig+0x92>
 800626e:	4a91      	ldr	r2, [pc, #580]	@ (80064b4 <UART_SetConfig+0x2b4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d019      	beq.n	80062a8 <UART_SetConfig+0xa8>
 8006274:	4a90      	ldr	r2, [pc, #576]	@ (80064b8 <UART_SetConfig+0x2b8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00b      	beq.n	8006292 <UART_SetConfig+0x92>
 800627a:	4a90      	ldr	r2, [pc, #576]	@ (80064bc <UART_SetConfig+0x2bc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d008      	beq.n	8006292 <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 8006280:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006282:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006284:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8006288:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 800628a:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800628c:	6763      	str	r3, [r4, #116]	@ 0x74
}
 800628e:	b006      	add	sp, #24
 8006290:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006292:	4b8b      	ldr	r3, [pc, #556]	@ (80064c0 <UART_SetConfig+0x2c0>)
 8006294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	2b05      	cmp	r3, #5
 800629c:	d8f0      	bhi.n	8006280 <UART_SetConfig+0x80>
 800629e:	e8df f003 	tbb	[pc, r3]
 80062a2:	5f9d      	.short	0x5f9d
 80062a4:	977e7169 	.word	0x977e7169
 80062a8:	4b85      	ldr	r3, [pc, #532]	@ (80064c0 <UART_SetConfig+0x2c0>)
 80062aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062b0:	2b28      	cmp	r3, #40	@ 0x28
 80062b2:	d8e5      	bhi.n	8006280 <UART_SetConfig+0x80>
 80062b4:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <UART_SetConfig+0xbc>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	08006437 	.word	0x08006437
 80062c0:	08006281 	.word	0x08006281
 80062c4:	08006281 	.word	0x08006281
 80062c8:	08006281 	.word	0x08006281
 80062cc:	08006281 	.word	0x08006281
 80062d0:	08006281 	.word	0x08006281
 80062d4:	08006281 	.word	0x08006281
 80062d8:	08006281 	.word	0x08006281
 80062dc:	08006361 	.word	0x08006361
 80062e0:	08006281 	.word	0x08006281
 80062e4:	08006281 	.word	0x08006281
 80062e8:	08006281 	.word	0x08006281
 80062ec:	08006281 	.word	0x08006281
 80062f0:	08006281 	.word	0x08006281
 80062f4:	08006281 	.word	0x08006281
 80062f8:	08006281 	.word	0x08006281
 80062fc:	08006375 	.word	0x08006375
 8006300:	08006281 	.word	0x08006281
 8006304:	08006281 	.word	0x08006281
 8006308:	08006281 	.word	0x08006281
 800630c:	08006281 	.word	0x08006281
 8006310:	08006281 	.word	0x08006281
 8006314:	08006281 	.word	0x08006281
 8006318:	08006281 	.word	0x08006281
 800631c:	08006385 	.word	0x08006385
 8006320:	08006281 	.word	0x08006281
 8006324:	08006281 	.word	0x08006281
 8006328:	08006281 	.word	0x08006281
 800632c:	08006281 	.word	0x08006281
 8006330:	08006281 	.word	0x08006281
 8006334:	08006281 	.word	0x08006281
 8006338:	08006281 	.word	0x08006281
 800633c:	0800639f 	.word	0x0800639f
 8006340:	08006281 	.word	0x08006281
 8006344:	08006281 	.word	0x08006281
 8006348:	08006281 	.word	0x08006281
 800634c:	08006281 	.word	0x08006281
 8006350:	08006281 	.word	0x08006281
 8006354:	08006281 	.word	0x08006281
 8006358:	08006281 	.word	0x08006281
 800635c:	080063d1 	.word	0x080063d1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006360:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006364:	d040      	beq.n	80063e8 <UART_SetConfig+0x1e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006366:	4668      	mov	r0, sp
 8006368:	f7fe ff0c 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800636c:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800636e:	b368      	cbz	r0, 80063cc <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006370:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006372:	e018      	b.n	80063a6 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006374:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006378:	d06e      	beq.n	8006458 <UART_SetConfig+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800637a:	a803      	add	r0, sp, #12
 800637c:	f7fe ff9c 	bl	80052b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006380:	9804      	ldr	r0, [sp, #16]
        break;
 8006382:	e7f4      	b.n	800636e <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006384:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006388:	d05b      	beq.n	8006442 <UART_SetConfig+0x242>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800638a:	4b4d      	ldr	r3, [pc, #308]	@ (80064c0 <UART_SetConfig+0x2c0>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	0692      	lsls	r2, r2, #26
 8006390:	d54c      	bpl.n	800642c <UART_SetConfig+0x22c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	484b      	ldr	r0, [pc, #300]	@ (80064c4 <UART_SetConfig+0x2c4>)
 8006396:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800639a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800639c:	e003      	b.n	80063a6 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 80063a2:	4849      	ldr	r0, [pc, #292]	@ (80064c8 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063a4:	d027      	beq.n	80063f6 <UART_SetConfig+0x1f6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a6:	4a49      	ldr	r2, [pc, #292]	@ (80064cc <UART_SetConfig+0x2cc>)
 80063a8:	6863      	ldr	r3, [r4, #4]
 80063aa:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ae:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b2:	fbb0 f0f1 	udiv	r0, r0, r1
 80063b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80063ba:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063be:	f1a0 0310 	sub.w	r3, r0, #16
 80063c2:	4293      	cmp	r3, r2
 80063c4:	f63f af5c 	bhi.w	8006280 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 80063cc:	2000      	movs	r0, #0
 80063ce:	e758      	b.n	8006282 <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80063d4:	d00f      	beq.n	80063f6 <UART_SetConfig+0x1f6>
        pclk = (uint32_t) LSE_VALUE;
 80063d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80063da:	e7e4      	b.n	80063a6 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063dc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80063e0:	d026      	beq.n	8006430 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e2:	f7fd ff19 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
        break;
 80063e6:	e7c2      	b.n	800636e <UART_SetConfig+0x16e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063e8:	4668      	mov	r0, sp
 80063ea:	f7fe fecb 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063ee:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d0eb      	beq.n	80063cc <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063f4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80063f6:	4b35      	ldr	r3, [pc, #212]	@ (80064cc <UART_SetConfig+0x2cc>)
 80063f8:	6862      	ldr	r2, [r4, #4]
 80063fa:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80063fe:	0853      	lsrs	r3, r2, #1
 8006400:	fbb0 f0f1 	udiv	r0, r0, r1
 8006404:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006408:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800640c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006410:	f1a3 0210 	sub.w	r2, r3, #16
 8006414:	428a      	cmp	r2, r1
 8006416:	f63f af33 	bhi.w	8006280 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800641a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800641e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006422:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006424:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8006426:	4313      	orrs	r3, r2
 8006428:	60cb      	str	r3, [r1, #12]
 800642a:	e7cf      	b.n	80063cc <UART_SetConfig+0x1cc>
          pclk = (uint32_t) HSI_VALUE;
 800642c:	4825      	ldr	r0, [pc, #148]	@ (80064c4 <UART_SetConfig+0x2c4>)
 800642e:	e7ba      	b.n	80063a6 <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006430:	f7fd fef2 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
        break;
 8006434:	e7dc      	b.n	80063f0 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006436:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800643a:	d012      	beq.n	8006462 <UART_SetConfig+0x262>
        pclk = HAL_RCC_GetPCLK2Freq();
 800643c:	f7fd fefe 	bl	800423c <HAL_RCC_GetPCLK2Freq>
        break;
 8006440:	e795      	b.n	800636e <UART_SetConfig+0x16e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006442:	4b1f      	ldr	r3, [pc, #124]	@ (80064c0 <UART_SetConfig+0x2c0>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	0691      	lsls	r1, r2, #26
 8006448:	f140 808a 	bpl.w	8006560 <UART_SetConfig+0x360>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	481d      	ldr	r0, [pc, #116]	@ (80064c4 <UART_SetConfig+0x2c4>)
 8006450:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006454:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8006456:	e7ce      	b.n	80063f6 <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006458:	a803      	add	r0, sp, #12
 800645a:	f7fe ff2d 	bl	80052b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800645e:	9804      	ldr	r0, [sp, #16]
        break;
 8006460:	e7c6      	b.n	80063f0 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006462:	f7fd feeb 	bl	800423c <HAL_RCC_GetPCLK2Freq>
        break;
 8006466:	e7c3      	b.n	80063f0 <UART_SetConfig+0x1f0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006468:	6898      	ldr	r0, [r3, #8]
 800646a:	4a0c      	ldr	r2, [pc, #48]	@ (800649c <UART_SetConfig+0x29c>)
 800646c:	4002      	ands	r2, r0
 800646e:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006470:	4913      	ldr	r1, [pc, #76]	@ (80064c0 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006472:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006476:	f022 020f 	bic.w	r2, r2, #15
 800647a:	432a      	orrs	r2, r5
 800647c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800647e:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	2b05      	cmp	r3, #5
 8006486:	f63f aefb 	bhi.w	8006280 <UART_SetConfig+0x80>
 800648a:	e8df f003 	tbb	[pc, r3]
 800648e:	565b      	.short	0x565b
 8006490:	5e61214d 	.word	0x5e61214d
 8006494:	cfff69f3 	.word	0xcfff69f3
 8006498:	58000c00 	.word	0x58000c00
 800649c:	11fff4ff 	.word	0x11fff4ff
 80064a0:	40011000 	.word	0x40011000
 80064a4:	40004400 	.word	0x40004400
 80064a8:	40004800 	.word	0x40004800
 80064ac:	40004c00 	.word	0x40004c00
 80064b0:	40005000 	.word	0x40005000
 80064b4:	40011400 	.word	0x40011400
 80064b8:	40007800 	.word	0x40007800
 80064bc:	40007c00 	.word	0x40007c00
 80064c0:	58024400 	.word	0x58024400
 80064c4:	03d09000 	.word	0x03d09000
 80064c8:	003d0900 	.word	0x003d0900
 80064cc:	08014998 	.word	0x08014998
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d0:	4b24      	ldr	r3, [pc, #144]	@ (8006564 <UART_SetConfig+0x364>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	0690      	lsls	r0, r2, #26
 80064d6:	d43d      	bmi.n	8006554 <UART_SetConfig+0x354>
          pclk = (uint32_t) HSI_VALUE;
 80064d8:	4823      	ldr	r0, [pc, #140]	@ (8006568 <UART_SetConfig+0x368>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064da:	4b24      	ldr	r3, [pc, #144]	@ (800656c <UART_SetConfig+0x36c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064dc:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064de:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064e2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064e6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ea:	4299      	cmp	r1, r3
 80064ec:	f63f aec8 	bhi.w	8006280 <UART_SetConfig+0x80>
 80064f0:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80064f4:	f63f aec4 	bhi.w	8006280 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f8:	2300      	movs	r3, #0
 80064fa:	4619      	mov	r1, r3
 80064fc:	f7f9 ff40 	bl	8000380 <__aeabi_uldivmod>
 8006500:	4632      	mov	r2, r6
 8006502:	0209      	lsls	r1, r1, #8
 8006504:	0203      	lsls	r3, r0, #8
 8006506:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800650a:	0870      	lsrs	r0, r6, #1
 800650c:	1818      	adds	r0, r3, r0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	f141 0100 	adc.w	r1, r1, #0
 8006516:	f7f9 ff33 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800651a:	4b15      	ldr	r3, [pc, #84]	@ (8006570 <UART_SetConfig+0x370>)
 800651c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006520:	429a      	cmp	r2, r3
 8006522:	f63f aead 	bhi.w	8006280 <UART_SetConfig+0x80>
 8006526:	e74f      	b.n	80063c8 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006528:	a803      	add	r0, sp, #12
 800652a:	f7fe fec5 	bl	80052b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800652e:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8006530:	2800      	cmp	r0, #0
 8006532:	f43f af4b 	beq.w	80063cc <UART_SetConfig+0x1cc>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006536:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006538:	e7cf      	b.n	80064da <UART_SetConfig+0x2da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800653a:	4668      	mov	r0, sp
 800653c:	f7fe fe22 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006540:	9801      	ldr	r0, [sp, #4]
        break;
 8006542:	e7f5      	b.n	8006530 <UART_SetConfig+0x330>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006544:	f7fe fe0c 	bl	8005160 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8006548:	e7f2      	b.n	8006530 <UART_SetConfig+0x330>
        pclk = (uint32_t) LSE_VALUE;
 800654a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800654e:	e7c4      	b.n	80064da <UART_SetConfig+0x2da>
        pclk = (uint32_t) CSI_VALUE;
 8006550:	4808      	ldr	r0, [pc, #32]	@ (8006574 <UART_SetConfig+0x374>)
 8006552:	e7c2      	b.n	80064da <UART_SetConfig+0x2da>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4804      	ldr	r0, [pc, #16]	@ (8006568 <UART_SetConfig+0x368>)
 8006558:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800655c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800655e:	e7bc      	b.n	80064da <UART_SetConfig+0x2da>
          pclk = (uint32_t) HSI_VALUE;
 8006560:	4801      	ldr	r0, [pc, #4]	@ (8006568 <UART_SetConfig+0x368>)
 8006562:	e748      	b.n	80063f6 <UART_SetConfig+0x1f6>
 8006564:	58024400 	.word	0x58024400
 8006568:	03d09000 	.word	0x03d09000
 800656c:	08014998 	.word	0x08014998
 8006570:	000ffcff 	.word	0x000ffcff
 8006574:	003d0900 	.word	0x003d0900

08006578 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006578:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800657a:	07da      	lsls	r2, r3, #31
{
 800657c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800657e:	d506      	bpl.n	800658e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006580:	6801      	ldr	r1, [r0, #0]
 8006582:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006584:	684a      	ldr	r2, [r1, #4]
 8006586:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800658a:	4322      	orrs	r2, r4
 800658c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800658e:	079c      	lsls	r4, r3, #30
 8006590:	d506      	bpl.n	80065a0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006592:	6801      	ldr	r1, [r0, #0]
 8006594:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006596:	684a      	ldr	r2, [r1, #4]
 8006598:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800659c:	4322      	orrs	r2, r4
 800659e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065a0:	0759      	lsls	r1, r3, #29
 80065a2:	d506      	bpl.n	80065b2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065a4:	6801      	ldr	r1, [r0, #0]
 80065a6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80065a8:	684a      	ldr	r2, [r1, #4]
 80065aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80065ae:	4322      	orrs	r2, r4
 80065b0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b2:	071a      	lsls	r2, r3, #28
 80065b4:	d506      	bpl.n	80065c4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065b6:	6801      	ldr	r1, [r0, #0]
 80065b8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80065ba:	684a      	ldr	r2, [r1, #4]
 80065bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065c0:	4322      	orrs	r2, r4
 80065c2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065c4:	06dc      	lsls	r4, r3, #27
 80065c6:	d506      	bpl.n	80065d6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065c8:	6801      	ldr	r1, [r0, #0]
 80065ca:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80065cc:	688a      	ldr	r2, [r1, #8]
 80065ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065d2:	4322      	orrs	r2, r4
 80065d4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065d6:	0699      	lsls	r1, r3, #26
 80065d8:	d506      	bpl.n	80065e8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065da:	6801      	ldr	r1, [r0, #0]
 80065dc:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80065de:	688a      	ldr	r2, [r1, #8]
 80065e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e4:	4322      	orrs	r2, r4
 80065e6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065e8:	065a      	lsls	r2, r3, #25
 80065ea:	d50a      	bpl.n	8006602 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065ec:	6801      	ldr	r1, [r0, #0]
 80065ee:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80065f0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065f2:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065f6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80065fa:	ea42 0204 	orr.w	r2, r2, r4
 80065fe:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006600:	d00b      	beq.n	800661a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	d506      	bpl.n	8006614 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006606:	6802      	ldr	r2, [r0, #0]
 8006608:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800660a:	6853      	ldr	r3, [r2, #4]
 800660c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006610:	430b      	orrs	r3, r1
 8006612:	6053      	str	r3, [r2, #4]
}
 8006614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006618:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800661a:	684a      	ldr	r2, [r1, #4]
 800661c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800661e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006622:	4322      	orrs	r2, r4
 8006624:	604a      	str	r2, [r1, #4]
 8006626:	e7ec      	b.n	8006602 <UART_AdvFeatureConfig+0x8a>

08006628 <UART_WaitOnFlagUntilTimeout>:
{
 8006628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800662c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006630:	4681      	mov	r9, r0
 8006632:	460f      	mov	r7, r1
 8006634:	4616      	mov	r6, r2
 8006636:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006638:	6805      	ldr	r5, [r0, #0]
 800663a:	e002      	b.n	8006642 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 800663c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006640:	d10a      	bne.n	8006658 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006642:	69ec      	ldr	r4, [r5, #28]
 8006644:	ea37 0404 	bics.w	r4, r7, r4
 8006648:	bf0c      	ite	eq
 800664a:	2401      	moveq	r4, #1
 800664c:	2400      	movne	r4, #0
 800664e:	42b4      	cmp	r4, r6
 8006650:	d0f4      	beq.n	800663c <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8006652:	2000      	movs	r0, #0
}
 8006654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006658:	f7fb fcd2 	bl	8002000 <HAL_GetTick>
 800665c:	eba0 000a 	sub.w	r0, r0, sl
 8006660:	4540      	cmp	r0, r8
 8006662:	d835      	bhi.n	80066d0 <UART_WaitOnFlagUntilTimeout+0xa8>
 8006664:	f1b8 0f00 	cmp.w	r8, #0
 8006668:	d032      	beq.n	80066d0 <UART_WaitOnFlagUntilTimeout+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800666a:	f8d9 5000 	ldr.w	r5, [r9]
 800666e:	682a      	ldr	r2, [r5, #0]
 8006670:	462b      	mov	r3, r5
 8006672:	0751      	lsls	r1, r2, #29
 8006674:	d5e5      	bpl.n	8006642 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006676:	69ea      	ldr	r2, [r5, #28]
 8006678:	0512      	lsls	r2, r2, #20
 800667a:	d5e2      	bpl.n	8006642 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800667c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006680:	622a      	str	r2, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	e855 2f00 	ldrex	r2, [r5]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006686:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	e845 2100 	strex	r1, r2, [r5]
 800668e:	b139      	cbz	r1, 80066a0 <UART_WaitOnFlagUntilTimeout+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	e853 2f00 	ldrex	r2, [r3]
 8006694:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	e843 2100 	strex	r1, r2, [r3]
 800669c:	2900      	cmp	r1, #0
 800669e:	d1f7      	bne.n	8006690 <UART_WaitOnFlagUntilTimeout+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	f103 0208 	add.w	r2, r3, #8
 80066a4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	f103 0008 	add.w	r0, r3, #8
 80066b0:	e840 2100 	strex	r1, r2, [r0]
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d1f3      	bne.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x78>
          huart->gState = HAL_UART_STATE_READY;
 80066b8:	2320      	movs	r3, #32
 80066ba:	f8c9 3084 	str.w	r3, [r9, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80066be:	f8c9 3088 	str.w	r3, [r9, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066c2:	f8c9 308c 	str.w	r3, [r9, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 80066c6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80066c8:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80066ca:	f889 3080 	strb.w	r3, [r9, #128]	@ 0x80
 80066ce:	e7c1      	b.n	8006654 <UART_WaitOnFlagUntilTimeout+0x2c>
 80066d0:	f8d9 3000 	ldr.w	r3, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066d8:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	e843 2100 	strex	r1, r2, [r3]
 80066e0:	2900      	cmp	r1, #0
 80066e2:	d1f7      	bne.n	80066d4 <UART_WaitOnFlagUntilTimeout+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	f103 0208 	add.w	r2, r3, #8
 80066e8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ec:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	f103 0008 	add.w	r0, r3, #8
 80066f4:	e840 2100 	strex	r1, r2, [r0]
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d1f3      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0xbc>
        huart->gState = HAL_UART_STATE_READY;
 80066fc:	2320      	movs	r3, #32
 80066fe:	f8c9 3084 	str.w	r3, [r9, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006702:	f8c9 3088 	str.w	r3, [r9, #136]	@ 0x88
        return HAL_TIMEOUT;
 8006706:	e7de      	b.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x9e>

08006708 <HAL_UART_Transmit>:
{
 8006708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800670c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800670e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8006712:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8006714:	2b20      	cmp	r3, #32
 8006716:	d14b      	bne.n	80067b0 <HAL_UART_Transmit+0xa8>
    if ((pData == NULL) || (Size == 0U))
 8006718:	460d      	mov	r5, r1
 800671a:	2900      	cmp	r1, #0
 800671c:	d044      	beq.n	80067a8 <HAL_UART_Transmit+0xa0>
 800671e:	fab2 f982 	clz	r9, r2
 8006722:	4617      	mov	r7, r2
 8006724:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8006728:	2a00      	cmp	r2, #0
 800672a:	d03d      	beq.n	80067a8 <HAL_UART_Transmit+0xa0>
    __HAL_LOCK(huart);
 800672c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006730:	4604      	mov	r4, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d03c      	beq.n	80067b0 <HAL_UART_Transmit+0xa8>
 8006736:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	f8c0 908c 	str.w	r9, [r0, #140]	@ 0x8c
    __HAL_LOCK(huart);
 800673c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006740:	2321      	movs	r3, #33	@ 0x21
 8006742:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    tickstart = HAL_GetTick();
 8006746:	f7fb fc5b 	bl	8002000 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800674c:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 800674e:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8006756:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675a:	d040      	beq.n	80067de <HAL_UART_Transmit+0xd6>
    while (huart->TxXferCount > 0U)
 800675c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
    __HAL_UNLOCK(huart);
 8006760:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8006762:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8006764:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    while (huart->TxXferCount > 0U)
 8006768:	b96b      	cbnz	r3, 8006786 <HAL_UART_Transmit+0x7e>
 800676a:	e029      	b.n	80067c0 <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800676c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006770:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8006772:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8006776:	3a01      	subs	r2, #1
 8006778:	b292      	uxth	r2, r2
 800677a:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800677e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8006782:	b29b      	uxth	r3, r3
 8006784:	b1e3      	cbz	r3, 80067c0 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006786:	4643      	mov	r3, r8
 8006788:	2200      	movs	r2, #0
 800678a:	2180      	movs	r1, #128	@ 0x80
 800678c:	4620      	mov	r0, r4
 800678e:	9600      	str	r6, [sp, #0]
 8006790:	f7ff ff4a 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 8006794:	b980      	cbnz	r0, 80067b8 <HAL_UART_Transmit+0xb0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006796:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8006798:	2d00      	cmp	r5, #0
 800679a:	d1e7      	bne.n	800676c <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800679c:	f839 2b02 	ldrh.w	r2, [r9], #2
 80067a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067a6:	e7e4      	b.n	8006772 <HAL_UART_Transmit+0x6a>
      return  HAL_ERROR;
 80067a8:	2001      	movs	r0, #1
}
 80067aa:	b003      	add	sp, #12
 80067ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(huart);
 80067b0:	2002      	movs	r0, #2
}
 80067b2:	b003      	add	sp, #12
 80067b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80067b8:	2003      	movs	r0, #3
}
 80067ba:	b003      	add	sp, #12
 80067bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067c0:	4643      	mov	r3, r8
 80067c2:	2200      	movs	r2, #0
 80067c4:	2140      	movs	r1, #64	@ 0x40
 80067c6:	4620      	mov	r0, r4
 80067c8:	9600      	str	r6, [sp, #0]
 80067ca:	f7ff ff2d 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d1f2      	bne.n	80067b8 <HAL_UART_Transmit+0xb0>
    huart->gState = HAL_UART_STATE_READY;
 80067d2:	2320      	movs	r3, #32
 80067d4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
}
 80067d8:	b003      	add	sp, #12
 80067da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1bb      	bne.n	800675c <HAL_UART_Transmit+0x54>
 80067e4:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80067e6:	461d      	mov	r5, r3
 80067e8:	e7b8      	b.n	800675c <HAL_UART_Transmit+0x54>
 80067ea:	bf00      	nop

080067ec <UART_CheckIdleState>:
{
 80067ec:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	2600      	movs	r6, #0
{
 80067f0:	4604      	mov	r4, r0
 80067f2:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f4:	f8c0 608c 	str.w	r6, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 80067f8:	f7fb fc02 	bl	8002000 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067fc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80067fe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	0712      	lsls	r2, r2, #28
 8006804:	d40e      	bmi.n	8006824 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	075b      	lsls	r3, r3, #29
 800680a:	d41a      	bmi.n	8006842 <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800680e:	2220      	movs	r2, #32
  return HAL_OK;
 8006810:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006812:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8006816:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800681a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681e:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8006820:	b002      	add	sp, #8
 8006822:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006824:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8006828:	4603      	mov	r3, r0
 800682a:	4632      	mov	r2, r6
 800682c:	4620      	mov	r0, r4
 800682e:	9100      	str	r1, [sp, #0]
 8006830:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006834:	f7ff fef8 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 8006838:	b978      	cbnz	r0, 800685a <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	075b      	lsls	r3, r3, #29
 8006840:	d5e4      	bpl.n	800680c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006842:	f06f 407e 	mvn.w	r0, #4261412864	@ 0xfe000000
 8006846:	462b      	mov	r3, r5
 8006848:	2200      	movs	r2, #0
 800684a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800684e:	9000      	str	r0, [sp, #0]
 8006850:	4620      	mov	r0, r4
 8006852:	f7ff fee9 	bl	8006628 <UART_WaitOnFlagUntilTimeout>
 8006856:	2800      	cmp	r0, #0
 8006858:	d0d8      	beq.n	800680c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800685a:	2003      	movs	r0, #3
}
 800685c:	b002      	add	sp, #8
 800685e:	bd70      	pop	{r4, r5, r6, pc}

08006860 <HAL_UART_Init>:
  if (huart == NULL)
 8006860:	b380      	cbz	r0, 80068c4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006862:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8006866:	b510      	push	{r4, lr}
 8006868:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800686a:	b333      	cbz	r3, 80068ba <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800686c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800686e:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006870:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8006872:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800687e:	f7ff fcbf 	bl	8006200 <UART_SetConfig>
 8006882:	2801      	cmp	r0, #1
 8006884:	d017      	beq.n	80068b6 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006886:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006888:	b98b      	cbnz	r3, 80068ae <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800688a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800688c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006894:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800689c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	f042 0201 	orr.w	r2, r2, #1
}
 80068a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80068a8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80068aa:	f7ff bf9f 	b.w	80067ec <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7ff fe62 	bl	8006578 <UART_AdvFeatureConfig>
 80068b4:	e7e9      	b.n	800688a <HAL_UART_Init+0x2a>
}
 80068b6:	2001      	movs	r0, #1
 80068b8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80068ba:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 80068be:	f7fa ff3f 	bl	8001740 <HAL_UART_MspInit>
 80068c2:	e7d3      	b.n	800686c <HAL_UART_Init+0xc>
}
 80068c4:	2001      	movs	r0, #1
 80068c6:	4770      	bx	lr

080068c8 <UART_Start_Receive_IT>:
{
 80068c8:	b470      	push	{r4, r5, r6}
  UART_MASK_COMPUTATION(huart);
 80068ca:	6884      	ldr	r4, [r0, #8]
  huart->RxISR       = NULL;
 80068cc:	2300      	movs	r3, #0
  huart->pRxBuffPtr  = pData;
 80068ce:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 80068d0:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
  huart->RxXferSize  = Size;
 80068d4:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80068d8:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80068dc:	6703      	str	r3, [r0, #112]	@ 0x70
  UART_MASK_COMPUTATION(huart);
 80068de:	d055      	beq.n	800698c <UART_Start_Receive_IT+0xc4>
 80068e0:	2c00      	cmp	r4, #0
 80068e2:	d133      	bne.n	800694c <UART_Start_Receive_IT+0x84>
 80068e4:	6903      	ldr	r3, [r0, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bf14      	ite	ne
 80068ea:	237f      	movne	r3, #127	@ 0x7f
 80068ec:	23ff      	moveq	r3, #255	@ 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ee:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068f0:	2422      	movs	r4, #34	@ 0x22
  UART_MASK_COMPUTATION(huart);
 80068f2:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f6:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068fa:	6801      	ldr	r1, [r0, #0]
 80068fc:	f8c0 4088 	str.w	r4, [r0, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	f101 0308 	add.w	r3, r1, #8
 8006904:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006908:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	f101 0508 	add.w	r5, r1, #8
 8006910:	e845 3400 	strex	r4, r3, [r5]
 8006914:	2c00      	cmp	r4, #0
 8006916:	d1f3      	bne.n	8006900 <UART_Start_Receive_IT+0x38>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006918:	6e46      	ldr	r6, [r0, #100]	@ 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800691a:	6885      	ldr	r5, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800691c:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006920:	6903      	ldr	r3, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006922:	d03a      	beq.n	800699a <UART_Start_Receive_IT+0xd2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006924:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006928:	d019      	beq.n	800695e <UART_Start_Receive_IT+0x96>
 800692a:	4c3a      	ldr	r4, [pc, #232]	@ (8006a14 <UART_Start_Receive_IT+0x14c>)
    __HAL_UNLOCK(huart);
 800692c:	2200      	movs	r2, #0
 800692e:	6704      	str	r4, [r0, #112]	@ 0x70
 8006930:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006934:	b1cb      	cbz	r3, 800696a <UART_Start_Receive_IT+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800693a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	e841 3200 	strex	r2, r3, [r1]
 8006942:	2a00      	cmp	r2, #0
 8006944:	d1f7      	bne.n	8006936 <UART_Start_Receive_IT+0x6e>
}
 8006946:	2000      	movs	r0, #0
 8006948:	bc70      	pop	{r4, r5, r6}
 800694a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800694c:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8006950:	d1cd      	bne.n	80068ee <UART_Start_Receive_IT+0x26>
 8006952:	6903      	ldr	r3, [r0, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	bf14      	ite	ne
 8006958:	233f      	movne	r3, #63	@ 0x3f
 800695a:	237f      	moveq	r3, #127	@ 0x7f
 800695c:	e7c7      	b.n	80068ee <UART_Start_Receive_IT+0x26>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695e:	2b00      	cmp	r3, #0
 8006960:	d14c      	bne.n	80069fc <UART_Start_Receive_IT+0x134>
 8006962:	4a2d      	ldr	r2, [pc, #180]	@ (8006a18 <UART_Start_Receive_IT+0x150>)
    __HAL_UNLOCK(huart);
 8006964:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
 8006968:	6702      	str	r2, [r0, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800696e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	e841 3200 	strex	r2, r3, [r1]
 8006976:	2a00      	cmp	r2, #0
 8006978:	d0e5      	beq.n	8006946 <UART_Start_Receive_IT+0x7e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	e851 3f00 	ldrex	r3, [r1]
 800697e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	e841 3200 	strex	r2, r3, [r1]
 8006986:	2a00      	cmp	r2, #0
 8006988:	d1ef      	bne.n	800696a <UART_Start_Receive_IT+0xa2>
 800698a:	e7dc      	b.n	8006946 <UART_Start_Receive_IT+0x7e>
  UART_MASK_COMPUTATION(huart);
 800698c:	6901      	ldr	r1, [r0, #16]
 800698e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8006992:	2900      	cmp	r1, #0
 8006994:	bf18      	it	ne
 8006996:	23ff      	movne	r3, #255	@ 0xff
 8006998:	e7a9      	b.n	80068ee <UART_Start_Receive_IT+0x26>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800699a:	f8b0 c068 	ldrh.w	ip, [r0, #104]	@ 0x68
 800699e:	4594      	cmp	ip, r2
 80069a0:	d8c0      	bhi.n	8006924 <UART_Start_Receive_IT+0x5c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a2:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80069a6:	d013      	beq.n	80069d0 <UART_Start_Receive_IT+0x108>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80069a8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a1c <UART_Start_Receive_IT+0x154>)
    __HAL_UNLOCK(huart);
 80069aa:	f880 4080 	strb.w	r4, [r0, #128]	@ 0x80
 80069ae:	6702      	str	r2, [r0, #112]	@ 0x70
    if (huart->Init.Parity != UART_PARITY_NONE)
 80069b0:	b99b      	cbnz	r3, 80069da <UART_Start_Receive_IT+0x112>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	f101 0308 	add.w	r3, r1, #8
 80069b6:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	f101 0008 	add.w	r0, r1, #8
 80069c2:	e840 3200 	strex	r2, r3, [r0]
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	d1f3      	bne.n	80069b2 <UART_Start_Receive_IT+0xea>
}
 80069ca:	2000      	movs	r0, #0
 80069cc:	bc70      	pop	{r4, r5, r6}
 80069ce:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d0:	b1d3      	cbz	r3, 8006a08 <UART_Start_Receive_IT+0x140>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80069d2:	4b12      	ldr	r3, [pc, #72]	@ (8006a1c <UART_Start_Receive_IT+0x154>)
    __HAL_UNLOCK(huart);
 80069d4:	f880 4080 	strb.w	r4, [r0, #128]	@ 0x80
 80069d8:	6703      	str	r3, [r0, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	e841 3200 	strex	r2, r3, [r1]
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	d0e3      	beq.n	80069b2 <UART_Start_Receive_IT+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	e851 3f00 	ldrex	r3, [r1]
 80069ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	e841 3200 	strex	r2, r3, [r1]
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	d1ef      	bne.n	80069da <UART_Start_Receive_IT+0x112>
 80069fa:	e7da      	b.n	80069b2 <UART_Start_Receive_IT+0xea>
 80069fc:	4a05      	ldr	r2, [pc, #20]	@ (8006a14 <UART_Start_Receive_IT+0x14c>)
    __HAL_UNLOCK(huart);
 80069fe:	2300      	movs	r3, #0
 8006a00:	6702      	str	r2, [r0, #112]	@ 0x70
 8006a02:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a06:	e796      	b.n	8006936 <UART_Start_Receive_IT+0x6e>
 8006a08:	4a05      	ldr	r2, [pc, #20]	@ (8006a20 <UART_Start_Receive_IT+0x158>)
    __HAL_UNLOCK(huart);
 8006a0a:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
 8006a0e:	6702      	str	r2, [r0, #112]	@ 0x70
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a10:	e7cf      	b.n	80069b2 <UART_Start_Receive_IT+0xea>
 8006a12:	bf00      	nop
 8006a14:	08005d6d 	.word	0x08005d6d
 8006a18:	08005e11 	.word	0x08005e11
 8006a1c:	08005ead 	.word	0x08005ead
 8006a20:	08006055 	.word	0x08006055

08006a24 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a24:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d121      	bne.n	8006a70 <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 8006a2c:	b1f1      	cbz	r1, 8006a6c <HAL_UART_Receive_IT+0x48>
 8006a2e:	fab2 f382 	clz	r3, r2
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	b1d2      	cbz	r2, 8006a6c <HAL_UART_Receive_IT+0x48>
{
 8006a36:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8006a38:	f890 4080 	ldrb.w	r4, [r0, #128]	@ 0x80
 8006a3c:	2c01      	cmp	r4, #1
 8006a3e:	d019      	beq.n	8006a74 <HAL_UART_Receive_IT+0x50>
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a40:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8006a42:	2501      	movs	r5, #1
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a44:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a46:	4b0d      	ldr	r3, [pc, #52]	@ (8006a7c <HAL_UART_Receive_IT+0x58>)
    __HAL_LOCK(huart);
 8006a48:	f880 5080 	strb.w	r5, [r0, #128]	@ 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	d00a      	beq.n	8006a66 <HAL_UART_Receive_IT+0x42>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a50:	6863      	ldr	r3, [r4, #4]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	d507      	bpl.n	8006a66 <HAL_UART_Receive_IT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	e844 3500 	strex	r5, r3, [r4]
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d1f7      	bne.n	8006a56 <HAL_UART_Receive_IT+0x32>
}
 8006a66:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a68:	f7ff bf2e 	b.w	80068c8 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8006a6c:	2001      	movs	r0, #1
}
 8006a6e:	4770      	bx	lr
    __HAL_LOCK(huart);
 8006a70:	2002      	movs	r0, #2
 8006a72:	4770      	bx	lr
 8006a74:	2002      	movs	r0, #2
}
 8006a76:	bc30      	pop	{r4, r5}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	58000c00 	.word	0x58000c00

08006a80 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a80:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a82:	4a0e      	ldr	r2, [pc, #56]	@ (8006abc <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a84:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a86:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a88:	f3c1 6142 	ubfx	r1, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a8c:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a90:	5c53      	ldrb	r3, [r2, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a92:	f812 200c 	ldrb.w	r2, [r2, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a96:	011b      	lsls	r3, r3, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a98:	0112      	lsls	r2, r2, #4
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8006a9a:	b410      	push	{r4}
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a9c:	4c08      	ldr	r4, [pc, #32]	@ (8006ac0 <UARTEx_SetNbDataToProcess.part.0+0x40>)
 8006a9e:	f814 c00c 	ldrb.w	ip, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006aa2:	5c61      	ldrb	r1, [r4, r1]
  }
}
 8006aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aa8:	fbb2 f2fc 	udiv	r2, r2, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aac:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ab0:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ab4:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	080149b8 	.word	0x080149b8
 8006ac0:	080149b0 	.word	0x080149b0

08006ac4 <HAL_UARTEx_WakeupCallback>:
}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop

08006ac8 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop

08006acc <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop

08006ad0 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006ad0:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 8006ad4:	2a01      	cmp	r2, #1
 8006ad6:	d017      	beq.n	8006b08 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ad8:	6802      	ldr	r2, [r0, #0]
 8006ada:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006adc:	2024      	movs	r0, #36	@ 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ade:	2100      	movs	r1, #0
{
 8006ae0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8006ae2:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8006ae6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ae8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006aea:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006aec:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8006af0:	f024 0401 	bic.w	r4, r4, #1
 8006af4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006af6:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006af8:	6010      	str	r0, [r2, #0]
  return HAL_OK;
 8006afa:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006afc:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8006b00:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
}
 8006b04:	bc30      	pop	{r4, r5}
 8006b06:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006b08:	2002      	movs	r0, #2
}
 8006b0a:	4770      	bx	lr

08006b0c <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8006b0c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d020      	beq.n	8006b56 <HAL_UARTEx_SetTxFifoThreshold+0x4a>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b14:	2324      	movs	r3, #36	@ 0x24
{
 8006b16:	b570      	push	{r4, r5, r6, lr}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b18:	6805      	ldr	r5, [r0, #0]
 8006b1a:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006b1c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b20:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8006b22:	682b      	ldr	r3, [r5, #0]
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b2a:	68ab      	ldr	r3, [r5, #8]
 8006b2c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8006b30:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b32:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b34:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b36:	b153      	cbz	r3, 8006b4e <HAL_UARTEx_SetTxFifoThreshold+0x42>
 8006b38:	f7ff ffa2 	bl	8006a80 <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 8006b3c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006b3e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b40:	602e      	str	r6, [r5, #0]
  return HAL_OK;
 8006b42:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8006b48:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8006b4c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8006b4e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8006b52:	6683      	str	r3, [r0, #104]	@ 0x68
 8006b54:	e7f2      	b.n	8006b3c <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8006b56:	2002      	movs	r0, #2
}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop

08006b5c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006b5c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d020      	beq.n	8006ba6 <HAL_UARTEx_SetRxFifoThreshold+0x4a>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b64:	2324      	movs	r3, #36	@ 0x24
{
 8006b66:	b570      	push	{r4, r5, r6, lr}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b68:	6805      	ldr	r5, [r0, #0]
 8006b6a:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006b6c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b70:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8006b72:	682b      	ldr	r3, [r5, #0]
 8006b74:	f023 0301 	bic.w	r3, r3, #1
 8006b78:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b7a:	68ab      	ldr	r3, [r5, #8]
 8006b7c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8006b80:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b82:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b84:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b86:	b153      	cbz	r3, 8006b9e <HAL_UARTEx_SetRxFifoThreshold+0x42>
 8006b88:	f7ff ff7a 	bl	8006a80 <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 8006b8c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006b8e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b90:	602e      	str	r6, [r5, #0]
  return HAL_OK;
 8006b92:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006b94:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 8006b98:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8006b9c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8006b9e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8006ba2:	6683      	str	r3, [r0, #104]	@ 0x68
 8006ba4:	e7f2      	b.n	8006b8c <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8006ba6:	2002      	movs	r0, #2
}
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop

08006bac <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop

08006bb0 <MX_LWIP_Init>:
{
 8006bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 8006bb2:	4b27      	ldr	r3, [pc, #156]	@ (8006c50 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 8006bb4:	2100      	movs	r1, #0
  IP_ADDRESS[0] = 192;
 8006bb6:	4f27      	ldr	r7, [pc, #156]	@ (8006c54 <MX_LWIP_Init+0xa4>)
{
 8006bb8:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 8006bba:	4e27      	ldr	r6, [pc, #156]	@ (8006c58 <MX_LWIP_Init+0xa8>)
	tcpip_init(tcpip_init_done, arg);
 8006bbc:	4608      	mov	r0, r1
  IP_ADDRESS[0] = 192;
 8006bbe:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 8006bc0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  GATEWAY_ADDRESS[0] = 192;
 8006bc4:	4d25      	ldr	r5, [pc, #148]	@ (8006c5c <MX_LWIP_Init+0xac>)
  NETMASK_ADDRESS[0] = 255;
 8006bc6:	6033      	str	r3, [r6, #0]
  GATEWAY_ADDRESS[0] = 192;
 8006bc8:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006bcc:	4c24      	ldr	r4, [pc, #144]	@ (8006c60 <MX_LWIP_Init+0xb0>)
  GATEWAY_ADDRESS[0] = 192;
 8006bce:	33c1      	adds	r3, #193	@ 0xc1
 8006bd0:	602b      	str	r3, [r5, #0]
	tcpip_init(tcpip_init_done, arg);
 8006bd2:	f004 fd17 	bl	800b604 <tcpip_init>
	LOCK_TCPIP_CORE();
 8006bd6:	f000 fb21 	bl	800721c <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4921      	ldr	r1, [pc, #132]	@ (8006c64 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006bde:	6833      	ldr	r3, [r6, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006be0:	600a      	str	r2, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006be2:	4a21      	ldr	r2, [pc, #132]	@ (8006c68 <MX_LWIP_Init+0xb8>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006be4:	6828      	ldr	r0, [r5, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006be6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006be8:	4b20      	ldr	r3, [pc, #128]	@ (8006c6c <MX_LWIP_Init+0xbc>)
 8006bea:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006bec:	4820      	ldr	r0, [pc, #128]	@ (8006c70 <MX_LWIP_Init+0xc0>)
 8006bee:	9002      	str	r0, [sp, #8]
 8006bf0:	4820      	ldr	r0, [pc, #128]	@ (8006c74 <MX_LWIP_Init+0xc4>)
 8006bf2:	9001      	str	r0, [sp, #4]
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	9000      	str	r0, [sp, #0]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f005 f9bb 	bl	800bf74 <netif_add>
  netif_set_default(&gnetif);
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f005 fa6a 	bl	800c0d8 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8006c04:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
    netif_set_up(&gnetif);
 8006c08:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8006c0a:	075b      	lsls	r3, r3, #29
 8006c0c:	d51d      	bpl.n	8006c4a <MX_LWIP_Init+0x9a>
    netif_set_up(&gnetif);
 8006c0e:	f005 fa6d 	bl	800c0ec <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006c12:	4c19      	ldr	r4, [pc, #100]	@ (8006c78 <MX_LWIP_Init+0xc8>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006c14:	4919      	ldr	r1, [pc, #100]	@ (8006c7c <MX_LWIP_Init+0xcc>)
 8006c16:	4812      	ldr	r0, [pc, #72]	@ (8006c60 <MX_LWIP_Init+0xb0>)
 8006c18:	f005 fafc 	bl	800c214 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4620      	mov	r0, r4
 8006c22:	f00c fa04 	bl	801302e <memset>
  attributes.name = "EthLink";
 8006c26:	1f22      	subs	r2, r4, #4
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006c28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  attributes.name = "EthLink";
 8006c2c:	4814      	ldr	r0, [pc, #80]	@ (8006c80 <MX_LWIP_Init+0xd0>)
  attributes.priority = osPriorityBelowNormal;
 8006c2e:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006c30:	6151      	str	r1, [r2, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006c32:	490b      	ldr	r1, [pc, #44]	@ (8006c60 <MX_LWIP_Init+0xb0>)
  attributes.name = "EthLink";
 8006c34:	f844 0c04 	str.w	r0, [r4, #-4]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006c38:	4812      	ldr	r0, [pc, #72]	@ (8006c84 <MX_LWIP_Init+0xd4>)
  attributes.priority = osPriorityBelowNormal;
 8006c3a:	6193      	str	r3, [r2, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006c3c:	f000 fbf2 	bl	8007424 <osThreadNew>
}
 8006c40:	b005      	add	sp, #20
 8006c42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 8006c46:	f000 bb67 	b.w	8007318 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 8006c4a:	f005 fa73 	bl	800c134 <netif_set_down>
 8006c4e:	e7e0      	b.n	8006c12 <MX_LWIP_Init+0x62>
 8006c50:	6e00a8c0 	.word	0x6e00a8c0
 8006c54:	240004a4 	.word	0x240004a4
 8006c58:	240004a0 	.word	0x240004a0
 8006c5c:	2400049c 	.word	0x2400049c
 8006c60:	240004b4 	.word	0x240004b4
 8006c64:	240004b0 	.word	0x240004b0
 8006c68:	240004ac 	.word	0x240004ac
 8006c6c:	240004a8 	.word	0x240004a8
 8006c70:	0800b571 	.word	0x0800b571
 8006c74:	08006e41 	.word	0x08006e41
 8006c78:	2400047c 	.word	0x2400047c
 8006c7c:	08006bad 	.word	0x08006bad
 8006c80:	080149c0 	.word	0x080149c0
 8006c84:	08007239 	.word	0x08007239

08006c88 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8006c88:	2000      	movs	r0, #0
 8006c8a:	4770      	bx	lr

08006c8c <low_level_output>:
{
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	b08c      	sub	sp, #48	@ 0x30
 8006c90:	460d      	mov	r5, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006c92:	2230      	movs	r2, #48	@ 0x30
 8006c94:	2100      	movs	r1, #0
 8006c96:	4668      	mov	r0, sp
 8006c98:	f00c f9c9 	bl	801302e <memset>
  for(q = p; q != NULL; q = q->next)
 8006c9c:	b1fd      	cbz	r5, 8006cde <low_level_output+0x52>
 8006c9e:	466b      	mov	r3, sp
 8006ca0:	462a      	mov	r2, r5
  uint32_t i = 0U;
 8006ca2:	2000      	movs	r0, #0
    Txbuffer[i].len = q->len;
 8006ca4:	8954      	ldrh	r4, [r2, #10]
    Txbuffer[i].buffer = q->payload;
 8006ca6:	6851      	ldr	r1, [r2, #4]
    if(q->next == NULL)
 8006ca8:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8006caa:	e9c3 1400 	strd	r1, r4, [r3]
    if(i>0)
 8006cae:	b918      	cbnz	r0, 8006cb8 <low_level_output+0x2c>
    if(i >= ETH_TX_DESC_CNT)
 8006cb0:	330c      	adds	r3, #12
    if(q->next == NULL)
 8006cb2:	b162      	cbz	r2, 8006cce <low_level_output+0x42>
    i++;
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	e7f5      	b.n	8006ca4 <low_level_output+0x18>
      Txbuffer[i-1].next = &Txbuffer[i];
 8006cb8:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 8006cbc:	b13a      	cbz	r2, 8006cce <low_level_output+0x42>
    i++;
 8006cbe:	3001      	adds	r0, #1
    if(i >= ETH_TX_DESC_CNT)
 8006cc0:	330c      	adds	r3, #12
 8006cc2:	2804      	cmp	r0, #4
 8006cc4:	d1ee      	bne.n	8006ca4 <low_level_output+0x18>
      return ERR_IF;
 8006cc6:	f06f 000b 	mvn.w	r0, #11
}
 8006cca:	b00c      	add	sp, #48	@ 0x30
 8006ccc:	bd70      	pop	{r4, r5, r6, pc}
      Txbuffer[i].next = NULL;
 8006cce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006cd2:	aa0c      	add	r2, sp, #48	@ 0x30
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8006cda:	f840 3c28 	str.w	r3, [r0, #-40]
  TxConfig.Length = p->tot_len;
 8006cde:	4c0e      	ldr	r4, [pc, #56]	@ (8006d18 <low_level_output+0x8c>)
  pbuf_ref(p);
 8006ce0:	4628      	mov	r0, r5
  TxConfig.Length = p->tot_len;
 8006ce2:	892b      	ldrh	r3, [r5, #8]
  TxConfig.TxBuffer = Txbuffer;
 8006ce4:	f8c4 d008 	str.w	sp, [r4, #8]
  TxConfig.Length = p->tot_len;
 8006ce8:	6063      	str	r3, [r4, #4]
  TxConfig.pData = p;
 8006cea:	6365      	str	r5, [r4, #52]	@ 0x34
  pbuf_ref(p);
 8006cec:	f005 fd1c 	bl	800c728 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	480a      	ldr	r0, [pc, #40]	@ (8006d1c <low_level_output+0x90>)
 8006cf4:	4e0a      	ldr	r6, [pc, #40]	@ (8006d20 <low_level_output+0x94>)
 8006cf6:	f7fc f81d 	bl	8002d34 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8006cfe:	6830      	ldr	r0, [r6, #0]
 8006d00:	f000 fcb8 	bl	8007674 <osSemaphoreAcquire>
 8006d04:	4604      	mov	r4, r0
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d1f7      	bne.n	8006cfa <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8006d0a:	4804      	ldr	r0, [pc, #16]	@ (8006d1c <low_level_output+0x90>)
 8006d0c:	f7fc f8cc 	bl	8002ea8 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8006d10:	4620      	mov	r0, r4
}
 8006d12:	b00c      	add	sp, #48	@ 0x30
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
 8006d16:	bf00      	nop
 8006d18:	24000510 	.word	0x24000510
 8006d1c:	24000548 	.word	0x24000548
 8006d20:	240005f8 	.word	0x240005f8

08006d24 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8006d24:	f7fb b96c 	b.w	8002000 <HAL_GetTick>

08006d28 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8006d28:	4802      	ldr	r0, [pc, #8]	@ (8006d34 <ETH_PHY_IO_Init+0xc>)
{
 8006d2a:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8006d2c:	f7fc fad8 	bl	80032e0 <HAL_ETH_SetMDIOClockRange>
}
 8006d30:	2000      	movs	r0, #0
 8006d32:	bd08      	pop	{r3, pc}
 8006d34:	24000548 	.word	0x24000548

08006d38 <ETH_PHY_IO_ReadReg>:
{
 8006d38:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006d3a:	4806      	ldr	r0, [pc, #24]	@ (8006d54 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8006d3c:	b508      	push	{r3, lr}
 8006d3e:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006d40:	460a      	mov	r2, r1
 8006d42:	4661      	mov	r1, ip
 8006d44:	f7fc f994 	bl	8003070 <HAL_ETH_ReadPHYRegister>
 8006d48:	3800      	subs	r0, #0
 8006d4a:	bf18      	it	ne
 8006d4c:	2001      	movne	r0, #1
}
 8006d4e:	4240      	negs	r0, r0
 8006d50:	bd08      	pop	{r3, pc}
 8006d52:	bf00      	nop
 8006d54:	24000548 	.word	0x24000548

08006d58 <ETH_PHY_IO_WriteReg>:
{
 8006d58:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006d5a:	4806      	ldr	r0, [pc, #24]	@ (8006d74 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8006d5c:	b508      	push	{r3, lr}
 8006d5e:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006d60:	460a      	mov	r2, r1
 8006d62:	4661      	mov	r1, ip
 8006d64:	f7fc f9b2 	bl	80030cc <HAL_ETH_WritePHYRegister>
 8006d68:	3800      	subs	r0, #0
 8006d6a:	bf18      	it	ne
 8006d6c:	2001      	movne	r0, #1
}
 8006d6e:	4240      	negs	r0, r0
 8006d70:	bd08      	pop	{r3, pc}
 8006d72:	bf00      	nop
 8006d74:	24000548 	.word	0x24000548

08006d78 <pbuf_free_custom>:
{
 8006d78:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006d7a:	4808      	ldr	r0, [pc, #32]	@ (8006d9c <pbuf_free_custom+0x24>)
{
 8006d7c:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006d7e:	f005 f825 	bl	800bdcc <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006d82:	4b07      	ldr	r3, [pc, #28]	@ (8006da0 <pbuf_free_custom+0x28>)
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	2a01      	cmp	r2, #1
 8006d88:	d000      	beq.n	8006d8c <pbuf_free_custom+0x14>
}
 8006d8a:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 8006d8c:	4905      	ldr	r1, [pc, #20]	@ (8006da4 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 8006d8e:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8006d90:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8006d92:	701a      	strb	r2, [r3, #0]
}
 8006d94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8006d98:	f000 bc9e 	b.w	80076d8 <osSemaphoreRelease>
 8006d9c:	08014a80 	.word	0x08014a80
 8006da0:	24000600 	.word	0x24000600
 8006da4:	240005fc 	.word	0x240005fc

08006da8 <ethernetif_input>:
{
 8006da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dac:	4c14      	ldr	r4, [pc, #80]	@ (8006e00 <ethernetif_input+0x58>)
 8006dae:	b083      	sub	sp, #12
 8006db0:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8006e04 <ethernetif_input+0x5c>
 8006db4:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8006db6:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006db8:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8006e08 <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	f000 fc57 	bl	8007674 <osSemaphoreAcquire>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d1f8      	bne.n	8006dbc <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8006dca:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8006dce:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f3      	bne.n	8006dbc <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006dd4:	a901      	add	r1, sp, #4
 8006dd6:	4648      	mov	r0, r9
 8006dd8:	f7fb ffdc 	bl	8002d94 <HAL_ETH_ReadData>
  return p;
 8006ddc:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
        if (p != NULL)
 8006de2:	2d00      	cmp	r5, #0
 8006de4:	d0ea      	beq.n	8006dbc <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8006de6:	6933      	ldr	r3, [r6, #16]
 8006de8:	4798      	blx	r3
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d0ed      	beq.n	8006dca <ethernetif_input+0x22>
            pbuf_free(p);
 8006dee:	4628      	mov	r0, r5
 8006df0:	f005 fb22 	bl	800c438 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8006df4:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8006df8:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1de      	bne.n	8006dbc <ethernetif_input+0x14>
 8006dfe:	e7e9      	b.n	8006dd4 <ethernetif_input+0x2c>
 8006e00:	240005fc 	.word	0x240005fc
 8006e04:	24000600 	.word	0x24000600
 8006e08:	24000548 	.word	0x24000548

08006e0c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8006e0c:	4b01      	ldr	r3, [pc, #4]	@ (8006e14 <HAL_ETH_RxCpltCallback+0x8>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	f000 bc62 	b.w	80076d8 <osSemaphoreRelease>
 8006e14:	240005fc 	.word	0x240005fc

08006e18 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8006e18:	4b01      	ldr	r3, [pc, #4]	@ (8006e20 <HAL_ETH_TxCpltCallback+0x8>)
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	f000 bc5c 	b.w	80076d8 <osSemaphoreRelease>
 8006e20:	240005f8 	.word	0x240005f8

08006e24 <HAL_ETH_ErrorCallback>:
{
 8006e24:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8006e26:	f7fc fbb7 	bl	8003598 <HAL_ETH_GetDMAError>
 8006e2a:	0603      	lsls	r3, r0, #24
 8006e2c:	d400      	bmi.n	8006e30 <HAL_ETH_ErrorCallback+0xc>
}
 8006e2e:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8006e30:	4b02      	ldr	r3, [pc, #8]	@ (8006e3c <HAL_ETH_ErrorCallback+0x18>)
 8006e32:	6818      	ldr	r0, [r3, #0]
}
 8006e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8006e38:	f000 bc4e 	b.w	80076d8 <osSemaphoreRelease>
 8006e3c:	240005fc 	.word	0x240005fc

08006e40 <ethernetif_init>:
{
 8006e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e44:	4604      	mov	r4, r0
{
 8006e46:	b0a5      	sub	sp, #148	@ 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	f000 80b6 	beq.w	8006fba <ethernetif_init+0x17a>
  netif->linkoutput = low_level_output;
 8006e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8006fcc <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 8006e50:	f247 4173 	movw	r1, #29811	@ 0x7473
  netif->output = etharp_output;
 8006e54:	4a5e      	ldr	r2, [pc, #376]	@ (8006fd0 <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 8006e56:	a80b      	add	r0, sp, #44	@ 0x2c
  netif->name[0] = IFNAME0;
 8006e58:	85e1      	strh	r1, [r4, #46]	@ 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 8006e5a:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8006e5c:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8006e5e:	2264      	movs	r2, #100	@ 0x64
  netif->linkoutput = low_level_output;
 8006e60:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8006e62:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8006e64:	f00c f8e3 	bl	801302e <memset>
  heth.Instance = ETH;
 8006e68:	4d5a      	ldr	r5, [pc, #360]	@ (8006fd4 <ethernetif_init+0x194>)
 8006e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd8 <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006e6c:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006e6e:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8007018 <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006e72:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8006e74:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8006e76:	4b59      	ldr	r3, [pc, #356]	@ (8006fdc <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 8006e78:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 8006e7c:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8006e7e:	4b58      	ldr	r3, [pc, #352]	@ (8006fe0 <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 8006e80:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8006e84:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006e86:	4b57      	ldr	r3, [pc, #348]	@ (8006fe4 <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006e88:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 8006e8a:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8006e8c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006e90:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006e92:	f7fc fa67 	bl	8003364 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006e96:	2234      	movs	r2, #52	@ 0x34
 8006e98:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006e9a:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006e9c:	4648      	mov	r0, r9
 8006e9e:	f00c f8c6 	bl	801302e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006ea2:	2321      	movs	r3, #33	@ 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006ea4:	4850      	ldr	r0, [pc, #320]	@ (8006fe8 <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006ea6:	f849 3c04 	str.w	r3, [r9, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006eaa:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8006eae:	f8c9 3010 	str.w	r3, [r9, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006eb2:	f004 ff13 	bl	800bcdc <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006eb6:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006eb8:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006eba:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006ebc:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006ec6:	785a      	ldrb	r2, [r3, #1]
 8006ec8:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006ecc:	789a      	ldrb	r2, [r3, #2]
 8006ece:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006ed2:	78da      	ldrb	r2, [r3, #3]
 8006ed4:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006ed8:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006eda:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006ede:	f884 102a 	strb.w	r1, [r4, #42]	@ 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006ee2:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006ee4:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006ee6:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006eea:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8006eee:	f240 53dc 	movw	r3, #1500	@ 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006ef2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006ef6:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8006ef8:	84a3      	strh	r3, [r4, #36]	@ 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006efa:	f000 fb6f 	bl	80075dc <osSemaphoreNew>
 8006efe:	4b3b      	ldr	r3, [pc, #236]	@ (8006fec <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006f00:	4632      	mov	r2, r6
 8006f02:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006f04:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006f06:	4638      	mov	r0, r7
 8006f08:	f000 fb68 	bl	80075dc <osSemaphoreNew>
 8006f0c:	4b38      	ldr	r3, [pc, #224]	@ (8006ff0 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006f0e:	4631      	mov	r1, r6
 8006f10:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006f12:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006f14:	a803      	add	r0, sp, #12
 8006f16:	f00c f88a 	bl	801302e <memset>
  attributes.name = "EthIf";
 8006f1a:	4b36      	ldr	r3, [pc, #216]	@ (8006ff4 <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8006f1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8006f20:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8006f22:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8006f24:	2330      	movs	r3, #48	@ 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8006f26:	4834      	ldr	r0, [pc, #208]	@ (8006ff8 <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 8006f28:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	f000 fa79 	bl	8007424 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006f32:	4932      	ldr	r1, [pc, #200]	@ (8006ffc <ethernetif_init+0x1bc>)
 8006f34:	4832      	ldr	r0, [pc, #200]	@ (8007000 <ethernetif_init+0x1c0>)
 8006f36:	f7fa ff55 	bl	8001de4 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8006f3a:	4831      	ldr	r0, [pc, #196]	@ (8007000 <ethernetif_init+0x1c0>)
 8006f3c:	f7fa ff6c 	bl	8001e18 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8006f40:	f1b8 0f00 	cmp.w	r8, #0
 8006f44:	d124      	bne.n	8006f90 <ethernetif_init+0x150>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006f46:	482e      	ldr	r0, [pc, #184]	@ (8007000 <ethernetif_init+0x1c0>)
 8006f48:	f7fa ffd0 	bl	8001eec <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006f4c:	42b8      	cmp	r0, r7
 8006f4e:	dd2a      	ble.n	8006fa6 <ethernetif_init+0x166>
      switch (PHYLinkState)
 8006f50:	3803      	subs	r0, #3
 8006f52:	2802      	cmp	r0, #2
 8006f54:	d822      	bhi.n	8006f9c <ethernetif_init+0x15c>
 8006f56:	4a2b      	ldr	r2, [pc, #172]	@ (8007004 <ethernetif_init+0x1c4>)
 8006f58:	4b2b      	ldr	r3, [pc, #172]	@ (8007008 <ethernetif_init+0x1c8>)
 8006f5a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8006f5e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006f62:	a90b      	add	r1, sp, #44	@ 0x2c
 8006f64:	481b      	ldr	r0, [pc, #108]	@ (8006fd4 <ethernetif_init+0x194>)
 8006f66:	f7fc f8e3 	bl	8003130 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006f6a:	a90b      	add	r1, sp, #44	@ 0x2c
 8006f6c:	4819      	ldr	r0, [pc, #100]	@ (8006fd4 <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 8006f6e:	e9cd 5610 	strd	r5, r6, [sp, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006f72:	f7fc f9a7 	bl	80032c4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006f76:	4817      	ldr	r0, [pc, #92]	@ (8006fd4 <ethernetif_init+0x194>)
 8006f78:	f7fb fe48 	bl	8002c0c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f005 f8b5 	bl	800c0ec <netif_set_up>
    netif_set_link_up(netif);
 8006f82:	4620      	mov	r0, r4
 8006f84:	f005 f8fa 	bl	800c17c <netif_set_link_up>
}
 8006f88:	2000      	movs	r0, #0
 8006f8a:	b025      	add	sp, #148	@ 0x94
 8006f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8006f90:	f7fa fb76 	bl	8001680 <Error_Handler>
}
 8006f94:	2000      	movs	r0, #0
 8006f96:	b025      	add	sp, #148	@ 0x94
 8006f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8006f9c:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
 8006fa0:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8006fa4:	e7dd      	b.n	8006f62 <ethernetif_init+0x122>
      netif_set_link_down(netif);
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f005 f910 	bl	800c1cc <netif_set_link_down>
      netif_set_down(netif);
 8006fac:	4620      	mov	r0, r4
 8006fae:	f005 f8c1 	bl	800c134 <netif_set_down>
}
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	b025      	add	sp, #148	@ 0x94
 8006fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006fba:	4b14      	ldr	r3, [pc, #80]	@ (800700c <ethernetif_init+0x1cc>)
 8006fbc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006fc0:	4913      	ldr	r1, [pc, #76]	@ (8007010 <ethernetif_init+0x1d0>)
 8006fc2:	4814      	ldr	r0, [pc, #80]	@ (8007014 <ethernetif_init+0x1d4>)
 8006fc4:	f00b ff94 	bl	8012ef0 <iprintf>
 8006fc8:	e741      	b.n	8006e4e <ethernetif_init+0xe>
 8006fca:	bf00      	nop
 8006fcc:	08006c8d 	.word	0x08006c8d
 8006fd0:	080119e9 	.word	0x080119e9
 8006fd4:	24000548 	.word	0x24000548
 8006fd8:	40028000 	.word	0x40028000
 8006fdc:	00e18000 	.word	0x00e18000
 8006fe0:	30040060 	.word	0x30040060
 8006fe4:	30040000 	.word	0x30040000
 8006fe8:	08014a80 	.word	0x08014a80
 8006fec:	240005fc 	.word	0x240005fc
 8006ff0:	240005f8 	.word	0x240005f8
 8006ff4:	080149f4 	.word	0x080149f4
 8006ff8:	08006da9 	.word	0x08006da9
 8006ffc:	24000018 	.word	0x24000018
 8007000:	240004f0 	.word	0x240004f0
 8007004:	08014a74 	.word	0x08014a74
 8007008:	08014a68 	.word	0x08014a68
 800700c:	080149c8 	.word	0x080149c8
 8007010:	080149e4 	.word	0x080149e4
 8007014:	08014150 	.word	0x08014150
 8007018:	24000514 	.word	0x24000514

0800701c <sys_now>:
  return HAL_GetTick();
 800701c:	f7fa bff0 	b.w	8002000 <HAL_GetTick>

08007020 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8007020:	4b4d      	ldr	r3, [pc, #308]	@ (8007158 <HAL_ETH_MspInit+0x138>)
 8007022:	6802      	ldr	r2, [r0, #0]
{
 8007024:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8007026:	429a      	cmp	r2, r3
{
 8007028:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800702a:	f04f 0400 	mov.w	r4, #0
 800702e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8007032:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8007036:	940c      	str	r4, [sp, #48]	@ 0x30
  if(ethHandle->Instance==ETH)
 8007038:	d001      	beq.n	800703e <HAL_ETH_MspInit+0x1e>
}
 800703a:	b00f      	add	sp, #60	@ 0x3c
 800703c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800703e:	4b47      	ldr	r3, [pc, #284]	@ (800715c <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007040:	2603      	movs	r6, #3
 8007042:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007044:	a908      	add	r1, sp, #32
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007046:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704a:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800704c:	4844      	ldr	r0, [pc, #272]	@ (8007160 <HAL_ETH_MspInit+0x140>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800704e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007052:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8007056:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800705a:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800705e:	9201      	str	r2, [sp, #4]
 8007060:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007062:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8007066:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800706a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800706e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8007072:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8007076:	9202      	str	r2, [sp, #8]
 8007078:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800707a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800707e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007082:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8007086:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800708a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800708e:	9203      	str	r2, [sp, #12]
 8007090:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007092:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007096:	f042 0204 	orr.w	r2, r2, #4
 800709a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800709e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070a2:	f002 0204 	and.w	r2, r2, #4
 80070a6:	9204      	str	r2, [sp, #16]
 80070a8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070ba:	f002 0201 	and.w	r2, r2, #1
 80070be:	9205      	str	r2, [sp, #20]
 80070c0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070c6:	f042 0202 	orr.w	r2, r2, #2
 80070ca:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070d2:	f002 0202 	and.w	r2, r2, #2
 80070d6:	9206      	str	r2, [sp, #24]
 80070d8:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80070da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070e2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80070e6:	2232      	movs	r2, #50	@ 0x32
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80070e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80070f2:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070f4:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80070f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80070fc:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070fe:	f7fc fa4f 	bl	80035a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007102:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007104:	a908      	add	r1, sp, #32
 8007106:	4817      	ldr	r0, [pc, #92]	@ (8007164 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007108:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800710a:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710c:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800710e:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007112:	f7fc fa45 	bl	80035a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800711a:	a908      	add	r1, sp, #32
 800711c:	4812      	ldr	r0, [pc, #72]	@ (8007168 <HAL_ETH_MspInit+0x148>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800711e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007120:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007124:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007128:	f7fc fa3a 	bl	80035a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800712c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007130:	a908      	add	r1, sp, #32
 8007132:	480e      	ldr	r0, [pc, #56]	@ (800716c <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007134:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007136:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007138:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713a:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800713e:	f7fc fa2f 	bl	80035a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007142:	4622      	mov	r2, r4
 8007144:	2105      	movs	r1, #5
 8007146:	203d      	movs	r0, #61	@ 0x3d
 8007148:	f7fa ff82 	bl	8002050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800714c:	203d      	movs	r0, #61	@ 0x3d
 800714e:	f7fa ffbb 	bl	80020c8 <HAL_NVIC_EnableIRQ>
}
 8007152:	b00f      	add	sp, #60	@ 0x3c
 8007154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007156:	bf00      	nop
 8007158:	40028000 	.word	0x40028000
 800715c:	58024400 	.word	0x58024400
 8007160:	58020800 	.word	0x58020800
 8007164:	58020000 	.word	0x58020000
 8007168:	58020400 	.word	0x58020400
 800716c:	58021800 	.word	0x58021800

08007170 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007170:	b530      	push	{r4, r5, lr}
 8007172:	4604      	mov	r4, r0
 8007174:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007176:	480d      	ldr	r0, [pc, #52]	@ (80071ac <HAL_ETH_RxAllocateCallback+0x3c>)
 8007178:	f004 fdf8 	bl	800bd6c <memp_malloc_pool>
  if (p)
 800717c:	4603      	mov	r3, r0
 800717e:	b178      	cbz	r0, 80071a0 <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007180:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8007184:	4a0a      	ldr	r2, [pc, #40]	@ (80071b0 <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007186:	2100      	movs	r1, #0
 8007188:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800718c:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 800718e:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007190:	2241      	movs	r2, #65	@ 0x41
 8007192:	9001      	str	r0, [sp, #4]
 8007194:	4608      	mov	r0, r1
 8007196:	9500      	str	r5, [sp, #0]
 8007198:	f005 f89c 	bl	800c2d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800719c:	b003      	add	sp, #12
 800719e:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 80071a0:	4a04      	ldr	r2, [pc, #16]	@ (80071b4 <HAL_ETH_RxAllocateCallback+0x44>)
 80071a2:	2101      	movs	r1, #1
    *buff = NULL;
 80071a4:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 80071a6:	7011      	strb	r1, [r2, #0]
}
 80071a8:	b003      	add	sp, #12
 80071aa:	bd30      	pop	{r4, r5, pc}
 80071ac:	08014a80 	.word	0x08014a80
 80071b0:	08006d79 	.word	0x08006d79
 80071b4:	24000600 	.word	0x24000600

080071b8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80071b8:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 80071ba:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80071bc:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 80071c0:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 80071c4:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 80071c8:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 80071cc:	6805      	ldr	r5, [r0, #0]
 80071ce:	b1f5      	cbz	r5, 800720e <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80071d0:	680d      	ldr	r5, [r1, #0]
 80071d2:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 80071d4:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80071d6:	6801      	ldr	r1, [r0, #0]
 80071d8:	b129      	cbz	r1, 80071e6 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 80071da:	8908      	ldrh	r0, [r1, #8]
 80071dc:	4418      	add	r0, r3
 80071de:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80071e0:	6809      	ldr	r1, [r1, #0]
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d1f9      	bne.n	80071da <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80071e6:	b183      	cbz	r3, 800720a <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80071e8:	f002 011f 	and.w	r1, r2, #31
 80071ec:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80071ee:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80071f2:	4808      	ldr	r0, [pc, #32]	@ (8007214 <HAL_ETH_RxLinkCallback+0x5c>)
 80071f4:	4411      	add	r1, r2
 80071f6:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80071fa:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80071fc:	1a8b      	subs	r3, r1, r2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dcf9      	bgt.n	80071f6 <HAL_ETH_RxLinkCallback+0x3e>
 8007202:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007206:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 800720a:	bc30      	pop	{r4, r5}
 800720c:	4770      	bx	lr
    *ppStart = p;
 800720e:	6004      	str	r4, [r0, #0]
 8007210:	e7e0      	b.n	80071d4 <HAL_ETH_RxLinkCallback+0x1c>
 8007212:	bf00      	nop
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007218:	f005 b90e 	b.w	800c438 <pbuf_free>

0800721c <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 800721c:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 800721e:	4804      	ldr	r0, [pc, #16]	@ (8007230 <sys_lock_tcpip_core+0x14>)
 8007220:	f00b fd04 	bl	8012c2c <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8007224:	f000 f942 	bl	80074ac <osThreadGetId>
 8007228:	4b02      	ldr	r3, [pc, #8]	@ (8007234 <sys_lock_tcpip_core+0x18>)
 800722a:	6018      	str	r0, [r3, #0]
}
 800722c:	bd08      	pop	{r3, pc}
 800722e:	bf00      	nop
 8007230:	240091f0 	.word	0x240091f0
 8007234:	240004ec 	.word	0x240004ec

08007238 <ethernet_link_thread>:
{
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	b09b      	sub	sp, #108	@ 0x6c
  LOCK_TCPIP_CORE();
 800723e:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8007242:	2264      	movs	r2, #100	@ 0x64
 8007244:	2100      	movs	r1, #0
{
 8007246:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8007248:	4668      	mov	r0, sp
 800724a:	f00b fef0 	bl	801302e <memset>
  LOCK_TCPIP_CORE();
 800724e:	46cb      	mov	fp, r9
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007250:	46ca      	mov	sl, r9
 8007252:	4d2b      	ldr	r5, [pc, #172]	@ (8007300 <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007254:	4f2b      	ldr	r7, [pc, #172]	@ (8007304 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8007256:	f7ff ffe1 	bl	800721c <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800725a:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8007314 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 800725e:	4c2a      	ldr	r4, [pc, #168]	@ (8007308 <ethernet_link_thread+0xd0>)
 8007260:	e02f      	b.n	80072c2 <ethernet_link_thread+0x8a>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007262:	2801      	cmp	r0, #1
 8007264:	dd41      	ble.n	80072ea <ethernet_link_thread+0xb2>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007266:	075a      	lsls	r2, r3, #29
 8007268:	d41d      	bmi.n	80072a6 <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 800726a:	3802      	subs	r0, #2
 800726c:	2803      	cmp	r0, #3
 800726e:	d838      	bhi.n	80072e2 <ethernet_link_thread+0xaa>
 8007270:	4b26      	ldr	r3, [pc, #152]	@ (800730c <ethernet_link_thread+0xd4>)
 8007272:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8007276:	4b26      	ldr	r3, [pc, #152]	@ (8007310 <ethernet_link_thread+0xd8>)
 8007278:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800727c:	4669      	mov	r1, sp
 800727e:	4640      	mov	r0, r8
 8007280:	f7fb ff56 	bl	8003130 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007284:	4669      	mov	r1, sp
 8007286:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8007288:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 800728c:	e9cd 9b05 	strd	r9, fp, [sp, #20]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007290:	f7fc f818 	bl	80032c4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007294:	4640      	mov	r0, r8
 8007296:	f7fb fcb9 	bl	8002c0c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800729a:	4630      	mov	r0, r6
 800729c:	f004 ff26 	bl	800c0ec <netif_set_up>
      netif_set_link_up(netif);
 80072a0:	4630      	mov	r0, r6
 80072a2:	f004 ff6b 	bl	800c17c <netif_set_link_up>
	lwip_core_lock_holder_thread_id = 0;
 80072a6:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 80072a8:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 80072aa:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80072ac:	f00b fcc4 	bl	8012c38 <sys_mutex_unlock>
  osDelay(100);
 80072b0:	2064      	movs	r0, #100	@ 0x64
 80072b2:	f000 f8fd 	bl	80074b0 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 80072b6:	4620      	mov	r0, r4
 80072b8:	f00b fcb8 	bl	8012c2c <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80072bc:	f000 f8f6 	bl	80074ac <osThreadGetId>
 80072c0:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80072c2:	4638      	mov	r0, r7
 80072c4:	f7fa fe12 	bl	8001eec <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80072c8:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 80072cc:	0759      	lsls	r1, r3, #29
 80072ce:	ea4f 0293 	mov.w	r2, r3, lsr #2
 80072d2:	d4c6      	bmi.n	8007262 <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80072d4:	07d3      	lsls	r3, r2, #31
 80072d6:	d4e6      	bmi.n	80072a6 <ethernet_link_thread+0x6e>
 80072d8:	2801      	cmp	r0, #1
 80072da:	dde4      	ble.n	80072a6 <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 80072dc:	3802      	subs	r0, #2
 80072de:	2803      	cmp	r0, #3
 80072e0:	d9c6      	bls.n	8007270 <ethernet_link_thread+0x38>
    if(linkchanged)
 80072e2:	f1ba 0f00 	cmp.w	sl, #0
 80072e6:	d0de      	beq.n	80072a6 <ethernet_link_thread+0x6e>
 80072e8:	e7c8      	b.n	800727c <ethernet_link_thread+0x44>
    HAL_ETH_Stop_IT(&heth);
 80072ea:	4640      	mov	r0, r8
 80072ec:	f7fb fcde 	bl	8002cac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80072f0:	4630      	mov	r0, r6
 80072f2:	f004 ff1f 	bl	800c134 <netif_set_down>
    netif_set_link_down(netif);
 80072f6:	4630      	mov	r0, r6
 80072f8:	f004 ff68 	bl	800c1cc <netif_set_link_down>
 80072fc:	e7d3      	b.n	80072a6 <ethernet_link_thread+0x6e>
 80072fe:	bf00      	nop
 8007300:	240004ec 	.word	0x240004ec
 8007304:	240004f0 	.word	0x240004f0
 8007308:	240091f0 	.word	0x240091f0
 800730c:	08014a58 	.word	0x08014a58
 8007310:	08014a48 	.word	0x08014a48
 8007314:	24000548 	.word	0x24000548

08007318 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 8007318:	4b02      	ldr	r3, [pc, #8]	@ (8007324 <sys_unlock_tcpip_core+0xc>)
 800731a:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 800731c:	4802      	ldr	r0, [pc, #8]	@ (8007328 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 800731e:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8007320:	f00b bc8a 	b.w	8012c38 <sys_mutex_unlock>
 8007324:	240004ec 	.word	0x240004ec
 8007328:	240091f0 	.word	0x240091f0

0800732c <sys_check_core_locking>:
}

void sys_check_core_locking(void){
 800732c:	b538      	push	{r3, r4, r5, lr}
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 800732e:	4b11      	ldr	r3, [pc, #68]	@ (8007374 <sys_check_core_locking+0x48>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	b9ab      	cbnz	r3, 8007364 <sys_check_core_locking+0x38>

  if (lwip_tcpip_thread_id != 0) {
 8007338:	4b0f      	ldr	r3, [pc, #60]	@ (8007378 <sys_check_core_locking+0x4c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	b18b      	cbz	r3, 8007362 <sys_check_core_locking+0x36>
	  osThreadId_t current_thread_id = osThreadGetId();

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 800733e:	4d0f      	ldr	r5, [pc, #60]	@ (800737c <sys_check_core_locking+0x50>)
	  osThreadId_t current_thread_id = osThreadGetId();
 8007340:	f000 f8b4 	bl	80074ac <osThreadGetId>
 8007344:	4604      	mov	r4, r0
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	4283      	cmp	r3, r0
 800734a:	d00a      	beq.n	8007362 <sys_check_core_locking+0x36>
 800734c:	4b0c      	ldr	r3, [pc, #48]	@ (8007380 <sys_check_core_locking+0x54>)
 800734e:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007352:	490c      	ldr	r1, [pc, #48]	@ (8007384 <sys_check_core_locking+0x58>)
 8007354:	480c      	ldr	r0, [pc, #48]	@ (8007388 <sys_check_core_locking+0x5c>)
 8007356:	f00b fdcb 	bl	8012ef0 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	42a3      	cmp	r3, r4
 800735e:	d000      	beq.n	8007362 <sys_check_core_locking+0x36>
 8007360:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8007362:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8007364:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <sys_check_core_locking+0x54>)
 8007366:	f44f 7273 	mov.w	r2, #972	@ 0x3cc
 800736a:	4908      	ldr	r1, [pc, #32]	@ (800738c <sys_check_core_locking+0x60>)
 800736c:	4806      	ldr	r0, [pc, #24]	@ (8007388 <sys_check_core_locking+0x5c>)
 800736e:	f00b fdbf 	bl	8012ef0 <iprintf>
 8007372:	e7e1      	b.n	8007338 <sys_check_core_locking+0xc>
 8007374:	e000ed00 	.word	0xe000ed00
 8007378:	240004e8 	.word	0x240004e8
 800737c:	240004ec 	.word	0x240004ec
 8007380:	080149c8 	.word	0x080149c8
 8007384:	08014a24 	.word	0x08014a24
 8007388:	08014150 	.word	0x08014150
 800738c:	080149fc 	.word	0x080149fc

08007390 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8007390:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 8007392:	f000 f88b 	bl	80074ac <osThreadGetId>
 8007396:	4b01      	ldr	r3, [pc, #4]	@ (800739c <sys_mark_tcpip_thread+0xc>)
 8007398:	6018      	str	r0, [r3, #0]
}
 800739a:	bd08      	pop	{r3, pc}
 800739c:	240004e8 	.word	0x240004e8

080073a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80073a0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80073a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073a6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80073a8:	f001 fe2c 	bl	8009004 <xTaskGetSchedulerState>
 80073ac:	2801      	cmp	r0, #1
 80073ae:	d100      	bne.n	80073b2 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80073b0:	bd08      	pop	{r3, pc}
 80073b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80073b6:	f002 b9fd 	b.w	80097b4 <xPortSysTickHandler>
 80073ba:	bf00      	nop

080073bc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073bc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80073c0:	b92b      	cbnz	r3, 80073ce <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <osKernelInitialize+0x20>)
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	b928      	cbnz	r0, 80073d4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073c8:	2201      	movs	r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073cc:	4770      	bx	lr
    stat = osErrorISR;
 80073ce:	f06f 0005 	mvn.w	r0, #5
 80073d2:	4770      	bx	lr
    } else {
      stat = osError;
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	24001358 	.word	0x24001358

080073e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073e0:	b510      	push	{r4, lr}
 80073e2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80073e6:	b974      	cbnz	r4, 8007406 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80073e8:	4b08      	ldr	r3, [pc, #32]	@ (800740c <osKernelStart+0x2c>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	2a01      	cmp	r2, #1
 80073ee:	d107      	bne.n	8007400 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073f0:	4907      	ldr	r1, [pc, #28]	@ (8007410 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073f2:	2202      	movs	r2, #2
 80073f4:	77cc      	strb	r4, [r1, #31]
 80073f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073f8:	f001 faf2 	bl	80089e0 <vTaskStartScheduler>
      stat = osOK;
 80073fc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80073fe:	bd10      	pop	{r4, pc}
      stat = osError;
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007404:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8007406:	f06f 0005 	mvn.w	r0, #5
}
 800740a:	bd10      	pop	{r4, pc}
 800740c:	24001358 	.word	0x24001358
 8007410:	e000ed00 	.word	0xe000ed00

08007414 <osKernelGetTickCount>:
 8007414:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8007418:	b10b      	cbz	r3, 800741e <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 800741a:	f001 bb3f 	b.w	8008a9c <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 800741e:	f001 bb37 	b.w	8008a90 <xTaskGetTickCount>
 8007422:	bf00      	nop

08007424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007426:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007428:	b087      	sub	sp, #28
  hTask = NULL;
 800742a:	9505      	str	r5, [sp, #20]
 800742c:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8007430:	b300      	cbz	r0, 8007474 <osThreadNew+0x50>
 8007432:	b9fb      	cbnz	r3, 8007474 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007434:	4614      	mov	r4, r2
 8007436:	b302      	cbz	r2, 800747a <osThreadNew+0x56>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007438:	6996      	ldr	r6, [r2, #24]
 800743a:	b9c6      	cbnz	r6, 800746e <osThreadNew+0x4a>
 800743c:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	07db      	lsls	r3, r3, #31
 8007442:	d417      	bmi.n	8007474 <osThreadNew+0x50>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007444:	6963      	ldr	r3, [r4, #20]
 8007446:	b333      	cbz	r3, 8007496 <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007448:	089a      	lsrs	r2, r3, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800744a:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 800744c:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007450:	68e7      	ldr	r7, [r4, #12]
 8007452:	b31d      	cbz	r5, 800749c <osThreadNew+0x78>
 8007454:	2fa7      	cmp	r7, #167	@ 0xa7
 8007456:	d90d      	bls.n	8007474 <osThreadNew+0x50>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007458:	6924      	ldr	r4, [r4, #16]
 800745a:	b15b      	cbz	r3, 8007474 <osThreadNew+0x50>
 800745c:	b154      	cbz	r4, 8007474 <osThreadNew+0x50>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800745e:	460b      	mov	r3, r1
 8007460:	9600      	str	r6, [sp, #0]
 8007462:	4661      	mov	r1, ip
 8007464:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8007468:	f001 fa50 	bl	800890c <xTaskCreateStatic>
 800746c:	e003      	b.n	8007476 <osThreadNew+0x52>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800746e:	1e72      	subs	r2, r6, #1
 8007470:	2a37      	cmp	r2, #55	@ 0x37
 8007472:	d9e4      	bls.n	800743e <osThreadNew+0x1a>
        return (NULL);
 8007474:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8007476:	b007      	add	sp, #28
 8007478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747a:	f44f 7280 	mov.w	r2, #256	@ 0x100
    prio  = (UBaseType_t)osPriorityNormal;
 800747e:	2618      	movs	r6, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007480:	460b      	mov	r3, r1
 8007482:	4621      	mov	r1, r4
 8007484:	ac05      	add	r4, sp, #20
 8007486:	9600      	str	r6, [sp, #0]
 8007488:	9401      	str	r4, [sp, #4]
 800748a:	f001 fa79 	bl	8008980 <xTaskCreate>
 800748e:	2801      	cmp	r0, #1
 8007490:	d1f0      	bne.n	8007474 <osThreadNew+0x50>
  return ((osThreadId_t)hTask);
 8007492:	9805      	ldr	r0, [sp, #20]
 8007494:	e7ef      	b.n	8007476 <osThreadNew+0x52>
    stack = configMINIMAL_STACK_SIZE;
 8007496:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800749a:	e7d6      	b.n	800744a <osThreadNew+0x26>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800749c:	2f00      	cmp	r7, #0
 800749e:	d1e9      	bne.n	8007474 <osThreadNew+0x50>
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e6      	bne.n	8007474 <osThreadNew+0x50>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074a6:	b292      	uxth	r2, r2
 80074a8:	4664      	mov	r4, ip
 80074aa:	e7e9      	b.n	8007480 <osThreadNew+0x5c>

080074ac <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80074ac:	f001 bda4 	b.w	8008ff8 <xTaskGetCurrentTaskHandle>

080074b0 <osDelay>:
 80074b0:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80074b4:	b93a      	cbnz	r2, 80074c6 <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 80074b6:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80074b8:	b908      	cbnz	r0, 80074be <osDelay+0xe>
    stat = osOK;
 80074ba:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80074bc:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80074be:	f001 fc43 	bl	8008d48 <vTaskDelay>
    stat = osOK;
 80074c2:	2000      	movs	r0, #0
}
 80074c4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80074c6:	f06f 0005 	mvn.w	r0, #5
}
 80074ca:	4770      	bx	lr

080074cc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80074cc:	b530      	push	{r4, r5, lr}
 80074ce:	b083      	sub	sp, #12
 80074d0:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80074d4:	b9bd      	cbnz	r5, 8007506 <osMutexNew+0x3a>
    if (attr != NULL) {
 80074d6:	4604      	mov	r4, r0
 80074d8:	b1c0      	cbz	r0, 800750c <osMutexNew+0x40>
      type = attr->attr_bits;
 80074da:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80074dc:	072b      	lsls	r3, r5, #28
 80074de:	d412      	bmi.n	8007506 <osMutexNew+0x3a>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074e0:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80074e2:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074e6:	68c3      	ldr	r3, [r0, #12]
 80074e8:	b309      	cbz	r1, 800752e <osMutexNew+0x62>
 80074ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80074ec:	d90b      	bls.n	8007506 <osMutexNew+0x3a>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80074ee:	b345      	cbz	r5, 8007542 <osMutexNew+0x76>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80074f0:	2004      	movs	r0, #4
 80074f2:	f000 fcad 	bl	8007e50 <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80074f6:	b130      	cbz	r0, 8007506 <osMutexNew+0x3a>
        if (attr != NULL) {
          name = attr->name;
 80074f8:	6824      	ldr	r4, [r4, #0]
 80074fa:	e00c      	b.n	8007516 <osMutexNew+0x4a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80074fc:	2004      	movs	r0, #4
 80074fe:	f000 fcfd 	bl	8007efc <xQueueCreateMutex>
      if (hMutex != NULL) {
 8007502:	2800      	cmp	r0, #0
 8007504:	d1f8      	bne.n	80074f8 <osMutexNew+0x2c>
  hMutex = NULL;
 8007506:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8007508:	b003      	add	sp, #12
 800750a:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
 800750c:	2001      	movs	r0, #1
 800750e:	f000 fcf5 	bl	8007efc <xQueueCreateMutex>
      if (hMutex != NULL) {
 8007512:	2800      	cmp	r0, #0
 8007514:	d0f7      	beq.n	8007506 <osMutexNew+0x3a>
        vQueueAddToRegistry (hMutex, name);
 8007516:	4621      	mov	r1, r4
 8007518:	9001      	str	r0, [sp, #4]
 800751a:	f001 f827 	bl	800856c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800751e:	9801      	ldr	r0, [sp, #4]
 8007520:	f015 0f01 	tst.w	r5, #1
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007524:	bf18      	it	ne
 8007526:	f040 0001 	orrne.w	r0, r0, #1
}
 800752a:	b003      	add	sp, #12
 800752c:	bd30      	pop	{r4, r5, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e9      	bne.n	8007506 <osMutexNew+0x3a>
            if (rmtx != 0U) {
 8007532:	2d00      	cmp	r5, #0
 8007534:	d1e2      	bne.n	80074fc <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8007536:	2001      	movs	r0, #1
 8007538:	f000 fce0 	bl	8007efc <xQueueCreateMutex>
      if (hMutex != NULL) {
 800753c:	2800      	cmp	r0, #0
 800753e:	d1db      	bne.n	80074f8 <osMutexNew+0x2c>
 8007540:	e7e1      	b.n	8007506 <osMutexNew+0x3a>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007542:	2001      	movs	r0, #1
 8007544:	f000 fc84 	bl	8007e50 <xQueueCreateMutexStatic>
      if (hMutex != NULL) {
 8007548:	2800      	cmp	r0, #0
 800754a:	d1d5      	bne.n	80074f8 <osMutexNew+0x2c>
 800754c:	e7db      	b.n	8007506 <osMutexNew+0x3a>
 800754e:	bf00      	nop

08007550 <osMutexAcquire>:
 8007550:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8007554:	b9d2      	cbnz	r2, 800758c <osMutexAcquire+0x3c>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8007556:	2801      	cmp	r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4603      	mov	r3, r0
  else if (hMutex == NULL) {
 800755c:	d919      	bls.n	8007592 <osMutexAcquire+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800755e:	f003 0501 	and.w	r5, r3, #1
 8007562:	460c      	mov	r4, r1
 8007564:	f020 0001 	bic.w	r0, r0, #1
 8007568:	b955      	cbnz	r5, 8007580 <osMutexAcquire+0x30>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800756a:	f000 fe5f 	bl	800822c <xQueueSemaphoreTake>
 800756e:	2801      	cmp	r0, #1
 8007570:	d00a      	beq.n	8007588 <osMutexAcquire+0x38>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8007572:	2c00      	cmp	r4, #0
 8007574:	bf14      	ite	ne
 8007576:	f06f 0001 	mvnne.w	r0, #1
 800757a:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 800757e:	bd38      	pop	{r3, r4, r5, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007580:	f000 ff2e 	bl	80083e0 <xQueueTakeMutexRecursive>
 8007584:	2801      	cmp	r0, #1
 8007586:	d1f4      	bne.n	8007572 <osMutexAcquire+0x22>
  stat = osOK;
 8007588:	2000      	movs	r0, #0
}
 800758a:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 800758c:	f06f 0005 	mvn.w	r0, #5
}
 8007590:	4770      	bx	lr
    stat = osErrorParameter;
 8007592:	f06f 0003 	mvn.w	r0, #3
}
 8007596:	bd38      	pop	{r3, r4, r5, pc}

08007598 <osMutexRelease>:
 8007598:	f3ef 8105 	mrs	r1, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 800759c:	b9b9      	cbnz	r1, 80075ce <osMutexRelease+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800759e:	2801      	cmp	r0, #1
 80075a0:	4602      	mov	r2, r0
 80075a2:	d917      	bls.n	80075d4 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80075a4:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80075a8:	b508      	push	{r3, lr}
 80075aa:	f002 0301 	and.w	r3, r2, #1
    if (rmtx != 0U) {
 80075ae:	b93b      	cbnz	r3, 80075c0 <osMutexRelease+0x28>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80075b0:	461a      	mov	r2, r3
 80075b2:	4619      	mov	r1, r3
 80075b4:	f000 fb88 	bl	8007cc8 <xQueueGenericSend>
 80075b8:	2801      	cmp	r0, #1
 80075ba:	d105      	bne.n	80075c8 <osMutexRelease+0x30>
  stat = osOK;
 80075bc:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80075be:	bd08      	pop	{r3, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80075c0:	f000 fc7c 	bl	8007ebc <xQueueGiveMutexRecursive>
 80075c4:	2801      	cmp	r0, #1
 80075c6:	d0f9      	beq.n	80075bc <osMutexRelease+0x24>
        stat = osErrorResource;
 80075c8:	f06f 0002 	mvn.w	r0, #2
}
 80075cc:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80075ce:	f06f 0005 	mvn.w	r0, #5
 80075d2:	4770      	bx	lr
    stat = osErrorParameter;
 80075d4:	f06f 0003 	mvn.w	r0, #3
}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop

080075dc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80075dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075de:	b083      	sub	sp, #12
 80075e0:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80075e4:	b98e      	cbnz	r6, 800760a <osSemaphoreNew+0x2e>
 80075e6:	4605      	mov	r5, r0
 80075e8:	b178      	cbz	r0, 800760a <osSemaphoreNew+0x2e>
 80075ea:	4288      	cmp	r0, r1
 80075ec:	460f      	mov	r7, r1
 80075ee:	d30c      	bcc.n	800760a <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 80075f0:	4614      	mov	r4, r2
 80075f2:	b172      	cbz	r2, 8007612 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075f4:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 80075f8:	b14a      	cbz	r2, 800760e <osSemaphoreNew+0x32>
 80075fa:	2b4f      	cmp	r3, #79	@ 0x4f
 80075fc:	d905      	bls.n	800760a <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80075fe:	2801      	cmp	r0, #1
 8007600:	d02f      	beq.n	8007662 <osSemaphoreNew+0x86>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007602:	f000 fb1f 	bl	8007c44 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007606:	4605      	mov	r5, r0
 8007608:	b968      	cbnz	r0, 8007626 <osSemaphoreNew+0x4a>
  hSemaphore = NULL;
 800760a:	2500      	movs	r5, #0
 800760c:	e010      	b.n	8007630 <osSemaphoreNew+0x54>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1fb      	bne.n	800760a <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 8007612:	2d01      	cmp	r5, #1
 8007614:	d00f      	beq.n	8007636 <osSemaphoreNew+0x5a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007616:	4628      	mov	r0, r5
 8007618:	4639      	mov	r1, r7
 800761a:	f000 fb37 	bl	8007c8c <xQueueCreateCountingSemaphore>
 800761e:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8007620:	2d00      	cmp	r5, #0
 8007622:	d0f2      	beq.n	800760a <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 8007624:	b104      	cbz	r4, 8007628 <osSemaphoreNew+0x4c>
          name = attr->name;
 8007626:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007628:	4621      	mov	r1, r4
 800762a:	4628      	mov	r0, r5
 800762c:	f000 ff9e 	bl	800856c <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007630:	4628      	mov	r0, r5
 8007632:	b003      	add	sp, #12
 8007634:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 8007636:	4628      	mov	r0, r5
 8007638:	2203      	movs	r2, #3
 800763a:	2100      	movs	r1, #0
 800763c:	f000 fada 	bl	8007bf4 <xQueueGenericCreate>
 8007640:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007642:	2d00      	cmp	r5, #0
 8007644:	d0e1      	beq.n	800760a <osSemaphoreNew+0x2e>
 8007646:	2f00      	cmp	r7, #0
 8007648:	d0ea      	beq.n	8007620 <osSemaphoreNew+0x44>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800764a:	2300      	movs	r3, #0
 800764c:	4628      	mov	r0, r5
 800764e:	461a      	mov	r2, r3
 8007650:	4619      	mov	r1, r3
 8007652:	f000 fb39 	bl	8007cc8 <xQueueGenericSend>
 8007656:	2801      	cmp	r0, #1
 8007658:	d0e4      	beq.n	8007624 <osSemaphoreNew+0x48>
            vSemaphoreDelete (hSemaphore);
 800765a:	4628      	mov	r0, r5
 800765c:	f000 ff5c 	bl	8008518 <vQueueDelete>
      if (hSemaphore != NULL) {
 8007660:	e7d3      	b.n	800760a <osSemaphoreNew+0x2e>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007662:	4613      	mov	r3, r2
 8007664:	2203      	movs	r2, #3
 8007666:	4631      	mov	r1, r6
 8007668:	9200      	str	r2, [sp, #0]
 800766a:	4632      	mov	r2, r6
 800766c:	f000 fa70 	bl	8007b50 <xQueueGenericCreateStatic>
 8007670:	4605      	mov	r5, r0
 8007672:	e7e6      	b.n	8007642 <osSemaphoreNew+0x66>

08007674 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007674:	b360      	cbz	r0, 80076d0 <osSemaphoreAcquire+0x5c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007676:	b510      	push	{r4, lr}
 8007678:	460c      	mov	r4, r1
 800767a:	b082      	sub	sp, #8
 800767c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007680:	b1b3      	cbz	r3, 80076b0 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8007682:	bb11      	cbnz	r1, 80076ca <osSemaphoreAcquire+0x56>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007684:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007686:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007688:	f000 feca 	bl	8008420 <xQueueReceiveFromISR>
 800768c:	2801      	cmp	r0, #1
 800768e:	d118      	bne.n	80076c2 <osSemaphoreAcquire+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007690:	9b01      	ldr	r3, [sp, #4]
 8007692:	b913      	cbnz	r3, 800769a <osSemaphoreAcquire+0x26>
  stat = osOK;
 8007694:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007696:	b002      	add	sp, #8
 8007698:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800769a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800769e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	e7f1      	b.n	8007694 <osSemaphoreAcquire+0x20>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80076b0:	f000 fdbc 	bl	800822c <xQueueSemaphoreTake>
 80076b4:	2801      	cmp	r0, #1
 80076b6:	d0ed      	beq.n	8007694 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 80076b8:	b11c      	cbz	r4, 80076c2 <osSemaphoreAcquire+0x4e>
        stat = osErrorTimeout;
 80076ba:	f06f 0001 	mvn.w	r0, #1
}
 80076be:	b002      	add	sp, #8
 80076c0:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 80076c2:	f06f 0002 	mvn.w	r0, #2
}
 80076c6:	b002      	add	sp, #8
 80076c8:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80076ca:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80076ce:	e7e2      	b.n	8007696 <osSemaphoreAcquire+0x22>
    stat = osErrorParameter;
 80076d0:	f06f 0003 	mvn.w	r0, #3
}
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop

080076d8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80076d8:	b328      	cbz	r0, 8007726 <osSemaphoreRelease+0x4e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80076da:	b500      	push	{lr}
 80076dc:	b083      	sub	sp, #12
 80076de:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80076e2:	b19b      	cbz	r3, 800770c <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 80076e4:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076e6:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80076e8:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076ea:	f000 fc8b 	bl	8008004 <xQueueGiveFromISR>
 80076ee:	2801      	cmp	r0, #1
 80076f0:	d116      	bne.n	8007720 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80076f2:	9b01      	ldr	r3, [sp, #4]
 80076f4:	b183      	cbz	r3, 8007718 <osSemaphoreRelease+0x40>
 80076f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80076fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	e005      	b.n	8007718 <osSemaphoreRelease+0x40>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800770c:	461a      	mov	r2, r3
 800770e:	4619      	mov	r1, r3
 8007710:	f000 fada 	bl	8007cc8 <xQueueGenericSend>
 8007714:	2801      	cmp	r0, #1
 8007716:	d103      	bne.n	8007720 <osSemaphoreRelease+0x48>
  stat = osOK;
 8007718:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800771a:	b003      	add	sp, #12
 800771c:	f85d fb04 	ldr.w	pc, [sp], #4
      stat = osErrorResource;
 8007720:	f06f 0002 	mvn.w	r0, #2
 8007724:	e7f9      	b.n	800771a <osSemaphoreRelease+0x42>
    stat = osErrorParameter;
 8007726:	f06f 0003 	mvn.w	r0, #3
}
 800772a:	4770      	bx	lr

0800772c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	f3ef 8405 	mrs	r4, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007732:	b944      	cbnz	r4, 8007746 <osSemaphoreDelete+0x1a>
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 8007734:	4605      	mov	r5, r0
 8007736:	b148      	cbz	r0, 800774c <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007738:	f000 ff30 	bl	800859c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 800773c:	4628      	mov	r0, r5
 800773e:	f000 feeb 	bl	8008518 <vQueueDelete>
    stat = osOK;
 8007742:	4620      	mov	r0, r4
#else
  stat = osError;
#endif

  return (stat);
}
 8007744:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8007746:	f06f 0005 	mvn.w	r0, #5
}
 800774a:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 800774c:	f06f 0003 	mvn.w	r0, #3
}
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	bf00      	nop

08007754 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007756:	b083      	sub	sp, #12
 8007758:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800775c:	b987      	cbnz	r7, 8007780 <osMessageQueueNew+0x2c>
 800775e:	4605      	mov	r5, r0
 8007760:	b170      	cbz	r0, 8007780 <osMessageQueueNew+0x2c>
 8007762:	b169      	cbz	r1, 8007780 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8007764:	4614      	mov	r4, r2
 8007766:	b17a      	cbz	r2, 8007788 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007768:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800776c:	b1c3      	cbz	r3, 80077a0 <osMessageQueueNew+0x4c>
 800776e:	2a4f      	cmp	r2, #79	@ 0x4f
 8007770:	d906      	bls.n	8007780 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007772:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007774:	b122      	cbz	r2, 8007780 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007776:	fb01 f505 	mul.w	r5, r1, r5
 800777a:	6966      	ldr	r6, [r4, #20]
 800777c:	42ae      	cmp	r6, r5
 800777e:	d21e      	bcs.n	80077be <osMessageQueueNew+0x6a>
  hQueue = NULL;
 8007780:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007782:	4628      	mov	r0, r5
 8007784:	b003      	add	sp, #12
 8007786:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8007788:	f000 fa34 	bl	8007bf4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800778c:	4605      	mov	r5, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	d0f6      	beq.n	8007780 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8007792:	4628      	mov	r0, r5
 8007794:	4621      	mov	r1, r4
 8007796:	f000 fee9 	bl	800856c <vQueueAddToRegistry>
}
 800779a:	4628      	mov	r0, r5
 800779c:	b003      	add	sp, #12
 800779e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077a0:	2a00      	cmp	r2, #0
 80077a2:	d1ed      	bne.n	8007780 <osMessageQueueNew+0x2c>
 80077a4:	6923      	ldr	r3, [r4, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1ea      	bne.n	8007780 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80077aa:	6962      	ldr	r2, [r4, #20]
 80077ac:	2a00      	cmp	r2, #0
 80077ae:	d1e7      	bne.n	8007780 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 80077b0:	f000 fa20 	bl	8007bf4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80077b4:	4605      	mov	r5, r0
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d0e2      	beq.n	8007780 <osMessageQueueNew+0x2c>
        name = attr->name;
 80077ba:	6824      	ldr	r4, [r4, #0]
 80077bc:	e7e9      	b.n	8007792 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80077be:	9700      	str	r7, [sp, #0]
 80077c0:	f000 f9c6 	bl	8007b50 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80077c4:	4605      	mov	r5, r0
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d1f7      	bne.n	80077ba <osMessageQueueNew+0x66>
 80077ca:	e7d9      	b.n	8007780 <osMessageQueueNew+0x2c>

080077cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80077cc:	b560      	push	{r5, r6, lr}
 80077ce:	461e      	mov	r6, r3
 80077d0:	b083      	sub	sp, #12
 80077d2:	f3ef 8205 	mrs	r2, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077d6:	fab0 f580 	clz	r5, r0
 80077da:	fab1 f381 	clz	r3, r1
 80077de:	096d      	lsrs	r5, r5, #5
 80077e0:	095b      	lsrs	r3, r3, #5
  if (IS_IRQ()) {
 80077e2:	b1da      	cbz	r2, 800781c <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077e4:	2e00      	cmp	r6, #0
 80077e6:	bf18      	it	ne
 80077e8:	f043 0301 	orrne.w	r3, r3, #1
 80077ec:	bb33      	cbnz	r3, 800783c <osMessageQueuePut+0x70>
 80077ee:	bb2d      	cbnz	r5, 800783c <osMessageQueuePut+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80077f0:	462b      	mov	r3, r5
 80077f2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80077f4:	9501      	str	r5, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80077f6:	f000 fb9f 	bl	8007f38 <xQueueGenericSendFromISR>
 80077fa:	2801      	cmp	r0, #1
 80077fc:	d11a      	bne.n	8007834 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80077fe:	9b01      	ldr	r3, [sp, #4]
 8007800:	b14b      	cbz	r3, 8007816 <osMessageQueuePut+0x4a>
 8007802:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800780a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007816:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007818:	b003      	add	sp, #12
 800781a:	bd60      	pop	{r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800781c:	b975      	cbnz	r5, 800783c <osMessageQueuePut+0x70>
 800781e:	b96b      	cbnz	r3, 800783c <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007820:	4632      	mov	r2, r6
 8007822:	f000 fa51 	bl	8007cc8 <xQueueGenericSend>
 8007826:	2801      	cmp	r0, #1
 8007828:	d0f5      	beq.n	8007816 <osMessageQueuePut+0x4a>
        if (timeout != 0U) {
 800782a:	b11e      	cbz	r6, 8007834 <osMessageQueuePut+0x68>
          stat = osErrorTimeout;
 800782c:	f06f 0001 	mvn.w	r0, #1
}
 8007830:	b003      	add	sp, #12
 8007832:	bd60      	pop	{r5, r6, pc}
        stat = osErrorResource;
 8007834:	f06f 0002 	mvn.w	r0, #2
}
 8007838:	b003      	add	sp, #12
 800783a:	bd60      	pop	{r5, r6, pc}
      stat = osErrorParameter;
 800783c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007840:	e7ea      	b.n	8007818 <osMessageQueuePut+0x4c>
 8007842:	bf00      	nop

08007844 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	461e      	mov	r6, r3
 8007848:	b082      	sub	sp, #8
 800784a:	f3ef 8305 	mrs	r3, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800784e:	fab0 f580 	clz	r5, r0
 8007852:	fab1 f481 	clz	r4, r1
 8007856:	096d      	lsrs	r5, r5, #5
 8007858:	0964      	lsrs	r4, r4, #5
  if (IS_IRQ()) {
 800785a:	b1d3      	cbz	r3, 8007892 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800785c:	2e00      	cmp	r6, #0
 800785e:	bf18      	it	ne
 8007860:	f044 0401 	orrne.w	r4, r4, #1
 8007864:	bb2c      	cbnz	r4, 80078b2 <osMessageQueueGet+0x6e>
 8007866:	bb25      	cbnz	r5, 80078b2 <osMessageQueueGet+0x6e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007868:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800786a:	9501      	str	r5, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800786c:	f000 fdd8 	bl	8008420 <xQueueReceiveFromISR>
 8007870:	2801      	cmp	r0, #1
 8007872:	d11a      	bne.n	80078aa <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	b14b      	cbz	r3, 800788c <osMessageQueueGet+0x48>
 8007878:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800787c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007880:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800788c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800788e:	b002      	add	sp, #8
 8007890:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007892:	b975      	cbnz	r5, 80078b2 <osMessageQueueGet+0x6e>
 8007894:	b96c      	cbnz	r4, 80078b2 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007896:	4632      	mov	r2, r6
 8007898:	f000 fc0a 	bl	80080b0 <xQueueReceive>
 800789c:	2801      	cmp	r0, #1
 800789e:	d0f5      	beq.n	800788c <osMessageQueueGet+0x48>
        if (timeout != 0U) {
 80078a0:	b11e      	cbz	r6, 80078aa <osMessageQueueGet+0x66>
          stat = osErrorTimeout;
 80078a2:	f06f 0001 	mvn.w	r0, #1
}
 80078a6:	b002      	add	sp, #8
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
        stat = osErrorResource;
 80078aa:	f06f 0002 	mvn.w	r0, #2
}
 80078ae:	b002      	add	sp, #8
 80078b0:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
 80078b2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80078b6:	e7ea      	b.n	800788e <osMessageQueueGet+0x4a>

080078b8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80078b8:	b130      	cbz	r0, 80078c8 <osMessageQueueGetCount+0x10>
 80078ba:	f3ef 8305 	mrs	r3, IPSR
 80078be:	b10b      	cbz	r3, 80078c4 <osMessageQueueGetCount+0xc>
 80078c0:	f000 be1e 	b.w	8008500 <uxQueueMessagesWaitingFromISR>
 80078c4:	f000 be08 	b.w	80084d8 <uxQueueMessagesWaiting>
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop

080078cc <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	f3ef 8405 	mrs	r4, IPSR
 80078d2:	b944      	cbnz	r4, 80078e6 <osMessageQueueDelete+0x1a>
 80078d4:	4605      	mov	r5, r0
 80078d6:	b148      	cbz	r0, 80078ec <osMessageQueueDelete+0x20>
 80078d8:	f000 fe60 	bl	800859c <vQueueUnregisterQueue>
 80078dc:	4628      	mov	r0, r5
 80078de:	f000 fe1b 	bl	8008518 <vQueueDelete>
 80078e2:	4620      	mov	r0, r4
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	f06f 0005 	mvn.w	r0, #5
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	f06f 0003 	mvn.w	r0, #3
 80078f0:	bd38      	pop	{r3, r4, r5, pc}
 80078f2:	bf00      	nop

080078f4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078f4:	4b05      	ldr	r3, [pc, #20]	@ (800790c <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078f6:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078f8:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078fe:	4c04      	ldr	r4, [pc, #16]	@ (8007910 <vApplicationGetIdleTaskMemory+0x1c>)
 8007900:	600c      	str	r4, [r1, #0]
}
 8007902:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007906:	6013      	str	r3, [r2, #0]
}
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	240012b0 	.word	0x240012b0
 8007910:	24000eb0 	.word	0x24000eb0

08007914 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007914:	4b05      	ldr	r3, [pc, #20]	@ (800792c <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007916:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007918:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800791a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800791e:	4c04      	ldr	r4, [pc, #16]	@ (8007930 <vApplicationGetTimerTaskMemory+0x1c>)
 8007920:	600c      	str	r4, [r1, #0]
}
 8007922:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007926:	6013      	str	r3, [r2, #0]
}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	24000e08 	.word	0x24000e08
 8007930:	24000608 	.word	0x24000608

08007934 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007934:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007938:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800793c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800793e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007940:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007942:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007944:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop

0800794c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800794c:	2300      	movs	r3, #0
 800794e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop

08007954 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007954:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007956:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 8007958:	3301      	adds	r3, #1
{
 800795a:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800795c:	6894      	ldr	r4, [r2, #8]
 800795e:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007962:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007964:	6091      	str	r1, [r2, #8]
}
 8007966:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800796a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800796c:	6003      	str	r3, [r0, #0]
}
 800796e:	4770      	bx	lr

08007970 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007970:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007972:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007974:	1c6b      	adds	r3, r5, #1
 8007976:	d010      	beq.n	800799a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007978:	f100 0308 	add.w	r3, r0, #8
 800797c:	461c      	mov	r4, r3
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	42aa      	cmp	r2, r5
 8007984:	d9fa      	bls.n	800797c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007986:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8007988:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800798a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800798c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800798e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007990:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8007992:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007994:	6002      	str	r2, [r0, #0]
}
 8007996:	bc30      	pop	{r4, r5}
 8007998:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800799a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	e7f2      	b.n	8007986 <vListInsert+0x16>

080079a0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079a0:	6903      	ldr	r3, [r0, #16]
{
 80079a2:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079a4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079a6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80079aa:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80079ac:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079b0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079b2:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80079b4:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079b8:	bf08      	it	eq
 80079ba:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80079bc:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 80079be:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80079c0:	3a01      	subs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80079c4:	6818      	ldr	r0, [r3, #0]
}
 80079c6:	4770      	bx	lr

080079c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079cc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 80079ce:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079d2:	b92a      	cbnz	r2, 80079e0 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079d4:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079d6:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079d8:	b34e      	cbz	r6, 8007a2e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80079da:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079dc:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 80079de:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80079e0:	b97e      	cbnz	r6, 8007a02 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079e2:	6840      	ldr	r0, [r0, #4]
 80079e4:	f00b fc09 	bl	80131fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079e8:	6863      	ldr	r3, [r4, #4]
 80079ea:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079ec:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079ee:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079f0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079f2:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079f4:	bf24      	itt	cs
 80079f6:	6823      	ldrcs	r3, [r4, #0]
 80079f8:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079fa:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80079fc:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079fe:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007a00:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a02:	68c0      	ldr	r0, [r0, #12]
 8007a04:	f00b fbf9 	bl	80131fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a08:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007a0a:	68e3      	ldr	r3, [r4, #12]
 8007a0c:	4251      	negs	r1, r2
 8007a0e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a10:	6822      	ldr	r2, [r4, #0]
 8007a12:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a14:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a16:	d202      	bcs.n	8007a1e <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a18:	68a3      	ldr	r3, [r4, #8]
 8007a1a:	440b      	add	r3, r1
 8007a1c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007a1e:	2e02      	cmp	r6, #2
 8007a20:	d1eb      	bne.n	80079fa <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a22:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 8007a24:	f04f 0000 	mov.w	r0, #0
 8007a28:	bf38      	it	cc
 8007a2a:	2501      	movcc	r5, #1
 8007a2c:	e7d6      	b.n	80079dc <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a2e:	6880      	ldr	r0, [r0, #8]
 8007a30:	f001 fb38 	bl	80090a4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a34:	60a6      	str	r6, [r4, #8]
 8007a36:	e7d1      	b.n	80079dc <prvCopyDataToQueue+0x14>

08007a38 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a3c:	f001 fe52 	bl	80096e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a40:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8007a44:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a46:	2c00      	cmp	r4, #0
 8007a48:	dd14      	ble.n	8007a74 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a4a:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8007a4e:	e003      	b.n	8007a58 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a50:	1e63      	subs	r3, r4, #1
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a56:	b16a      	cbz	r2, 8007a74 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a58:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a5a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a5c:	b153      	cbz	r3, 8007a74 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a5e:	f001 fa31 	bl	8008ec4 <xTaskRemoveFromEventList>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d0f4      	beq.n	8007a50 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8007a66:	f001 fac1 	bl	8008fec <vTaskMissedYield>
			--cTxLock;
 8007a6a:	1e63      	subs	r3, r4, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	d1f1      	bne.n	8007a58 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a74:	23ff      	movs	r3, #255	@ 0xff
 8007a76:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007a7a:	f001 fe55 	bl	8009728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a7e:	f001 fe31 	bl	80096e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a82:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8007a86:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a88:	2c00      	cmp	r4, #0
 8007a8a:	dd14      	ble.n	8007ab6 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a8c:	f105 0610 	add.w	r6, r5, #16
 8007a90:	e003      	b.n	8007a9a <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a92:	1e63      	subs	r3, r4, #1
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a98:	b16a      	cbz	r2, 8007ab6 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a9a:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a9c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a9e:	b153      	cbz	r3, 8007ab6 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aa0:	f001 fa10 	bl	8008ec4 <xTaskRemoveFromEventList>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d0f4      	beq.n	8007a92 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8007aa8:	f001 faa0 	bl	8008fec <vTaskMissedYield>
				--cRxLock;
 8007aac:	1e63      	subs	r3, r4, #1
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ab2:	2a00      	cmp	r2, #0
 8007ab4:	d1f1      	bne.n	8007a9a <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ab6:	23ff      	movs	r3, #255	@ 0xff
 8007ab8:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8007abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007ac0:	f001 be32 	b.w	8009728 <vPortExitCritical>

08007ac4 <xQueueGenericReset>:
{
 8007ac4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8007ac6:	b1e0      	cbz	r0, 8007b02 <xQueueGenericReset+0x3e>
 8007ac8:	4604      	mov	r4, r0
 8007aca:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007acc:	f001 fe0a 	bl	80096e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ad0:	6822      	ldr	r2, [r4, #0]
 8007ad2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ad6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007adc:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ade:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ae0:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ae2:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ae4:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8007ae6:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ae8:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007aea:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8007aec:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007af0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007af4:	b975      	cbnz	r5, 8007b14 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	b9c3      	cbnz	r3, 8007b2c <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8007afa:	f001 fe15 	bl	8009728 <vPortExitCritical>
}
 8007afe:	2001      	movs	r0, #1
 8007b00:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007b12:	e7fe      	b.n	8007b12 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b14:	f104 0010 	add.w	r0, r4, #16
 8007b18:	f7ff ff0c 	bl	8007934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b1c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b20:	f7ff ff08 	bl	8007934 <vListInitialise>
	taskEXIT_CRITICAL();
 8007b24:	f001 fe00 	bl	8009728 <vPortExitCritical>
}
 8007b28:	2001      	movs	r0, #1
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b2c:	f104 0010 	add.w	r0, r4, #16
 8007b30:	f001 f9c8 	bl	8008ec4 <xTaskRemoveFromEventList>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d0e0      	beq.n	8007afa <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8007b38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	e7d5      	b.n	8007afa <xQueueGenericReset+0x36>
 8007b4e:	bf00      	nop

08007b50 <xQueueGenericCreateStatic>:
	{
 8007b50:	b530      	push	{r4, r5, lr}
 8007b52:	b085      	sub	sp, #20
 8007b54:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b58:	b940      	cbnz	r0, 8007b6c <xQueueGenericCreateStatic+0x1c>
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	e7fe      	b.n	8007b6a <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8007b6c:	b153      	cbz	r3, 8007b84 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b6e:	b30a      	cbz	r2, 8007bb4 <xQueueGenericCreateStatic+0x64>
 8007b70:	b989      	cbnz	r1, 8007b96 <xQueueGenericCreateStatic+0x46>
 8007b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	e7fe      	b.n	8007b82 <xQueueGenericCreateStatic+0x32>
 8007b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8007b94:	e7fe      	b.n	8007b94 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b96:	b16a      	cbz	r2, 8007bb4 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b98:	2550      	movs	r5, #80	@ 0x50
 8007b9a:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b9c:	9d03      	ldr	r5, [sp, #12]
 8007b9e:	2d50      	cmp	r5, #80	@ 0x50
 8007ba0:	d013      	beq.n	8007bca <xQueueGenericCreateStatic+0x7a>
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	e7fe      	b.n	8007bb2 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d0ef      	beq.n	8007b98 <xQueueGenericCreateStatic+0x48>
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	e7fe      	b.n	8007bc8 <xQueueGenericCreateStatic+0x78>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bca:	2900      	cmp	r1, #0
 8007bcc:	bf08      	it	eq
 8007bce:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8007bd0:	6419      	str	r1, [r3, #64]	@ 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bd2:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8007bd4:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8007bd6:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bd8:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bda:	f883 1046 	strb.w	r1, [r3, #70]	@ 0x46
 8007bde:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007be0:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007be2:	f7ff ff6f 	bl	8007ac4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007be6:	9b01      	ldr	r3, [sp, #4]
	}
 8007be8:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8007bea:	f883 404c 	strb.w	r4, [r3, #76]	@ 0x4c
	}
 8007bee:	b005      	add	sp, #20
 8007bf0:	bd30      	pop	{r4, r5, pc}
 8007bf2:	bf00      	nop

08007bf4 <xQueueGenericCreate>:
	{
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bf6:	b940      	cbnz	r0, 8007c0a <xQueueGenericCreate+0x16>
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	e7fe      	b.n	8007c08 <xQueueGenericCreate+0x14>
 8007c0a:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c0c:	fb01 f000 	mul.w	r0, r1, r0
 8007c10:	460d      	mov	r5, r1
 8007c12:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c14:	3050      	adds	r0, #80	@ 0x50
 8007c16:	f001 fed9 	bl	80099cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	b170      	cbz	r0, 8007c3c <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c24:	b165      	cbz	r5, 8007c40 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c26:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8007c30:	e9c7 450f 	strd	r4, r5, [r7, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c34:	f7ff ff46 	bl	8007ac4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007c38:	f887 604c 	strb.w	r6, [r7, #76]	@ 0x4c
	}
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c40:	4603      	mov	r3, r0
 8007c42:	e7f2      	b.n	8007c2a <xQueueGenericCreate+0x36>

08007c44 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8007c44:	b940      	cbnz	r0, 8007c58 <xQueueCreateCountingSemaphoreStatic+0x14>
 8007c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	e7fe      	b.n	8007c56 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c58:	4288      	cmp	r0, r1
	{
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c60:	d208      	bcs.n	8007c74 <xQueueCreateCountingSemaphoreStatic+0x30>
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	e7fe      	b.n	8007c72 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c74:	2102      	movs	r1, #2
 8007c76:	4613      	mov	r3, r2
 8007c78:	2200      	movs	r2, #0
 8007c7a:	9100      	str	r1, [sp, #0]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	f7ff ff67 	bl	8007b50 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007c82:	b100      	cbz	r0, 8007c86 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c84:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007c86:	b002      	add	sp, #8
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop

08007c8c <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8007c8c:	b940      	cbnz	r0, 8007ca0 <xQueueCreateCountingSemaphore+0x14>
 8007c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	e7fe      	b.n	8007c9e <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ca0:	4288      	cmp	r0, r1
	{
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ca6:	d208      	bcs.n	8007cba <xQueueCreateCountingSemaphore+0x2e>
 8007ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	e7fe      	b.n	8007cb8 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007cba:	2202      	movs	r2, #2
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	f7ff ff99 	bl	8007bf4 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007cc2:	b100      	cbz	r0, 8007cc6 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cc4:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007cc6:	bd10      	pop	{r4, pc}

08007cc8 <xQueueGenericSend>:
{
 8007cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d07e      	beq.n	8007dd2 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cd4:	460f      	mov	r7, r1
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	461e      	mov	r6, r3
 8007cda:	2900      	cmp	r1, #0
 8007cdc:	d069      	beq.n	8007db2 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cde:	2e02      	cmp	r6, #2
 8007ce0:	d10b      	bne.n	8007cfa <xQueueGenericSend+0x32>
 8007ce2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d008      	beq.n	8007cfa <xQueueGenericSend+0x32>
 8007ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cfa:	f001 f983 	bl	8009004 <xTaskGetSchedulerState>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d070      	beq.n	8007de4 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d02:	f1a6 0802 	sub.w	r8, r6, #2
 8007d06:	2500      	movs	r5, #0
 8007d08:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8007d0c:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d0e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8007d12:	e007      	b.n	8007d24 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007d14:	f001 fd08 	bl	8009728 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f7ff fe8d 	bl	8007a38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d1e:	f001 f803 	bl	8008d28 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d22:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8007d24:	f001 fcde 	bl	80096e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d28:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007d2a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007d2c:	4290      	cmp	r0, r2
 8007d2e:	d365      	bcc.n	8007dfc <xQueueGenericSend+0x134>
 8007d30:	f1b8 0f00 	cmp.w	r8, #0
 8007d34:	d162      	bne.n	8007dfc <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d077      	beq.n	8007e2c <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8007d3c:	2d00      	cmp	r5, #0
 8007d3e:	d044      	beq.n	8007dca <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8007d40:	f001 fcf2 	bl	8009728 <vPortExitCritical>
		vTaskSuspendAll();
 8007d44:	f000 fe9c 	bl	8008a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d48:	f001 fccc 	bl	80096e4 <vPortEnterCritical>
 8007d4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d50:	2bff      	cmp	r3, #255	@ 0xff
 8007d52:	d101      	bne.n	8007d58 <xQueueGenericSend+0x90>
 8007d54:	f884 9044 	strb.w	r9, [r4, #68]	@ 0x44
 8007d58:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d5c:	2bff      	cmp	r3, #255	@ 0xff
 8007d5e:	d101      	bne.n	8007d64 <xQueueGenericSend+0x9c>
 8007d60:	f884 9045 	strb.w	r9, [r4, #69]	@ 0x45
 8007d64:	f001 fce0 	bl	8009728 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d68:	a901      	add	r1, sp, #4
 8007d6a:	a802      	add	r0, sp, #8
 8007d6c:	f001 f8fc 	bl	8008f68 <xTaskCheckForTimeOut>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d15f      	bne.n	8007e34 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8007d74:	f001 fcb6 	bl	80096e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d78:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007d7a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d1c9      	bne.n	8007d14 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8007d80:	f001 fcd2 	bl	8009728 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d84:	9901      	ldr	r1, [sp, #4]
 8007d86:	f104 0010 	add.w	r0, r4, #16
 8007d8a:	f001 f863 	bl	8008e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff fe52 	bl	8007a38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d94:	f000 ffc8 	bl	8008d28 <xTaskResumeAll>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d1c2      	bne.n	8007d22 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8007d9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	e7b7      	b.n	8007d22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007db2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d092      	beq.n	8007cde <xQueueGenericSend+0x16>
 8007db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dca:	a802      	add	r0, sp, #8
 8007dcc:	f001 f8c0 	bl	8008f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dd0:	e7b6      	b.n	8007d40 <xQueueGenericSend+0x78>
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007de2:	e7fe      	b.n	8007de2 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d08b      	beq.n	8007d02 <xQueueGenericSend+0x3a>
 8007dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	e7fe      	b.n	8007dfa <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	4639      	mov	r1, r7
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7ff fde1 	bl	80079c8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e08:	b9d3      	cbnz	r3, 8007e40 <xQueueGenericSend+0x178>
					else if( xYieldRequired != pdFALSE )
 8007e0a:	b148      	cbz	r0, 8007e20 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8007e0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e14:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007e20:	f001 fc82 	bl	8009728 <vPortExitCritical>
				return pdPASS;
 8007e24:	2001      	movs	r0, #1
}
 8007e26:	b005      	add	sp, #20
 8007e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8007e2c:	f001 fc7c 	bl	8009728 <vPortExitCritical>
					return errQUEUE_FULL;
 8007e30:	2000      	movs	r0, #0
 8007e32:	e7f8      	b.n	8007e26 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8007e34:	4620      	mov	r0, r4
 8007e36:	f7ff fdff 	bl	8007a38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e3a:	f000 ff75 	bl	8008d28 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007e3e:	e7f7      	b.n	8007e30 <xQueueGenericSend+0x168>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e40:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e44:	f001 f83e 	bl	8008ec4 <xTaskRemoveFromEventList>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d0e9      	beq.n	8007e20 <xQueueGenericSend+0x158>
 8007e4c:	e7de      	b.n	8007e0c <xQueueGenericSend+0x144>
 8007e4e:	bf00      	nop

08007e50 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8007e50:	b179      	cbz	r1, 8007e72 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e52:	2350      	movs	r3, #80	@ 0x50
	{
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e58:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e5a:	9b01      	ldr	r3, [sp, #4]
 8007e5c:	2b50      	cmp	r3, #80	@ 0x50
 8007e5e:	d011      	beq.n	8007e84 <xQueueCreateMutexStatic+0x34>
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	e7fe      	b.n	8007e70 <xQueueCreateMutexStatic+0x20>
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8007e82:	e7fe      	b.n	8007e82 <xQueueCreateMutexStatic+0x32>
 8007e84:	460c      	mov	r4, r1
	pxNewQueue->uxLength = uxQueueLength;
 8007e86:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e88:	2101      	movs	r1, #1
 8007e8a:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e8c:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e8e:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e90:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e94:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxLength = uxQueueLength;
 8007e96:	e9c4 160f 	strd	r1, r6, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e9a:	f7ff fe13 	bl	8007ac4 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e9e:	4633      	mov	r3, r6
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007ea6:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007eaa:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007eac:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007eae:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007eb0:	f7ff ff0a 	bl	8007cc8 <xQueueGenericSend>
	}
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	b002      	add	sp, #8
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	bf00      	nop

08007ebc <xQueueGiveMutexRecursive>:
	{
 8007ebc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8007ebe:	b138      	cbz	r0, 8007ed0 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007ec0:	6885      	ldr	r5, [r0, #8]
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	f001 f898 	bl	8008ff8 <xTaskGetCurrentTaskHandle>
 8007ec8:	4285      	cmp	r5, r0
 8007eca:	d00a      	beq.n	8007ee2 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8007ecc:	2000      	movs	r0, #0
	}
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8007ee0:	e7fe      	b.n	8007ee0 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007ee8:	b10b      	cbz	r3, 8007eee <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8007eea:	2001      	movs	r0, #1
	}
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007eee:	461a      	mov	r2, r3
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f7ff fee8 	bl	8007cc8 <xQueueGenericSend>
 8007ef8:	e7f7      	b.n	8007eea <xQueueGiveMutexRecursive+0x2e>
 8007efa:	bf00      	nop

08007efc <xQueueCreateMutex>:
	{
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f00:	2050      	movs	r0, #80	@ 0x50
 8007f02:	f001 fd63 	bl	80099cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007f06:	4604      	mov	r4, r0
 8007f08:	b198      	cbz	r0, 8007f32 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f0a:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8007f0c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f0e:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f10:	f880 6046 	strb.w	r6, [r0, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8007f14:	e9c0 160f 	strd	r1, r6, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f18:	f7ff fdd4 	bl	8007ac4 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f1c:	4633      	mov	r3, r6
 8007f1e:	4632      	mov	r2, r6
 8007f20:	4631      	mov	r1, r6
 8007f22:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007f24:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f28:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f2a:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f2c:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f2e:	f7ff fecb 	bl	8007cc8 <xQueueGenericSend>
	}
 8007f32:	4620      	mov	r0, r4
 8007f34:	bd70      	pop	{r4, r5, r6, pc}
 8007f36:	bf00      	nop

08007f38 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d04b      	beq.n	8007fd4 <xQueueGenericSendFromISR+0x9c>
{
 8007f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	460e      	mov	r6, r1
 8007f42:	4604      	mov	r4, r0
 8007f44:	4617      	mov	r7, r2
 8007f46:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f48:	b339      	cbz	r1, 8007f9a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f4a:	2d02      	cmp	r5, #2
 8007f4c:	d10b      	bne.n	8007f66 <xQueueGenericSendFromISR+0x2e>
 8007f4e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d008      	beq.n	8007f66 <xQueueGenericSendFromISR+0x2e>
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	e7fe      	b.n	8007f64 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f66:	f001 fcd9 	bl	800991c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f6a:	f3ef 8811 	mrs	r8, BASEPRI
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f7e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007f80:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d315      	bcc.n	8007fb2 <xQueueGenericSendFromISR+0x7a>
 8007f86:	f1a5 0002 	sub.w	r0, r5, #2
 8007f8a:	fab0 f080 	clz	r0, r0
 8007f8e:	0940      	lsrs	r0, r0, #5
 8007f90:	b978      	cbnz	r0, 8007fb2 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f92:	f388 8811 	msr	BASEPRI, r8
}
 8007f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f9a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0d4      	beq.n	8007f4a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fb2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fb4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fbc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fbe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fc0:	f7ff fd02 	bl	80079c8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007fc4:	1c6b      	adds	r3, r5, #1
 8007fc6:	d00e      	beq.n	8007fe6 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fc8:	1c6b      	adds	r3, r5, #1
 8007fca:	b25b      	sxtb	r3, r3
 8007fcc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8007fd0:	2001      	movs	r0, #1
 8007fd2:	e7de      	b.n	8007f92 <xQueueGenericSendFromISR+0x5a>
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007fe4:	e7fe      	b.n	8007fe4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fe6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0f1      	beq.n	8007fd0 <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fec:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007ff0:	f000 ff68 	bl	8008ec4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d0eb      	beq.n	8007fd0 <xQueueGenericSendFromISR+0x98>
 8007ff8:	2f00      	cmp	r7, #0
 8007ffa:	d0e9      	beq.n	8007fd0 <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	e7e6      	b.n	8007fd0 <xQueueGenericSendFromISR+0x98>
 8008002:	bf00      	nop

08008004 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8008004:	b360      	cbz	r0, 8008060 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008006:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800800c:	b143      	cbz	r3, 8008020 <xQueueGiveFromISR+0x1c>
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	e7fe      	b.n	800801e <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008020:	6803      	ldr	r3, [r0, #0]
 8008022:	460d      	mov	r5, r1
 8008024:	b32b      	cbz	r3, 8008072 <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008026:	f001 fc79 	bl	800991c <vPortValidateInterruptPriority>
	__asm volatile
 800802a:	f3ef 8611 	mrs	r6, BASEPRI
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800803e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008040:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008042:	429a      	cmp	r2, r3
 8008044:	d921      	bls.n	800808a <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008046:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800804a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 800804c:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800804e:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8008050:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8008052:	d01e      	beq.n	8008092 <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008054:	3301      	adds	r3, #1
 8008056:	b25b      	sxtb	r3, r3
 8008058:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 800805c:	2001      	movs	r0, #1
 800805e:	e015      	b.n	800808c <xQueueGiveFromISR+0x88>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008070:	e7fe      	b.n	8008070 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008072:	6883      	ldr	r3, [r0, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0d6      	beq.n	8008026 <xQueueGiveFromISR+0x22>
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	e7fe      	b.n	8008088 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800808a:	2000      	movs	r0, #0
	__asm volatile
 800808c:	f386 8811 	msr	BASEPRI, r6
}
 8008090:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008092:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0e1      	beq.n	800805c <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008098:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800809c:	f000 ff12 	bl	8008ec4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80080a0:	2d00      	cmp	r5, #0
 80080a2:	d0db      	beq.n	800805c <xQueueGiveFromISR+0x58>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d0d9      	beq.n	800805c <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	e7d6      	b.n	800805c <xQueueGiveFromISR+0x58>
 80080ae:	bf00      	nop

080080b0 <xQueueReceive>:
{
 80080b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080b2:	b085      	sub	sp, #20
 80080b4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f000 809d 	beq.w	80081f6 <xQueueReceive+0x146>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080bc:	460e      	mov	r6, r1
 80080be:	4604      	mov	r4, r0
 80080c0:	2900      	cmp	r1, #0
 80080c2:	d041      	beq.n	8008148 <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080c4:	f000 ff9e 	bl	8009004 <xTaskGetSchedulerState>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d049      	beq.n	8008160 <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 80080cc:	f001 fb0a 	bl	80096e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080d0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	d161      	bne.n	800819a <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 80080d6:	9b01      	ldr	r3, [sp, #4]
 80080d8:	b38b      	cbz	r3, 800813e <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080da:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 80080dc:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080de:	f000 ff37 	bl	8008f50 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80080e2:	f001 fb21 	bl	8009728 <vPortExitCritical>
		vTaskSuspendAll();
 80080e6:	f000 fccb 	bl	8008a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ea:	f001 fafb 	bl	80096e4 <vPortEnterCritical>
 80080ee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80080f2:	2bff      	cmp	r3, #255	@ 0xff
 80080f4:	d101      	bne.n	80080fa <xQueueReceive+0x4a>
 80080f6:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80080fa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80080fe:	2bff      	cmp	r3, #255	@ 0xff
 8008100:	d101      	bne.n	8008106 <xQueueReceive+0x56>
 8008102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008106:	f001 fb0f 	bl	8009728 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800810a:	a901      	add	r1, sp, #4
 800810c:	a802      	add	r0, sp, #8
 800810e:	f000 ff2b 	bl	8008f68 <xTaskCheckForTimeOut>
 8008112:	2800      	cmp	r0, #0
 8008114:	d130      	bne.n	8008178 <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 8008116:	f001 fae5 	bl	80096e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800811a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800811c:	2b00      	cmp	r3, #0
 800811e:	d051      	beq.n	80081c4 <xQueueReceive+0x114>
	taskEXIT_CRITICAL();
 8008120:	f001 fb02 	bl	8009728 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008124:	4620      	mov	r0, r4
 8008126:	f7ff fc87 	bl	8007a38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800812a:	f000 fdfd 	bl	8008d28 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800812e:	f001 fad9 	bl	80096e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008132:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008134:	2d00      	cmp	r5, #0
 8008136:	d130      	bne.n	800819a <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	9b01      	ldr	r3, [sp, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1d1      	bne.n	80080e2 <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 800813e:	f001 faf3 	bl	8009728 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008142:	2000      	movs	r0, #0
}
 8008144:	b005      	add	sp, #20
 8008146:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008148:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0ba      	beq.n	80080c4 <xQueueReceive+0x14>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	e7fe      	b.n	800815e <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008160:	9b01      	ldr	r3, [sp, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0b2      	beq.n	80080cc <xQueueReceive+0x1c>
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	e7fe      	b.n	8008176 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8008178:	4620      	mov	r0, r4
 800817a:	f7ff fc5d 	bl	8007a38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800817e:	f000 fdd3 	bl	8008d28 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8008182:	f001 faaf 	bl	80096e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008186:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0d8      	beq.n	800813e <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 800818c:	f001 facc 	bl	8009728 <vPortExitCritical>
		taskENTER_CRITICAL();
 8008190:	f001 faa8 	bl	80096e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008194:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008196:	2d00      	cmp	r5, #0
 8008198:	d0ce      	beq.n	8008138 <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800819a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800819c:	b152      	cbz	r2, 80081b4 <xQueueReceive+0x104>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800819e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081a0:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081a2:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081a4:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081a6:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081a8:	d301      	bcc.n	80081ae <xQueueReceive+0xfe>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081aa:	6821      	ldr	r1, [r4, #0]
 80081ac:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081ae:	4630      	mov	r0, r6
 80081b0:	f00b f823 	bl	80131fa <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081b4:	3d01      	subs	r5, #1
 80081b6:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081b8:	6923      	ldr	r3, [r4, #16]
 80081ba:	bb2b      	cbnz	r3, 8008208 <xQueueReceive+0x158>
				taskEXIT_CRITICAL();
 80081bc:	f001 fab4 	bl	8009728 <vPortExitCritical>
				return pdPASS;
 80081c0:	2001      	movs	r0, #1
 80081c2:	e7bf      	b.n	8008144 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 80081c4:	f001 fab0 	bl	8009728 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081c8:	9901      	ldr	r1, [sp, #4]
 80081ca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80081ce:	f000 fe41 	bl	8008e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081d2:	4620      	mov	r0, r4
 80081d4:	f7ff fc30 	bl	8007a38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081d8:	f000 fda6 	bl	8008d28 <xTaskResumeAll>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1d7      	bne.n	8008190 <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 80081e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80081e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80081f4:	e7cc      	b.n	8008190 <xQueueReceive+0xe0>
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008206:	e7fe      	b.n	8008206 <xQueueReceive+0x156>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008208:	f104 0010 	add.w	r0, r4, #16
 800820c:	f000 fe5a 	bl	8008ec4 <xTaskRemoveFromEventList>
 8008210:	2800      	cmp	r0, #0
 8008212:	d0d3      	beq.n	80081bc <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8008214:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800821c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	e7c8      	b.n	80081bc <xQueueReceive+0x10c>
 800822a:	bf00      	nop

0800822c <xQueueSemaphoreTake>:
{
 800822c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800822e:	b085      	sub	sp, #20
 8008230:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008232:	2800      	cmp	r0, #0
 8008234:	d056      	beq.n	80082e4 <xQueueSemaphoreTake+0xb8>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008236:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8008238:	4604      	mov	r4, r0
 800823a:	b146      	cbz	r6, 800824e <xQueueSemaphoreTake+0x22>
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	e7fe      	b.n	800824c <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800824e:	f000 fed9 	bl	8009004 <xTaskGetSchedulerState>
 8008252:	4605      	mov	r5, r0
 8008254:	2800      	cmp	r0, #0
 8008256:	d04e      	beq.n	80082f6 <xQueueSemaphoreTake+0xca>
 8008258:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 800825a:	f001 fa43 	bl	80096e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800825e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		prvLockQueue( pxQueue );
 8008260:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008262:	bb8b      	cbnz	r3, 80082c8 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 809a 	beq.w	80083a0 <xQueueSemaphoreTake+0x174>
				else if( xEntryTimeSet == pdFALSE )
 800826c:	2d00      	cmp	r5, #0
 800826e:	d05c      	beq.n	800832a <xQueueSemaphoreTake+0xfe>
		taskEXIT_CRITICAL();
 8008270:	f001 fa5a 	bl	8009728 <vPortExitCritical>
		vTaskSuspendAll();
 8008274:	f000 fc04 	bl	8008a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008278:	f001 fa34 	bl	80096e4 <vPortEnterCritical>
 800827c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008280:	2bff      	cmp	r3, #255	@ 0xff
 8008282:	d101      	bne.n	8008288 <xQueueSemaphoreTake+0x5c>
 8008284:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8008288:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800828c:	2bff      	cmp	r3, #255	@ 0xff
 800828e:	d101      	bne.n	8008294 <xQueueSemaphoreTake+0x68>
 8008290:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008294:	f001 fa48 	bl	8009728 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008298:	a901      	add	r1, sp, #4
 800829a:	a802      	add	r0, sp, #8
 800829c:	f000 fe64 	bl	8008f68 <xTaskCheckForTimeOut>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d134      	bne.n	800830e <xQueueSemaphoreTake+0xe2>
	taskENTER_CRITICAL();
 80082a4:	f001 fa1e 	bl	80096e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d044      	beq.n	8008338 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 80082ae:	f001 fa3b 	bl	8009728 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff fbc0 	bl	8007a38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082b8:	f000 fd36 	bl	8008d28 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80082bc:	f001 fa12 	bl	80096e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80082c2:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0cd      	beq.n	8008264 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082c8:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082ca:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082cc:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082ce:	2a00      	cmp	r2, #0
 80082d0:	f000 8082 	beq.w	80083d8 <xQueueSemaphoreTake+0x1ac>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082d4:	6923      	ldr	r3, [r4, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d16d      	bne.n	80083b6 <xQueueSemaphoreTake+0x18a>
				taskEXIT_CRITICAL();
 80082da:	f001 fa25 	bl	8009728 <vPortExitCritical>
				return pdPASS;
 80082de:	2001      	movs	r0, #1
}
 80082e0:	b005      	add	sp, #20
 80082e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80082f4:	e7fe      	b.n	80082f4 <xQueueSemaphoreTake+0xc8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d038      	beq.n	800836e <xQueueSemaphoreTake+0x142>
 80082fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	e7fe      	b.n	800830c <xQueueSemaphoreTake+0xe0>
			prvUnlockQueue( pxQueue );
 800830e:	4620      	mov	r0, r4
 8008310:	f7ff fb92 	bl	8007a38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008314:	f000 fd08 	bl	8008d28 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8008318:	f001 f9e4 	bl	80096e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800831c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800831e:	b943      	cbnz	r3, 8008332 <xQueueSemaphoreTake+0x106>
	taskEXIT_CRITICAL();
 8008320:	f001 fa02 	bl	8009728 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8008324:	bb2e      	cbnz	r6, 8008372 <xQueueSemaphoreTake+0x146>
					return errQUEUE_EMPTY;
 8008326:	2000      	movs	r0, #0
 8008328:	e7da      	b.n	80082e0 <xQueueSemaphoreTake+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800832a:	a802      	add	r0, sp, #8
 800832c:	f000 fe10 	bl	8008f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008330:	e79e      	b.n	8008270 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8008332:	f001 f9f9 	bl	8009728 <vPortExitCritical>
	return xReturn;
 8008336:	e7c1      	b.n	80082bc <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8008338:	f001 f9f6 	bl	8009728 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	b333      	cbz	r3, 800838e <xQueueSemaphoreTake+0x162>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008340:	9901      	ldr	r1, [sp, #4]
 8008342:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008346:	f000 fd85 	bl	8008e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800834a:	4620      	mov	r0, r4
 800834c:	f7ff fb74 	bl	8007a38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008350:	f000 fcea 	bl	8008d28 <xTaskResumeAll>
 8008354:	2800      	cmp	r0, #0
 8008356:	d1b1      	bne.n	80082bc <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8008358:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800835c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008360:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	e7a6      	b.n	80082bc <xQueueSemaphoreTake+0x90>
 800836e:	462e      	mov	r6, r5
 8008370:	e773      	b.n	800825a <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8008372:	f001 f9b7 	bl	80096e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008376:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008378:	b119      	cbz	r1, 8008382 <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800837a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008382:	68a0      	ldr	r0, [r4, #8]
 8008384:	f000 fed2 	bl	800912c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008388:	f001 f9ce 	bl	8009728 <vPortExitCritical>
 800838c:	e7cb      	b.n	8008326 <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 800838e:	f001 f9a9 	bl	80096e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008392:	68a0      	ldr	r0, [r4, #8]
 8008394:	f000 fe46 	bl	8009024 <xTaskPriorityInherit>
 8008398:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800839a:	f001 f9c5 	bl	8009728 <vPortExitCritical>
 800839e:	e7cf      	b.n	8008340 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	d0f1      	beq.n	8008388 <xQueueSemaphoreTake+0x15c>
 80083a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	e7fe      	b.n	80083b4 <xQueueSemaphoreTake+0x188>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083b6:	f104 0010 	add.w	r0, r4, #16
 80083ba:	f000 fd83 	bl	8008ec4 <xTaskRemoveFromEventList>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d08b      	beq.n	80082da <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 80083c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80083c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	e780      	b.n	80082da <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80083d8:	f000 fef8 	bl	80091cc <pvTaskIncrementMutexHeldCount>
 80083dc:	60a0      	str	r0, [r4, #8]
 80083de:	e779      	b.n	80082d4 <xQueueSemaphoreTake+0xa8>

080083e0 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80083e0:	b1a8      	cbz	r0, 800840e <xQueueTakeMutexRecursive+0x2e>
	{
 80083e2:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80083e4:	6886      	ldr	r6, [r0, #8]
 80083e6:	4604      	mov	r4, r0
 80083e8:	460d      	mov	r5, r1
 80083ea:	f000 fe05 	bl	8008ff8 <xTaskGetCurrentTaskHandle>
 80083ee:	4286      	cmp	r6, r0
 80083f0:	d008      	beq.n	8008404 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80083f2:	4629      	mov	r1, r5
 80083f4:	4620      	mov	r0, r4
 80083f6:	f7ff ff19 	bl	800822c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80083fa:	b110      	cbz	r0, 8008402 <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80083fc:	68e3      	ldr	r3, [r4, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60e3      	str	r3, [r4, #12]
	}
 8008402:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008404:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8008406:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008408:	4403      	add	r3, r0
 800840a:	60e3      	str	r3, [r4, #12]
	}
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800841e:	e7fe      	b.n	800841e <xQueueTakeMutexRecursive+0x3e>

08008420 <xQueueReceiveFromISR>:
{
 8008420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008424:	b310      	cbz	r0, 800846c <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008426:	460f      	mov	r7, r1
 8008428:	4604      	mov	r4, r0
 800842a:	4616      	mov	r6, r2
 800842c:	b191      	cbz	r1, 8008454 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800842e:	f001 fa75 	bl	800991c <vPortValidateInterruptPriority>
	__asm volatile
 8008432:	f3ef 8911 	mrs	r9, BASEPRI
 8008436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008446:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008448:	b9cd      	cbnz	r5, 800847e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800844a:	4628      	mov	r0, r5
	__asm volatile
 800844c:	f389 8811 	msr	BASEPRI, r9
}
 8008450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008454:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0e9      	beq.n	800842e <xQueueReceiveFromISR+0xe>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	e7fe      	b.n	800846a <xQueueReceiveFromISR+0x4a>
 800846c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800847c:	e7fe      	b.n	800847c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800847e:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008482:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8008484:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008488:	b142      	cbz	r2, 800849c <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800848a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800848c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800848e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008490:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008492:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008494:	d21c      	bcs.n	80084d0 <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008496:	4638      	mov	r0, r7
 8008498:	f00a feaf 	bl	80131fa <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800849c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800849e:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084a2:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80084a4:	d006      	beq.n	80084b4 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084a6:	f108 0301 	add.w	r3, r8, #1
 80084aa:	b25b      	sxtb	r3, r3
 80084ac:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 80084b0:	2001      	movs	r0, #1
 80084b2:	e7cb      	b.n	800844c <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0fa      	beq.n	80084b0 <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ba:	f104 0010 	add.w	r0, r4, #16
 80084be:	f000 fd01 	bl	8008ec4 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	d0f4      	beq.n	80084b0 <xQueueReceiveFromISR+0x90>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d0f2      	beq.n	80084b0 <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084ca:	2301      	movs	r3, #1
 80084cc:	6033      	str	r3, [r6, #0]
 80084ce:	e7ef      	b.n	80084b0 <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084d0:	6821      	ldr	r1, [r4, #0]
 80084d2:	60e1      	str	r1, [r4, #12]
 80084d4:	e7df      	b.n	8008496 <xQueueReceiveFromISR+0x76>
 80084d6:	bf00      	nop

080084d8 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80084d8:	b140      	cbz	r0, 80084ec <uxQueueMessagesWaiting+0x14>
{
 80084da:	b510      	push	{r4, lr}
 80084dc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80084de:	f001 f901 	bl	80096e4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80084e2:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80084e4:	f001 f920 	bl	8009728 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80084e8:	4620      	mov	r0, r4
 80084ea:	bd10      	pop	{r4, pc}
 80084ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80084fc:	e7fe      	b.n	80084fc <uxQueueMessagesWaiting+0x24>
 80084fe:	bf00      	nop

08008500 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8008500:	b108      	cbz	r0, 8008506 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008502:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008504:	4770      	bx	lr
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008516:	e7fe      	b.n	8008516 <uxQueueMessagesWaitingFromISR+0x16>

08008518 <vQueueDelete>:
	configASSERT( pxQueue );
 8008518:	b170      	cbz	r0, 8008538 <vQueueDelete+0x20>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800851a:	2300      	movs	r3, #0
 800851c:	4911      	ldr	r1, [pc, #68]	@ (8008564 <vQueueDelete+0x4c>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800851e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008522:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008526:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008528:	4290      	cmp	r0, r2
 800852a:	d010      	beq.n	800854e <vQueueDelete+0x36>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800852c:	2b08      	cmp	r3, #8
 800852e:	d1f6      	bne.n	800851e <vQueueDelete+0x6>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008530:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8008534:	b14b      	cbz	r3, 800854a <vQueueDelete+0x32>
}
 8008536:	4770      	bx	lr
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008548:	e7fe      	b.n	8008548 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800854a:	f001 bad5 	b.w	8009af8 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800854e:	4906      	ldr	r1, [pc, #24]	@ (8008568 <vQueueDelete+0x50>)
 8008550:	2300      	movs	r3, #0
 8008552:	2200      	movs	r2, #0
 8008554:	448c      	add	ip, r1
 8008556:	e9cc 2300 	strd	r2, r3, [ip]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800855a:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e9      	bne.n	8008536 <vQueueDelete+0x1e>
 8008562:	e7f2      	b.n	800854a <vQueueDelete+0x32>
 8008564:	24001364 	.word	0x24001364
 8008568:	24001360 	.word	0x24001360

0800856c <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800856c:	2300      	movs	r3, #0
 800856e:	4a0a      	ldr	r2, [pc, #40]	@ (8008598 <vQueueAddToRegistry+0x2c>)
	{
 8008570:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008572:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008576:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 800857a:	b12c      	cbz	r4, 8008588 <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800857c:	3301      	adds	r3, #1
 800857e:	2b08      	cmp	r3, #8
 8008580:	d1f7      	bne.n	8008572 <vQueueAddToRegistry+0x6>
	}
 8008582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800858c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008590:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	24001360 	.word	0x24001360

0800859c <vQueueUnregisterQueue>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800859c:	2300      	movs	r3, #0
 800859e:	4909      	ldr	r1, [pc, #36]	@ (80085c4 <vQueueUnregisterQueue+0x28>)
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80085a0:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80085a4:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085a8:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80085aa:	4282      	cmp	r2, r0
 80085ac:	d002      	beq.n	80085b4 <vQueueUnregisterQueue+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085ae:	2b08      	cmp	r3, #8
 80085b0:	d1f6      	bne.n	80085a0 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80085b2:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80085b4:	4904      	ldr	r1, [pc, #16]	@ (80085c8 <vQueueUnregisterQueue+0x2c>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	2300      	movs	r3, #0
 80085ba:	448c      	add	ip, r1
 80085bc:	e9cc 2300 	strd	r2, r3, [ip]
				break;
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	24001364 	.word	0x24001364
 80085c8:	24001360 	.word	0x24001360

080085cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	4604      	mov	r4, r0
 80085d0:	460e      	mov	r6, r1
 80085d2:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085d4:	f001 f886 	bl	80096e4 <vPortEnterCritical>
 80085d8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80085dc:	2bff      	cmp	r3, #255	@ 0xff
 80085de:	d102      	bne.n	80085e6 <vQueueWaitForMessageRestricted+0x1a>
 80085e0:	2300      	movs	r3, #0
 80085e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80085e6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80085ea:	2bff      	cmp	r3, #255	@ 0xff
 80085ec:	d102      	bne.n	80085f4 <vQueueWaitForMessageRestricted+0x28>
 80085ee:	2300      	movs	r3, #0
 80085f0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80085f4:	f001 f898 	bl	8009728 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80085fa:	b123      	cbz	r3, 8008606 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085fc:	4620      	mov	r0, r4
	}
 80085fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008602:	f7ff ba19 	b.w	8007a38 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008606:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800860a:	462a      	mov	r2, r5
 800860c:	4631      	mov	r1, r6
 800860e:	f000 fc3b 	bl	8008e88 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8008612:	4620      	mov	r0, r4
	}
 8008614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008618:	f7ff ba0e 	b.w	8007a38 <prvUnlockQueue>

0800861c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008622:	f001 f85f 	bl	80096e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008626:	4a34      	ldr	r2, [pc, #208]	@ (80086f8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8008628:	4e34      	ldr	r6, [pc, #208]	@ (80086fc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 800862a:	6813      	ldr	r3, [r2, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008630:	6833      	ldr	r3, [r6, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d031      	beq.n	800869a <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008636:	4c32      	ldr	r4, [pc, #200]	@ (8008700 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008638:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	b333      	cbz	r3, 800868c <prvAddNewTaskToReadyList+0x70>
 800863e:	4f31      	ldr	r7, [pc, #196]	@ (8008704 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008640:	4a31      	ldr	r2, [pc, #196]	@ (8008708 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008642:	4932      	ldr	r1, [pc, #200]	@ (800870c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8008644:	6813      	ldr	r3, [r2, #0]
 8008646:	3301      	adds	r3, #1
 8008648:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800864a:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800864c:	680b      	ldr	r3, [r1, #0]
 800864e:	4283      	cmp	r3, r0
 8008650:	d200      	bcs.n	8008654 <prvAddNewTaskToReadyList+0x38>
 8008652:	6008      	str	r0, [r1, #0]
 8008654:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008658:	1d29      	adds	r1, r5, #4
 800865a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800865e:	f7ff f979 	bl	8007954 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008662:	f001 f861 	bl	8009728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	b173      	cbz	r3, 8008688 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800866a:	6832      	ldr	r2, [r6, #0]
 800866c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800866e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008670:	429a      	cmp	r2, r3
 8008672:	d209      	bcs.n	8008688 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008674:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800867c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800868c:	6833      	ldr	r3, [r6, #0]
 800868e:	4f1d      	ldr	r7, [pc, #116]	@ (8008704 <prvAddNewTaskToReadyList+0xe8>)
 8008690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008692:	4283      	cmp	r3, r0
 8008694:	d8d4      	bhi.n	8008640 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8008696:	6035      	str	r5, [r6, #0]
 8008698:	e7d2      	b.n	8008640 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800869a:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800869c:	6813      	ldr	r3, [r2, #0]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d003      	beq.n	80086aa <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086a2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80086a4:	4f17      	ldr	r7, [pc, #92]	@ (8008704 <prvAddNewTaskToReadyList+0xe8>)
 80086a6:	4c16      	ldr	r4, [pc, #88]	@ (8008700 <prvAddNewTaskToReadyList+0xe4>)
 80086a8:	e7ca      	b.n	8008640 <prvAddNewTaskToReadyList+0x24>
 80086aa:	4f16      	ldr	r7, [pc, #88]	@ (8008704 <prvAddNewTaskToReadyList+0xe8>)
 80086ac:	463c      	mov	r4, r7
 80086ae:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086b2:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086b4:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086b6:	f7ff f93d 	bl	8007934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ba:	45a0      	cmp	r8, r4
 80086bc:	d1f9      	bne.n	80086b2 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086be:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8008724 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80086c2:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8008728 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 80086c6:	4648      	mov	r0, r9
 80086c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008700 <prvAddNewTaskToReadyList+0xe4>)
 80086ca:	f7ff f933 	bl	8007934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086ce:	4640      	mov	r0, r8
 80086d0:	f7ff f930 	bl	8007934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086d4:	480e      	ldr	r0, [pc, #56]	@ (8008710 <prvAddNewTaskToReadyList+0xf4>)
 80086d6:	f7ff f92d 	bl	8007934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086da:	480e      	ldr	r0, [pc, #56]	@ (8008714 <prvAddNewTaskToReadyList+0xf8>)
 80086dc:	f7ff f92a 	bl	8007934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086e0:	480d      	ldr	r0, [pc, #52]	@ (8008718 <prvAddNewTaskToReadyList+0xfc>)
 80086e2:	f7ff f927 	bl	8007934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086e6:	4b0d      	ldr	r3, [pc, #52]	@ (800871c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80086e8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80086ea:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008720 <prvAddNewTaskToReadyList+0x104>)
 80086f0:	f8c3 8000 	str.w	r8, [r3]
}
 80086f4:	e7a4      	b.n	8008640 <prvAddNewTaskToReadyList+0x24>
 80086f6:	bf00      	nop
 80086f8:	240013c4 	.word	0x240013c4
 80086fc:	24001898 	.word	0x24001898
 8008700:	240013b8 	.word	0x240013b8
 8008704:	24001438 	.word	0x24001438
 8008708:	240013a8 	.word	0x240013a8
 800870c:	240013bc 	.word	0x240013bc
 8008710:	240013f4 	.word	0x240013f4
 8008714:	240013e0 	.word	0x240013e0
 8008718:	240013c8 	.word	0x240013c8
 800871c:	2400140c 	.word	0x2400140c
 8008720:	24001408 	.word	0x24001408
 8008724:	24001424 	.word	0x24001424
 8008728:	24001410 	.word	0x24001410

0800872c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800872e:	4b15      	ldr	r3, [pc, #84]	@ (8008784 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8008730:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008732:	4e15      	ldr	r6, [pc, #84]	@ (8008788 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008734:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008736:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008738:	6833      	ldr	r3, [r6, #0]
 800873a:	1d18      	adds	r0, r3, #4
 800873c:	f7ff f930 	bl	80079a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008740:	1c63      	adds	r3, r4, #1
 8008742:	d100      	bne.n	8008746 <prvAddCurrentTaskToDelayedList+0x1a>
 8008744:	b9bf      	cbnz	r7, 8008776 <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008746:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008748:	6833      	ldr	r3, [r6, #0]
 800874a:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800874c:	d307      	bcc.n	800875e <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800874e:	4b0f      	ldr	r3, [pc, #60]	@ (800878c <prvAddCurrentTaskToDelayedList+0x60>)
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008758:	3104      	adds	r1, #4
 800875a:	f7ff b909 	b.w	8007970 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800875e:	4b0c      	ldr	r3, [pc, #48]	@ (8008790 <prvAddCurrentTaskToDelayedList+0x64>)
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	6831      	ldr	r1, [r6, #0]
 8008764:	3104      	adds	r1, #4
 8008766:	f7ff f903 	bl	8007970 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800876a:	4b0a      	ldr	r3, [pc, #40]	@ (8008794 <prvAddCurrentTaskToDelayedList+0x68>)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	42aa      	cmp	r2, r5
 8008770:	d900      	bls.n	8008774 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8008772:	601d      	str	r5, [r3, #0]
}
 8008774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008776:	6831      	ldr	r1, [r6, #0]
 8008778:	4807      	ldr	r0, [pc, #28]	@ (8008798 <prvAddCurrentTaskToDelayedList+0x6c>)
 800877a:	3104      	adds	r1, #4
}
 800877c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008780:	f7ff b8e8 	b.w	8007954 <vListInsertEnd>
 8008784:	240013c0 	.word	0x240013c0
 8008788:	24001898 	.word	0x24001898
 800878c:	24001408 	.word	0x24001408
 8008790:	2400140c 	.word	0x2400140c
 8008794:	240013a4 	.word	0x240013a4
 8008798:	240013c8 	.word	0x240013c8

0800879c <prvDeleteTCB>:
	{
 800879c:	b510      	push	{r4, lr}
 800879e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087a0:	3054      	adds	r0, #84	@ 0x54
 80087a2:	f00a fc6f 	bl	8013084 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087a6:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80087aa:	b163      	cbz	r3, 80087c6 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d013      	beq.n	80087d8 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d010      	beq.n	80087d6 <prvDeleteTCB+0x3a>
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	e7fe      	b.n	80087c4 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80087c6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80087c8:	f001 f996 	bl	8009af8 <vPortFree>
				vPortFree( pxTCB );
 80087cc:	4620      	mov	r0, r4
	}
 80087ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80087d2:	f001 b991 	b.w	8009af8 <vPortFree>
	}
 80087d6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80087d8:	4620      	mov	r0, r4
	}
 80087da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80087de:	f001 b98b 	b.w	8009af8 <vPortFree>
 80087e2:	bf00      	nop

080087e4 <prvIdleTask>:
{
 80087e4:	4c15      	ldr	r4, [pc, #84]	@ (800883c <prvIdleTask+0x58>)
				taskYIELD();
 80087e6:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 80087ea:	4e15      	ldr	r6, [pc, #84]	@ (8008840 <prvIdleTask+0x5c>)
 80087ec:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 80087f0:	4d14      	ldr	r5, [pc, #80]	@ (8008844 <prvIdleTask+0x60>)
 80087f2:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8008848 <prvIdleTask+0x64>
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	e011      	b.n	800881e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80087fa:	f000 ff73 	bl	80096e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087fe:	68f3      	ldr	r3, [r6, #12]
 8008800:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008802:	1d38      	adds	r0, r7, #4
 8008804:	f7ff f8cc 	bl	80079a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	3b01      	subs	r3, #1
 800880c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	3b01      	subs	r3, #1
 8008812:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008814:	f000 ff88 	bl	8009728 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff ffbf 	bl	800879c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1ea      	bne.n	80087fa <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008824:	f8da 3000 	ldr.w	r3, [sl]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d9f8      	bls.n	800881e <prvIdleTask+0x3a>
				taskYIELD();
 800882c:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	e7f1      	b.n	800881e <prvIdleTask+0x3a>
 800883a:	bf00      	nop
 800883c:	240013dc 	.word	0x240013dc
 8008840:	240013e0 	.word	0x240013e0
 8008844:	240013c4 	.word	0x240013c4
 8008848:	24001438 	.word	0x24001438

0800884c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800884c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008850:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008852:	0095      	lsls	r5, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008854:	4606      	mov	r6, r0
 8008856:	4689      	mov	r9, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008858:	462a      	mov	r2, r5
 800885a:	21a5      	movs	r1, #165	@ 0xa5
 800885c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800885e:	461f      	mov	r7, r3
 8008860:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008864:	3d04      	subs	r5, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008866:	f00a fbe2 	bl	801302e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800886a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800886c:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800886e:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	d044      	beq.n	8008902 <prvInitialiseNewTask.constprop.0+0xb6>
 8008878:	f109 3cff 	add.w	ip, r9, #4294967295
 800887c:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 8008880:	f109 090f 	add.w	r9, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008884:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8008888:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800888c:	b10a      	cbz	r2, 8008892 <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800888e:	45cc      	cmp	ip, r9
 8008890:	d1f8      	bne.n	8008884 <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008892:	2300      	movs	r3, #0
 8008894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008898:	9b08      	ldr	r3, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800889a:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800889e:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088a0:	2b37      	cmp	r3, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80088a2:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088a6:	bf28      	it	cs
 80088a8:	2337      	movcs	r3, #55	@ 0x37
 80088aa:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 80088ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80088ae:	64e3      	str	r3, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088b0:	f7ff f84c 	bl	800794c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088b4:	f104 0018 	add.w	r0, r4, #24
 80088b8:	f7ff f848 	bl	800794c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088bc:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088c0:	4651      	mov	r1, sl
 80088c2:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c4:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088c6:	f104 0054 	add.w	r0, r4, #84	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 80088ca:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ce:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088d0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088d2:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088d6:	f00a fbaa 	bl	801302e <memset>
 80088da:	4b0b      	ldr	r3, [pc, #44]	@ (8008908 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088dc:	4628      	mov	r0, r5
 80088de:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088e0:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 80088e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80088e6:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088e8:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088ea:	65e5      	str	r5, [r4, #92]	@ 0x5c
 80088ec:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ee:	f000 fecb 	bl	8009688 <pxPortInitialiseStack>
 80088f2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80088f4:	f1b8 0f00 	cmp.w	r8, #0
 80088f8:	d001      	beq.n	80088fe <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088fa:	f8c8 4000 	str.w	r4, [r8]
}
 80088fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008902:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
 8008906:	e7c7      	b.n	8008898 <prvInitialiseNewTask.constprop.0+0x4c>
 8008908:	2400fe1c 	.word	0x2400fe1c

0800890c <xTaskCreateStatic>:
	{
 800890c:	b530      	push	{r4, r5, lr}
 800890e:	b087      	sub	sp, #28
 8008910:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008912:	b1c4      	cbz	r4, 8008946 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8008914:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008916:	b16d      	cbz	r5, 8008934 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008918:	25a8      	movs	r5, #168	@ 0xa8
 800891a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800891c:	9d05      	ldr	r5, [sp, #20]
 800891e:	2da8      	cmp	r5, #168	@ 0xa8
 8008920:	d01a      	beq.n	8008958 <xTaskCreateStatic+0x4c>
 8008922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	e7fe      	b.n	8008932 <xTaskCreateStatic+0x26>
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8008944:	e7fe      	b.n	8008944 <xTaskCreateStatic+0x38>
 8008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8008956:	e7fe      	b.n	8008956 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008958:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800895a:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800895c:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800895e:	9502      	str	r5, [sp, #8]
 8008960:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008962:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008964:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008966:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800896a:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800896c:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800896e:	9401      	str	r4, [sp, #4]
 8008970:	f7ff ff6c 	bl	800884c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008974:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008976:	f7ff fe51 	bl	800861c <prvAddNewTaskToReadyList>
	}
 800897a:	9804      	ldr	r0, [sp, #16]
 800897c:	b007      	add	sp, #28
 800897e:	bd30      	pop	{r4, r5, pc}

08008980 <xTaskCreate>:
	{
 8008980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008984:	4607      	mov	r7, r0
 8008986:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008988:	0090      	lsls	r0, r2, #2
	{
 800898a:	4615      	mov	r5, r2
 800898c:	4688      	mov	r8, r1
 800898e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008990:	f001 f81c 	bl	80099cc <pvPortMalloc>
			if( pxStack != NULL )
 8008994:	b1f0      	cbz	r0, 80089d4 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008996:	4604      	mov	r4, r0
 8008998:	20a8      	movs	r0, #168	@ 0xa8
 800899a:	f001 f817 	bl	80099cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800899e:	4606      	mov	r6, r0
 80089a0:	b1a8      	cbz	r0, 80089ce <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80089a2:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089a4:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089a6:	464b      	mov	r3, r9
 80089a8:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089aa:	f886 40a5 	strb.w	r4, [r6, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089ae:	4641      	mov	r1, r8
 80089b0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80089b2:	4638      	mov	r0, r7
 80089b4:	9602      	str	r6, [sp, #8]
 80089b6:	9401      	str	r4, [sp, #4]
 80089b8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80089ba:	9400      	str	r4, [sp, #0]
 80089bc:	f7ff ff46 	bl	800884c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff fe2b 	bl	800861c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089c6:	2001      	movs	r0, #1
	}
 80089c8:	b005      	add	sp, #20
 80089ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80089ce:	4620      	mov	r0, r4
 80089d0:	f001 f892 	bl	8009af8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80089d8:	b005      	add	sp, #20
 80089da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089de:	bf00      	nop

080089e0 <vTaskStartScheduler>:
{
 80089e0:	b510      	push	{r4, lr}
 80089e2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089e4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089e6:	aa07      	add	r2, sp, #28
 80089e8:	a906      	add	r1, sp, #24
 80089ea:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089ec:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089f0:	f7fe ff80 	bl	80078f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089f4:	4623      	mov	r3, r4
 80089f6:	9a07      	ldr	r2, [sp, #28]
 80089f8:	9400      	str	r4, [sp, #0]
 80089fa:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80089fe:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8008a02:	4918      	ldr	r1, [pc, #96]	@ (8008a64 <vTaskStartScheduler+0x84>)
 8008a04:	4818      	ldr	r0, [pc, #96]	@ (8008a68 <vTaskStartScheduler+0x88>)
 8008a06:	f7ff ff81 	bl	800890c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008a0a:	b170      	cbz	r0, 8008a2a <vTaskStartScheduler+0x4a>
			xReturn = xTimerCreateTimerTask();
 8008a0c:	f000 fc20 	bl	8009250 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008a10:	2801      	cmp	r0, #1
 8008a12:	d00c      	beq.n	8008a2e <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a14:	3001      	adds	r0, #1
 8008a16:	d108      	bne.n	8008a2a <vTaskStartScheduler+0x4a>
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	e7fe      	b.n	8008a28 <vTaskStartScheduler+0x48>
}
 8008a2a:	b008      	add	sp, #32
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a6c <vTaskStartScheduler+0x8c>)
 8008a40:	4a0b      	ldr	r2, [pc, #44]	@ (8008a70 <vTaskStartScheduler+0x90>)
 8008a42:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a44:	490b      	ldr	r1, [pc, #44]	@ (8008a74 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a46:	3354      	adds	r3, #84	@ 0x54
 8008a48:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a4a:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8008a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8008a78 <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a50:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a52:	4b0a      	ldr	r3, [pc, #40]	@ (8008a7c <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 8008a54:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a56:	601c      	str	r4, [r3, #0]
}
 8008a58:	b008      	add	sp, #32
 8008a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008a5e:	f000 bed3 	b.w	8009808 <xPortStartScheduler>
 8008a62:	bf00      	nop
 8008a64:	08014a8c 	.word	0x08014a8c
 8008a68:	080087e5 	.word	0x080087e5
 8008a6c:	24001898 	.word	0x24001898
 8008a70:	24000044 	.word	0x24000044
 8008a74:	240013a4 	.word	0x240013a4
 8008a78:	240013b8 	.word	0x240013b8
 8008a7c:	240013c0 	.word	0x240013c0

08008a80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008a80:	4a02      	ldr	r2, [pc, #8]	@ (8008a8c <vTaskSuspendAll+0xc>)
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	6013      	str	r3, [r2, #0]
}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	240013a0 	.word	0x240013a0

08008a90 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008a90:	4b01      	ldr	r3, [pc, #4]	@ (8008a98 <xTaskGetTickCount+0x8>)
 8008a92:	6818      	ldr	r0, [r3, #0]
}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	240013c0 	.word	0x240013c0

08008a9c <xTaskGetTickCountFromISR>:
{
 8008a9c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a9e:	f000 ff3d 	bl	800991c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8008aa2:	4b01      	ldr	r3, [pc, #4]	@ (8008aa8 <xTaskGetTickCountFromISR+0xc>)
 8008aa4:	6818      	ldr	r0, [r3, #0]
}
 8008aa6:	bd08      	pop	{r3, pc}
 8008aa8:	240013c0 	.word	0x240013c0

08008aac <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aac:	4b4f      	ldr	r3, [pc, #316]	@ (8008bec <xTaskIncrementTick+0x140>)
 8008aae:	681b      	ldr	r3, [r3, #0]
{
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d145      	bne.n	8008b46 <xTaskIncrementTick+0x9a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008aba:	4b4d      	ldr	r3, [pc, #308]	@ (8008bf0 <xTaskIncrementTick+0x144>)
 8008abc:	681e      	ldr	r6, [r3, #0]
 8008abe:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8008ac0:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ac2:	2e00      	cmp	r6, #0
 8008ac4:	d048      	beq.n	8008b58 <xTaskIncrementTick+0xac>
 8008ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8008bf4 <xTaskIncrementTick+0x148>)
 8008ac8:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008aca:	9b01      	ldr	r3, [sp, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	429e      	cmp	r6, r3
 8008ad0:	d34f      	bcc.n	8008b72 <xTaskIncrementTick+0xc6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad2:	4f49      	ldr	r7, [pc, #292]	@ (8008bf8 <xTaskIncrementTick+0x14c>)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681d      	ldr	r5, [r3, #0]
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	d076      	beq.n	8008bca <xTaskIncrementTick+0x11e>
BaseType_t xSwitchRequired = pdFALSE;
 8008adc:	2500      	movs	r5, #0
 8008ade:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8008c0c <xTaskIncrementTick+0x160>
 8008ae2:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 8008c10 <xTaskIncrementTick+0x164>
					prvAddTaskToReadyList( pxTCB );
 8008ae6:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8008c14 <xTaskIncrementTick+0x168>
 8008aea:	e020      	b.n	8008b2e <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aec:	f7fe ff58 	bl	80079a0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008af0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008af2:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008af6:	b10b      	cbz	r3, 8008afc <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008af8:	f7fe ff52 	bl	80079a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008afc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008afe:	4659      	mov	r1, fp
 8008b00:	f8d8 3000 	ldr.w	r3, [r8]
 8008b04:	4298      	cmp	r0, r3
 8008b06:	d901      	bls.n	8008b0c <xTaskIncrementTick+0x60>
 8008b08:	f8c8 0000 	str.w	r0, [r8]
 8008b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008b10:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8008b14:	f7fe ff1e 	bl	8007954 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b18:	f8da 3000 	ldr.w	r3, [sl]
 8008b1c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008b20:	429a      	cmp	r2, r3
 8008b22:	bf28      	it	cs
 8008b24:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d051      	beq.n	8008bd2 <xTaskIncrementTick+0x126>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b34:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b36:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 8008b3a:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b3c:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 8008b3e:	d2d5      	bcs.n	8008aec <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8008b40:	9a01      	ldr	r2, [sp, #4]
 8008b42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b44:	e01a      	b.n	8008b7c <xTaskIncrementTick+0xd0>
		++xPendedTicks;
 8008b46:	4a2d      	ldr	r2, [pc, #180]	@ (8008bfc <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8008b48:	2500      	movs	r5, #0
		++xPendedTicks;
 8008b4a:	6813      	ldr	r3, [r2, #0]
}
 8008b4c:	4628      	mov	r0, r5
		++xPendedTicks;
 8008b4e:	3301      	adds	r3, #1
 8008b50:	6013      	str	r3, [r2, #0]
}
 8008b52:	b003      	add	sp, #12
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8008b58:	4b27      	ldr	r3, [pc, #156]	@ (8008bf8 <xTaskIncrementTick+0x14c>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	6812      	ldr	r2, [r2, #0]
 8008b5e:	b30a      	cbz	r2, 8008ba4 <xTaskIncrementTick+0xf8>
 8008b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	e7fe      	b.n	8008b70 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8008b72:	2500      	movs	r5, #0
 8008b74:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8008c0c <xTaskIncrementTick+0x160>
 8008b78:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8008c10 <xTaskIncrementTick+0x164>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b7c:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8008b80:	491f      	ldr	r1, [pc, #124]	@ (8008c00 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8008b8e:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8008b90:	2a02      	cmp	r2, #2
 8008b92:	bf28      	it	cs
 8008b94:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	bf18      	it	ne
 8008b9a:	2501      	movne	r5, #1
}
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	b003      	add	sp, #12
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8008ba4:	4a17      	ldr	r2, [pc, #92]	@ (8008c04 <xTaskIncrementTick+0x158>)
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	6811      	ldr	r1, [r2, #0]
 8008baa:	6019      	str	r1, [r3, #0]
 8008bac:	4916      	ldr	r1, [pc, #88]	@ (8008c08 <xTaskIncrementTick+0x15c>)
 8008bae:	6010      	str	r0, [r2, #0]
 8008bb0:	680a      	ldr	r2, [r1, #0]
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	6812      	ldr	r2, [r2, #0]
 8008bba:	b97a      	cbnz	r2, 8008bdc <xTaskIncrementTick+0x130>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf4 <xTaskIncrementTick+0x148>)
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	e77f      	b.n	8008aca <xTaskIncrementTick+0x1e>
 8008bca:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8008c0c <xTaskIncrementTick+0x160>
 8008bce:	f8df a040 	ldr.w	sl, [pc, #64]	@ 8008c10 <xTaskIncrementTick+0x164>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd6:	9a01      	ldr	r2, [sp, #4]
 8008bd8:	6013      	str	r3, [r2, #0]
					break;
 8008bda:	e7cf      	b.n	8008b7c <xTaskIncrementTick+0xd0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bdc:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bde:	4a05      	ldr	r2, [pc, #20]	@ (8008bf4 <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008be2:	9201      	str	r2, [sp, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6013      	str	r3, [r2, #0]
}
 8008bea:	e76e      	b.n	8008aca <xTaskIncrementTick+0x1e>
 8008bec:	240013a0 	.word	0x240013a0
 8008bf0:	240013c0 	.word	0x240013c0
 8008bf4:	240013a4 	.word	0x240013a4
 8008bf8:	2400140c 	.word	0x2400140c
 8008bfc:	240013b4 	.word	0x240013b4
 8008c00:	240013b0 	.word	0x240013b0
 8008c04:	24001408 	.word	0x24001408
 8008c08:	240013ac 	.word	0x240013ac
 8008c0c:	24001438 	.word	0x24001438
 8008c10:	24001898 	.word	0x24001898
 8008c14:	240013bc 	.word	0x240013bc

08008c18 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8008c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 8008c1c:	f000 fd62 	bl	80096e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008c20:	4b37      	ldr	r3, [pc, #220]	@ (8008d00 <xTaskResumeAll.part.0+0xe8>)
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	3a01      	subs	r2, #1
 8008c26:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d159      	bne.n	8008ce2 <xTaskResumeAll.part.0+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c2e:	4b35      	ldr	r3, [pc, #212]	@ (8008d04 <xTaskResumeAll.part.0+0xec>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d055      	beq.n	8008ce2 <xTaskResumeAll.part.0+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c36:	4d34      	ldr	r5, [pc, #208]	@ (8008d08 <xTaskResumeAll.part.0+0xf0>)
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d05c      	beq.n	8008cf8 <xTaskResumeAll.part.0+0xe0>
 8008c3e:	4e33      	ldr	r6, [pc, #204]	@ (8008d0c <xTaskResumeAll.part.0+0xf4>)
						xYieldPending = pdTRUE;
 8008c40:	f04f 0a01 	mov.w	sl, #1
 8008c44:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8008d20 <xTaskResumeAll.part.0+0x108>
 8008c48:	4f31      	ldr	r7, [pc, #196]	@ (8008d10 <xTaskResumeAll.part.0+0xf8>)
 8008c4a:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8008d24 <xTaskResumeAll.part.0+0x10c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c4e:	68eb      	ldr	r3, [r5, #12]
 8008c50:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c52:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c56:	f104 0018 	add.w	r0, r4, #24
 8008c5a:	f7fe fea1 	bl	80079a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c5e:	4658      	mov	r0, fp
 8008c60:	f7fe fe9e 	bl	80079a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008c66:	6832      	ldr	r2, [r6, #0]
 8008c68:	4659      	mov	r1, fp
 8008c6a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8008c74:	d900      	bls.n	8008c78 <xTaskResumeAll.part.0+0x60>
 8008c76:	6033      	str	r3, [r6, #0]
 8008c78:	f7fe fe6c 	bl	8007954 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d301      	bcc.n	8008c8a <xTaskResumeAll.part.0+0x72>
						xYieldPending = pdTRUE;
 8008c86:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1de      	bne.n	8008c4e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c90:	4b20      	ldr	r3, [pc, #128]	@ (8008d14 <xTaskResumeAll.part.0+0xfc>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	6812      	ldr	r2, [r2, #0]
 8008c96:	b352      	cbz	r2, 8008cee <xTaskResumeAll.part.0+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c98:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8008d18 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c9e:	68d2      	ldr	r2, [r2, #12]
 8008ca0:	6852      	ldr	r2, [r2, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ca4:	4e1d      	ldr	r6, [pc, #116]	@ (8008d1c <xTaskResumeAll.part.0+0x104>)
 8008ca6:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008ca8:	b144      	cbz	r4, 8008cbc <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 8008caa:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008cac:	f7ff fefe 	bl	8008aac <xTaskIncrementTick>
 8008cb0:	b108      	cbz	r0, 8008cb6 <xTaskResumeAll.part.0+0x9e>
								xYieldPending = pdTRUE;
 8008cb2:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008cb6:	3c01      	subs	r4, #1
 8008cb8:	d1f8      	bne.n	8008cac <xTaskResumeAll.part.0+0x94>
						xPendedTicks = 0;
 8008cba:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8008cbc:	f8d9 3000 	ldr.w	r3, [r9]
 8008cc0:	b17b      	cbz	r3, 8008ce2 <xTaskResumeAll.part.0+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8008cc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008cd6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008cd8:	f000 fd26 	bl	8009728 <vPortExitCritical>
}
 8008cdc:	4620      	mov	r0, r4
 8008cde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8008ce2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008ce4:	f000 fd20 	bl	8009728 <vPortExitCritical>
}
 8008ce8:	4620      	mov	r0, r4
 8008cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cee:	4b0a      	ldr	r3, [pc, #40]	@ (8008d18 <xTaskResumeAll.part.0+0x100>)
 8008cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	e7d5      	b.n	8008ca4 <xTaskResumeAll.part.0+0x8c>
 8008cf8:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 8008d24 <xTaskResumeAll.part.0+0x10c>
 8008cfc:	e7d2      	b.n	8008ca4 <xTaskResumeAll.part.0+0x8c>
 8008cfe:	bf00      	nop
 8008d00:	240013a0 	.word	0x240013a0
 8008d04:	240013c4 	.word	0x240013c4
 8008d08:	240013f4 	.word	0x240013f4
 8008d0c:	240013bc 	.word	0x240013bc
 8008d10:	24001898 	.word	0x24001898
 8008d14:	2400140c 	.word	0x2400140c
 8008d18:	240013a4 	.word	0x240013a4
 8008d1c:	240013b4 	.word	0x240013b4
 8008d20:	24001438 	.word	0x24001438
 8008d24:	240013b0 	.word	0x240013b0

08008d28 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8008d28:	4b06      	ldr	r3, [pc, #24]	@ (8008d44 <xTaskResumeAll+0x1c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	b943      	cbnz	r3, 8008d40 <xTaskResumeAll+0x18>
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	e7fe      	b.n	8008d3e <xTaskResumeAll+0x16>
 8008d40:	f7ff bf6a 	b.w	8008c18 <xTaskResumeAll.part.0>
 8008d44:	240013a0 	.word	0x240013a0

08008d48 <vTaskDelay>:
	{
 8008d48:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d4a:	b950      	cbnz	r0, 8008d62 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008d4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
	}
 8008d60:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008d62:	4c10      	ldr	r4, [pc, #64]	@ (8008da4 <vTaskDelay+0x5c>)
 8008d64:	6821      	ldr	r1, [r4, #0]
 8008d66:	b141      	cbz	r1, 8008d7a <vTaskDelay+0x32>
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	e7fe      	b.n	8008d78 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d80:	f7ff fcd4 	bl	800872c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	b943      	cbnz	r3, 8008d9a <vTaskDelay+0x52>
 8008d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	e7fe      	b.n	8008d98 <vTaskDelay+0x50>
 8008d9a:	f7ff ff3d 	bl	8008c18 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d0d4      	beq.n	8008d4c <vTaskDelay+0x4>
	}
 8008da2:	bd10      	pop	{r4, pc}
 8008da4:	240013a0 	.word	0x240013a0

08008da8 <vTaskSwitchContext>:
{
 8008da8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008daa:	4b24      	ldr	r3, [pc, #144]	@ (8008e3c <vTaskSwitchContext+0x94>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	b11b      	cbz	r3, 8008db8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008db0:	4b23      	ldr	r3, [pc, #140]	@ (8008e40 <vTaskSwitchContext+0x98>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	601a      	str	r2, [r3, #0]
}
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8008db8:	4c22      	ldr	r4, [pc, #136]	@ (8008e44 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 8008dba:	4a21      	ldr	r2, [pc, #132]	@ (8008e40 <vTaskSwitchContext+0x98>)
 8008dbc:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	6812      	ldr	r2, [r2, #0]
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d92e      	bls.n	8008e28 <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dca:	4d1f      	ldr	r5, [pc, #124]	@ (8008e48 <vTaskSwitchContext+0xa0>)
 8008dcc:	491f      	ldr	r1, [pc, #124]	@ (8008e4c <vTaskSwitchContext+0xa4>)
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008dd4:	0098      	lsls	r0, r3, #2
 8008dd6:	0092      	lsls	r2, r2, #2
 8008dd8:	588a      	ldr	r2, [r1, r2]
 8008dda:	b942      	cbnz	r2, 8008dee <vTaskSwitchContext+0x46>
 8008ddc:	b1db      	cbz	r3, 8008e16 <vTaskSwitchContext+0x6e>
 8008dde:	3b01      	subs	r3, #1
 8008de0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008de4:	0098      	lsls	r0, r3, #2
 8008de6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008dea:	2a00      	cmp	r2, #0
 8008dec:	d0f6      	beq.n	8008ddc <vTaskSwitchContext+0x34>
 8008dee:	4418      	add	r0, r3
 8008df0:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8008df4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008df8:	4662      	mov	r2, ip
 8008dfa:	6849      	ldr	r1, [r1, #4]
 8008dfc:	3208      	adds	r2, #8
 8008dfe:	4291      	cmp	r1, r2
 8008e00:	f8cc 1004 	str.w	r1, [ip, #4]
 8008e04:	d016      	beq.n	8008e34 <vTaskSwitchContext+0x8c>
 8008e06:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e08:	4a11      	ldr	r2, [pc, #68]	@ (8008e50 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e0a:	6021      	str	r1, [r4, #0]
 8008e0c:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	3354      	adds	r3, #84	@ 0x54
 8008e12:	6013      	str	r3, [r2, #0]
}
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e26:	e7fe      	b.n	8008e26 <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	6821      	ldr	r1, [r4, #0]
 8008e2c:	3134      	adds	r1, #52	@ 0x34
 8008e2e:	f7f7 fc1f 	bl	8000670 <vApplicationStackOverflowHook>
 8008e32:	e7ca      	b.n	8008dca <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e34:	6849      	ldr	r1, [r1, #4]
 8008e36:	f8cc 1004 	str.w	r1, [ip, #4]
 8008e3a:	e7e4      	b.n	8008e06 <vTaskSwitchContext+0x5e>
 8008e3c:	240013a0 	.word	0x240013a0
 8008e40:	240013b0 	.word	0x240013b0
 8008e44:	24001898 	.word	0x24001898
 8008e48:	240013bc 	.word	0x240013bc
 8008e4c:	24001438 	.word	0x24001438
 8008e50:	24000044 	.word	0x24000044

08008e54 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008e54:	b160      	cbz	r0, 8008e70 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e56:	4b0b      	ldr	r3, [pc, #44]	@ (8008e84 <vTaskPlaceOnEventList+0x30>)
{
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e5c:	6819      	ldr	r1, [r3, #0]
 8008e5e:	3118      	adds	r1, #24
 8008e60:	f7fe fd86 	bl	8007970 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e64:	4620      	mov	r0, r4
 8008e66:	2101      	movs	r1, #1
}
 8008e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e6c:	f7ff bc5e 	b.w	800872c <prvAddCurrentTaskToDelayedList>
 8008e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008e80:	e7fe      	b.n	8008e80 <vTaskPlaceOnEventList+0x2c>
 8008e82:	bf00      	nop
 8008e84:	24001898 	.word	0x24001898

08008e88 <vTaskPlaceOnEventListRestricted>:
	{
 8008e88:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8008e8a:	b180      	cbz	r0, 8008eae <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec0 <vTaskPlaceOnEventListRestricted+0x38>)
 8008e8e:	460d      	mov	r5, r1
 8008e90:	4614      	mov	r4, r2
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	3118      	adds	r1, #24
 8008e96:	f7fe fd5d 	bl	8007954 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008e9a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	bf0c      	ite	eq
 8008ea0:	4628      	moveq	r0, r5
 8008ea2:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008eaa:	f7ff bc3f 	b.w	800872c <prvAddCurrentTaskToDelayedList>
 8008eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8008ebe:	e7fe      	b.n	8008ebe <vTaskPlaceOnEventListRestricted+0x36>
 8008ec0:	24001898 	.word	0x24001898

08008ec4 <xTaskRemoveFromEventList>:
{
 8008ec4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ec6:	68c3      	ldr	r3, [r0, #12]
 8008ec8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008eca:	b34c      	cbz	r4, 8008f20 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ecc:	f104 0518 	add.w	r5, r4, #24
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f7fe fd65 	bl	80079a0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ed6:	4b18      	ldr	r3, [pc, #96]	@ (8008f38 <xTaskRemoveFromEventList+0x74>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	b173      	cbz	r3, 8008efa <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008edc:	4629      	mov	r1, r5
 8008ede:	4817      	ldr	r0, [pc, #92]	@ (8008f3c <xTaskRemoveFromEventList+0x78>)
 8008ee0:	f7fe fd38 	bl	8007954 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ee4:	4b16      	ldr	r3, [pc, #88]	@ (8008f40 <xTaskRemoveFromEventList+0x7c>)
 8008ee6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d920      	bls.n	8008f32 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4a14      	ldr	r2, [pc, #80]	@ (8008f44 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 8008ef4:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8008ef6:	6013      	str	r3, [r2, #0]
}
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008efa:	1d25      	adds	r5, r4, #4
 8008efc:	4628      	mov	r0, r5
 8008efe:	f7fe fd4f 	bl	80079a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f02:	4b11      	ldr	r3, [pc, #68]	@ (8008f48 <xTaskRemoveFromEventList+0x84>)
 8008f04:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	4290      	cmp	r0, r2
 8008f0a:	d900      	bls.n	8008f0e <xTaskRemoveFromEventList+0x4a>
 8008f0c:	6018      	str	r0, [r3, #0]
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f4c <xTaskRemoveFromEventList+0x88>)
 8008f10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008f14:	4629      	mov	r1, r5
 8008f16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f1a:	f7fe fd1b 	bl	8007954 <vListInsertEnd>
 8008f1e:	e7e1      	b.n	8008ee4 <xTaskRemoveFromEventList+0x20>
 8008f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8008f30:	e7fe      	b.n	8008f30 <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 8008f32:	2000      	movs	r0, #0
}
 8008f34:	bd38      	pop	{r3, r4, r5, pc}
 8008f36:	bf00      	nop
 8008f38:	240013a0 	.word	0x240013a0
 8008f3c:	240013f4 	.word	0x240013f4
 8008f40:	24001898 	.word	0x24001898
 8008f44:	240013b0 	.word	0x240013b0
 8008f48:	240013bc 	.word	0x240013bc
 8008f4c:	24001438 	.word	0x24001438

08008f50 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f50:	4a03      	ldr	r2, [pc, #12]	@ (8008f60 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f52:	4b04      	ldr	r3, [pc, #16]	@ (8008f64 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f54:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	e9c0 2300 	strd	r2, r3, [r0]
}
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	240013ac 	.word	0x240013ac
 8008f64:	240013c0 	.word	0x240013c0

08008f68 <xTaskCheckForTimeOut>:
{
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8008f6a:	b308      	cbz	r0, 8008fb0 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8008f6c:	460d      	mov	r5, r1
 8008f6e:	b1b1      	cbz	r1, 8008f9e <xTaskCheckForTimeOut+0x36>
 8008f70:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008f72:	f000 fbb7 	bl	80096e4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8008f76:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8008f78:	4a1a      	ldr	r2, [pc, #104]	@ (8008fe4 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8008f7a:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8008f7c:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008f7e:	d02c      	beq.n	8008fda <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f80:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8008fe8 <xTaskCheckForTimeOut+0x80>
 8008f84:	6826      	ldr	r6, [r4, #0]
 8008f86:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f8a:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f8c:	42be      	cmp	r6, r7
 8008f8e:	d018      	beq.n	8008fc2 <xTaskCheckForTimeOut+0x5a>
 8008f90:	4288      	cmp	r0, r1
 8008f92:	d816      	bhi.n	8008fc2 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8008f94:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008f96:	f000 fbc7 	bl	8009728 <vPortExitCritical>
}
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8008fae:	e7fe      	b.n	8008fae <xTaskCheckForTimeOut+0x46>
 8008fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8008fc0:	e7fe      	b.n	8008fc0 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fc2:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fc6:	4573      	cmp	r3, lr
 8008fc8:	d909      	bls.n	8008fde <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8008fca:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fcc:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fd0:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8008fd2:	4403      	add	r3, r0
 8008fd4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fd6:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8008fda:	2400      	movs	r4, #0
 8008fdc:	e7db      	b.n	8008f96 <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8008fe2:	e7d7      	b.n	8008f94 <xTaskCheckForTimeOut+0x2c>
 8008fe4:	240013c0 	.word	0x240013c0
 8008fe8:	240013ac 	.word	0x240013ac

08008fec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008fec:	4b01      	ldr	r3, [pc, #4]	@ (8008ff4 <vTaskMissedYield+0x8>)
 8008fee:	2201      	movs	r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]
}
 8008ff2:	4770      	bx	lr
 8008ff4:	240013b0 	.word	0x240013b0

08008ff8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008ff8:	4b01      	ldr	r3, [pc, #4]	@ (8009000 <xTaskGetCurrentTaskHandle+0x8>)
 8008ffa:	6818      	ldr	r0, [r3, #0]
	}
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	24001898 	.word	0x24001898

08009004 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009004:	4b05      	ldr	r3, [pc, #20]	@ (800901c <xTaskGetSchedulerState+0x18>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	b133      	cbz	r3, 8009018 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800900a:	4b05      	ldr	r3, [pc, #20]	@ (8009020 <xTaskGetSchedulerState+0x1c>)
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	fab0 f080 	clz	r0, r0
 8009012:	0940      	lsrs	r0, r0, #5
 8009014:	0040      	lsls	r0, r0, #1
 8009016:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009018:	2001      	movs	r0, #1
	}
 800901a:	4770      	bx	lr
 800901c:	240013b8 	.word	0x240013b8
 8009020:	240013a0 	.word	0x240013a0

08009024 <xTaskPriorityInherit>:
	{
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8009026:	4604      	mov	r4, r0
 8009028:	b1c8      	cbz	r0, 800905e <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800902a:	4d1b      	ldr	r5, [pc, #108]	@ (8009098 <xTaskPriorityInherit+0x74>)
 800902c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800902e:	682a      	ldr	r2, [r5, #0]
 8009030:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009032:	4293      	cmp	r3, r2
 8009034:	d214      	bcs.n	8009060 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009036:	6982      	ldr	r2, [r0, #24]
 8009038:	2a00      	cmp	r2, #0
 800903a:	db04      	blt.n	8009046 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800903c:	682a      	ldr	r2, [r5, #0]
 800903e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009040:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8009044:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800904a:	4e14      	ldr	r6, [pc, #80]	@ (800909c <xTaskPriorityInherit+0x78>)
 800904c:	6962      	ldr	r2, [r4, #20]
 800904e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009052:	429a      	cmp	r2, r3
 8009054:	d00c      	beq.n	8009070 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905a:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800905c:	2001      	movs	r0, #1
	}
 800905e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009066:	4298      	cmp	r0, r3
 8009068:	bf2c      	ite	cs
 800906a:	2000      	movcs	r0, #0
 800906c:	2001      	movcc	r0, #1
	}
 800906e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009070:	1d27      	adds	r7, r4, #4
 8009072:	4638      	mov	r0, r7
 8009074:	f7fe fc94 	bl	80079a0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009078:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800907a:	4b09      	ldr	r3, [pc, #36]	@ (80090a0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800907c:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800907e:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009080:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009082:	4290      	cmp	r0, r2
 8009084:	d900      	bls.n	8009088 <xTaskPriorityInherit+0x64>
 8009086:	6018      	str	r0, [r3, #0]
 8009088:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800908c:	4639      	mov	r1, r7
 800908e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8009092:	f7fe fc5f 	bl	8007954 <vListInsertEnd>
 8009096:	e7e1      	b.n	800905c <xTaskPriorityInherit+0x38>
 8009098:	24001898 	.word	0x24001898
 800909c:	24001438 	.word	0x24001438
 80090a0:	240013bc 	.word	0x240013bc

080090a4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80090a4:	b308      	cbz	r0, 80090ea <xTaskPriorityDisinherit+0x46>
	{
 80090a6:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80090a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <xTaskPriorityDisinherit+0x7c>)
 80090aa:	681c      	ldr	r4, [r3, #0]
 80090ac:	4284      	cmp	r4, r0
 80090ae:	d008      	beq.n	80090c2 <xTaskPriorityDisinherit+0x1e>
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	e7fe      	b.n	80090c0 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 80090c2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80090c4:	b143      	cbz	r3, 80090d8 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 80090c8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090ca:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80090cc:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090ce:	4291      	cmp	r1, r2
 80090d0:	d000      	beq.n	80090d4 <xTaskPriorityDisinherit+0x30>
 80090d2:	b163      	cbz	r3, 80090ee <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80090d4:	2000      	movs	r0, #0
	}
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80090e8:	e7fe      	b.n	80090e8 <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 80090ea:	2000      	movs	r0, #0
	}
 80090ec:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ee:	1d25      	adds	r5, r4, #4
 80090f0:	4628      	mov	r0, r5
 80090f2:	f7fe fc55 	bl	80079a0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090f6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 80090f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009124 <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fa:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090fe:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009100:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	4290      	cmp	r0, r2
 8009106:	d900      	bls.n	800910a <xTaskPriorityDisinherit+0x66>
 8009108:	6018      	str	r0, [r3, #0]
 800910a:	4b07      	ldr	r3, [pc, #28]	@ (8009128 <xTaskPriorityDisinherit+0x84>)
 800910c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009110:	4629      	mov	r1, r5
 8009112:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009116:	f7fe fc1d 	bl	8007954 <vListInsertEnd>
					xReturn = pdTRUE;
 800911a:	2001      	movs	r0, #1
	}
 800911c:	bd38      	pop	{r3, r4, r5, pc}
 800911e:	bf00      	nop
 8009120:	24001898 	.word	0x24001898
 8009124:	240013bc 	.word	0x240013bc
 8009128:	24001438 	.word	0x24001438

0800912c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800912c:	2800      	cmp	r0, #0
 800912e:	d03c      	beq.n	80091aa <vTaskPriorityDisinheritAfterTimeout+0x7e>
			configASSERT( pxTCB->uxMutexesHeld );
 8009130:	6d03      	ldr	r3, [r0, #80]	@ 0x50
	{
 8009132:	b570      	push	{r4, r5, r6, lr}
 8009134:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8009136:	b14b      	cbz	r3, 800914c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009138:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 800913a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800913c:	4281      	cmp	r1, r0
 800913e:	bf38      	it	cc
 8009140:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8009146:	428a      	cmp	r2, r1
 8009148:	d109      	bne.n	800915e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800915c:	e7fe      	b.n	800915c <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 800915e:	4b18      	ldr	r3, [pc, #96]	@ (80091c0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	42a3      	cmp	r3, r4
 8009164:	d022      	beq.n	80091ac <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009166:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8009168:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800916a:	2b00      	cmp	r3, #0
 800916c:	db02      	blt.n	8009174 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800916e:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 8009172:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009174:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009178:	4d12      	ldr	r5, [pc, #72]	@ (80091c4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800917a:	6961      	ldr	r1, [r4, #20]
 800917c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8009180:	4299      	cmp	r1, r3
 8009182:	d1e2      	bne.n	800914a <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009184:	1d26      	adds	r6, r4, #4
 8009186:	4630      	mov	r0, r6
 8009188:	f7fe fc0a 	bl	80079a0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800918c:	4b0e      	ldr	r3, [pc, #56]	@ (80091c8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800918e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4290      	cmp	r0, r2
 8009194:	d900      	bls.n	8009198 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8009196:	6018      	str	r0, [r3, #0]
 8009198:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800919c:	4631      	mov	r1, r6
 800919e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80091a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80091a6:	f7fe bbd5 	b.w	8007954 <vListInsertEnd>
 80091aa:	4770      	bx	lr
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80091bc:	e7fe      	b.n	80091bc <vTaskPriorityDisinheritAfterTimeout+0x90>
 80091be:	bf00      	nop
 80091c0:	24001898 	.word	0x24001898
 80091c4:	24001438 	.word	0x24001438
 80091c8:	240013bc 	.word	0x240013bc

080091cc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80091cc:	4b04      	ldr	r3, [pc, #16]	@ (80091e0 <pvTaskIncrementMutexHeldCount+0x14>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	b11a      	cbz	r2, 80091da <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80091d2:	6819      	ldr	r1, [r3, #0]
 80091d4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80091d6:	3201      	adds	r2, #1
 80091d8:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80091da:	6818      	ldr	r0, [r3, #0]
	}
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	24001898 	.word	0x24001898

080091e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80091e6:	4c12      	ldr	r4, [pc, #72]	@ (8009230 <prvCheckForValidListAndQueue+0x4c>)
{
 80091e8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80091ea:	f000 fa7b 	bl	80096e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80091ee:	6825      	ldr	r5, [r4, #0]
 80091f0:	b125      	cbz	r5, 80091fc <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80091f2:	b003      	add	sp, #12
 80091f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80091f8:	f000 ba96 	b.w	8009728 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80091fc:	4f0d      	ldr	r7, [pc, #52]	@ (8009234 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 80091fe:	4e0e      	ldr	r6, [pc, #56]	@ (8009238 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8009200:	4638      	mov	r0, r7
 8009202:	f7fe fb97 	bl	8007934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009206:	4630      	mov	r0, r6
 8009208:	f7fe fb94 	bl	8007934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800920c:	4a0b      	ldr	r2, [pc, #44]	@ (800923c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800920e:	9500      	str	r5, [sp, #0]
 8009210:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8009212:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009214:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8009216:	4a0a      	ldr	r2, [pc, #40]	@ (8009240 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009218:	4b0a      	ldr	r3, [pc, #40]	@ (8009244 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 800921a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800921c:	4a0a      	ldr	r2, [pc, #40]	@ (8009248 <prvCheckForValidListAndQueue+0x64>)
 800921e:	f7fe fc97 	bl	8007b50 <xQueueGenericCreateStatic>
 8009222:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8009224:	2800      	cmp	r0, #0
 8009226:	d0e4      	beq.n	80091f2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009228:	4908      	ldr	r1, [pc, #32]	@ (800924c <prvCheckForValidListAndQueue+0x68>)
 800922a:	f7ff f99f 	bl	800856c <vQueueAddToRegistry>
 800922e:	e7e0      	b.n	80091f2 <prvCheckForValidListAndQueue+0xe>
 8009230:	24001994 	.word	0x24001994
 8009234:	240019b4 	.word	0x240019b4
 8009238:	240019a0 	.word	0x240019a0
 800923c:	2400199c 	.word	0x2400199c
 8009240:	24001998 	.word	0x24001998
 8009244:	2400189c 	.word	0x2400189c
 8009248:	240018ec 	.word	0x240018ec
 800924c:	08014a94 	.word	0x08014a94

08009250 <xTimerCreateTimerTask>:
{
 8009250:	b530      	push	{r4, r5, lr}
 8009252:	b089      	sub	sp, #36	@ 0x24
	prvCheckForValidListAndQueue();
 8009254:	f7ff ffc6 	bl	80091e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009258:	4b12      	ldr	r3, [pc, #72]	@ (80092a4 <xTimerCreateTimerTask+0x54>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	b1cb      	cbz	r3, 8009292 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800925e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009260:	aa07      	add	r2, sp, #28
 8009262:	a906      	add	r1, sp, #24
 8009264:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009266:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009268:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800926c:	f7fe fb52 	bl	8007914 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009270:	4623      	mov	r3, r4
 8009272:	9a07      	ldr	r2, [sp, #28]
 8009274:	9500      	str	r5, [sp, #0]
 8009276:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800927a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800927e:	490a      	ldr	r1, [pc, #40]	@ (80092a8 <xTimerCreateTimerTask+0x58>)
 8009280:	480a      	ldr	r0, [pc, #40]	@ (80092ac <xTimerCreateTimerTask+0x5c>)
 8009282:	f7ff fb43 	bl	800890c <xTaskCreateStatic>
 8009286:	4b0a      	ldr	r3, [pc, #40]	@ (80092b0 <xTimerCreateTimerTask+0x60>)
 8009288:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800928a:	b110      	cbz	r0, 8009292 <xTimerCreateTimerTask+0x42>
}
 800928c:	2001      	movs	r0, #1
 800928e:	b009      	add	sp, #36	@ 0x24
 8009290:	bd30      	pop	{r4, r5, pc}
 8009292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80092a2:	e7fe      	b.n	80092a2 <xTimerCreateTimerTask+0x52>
 80092a4:	24001994 	.word	0x24001994
 80092a8:	08014a9c 	.word	0x08014a9c
 80092ac:	0800939d 	.word	0x0800939d
 80092b0:	24001990 	.word	0x24001990

080092b4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80092b4:	b1c8      	cbz	r0, 80092ea <xTimerGenericCommand+0x36>
{
 80092b6:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 80092b8:	4d18      	ldr	r5, [pc, #96]	@ (800931c <xTimerGenericCommand+0x68>)
{
 80092ba:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 80092bc:	682c      	ldr	r4, [r5, #0]
 80092be:	b18c      	cbz	r4, 80092e4 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092c0:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092c2:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 80092c4:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092c8:	dc18      	bgt.n	80092fc <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092ca:	f7ff fe9b 	bl	8009004 <xTaskGetSchedulerState>
 80092ce:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092d0:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092d4:	d01b      	beq.n	800930e <xTimerGenericCommand+0x5a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092d6:	4669      	mov	r1, sp
 80092d8:	461a      	mov	r2, r3
 80092da:	6828      	ldr	r0, [r5, #0]
 80092dc:	f7fe fcf4 	bl	8007cc8 <xQueueGenericSend>
}
 80092e0:	b005      	add	sp, #20
 80092e2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80092e4:	4620      	mov	r0, r4
}
 80092e6:	b005      	add	sp, #20
 80092e8:	bd30      	pop	{r4, r5, pc}
 80092ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80092fa:	e7fe      	b.n	80092fa <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092fc:	469c      	mov	ip, r3
 80092fe:	4669      	mov	r1, sp
 8009300:	2300      	movs	r3, #0
 8009302:	4620      	mov	r0, r4
 8009304:	4662      	mov	r2, ip
 8009306:	f7fe fe17 	bl	8007f38 <xQueueGenericSendFromISR>
}
 800930a:	b005      	add	sp, #20
 800930c:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800930e:	9a08      	ldr	r2, [sp, #32]
 8009310:	4669      	mov	r1, sp
 8009312:	6828      	ldr	r0, [r5, #0]
 8009314:	f7fe fcd8 	bl	8007cc8 <xQueueGenericSend>
 8009318:	e7e5      	b.n	80092e6 <xTimerGenericCommand+0x32>
 800931a:	bf00      	nop
 800931c:	24001994 	.word	0x24001994

08009320 <prvSwitchTimerLists>:
{
 8009320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009322:	4e1c      	ldr	r6, [pc, #112]	@ (8009394 <prvSwitchTimerLists+0x74>)
 8009324:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009326:	e00d      	b.n	8009344 <prvSwitchTimerLists+0x24>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009328:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800932c:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800932e:	1d25      	adds	r5, r4, #4
 8009330:	4628      	mov	r0, r5
 8009332:	f7fe fb35 	bl	80079a0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009336:	6a23      	ldr	r3, [r4, #32]
 8009338:	4620      	mov	r0, r4
 800933a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800933c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009340:	075b      	lsls	r3, r3, #29
 8009342:	d409      	bmi.n	8009358 <prvSwitchTimerLists+0x38>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009344:	6833      	ldr	r3, [r6, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	2a00      	cmp	r2, #0
 800934a:	d1ed      	bne.n	8009328 <prvSwitchTimerLists+0x8>
	pxCurrentTimerList = pxOverflowTimerList;
 800934c:	4a12      	ldr	r2, [pc, #72]	@ (8009398 <prvSwitchTimerLists+0x78>)
 800934e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009350:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8009352:	6031      	str	r1, [r6, #0]
}
 8009354:	b003      	add	sp, #12
 8009356:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009358:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800935a:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800935c:	2300      	movs	r3, #0
 800935e:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009360:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009362:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8009364:	42af      	cmp	r7, r5
 8009366:	d205      	bcs.n	8009374 <prvSwitchTimerLists+0x54>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009368:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800936a:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800936c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800936e:	f7fe faff 	bl	8007970 <vListInsert>
 8009372:	e7e7      	b.n	8009344 <prvSwitchTimerLists+0x24>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009374:	4619      	mov	r1, r3
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	f7ff ff9c 	bl	80092b4 <xTimerGenericCommand>
				configASSERT( xResult );
 800937c:	2800      	cmp	r0, #0
 800937e:	d1e1      	bne.n	8009344 <prvSwitchTimerLists+0x24>
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	e7fe      	b.n	8009390 <prvSwitchTimerLists+0x70>
 8009392:	bf00      	nop
 8009394:	2400199c 	.word	0x2400199c
 8009398:	24001998 	.word	0x24001998

0800939c <prvTimerTask>:
{
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	4e96      	ldr	r6, [pc, #600]	@ (80095fc <prvTimerTask+0x260>)
 80093a2:	b087      	sub	sp, #28
 80093a4:	4d96      	ldr	r5, [pc, #600]	@ (8009600 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 80093a6:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 80093aa:	4c96      	ldr	r4, [pc, #600]	@ (8009604 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093ac:	6833      	ldr	r3, [r6, #0]
 80093ae:	681f      	ldr	r7, [r3, #0]
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	f000 80a9 	beq.w	8009508 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80093ba:	f7ff fb61 	bl	8008a80 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80093be:	f7ff fb67 	bl	8008a90 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80093c2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80093c4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80093c6:	4290      	cmp	r0, r2
 80093c8:	f0c0 80a6 	bcc.w	8009518 <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093cc:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 80093ce:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093d0:	f200 80c7 	bhi.w	8009562 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 80093d4:	f7ff fca8 	bl	8008d28 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d8:	6832      	ldr	r2, [r6, #0]
 80093da:	68d2      	ldr	r2, [r2, #12]
 80093dc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093e0:	f10b 0804 	add.w	r8, fp, #4
 80093e4:	4640      	mov	r0, r8
 80093e6:	f7fe fadb 	bl	80079a0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ea:	f89b 0028 	ldrb.w	r0, [fp, #40]	@ 0x28
 80093ee:	0743      	lsls	r3, r0, #29
 80093f0:	f100 80c6 	bmi.w	8009580 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f4:	f020 0001 	bic.w	r0, r0, #1
 80093f8:	f88b 0028 	strb.w	r0, [fp, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093fc:	f8db 3020 	ldr.w	r3, [fp, #32]
 8009400:	4658      	mov	r0, fp
 8009402:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009404:	2200      	movs	r2, #0
 8009406:	a902      	add	r1, sp, #8
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	f7fe fe51 	bl	80080b0 <xQueueReceive>
 800940e:	2800      	cmp	r0, #0
 8009410:	d0cc      	beq.n	80093ac <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009412:	9b02      	ldr	r3, [sp, #8]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009414:	9804      	ldr	r0, [sp, #16]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009416:	2b00      	cmp	r3, #0
 8009418:	db6e      	blt.n	80094f8 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800941a:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	b113      	cbz	r3, 8009426 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009420:	1d38      	adds	r0, r7, #4
 8009422:	f7fe fabd 	bl	80079a0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8009426:	f7ff fb33 	bl	8008a90 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800942a:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800942c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 800942e:	4298      	cmp	r0, r3
 8009430:	d379      	bcc.n	8009526 <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8009432:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8009434:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8009438:	2b09      	cmp	r3, #9
 800943a:	d8e3      	bhi.n	8009404 <prvTimerTask+0x68>
 800943c:	e8df f003 	tbb	[pc, r3]
 8009440:	4c050505 	.word	0x4c050505
 8009444:	05055336 	.word	0x05055336
 8009448:	364c      	.short	0x364c
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800944a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800944e:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009450:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009454:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009456:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009458:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800945c:	185a      	adds	r2, r3, r1
 800945e:	bf2c      	ite	cs
 8009460:	2001      	movcs	r0, #1
 8009462:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8009464:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009466:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8009468:	d87d      	bhi.n	8009566 <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800946a:	eba8 0303 	sub.w	r3, r8, r3
 800946e:	4299      	cmp	r1, r3
 8009470:	f200 80af 	bhi.w	80095d2 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	4638      	mov	r0, r7
 8009478:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800947a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800947e:	0759      	lsls	r1, r3, #29
 8009480:	d5c0      	bpl.n	8009404 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009482:	2200      	movs	r2, #0
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	4638      	mov	r0, r7
 8009488:	9200      	str	r2, [sp, #0]
 800948a:	9a03      	ldr	r2, [sp, #12]
 800948c:	441a      	add	r2, r3
 800948e:	2300      	movs	r3, #0
 8009490:	4619      	mov	r1, r3
 8009492:	f7ff ff0f 	bl	80092b4 <xTimerGenericCommand>
							configASSERT( xResult );
 8009496:	2800      	cmp	r0, #0
 8009498:	d1b4      	bne.n	8009404 <prvTimerTask+0x68>
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	e7fe      	b.n	80094aa <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094b0:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094b2:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094b6:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094b8:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8094 	beq.w	80095ea <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094c2:	4443      	add	r3, r8
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c4:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094c6:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 80094c8:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094ca:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80094cc:	d854      	bhi.n	8009578 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094ce:	4b4e      	ldr	r3, [pc, #312]	@ (8009608 <prvTimerTask+0x26c>)
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	f7fe fa4d 	bl	8007970 <vListInsert>
 80094d6:	e795      	b.n	8009404 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 80094e4:	e78e      	b.n	8009404 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094ea:	079a      	lsls	r2, r3, #30
 80094ec:	d568      	bpl.n	80095c0 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094ee:	f023 0301 	bic.w	r3, r3, #1
 80094f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80094f6:	e785      	b.n	8009404 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	9905      	ldr	r1, [sp, #20]
 80094fc:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094fe:	9b02      	ldr	r3, [sp, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	f6ff af7f 	blt.w	8009404 <prvTimerTask+0x68>
 8009506:	e788      	b.n	800941a <prvTimerTask+0x7e>
	vTaskSuspendAll();
 8009508:	f7ff faba 	bl	8008a80 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800950c:	f7ff fac0 	bl	8008a90 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009510:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8009512:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8009514:	4290      	cmp	r0, r2
 8009516:	d209      	bcs.n	800952c <prvTimerTask+0x190>
		prvSwitchTimerLists();
 8009518:	f7ff ff02 	bl	8009320 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800951c:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8009520:	f7ff fc02 	bl	8008d28 <xTaskResumeAll>
 8009524:	e76e      	b.n	8009404 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8009526:	f7ff fefb 	bl	8009320 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800952a:	e782      	b.n	8009432 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800952c:	4b36      	ldr	r3, [pc, #216]	@ (8009608 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 800952e:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	6812      	ldr	r2, [r2, #0]
 8009536:	fab2 f282 	clz	r2, r2
 800953a:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800953c:	eba7 010a 	sub.w	r1, r7, sl
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	f7ff f843 	bl	80085cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009546:	f7ff fbef 	bl	8008d28 <xTaskResumeAll>
 800954a:	2800      	cmp	r0, #0
 800954c:	f47f af5a 	bne.w	8009404 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8009550:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009554:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	e750      	b.n	8009404 <prvTimerTask+0x68>
 8009562:	2200      	movs	r2, #0
 8009564:	e7ea      	b.n	800953c <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009566:	4543      	cmp	r3, r8
 8009568:	d901      	bls.n	800956e <prvTimerTask+0x1d2>
 800956a:	2800      	cmp	r0, #0
 800956c:	d082      	beq.n	8009474 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800956e:	1d39      	adds	r1, r7, #4
 8009570:	6830      	ldr	r0, [r6, #0]
 8009572:	f7fe f9fd 	bl	8007970 <vListInsert>
	return xProcessTimerNow;
 8009576:	e745      	b.n	8009404 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009578:	6830      	ldr	r0, [r6, #0]
 800957a:	f7fe f9f9 	bl	8007970 <vListInsert>
 800957e:	e741      	b.n	8009404 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009580:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009584:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009588:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 800958a:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800958c:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8009590:	d31a      	bcc.n	80095c8 <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009592:	ebaa 0307 	sub.w	r3, sl, r7
 8009596:	429a      	cmp	r2, r3
 8009598:	d821      	bhi.n	80095de <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800959a:	2300      	movs	r3, #0
 800959c:	463a      	mov	r2, r7
 800959e:	4658      	mov	r0, fp
 80095a0:	4619      	mov	r1, r3
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	f7ff fe86 	bl	80092b4 <xTimerGenericCommand>
			configASSERT( xResult );
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f47f af27 	bne.w	80093fc <prvTimerTask+0x60>
 80095ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	e7fe      	b.n	80095be <prvTimerTask+0x222>
							vPortFree( pxTimer );
 80095c0:	4638      	mov	r0, r7
 80095c2:	f000 fa99 	bl	8009af8 <vPortFree>
 80095c6:	e71d      	b.n	8009404 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095c8:	4641      	mov	r1, r8
 80095ca:	6830      	ldr	r0, [r6, #0]
 80095cc:	f7fe f9d0 	bl	8007970 <vListInsert>
	return xProcessTimerNow;
 80095d0:	e714      	b.n	80093fc <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009608 <prvTimerTask+0x26c>)
 80095d4:	1d39      	adds	r1, r7, #4
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	f7fe f9ca 	bl	8007970 <vListInsert>
	return xProcessTimerNow;
 80095dc:	e712      	b.n	8009404 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095de:	4b0a      	ldr	r3, [pc, #40]	@ (8009608 <prvTimerTask+0x26c>)
 80095e0:	4641      	mov	r1, r8
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	f7fe f9c4 	bl	8007970 <vListInsert>
	return xProcessTimerNow;
 80095e8:	e708      	b.n	80093fc <prvTimerTask+0x60>
 80095ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095fa:	e7fe      	b.n	80095fa <prvTimerTask+0x25e>
 80095fc:	2400199c 	.word	0x2400199c
 8009600:	2400198c 	.word	0x2400198c
 8009604:	24001994 	.word	0x24001994
 8009608:	24001998 	.word	0x24001998

0800960c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800960c:	4808      	ldr	r0, [pc, #32]	@ (8009630 <prvPortStartFirstTask+0x24>)
 800960e:	6800      	ldr	r0, [r0, #0]
 8009610:	6800      	ldr	r0, [r0, #0]
 8009612:	f380 8808 	msr	MSP, r0
 8009616:	f04f 0000 	mov.w	r0, #0
 800961a:	f380 8814 	msr	CONTROL, r0
 800961e:	b662      	cpsie	i
 8009620:	b661      	cpsie	f
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	df00      	svc	0
 800962c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800962e:	0000      	.short	0x0000
 8009630:	e000ed08 	.word	0xe000ed08

08009634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009644 <vPortEnableVFP+0x10>
 8009638:	6801      	ldr	r1, [r0, #0]
 800963a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800963e:	6001      	str	r1, [r0, #0]
 8009640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009642:	0000      	.short	0x0000
 8009644:	e000ed88 	.word	0xe000ed88

08009648 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8009648:	4b0e      	ldr	r3, [pc, #56]	@ (8009684 <prvTaskExitError+0x3c>)
{
 800964a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800964c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800964e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8009650:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009652:	3301      	adds	r3, #1
 8009654:	d008      	beq.n	8009668 <prvTaskExitError+0x20>
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	e7fe      	b.n	8009666 <prvTaskExitError+0x1e>
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0fc      	beq.n	8009678 <prvTaskExitError+0x30>
}
 800967e:	b002      	add	sp, #8
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	2400002c 	.word	0x2400002c

08009688 <pxPortInitialiseStack>:
{
 8009688:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800968a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800968e:	4809      	ldr	r0, [pc, #36]	@ (80096b4 <pxPortInitialiseStack+0x2c>)
{
 8009690:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009692:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009696:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800969a:	f843 2c20 	str.w	r2, [r3, #-32]
}
 800969e:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096a2:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096a6:	f06f 0102 	mvn.w	r1, #2
}
 80096aa:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096ae:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80096b2:	4770      	bx	lr
 80096b4:	08009649 	.word	0x08009649
	...

080096c0 <SVC_Handler>:
	__asm volatile (
 80096c0:	4b07      	ldr	r3, [pc, #28]	@ (80096e0 <pxCurrentTCBConst2>)
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	6808      	ldr	r0, [r1, #0]
 80096c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f380 8809 	msr	PSP, r0
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8811 	msr	BASEPRI, r0
 80096da:	4770      	bx	lr
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst2>:
 80096e0:	24001898 	.word	0x24001898

080096e4 <vPortEnterCritical>:
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80096f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009724 <vPortEnterCritical+0x40>)
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80096fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80096fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80096fe:	d000      	beq.n	8009702 <vPortEnterCritical+0x1e>
}
 8009700:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009702:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009706:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0f7      	beq.n	8009700 <vPortEnterCritical+0x1c>
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	e7fe      	b.n	8009720 <vPortEnterCritical+0x3c>
 8009722:	bf00      	nop
 8009724:	2400002c 	.word	0x2400002c

08009728 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009728:	4a08      	ldr	r2, [pc, #32]	@ (800974c <vPortExitCritical+0x24>)
 800972a:	6813      	ldr	r3, [r2, #0]
 800972c:	b943      	cbnz	r3, 8009740 <vPortExitCritical+0x18>
 800972e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	e7fe      	b.n	800973e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009740:	3b01      	subs	r3, #1
 8009742:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009744:	b90b      	cbnz	r3, 800974a <vPortExitCritical+0x22>
	__asm volatile
 8009746:	f383 8811 	msr	BASEPRI, r3
}
 800974a:	4770      	bx	lr
 800974c:	2400002c 	.word	0x2400002c

08009750 <PendSV_Handler>:
	__asm volatile
 8009750:	f3ef 8009 	mrs	r0, PSP
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	4b15      	ldr	r3, [pc, #84]	@ (80097b0 <pxCurrentTCBConst>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	f01e 0f10 	tst.w	lr, #16
 8009760:	bf08      	it	eq
 8009762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	6010      	str	r0, [r2, #0]
 800976c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009774:	f380 8811 	msr	BASEPRI, r0
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f7ff fb12 	bl	8008da8 <vTaskSwitchContext>
 8009784:	f04f 0000 	mov.w	r0, #0
 8009788:	f380 8811 	msr	BASEPRI, r0
 800978c:	bc09      	pop	{r0, r3}
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	6808      	ldr	r0, [r1, #0]
 8009792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009796:	f01e 0f10 	tst.w	lr, #16
 800979a:	bf08      	it	eq
 800979c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097a0:	f380 8809 	msr	PSP, r0
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst>:
 80097b0:	24001898 	.word	0x24001898

080097b4 <xPortSysTickHandler>:
{
 80097b4:	b508      	push	{r3, lr}
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80097c6:	f7ff f971 	bl	8008aac <xTaskIncrementTick>
 80097ca:	b128      	cbz	r0, 80097d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80097d8:	2300      	movs	r3, #0
 80097da:	f383 8811 	msr	BASEPRI, r3
}
 80097de:	bd08      	pop	{r3, pc}

080097e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80097e4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097e6:	4806      	ldr	r0, [pc, #24]	@ (8009800 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097e8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ea:	4906      	ldr	r1, [pc, #24]	@ (8009804 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097ec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ee:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097f0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097f2:	fba1 1303 	umull	r1, r3, r1, r3
 80097f6:	099b      	lsrs	r3, r3, #6
 80097f8:	3b01      	subs	r3, #1
 80097fa:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097fc:	6110      	str	r0, [r2, #16]
}
 80097fe:	4770      	bx	lr
 8009800:	2400000c 	.word	0x2400000c
 8009804:	10624dd3 	.word	0x10624dd3

08009808 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009808:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800980c:	4a3d      	ldr	r2, [pc, #244]	@ (8009904 <xPortStartScheduler+0xfc>)
 800980e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8009812:	4291      	cmp	r1, r2
 8009814:	d041      	beq.n	800989a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009816:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800981a:	4b3b      	ldr	r3, [pc, #236]	@ (8009908 <xPortStartScheduler+0x100>)
 800981c:	429a      	cmp	r2, r3
 800981e:	d033      	beq.n	8009888 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009820:	4b3a      	ldr	r3, [pc, #232]	@ (800990c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009822:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009826:	483a      	ldr	r0, [pc, #232]	@ (8009910 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009828:	493a      	ldr	r1, [pc, #232]	@ (8009914 <xPortStartScheduler+0x10c>)
{
 800982a:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800982c:	781a      	ldrb	r2, [r3, #0]
{
 800982e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009834:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009836:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800983a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800983c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800983e:	b2db      	uxtb	r3, r3
 8009840:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009844:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009848:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800984c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009850:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009852:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009854:	d50f      	bpl.n	8009876 <xPortStartScheduler+0x6e>
 8009856:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009858:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800985c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800985e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009868:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800986c:	061b      	lsls	r3, r3, #24
 800986e:	d4f3      	bmi.n	8009858 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009870:	2903      	cmp	r1, #3
 8009872:	d01b      	beq.n	80098ac <xPortStartScheduler+0xa4>
 8009874:	6001      	str	r1, [r0, #0]
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	e7fe      	b.n	8009886 <xPortStartScheduler+0x7e>
 8009888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009898:	e7fe      	b.n	8009898 <xPortStartScheduler+0x90>
 800989a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098aa:	e7fe      	b.n	80098aa <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098ac:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098ae:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098b2:	4a16      	ldr	r2, [pc, #88]	@ (800990c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098b4:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098b8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 80098ba:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098bc:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098be:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098c0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80098c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80098c8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098cc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80098d0:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80098d4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80098d8:	f7ff ff82 	bl	80097e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80098dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009918 <xPortStartScheduler+0x110>)
 80098de:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80098e0:	f7ff fea8 	bl	8009634 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098e4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80098e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80098ec:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80098f0:	f7ff fe8c 	bl	800960c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80098f4:	f7ff fa58 	bl	8008da8 <vTaskSwitchContext>
}
 80098f8:	4628      	mov	r0, r5
	prvTaskExitError();
 80098fa:	f7ff fea5 	bl	8009648 <prvTaskExitError>
}
 80098fe:	b003      	add	sp, #12
 8009900:	bd30      	pop	{r4, r5, pc}
 8009902:	bf00      	nop
 8009904:	410fc271 	.word	0x410fc271
 8009908:	410fc270 	.word	0x410fc270
 800990c:	e000e400 	.word	0xe000e400
 8009910:	240019c8 	.word	0x240019c8
 8009914:	240019cc 	.word	0x240019cc
 8009918:	2400002c 	.word	0x2400002c

0800991c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800991c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009920:	2b0f      	cmp	r3, #15
 8009922:	d90e      	bls.n	8009942 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009924:	4911      	ldr	r1, [pc, #68]	@ (800996c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009926:	4a12      	ldr	r2, [pc, #72]	@ (8009970 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009928:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d908      	bls.n	8009942 <vPortValidateInterruptPriority+0x26>
 8009930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	e7fe      	b.n	8009940 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009942:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009946:	4a0b      	ldr	r2, [pc, #44]	@ (8009974 <vPortValidateInterruptPriority+0x58>)
 8009948:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800994c:	6812      	ldr	r2, [r2, #0]
 800994e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009952:	4293      	cmp	r3, r2
 8009954:	d908      	bls.n	8009968 <vPortValidateInterruptPriority+0x4c>
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	e7fe      	b.n	8009966 <vPortValidateInterruptPriority+0x4a>
	}
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	e000e3f0 	.word	0xe000e3f0
 8009970:	240019cc 	.word	0x240019cc
 8009974:	240019c8 	.word	0x240019c8

08009978 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009978:	4b12      	ldr	r3, [pc, #72]	@ (80099c4 <prvInsertBlockIntoFreeList+0x4c>)
{
 800997a:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800997c:	461a      	mov	r2, r3
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4283      	cmp	r3, r0
 8009982:	d3fb      	bcc.n	800997c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009984:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009986:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009988:	eb02 0c04 	add.w	ip, r2, r4
 800998c:	4560      	cmp	r0, ip
 800998e:	d008      	beq.n	80099a2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009990:	1844      	adds	r4, r0, r1
 8009992:	42a3      	cmp	r3, r4
 8009994:	d00b      	beq.n	80099ae <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009996:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009998:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800999a:	bf18      	it	ne
 800999c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800999e:	bc30      	pop	{r4, r5}
 80099a0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099a2:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099a4:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099a6:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099a8:	4283      	cmp	r3, r0
 80099aa:	d1f8      	bne.n	800999e <prvInsertBlockIntoFreeList+0x26>
 80099ac:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099ae:	4c06      	ldr	r4, [pc, #24]	@ (80099c8 <prvInsertBlockIntoFreeList+0x50>)
 80099b0:	6824      	ldr	r4, [r4, #0]
 80099b2:	42a3      	cmp	r3, r4
 80099b4:	d003      	beq.n	80099be <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099b6:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099ba:	4429      	add	r1, r5
 80099bc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099be:	6004      	str	r4, [r0, #0]
 80099c0:	e7ea      	b.n	8009998 <prvInsertBlockIntoFreeList+0x20>
 80099c2:	bf00      	nop
 80099c4:	240019e8 	.word	0x240019e8
 80099c8:	240019e4 	.word	0x240019e4

080099cc <pvPortMalloc>:
{
 80099cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 80099d0:	4d41      	ldr	r5, [pc, #260]	@ (8009ad8 <pvPortMalloc+0x10c>)
{
 80099d2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80099d4:	f7ff f854 	bl	8008a80 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d05c      	beq.n	8009a98 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099de:	4b3f      	ldr	r3, [pc, #252]	@ (8009adc <pvPortMalloc+0x110>)
 80099e0:	681e      	ldr	r6, [r3, #0]
 80099e2:	4234      	tst	r4, r6
 80099e4:	d12e      	bne.n	8009a44 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 80099e6:	b36c      	cbz	r4, 8009a44 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099e8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80099ea:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099ee:	d002      	beq.n	80099f6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099f0:	f021 0107 	bic.w	r1, r1, #7
 80099f4:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099f6:	b329      	cbz	r1, 8009a44 <pvPortMalloc+0x78>
 80099f8:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8009af4 <pvPortMalloc+0x128>
 80099fc:	f8d8 7000 	ldr.w	r7, [r8]
 8009a00:	428f      	cmp	r7, r1
 8009a02:	d31f      	bcc.n	8009a44 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8009a04:	4836      	ldr	r0, [pc, #216]	@ (8009ae0 <pvPortMalloc+0x114>)
 8009a06:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a08:	e003      	b.n	8009a12 <pvPortMalloc+0x46>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	b123      	cbz	r3, 8009a18 <pvPortMalloc+0x4c>
 8009a0e:	4620      	mov	r0, r4
 8009a10:	461c      	mov	r4, r3
 8009a12:	6862      	ldr	r2, [r4, #4]
 8009a14:	428a      	cmp	r2, r1
 8009a16:	d3f8      	bcc.n	8009a0a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	42a3      	cmp	r3, r4
 8009a1c:	d012      	beq.n	8009a44 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a1e:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a20:	6825      	ldr	r5, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a22:	f8d0 9000 	ldr.w	r9, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a26:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a28:	6005      	str	r5, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a2a:	d916      	bls.n	8009a5a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a2c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a2e:	0742      	lsls	r2, r0, #29
 8009a30:	d00e      	beq.n	8009a50 <pvPortMalloc+0x84>
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	e7fe      	b.n	8009a42 <pvPortMalloc+0x76>
void *pvReturn = NULL;
 8009a44:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8009a46:	f7ff f96f 	bl	8008d28 <xTaskResumeAll>
}
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a50:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a52:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a54:	f7ff ff90 	bl	8009978 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a58:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a5a:	4b22      	ldr	r3, [pc, #136]	@ (8009ae4 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a5c:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a5e:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a60:	f109 0508 	add.w	r5, r9, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a64:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a66:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a6a:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8009a6c:	491e      	ldr	r1, [pc, #120]	@ (8009ae8 <pvPortMalloc+0x11c>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a6e:	bf38      	it	cc
 8009a70:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 8009a78:	680b      	ldr	r3, [r1, #0]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 8009a7e:	f7ff f953 	bl	8008d28 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a82:	076b      	lsls	r3, r5, #29
 8009a84:	d0e1      	beq.n	8009a4a <pvPortMalloc+0x7e>
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	e7fe      	b.n	8009a96 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 8009a98:	4b14      	ldr	r3, [pc, #80]	@ (8009aec <pvPortMalloc+0x120>)
	xStart.xBlockSize = ( size_t ) 0;
 8009a9a:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 8009a9c:	4a14      	ldr	r2, [pc, #80]	@ (8009af0 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a9e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009aa2:	075e      	lsls	r6, r3, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009aa4:	4e0e      	ldr	r6, [pc, #56]	@ (8009ae0 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aa6:	f022 0207 	bic.w	r2, r2, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009aaa:	bf18      	it	ne
 8009aac:	3307      	addne	r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009aae:	6071      	str	r1, [r6, #4]
	pxEnd = ( void * ) uxAddress;
 8009ab0:	602a      	str	r2, [r5, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ab2:	bf18      	it	ne
 8009ab4:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ab8:	6033      	str	r3, [r6, #0]
 8009aba:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009abc:	1ad3      	subs	r3, r2, r3
}
 8009abe:	463e      	mov	r6, r7
	pxEnd->pxNextFreeBlock = NULL;
 8009ac0:	e9c2 1100 	strd	r1, r1, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ac4:	e9c0 2300 	strd	r2, r3, [r0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ac8:	4a06      	ldr	r2, [pc, #24]	@ (8009ae4 <pvPortMalloc+0x118>)
 8009aca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009acc:	4a09      	ldr	r2, [pc, #36]	@ (8009af4 <pvPortMalloc+0x128>)
 8009ace:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ad0:	4b02      	ldr	r3, [pc, #8]	@ (8009adc <pvPortMalloc+0x110>)
 8009ad2:	601f      	str	r7, [r3, #0]
}
 8009ad4:	e785      	b.n	80099e2 <pvPortMalloc+0x16>
 8009ad6:	bf00      	nop
 8009ad8:	240019e4 	.word	0x240019e4
 8009adc:	240019d0 	.word	0x240019d0
 8009ae0:	240019e8 	.word	0x240019e8
 8009ae4:	240019dc 	.word	0x240019dc
 8009ae8:	240019d8 	.word	0x240019d8
 8009aec:	240019f0 	.word	0x240019f0
 8009af0:	240091e8 	.word	0x240091e8
 8009af4:	240019e0 	.word	0x240019e0

08009af8 <vPortFree>:
	if( pv != NULL )
 8009af8:	b1d0      	cbz	r0, 8009b30 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009afa:	4a1c      	ldr	r2, [pc, #112]	@ (8009b6c <vPortFree+0x74>)
 8009afc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	4213      	tst	r3, r2
 8009b04:	d00b      	beq.n	8009b1e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b06:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009b0a:	b191      	cbz	r1, 8009b32 <vPortFree+0x3a>
 8009b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	e7fe      	b.n	8009b1c <vPortFree+0x24>
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b2e:	e7fe      	b.n	8009b2e <vPortFree+0x36>
 8009b30:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b32:	ea23 0302 	bic.w	r3, r3, r2
{
 8009b36:	b500      	push	{lr}
 8009b38:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b3a:	f840 3c04 	str.w	r3, [r0, #-4]
 8009b3e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8009b40:	f7fe ff9e 	bl	8008a80 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b44:	4a0a      	ldr	r2, [pc, #40]	@ (8009b70 <vPortFree+0x78>)
 8009b46:	9801      	ldr	r0, [sp, #4]
 8009b48:	6811      	ldr	r1, [r2, #0]
 8009b4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b4e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b50:	440b      	add	r3, r1
 8009b52:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b54:	f7ff ff10 	bl	8009978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b58:	4a06      	ldr	r2, [pc, #24]	@ (8009b74 <vPortFree+0x7c>)
 8009b5a:	6813      	ldr	r3, [r2, #0]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	6013      	str	r3, [r2, #0]
}
 8009b60:	b003      	add	sp, #12
 8009b62:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8009b66:	f7ff b8df 	b.w	8008d28 <xTaskResumeAll>
 8009b6a:	bf00      	nop
 8009b6c:	240019d0 	.word	0x240019d0
 8009b70:	240019e0 	.word	0x240019e0
 8009b74:	240019d4 	.word	0x240019d4

08009b78 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *buf = NULL;
 8009b7c:	2300      	movs	r3, #0
{
 8009b7e:	b082      	sub	sp, #8
  void *buf = NULL;
 8009b80:	9301      	str	r3, [sp, #4]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009b82:	2900      	cmp	r1, #0
 8009b84:	d074      	beq.n	8009c70 <netconn_recv_data+0xf8>
  *new_buf = NULL;
 8009b86:	4604      	mov	r4, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d065      	beq.n	8009c5c <netconn_recv_data+0xe4>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009b90:	f100 0810 	add.w	r8, r0, #16
 8009b94:	4616      	mov	r6, r2
 8009b96:	4640      	mov	r0, r8
 8009b98:	f008 ffe6 	bl	8012b68 <sys_mbox_valid>
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	b310      	cbz	r0, 8009be6 <netconn_recv_data+0x6e>
    }
    return ERR_CONN;
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009ba0:	7f23      	ldrb	r3, [r4, #28]
 8009ba2:	f006 0204 	and.w	r2, r6, #4
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009ba6:	a901      	add	r1, sp, #4
 8009ba8:	4640      	mov	r0, r8
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	d025      	beq.n	8009bfe <netconn_recv_data+0x86>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009bb2:	f008 ffcd 	bl	8012b50 <sys_arch_mbox_tryfetch>
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d034      	beq.n	8009c24 <netconn_recv_data+0xac>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009bba:	7823      	ldrb	r3, [r4, #0]
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009bbc:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bc2:	2b10      	cmp	r3, #16
 8009bc4:	d022      	beq.n	8009c0c <netconn_recv_data+0x94>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d03c      	beq.n	8009c44 <netconn_recv_data+0xcc>
    len = netbuf_len((struct netbuf *)buf);
 8009bca:	6803      	ldr	r3, [r0, #0]
 8009bcc:	891a      	ldrh	r2, [r3, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009bce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009bd0:	b11b      	cbz	r3, 8009bda <netconn_recv_data+0x62>
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	4798      	blx	r3
 8009bd8:	9801      	ldr	r0, [sp, #4]

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009bda:	2600      	movs	r6, #0
  *new_buf = buf;
 8009bdc:	6028      	str	r0, [r5, #0]
}
 8009bde:	4630      	mov	r0, r6
 8009be0:	b002      	add	sp, #8
 8009be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8009be6:	f009 f841 	bl	8012c6c <sys_arch_protect>
  err = conn->pending_err;
 8009bea:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8009bee:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009bf0:	f009 f848 	bl	8012c84 <sys_arch_unprotect>
    if (err != ERR_OK) {
 8009bf4:	2e00      	cmp	r6, #0
 8009bf6:	d1f2      	bne.n	8009bde <netconn_recv_data+0x66>
    return ERR_CONN;
 8009bf8:	f06f 060a 	mvn.w	r6, #10
 8009bfc:	e7ef      	b.n	8009bde <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009bfe:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	d1d5      	bne.n	8009bb2 <netconn_recv_data+0x3a>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009c06:	f008 ff85 	bl	8012b14 <sys_arch_mbox_fetch>
 8009c0a:	e7d6      	b.n	8009bba <netconn_recv_data+0x42>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009c0c:	f10d 0103 	add.w	r1, sp, #3
 8009c10:	f001 f824 	bl	800ac5c <lwip_netconn_is_err_msg>
 8009c14:	b1f8      	cbz	r0, 8009c56 <netconn_recv_data+0xde>
      if (err == ERR_CLSD) {
 8009c16:	f99d 6003 	ldrsb.w	r6, [sp, #3]
        return ERR_OK;
 8009c1a:	f116 0f0f 	cmn.w	r6, #15
 8009c1e:	bf08      	it	eq
 8009c20:	2600      	moveq	r6, #0
 8009c22:	e7dc      	b.n	8009bde <netconn_recv_data+0x66>
  SYS_ARCH_PROTECT(lev);
 8009c24:	f009 f822 	bl	8012c6c <sys_arch_protect>
  conn->pending_err = ERR_OK;
 8009c28:	2300      	movs	r3, #0
  err = conn->pending_err;
 8009c2a:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8009c2e:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009c30:	f009 f828 	bl	8012c84 <sys_arch_unprotect>
      if (err != ERR_OK) {
 8009c34:	2e00      	cmp	r6, #0
 8009c36:	d1d2      	bne.n	8009bde <netconn_recv_data+0x66>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009c38:	7f23      	ldrb	r3, [r4, #28]
 8009c3a:	07db      	lsls	r3, r3, #31
 8009c3c:	d4dc      	bmi.n	8009bf8 <netconn_recv_data+0x80>
      return ERR_WOULDBLOCK;
 8009c3e:	f06f 0606 	mvn.w	r6, #6
 8009c42:	e7cc      	b.n	8009bde <netconn_recv_data+0x66>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009c44:	4b0e      	ldr	r3, [pc, #56]	@ (8009c80 <netconn_recv_data+0x108>)
 8009c46:	f240 2291 	movw	r2, #657	@ 0x291
 8009c4a:	490e      	ldr	r1, [pc, #56]	@ (8009c84 <netconn_recv_data+0x10c>)
 8009c4c:	480e      	ldr	r0, [pc, #56]	@ (8009c88 <netconn_recv_data+0x110>)
 8009c4e:	f009 f94f 	bl	8012ef0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009c52:	9801      	ldr	r0, [sp, #4]
 8009c54:	e7b9      	b.n	8009bca <netconn_recv_data+0x52>
    len = ((struct pbuf *)buf)->tot_len;
 8009c56:	9801      	ldr	r0, [sp, #4]
 8009c58:	8902      	ldrh	r2, [r0, #8]
 8009c5a:	e7b8      	b.n	8009bce <netconn_recv_data+0x56>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009c5c:	4b08      	ldr	r3, [pc, #32]	@ (8009c80 <netconn_recv_data+0x108>)
 8009c5e:	f240 224a 	movw	r2, #586	@ 0x24a
 8009c62:	490a      	ldr	r1, [pc, #40]	@ (8009c8c <netconn_recv_data+0x114>)
 8009c64:	4808      	ldr	r0, [pc, #32]	@ (8009c88 <netconn_recv_data+0x110>)
 8009c66:	f009 f943 	bl	8012ef0 <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009c6a:	f06f 060f 	mvn.w	r6, #15
 8009c6e:	e7b6      	b.n	8009bde <netconn_recv_data+0x66>
 8009c70:	4b03      	ldr	r3, [pc, #12]	@ (8009c80 <netconn_recv_data+0x108>)
 8009c72:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8009c76:	4906      	ldr	r1, [pc, #24]	@ (8009c90 <netconn_recv_data+0x118>)
 8009c78:	4803      	ldr	r0, [pc, #12]	@ (8009c88 <netconn_recv_data+0x110>)
 8009c7a:	f009 f939 	bl	8012ef0 <iprintf>
 8009c7e:	e7f4      	b.n	8009c6a <netconn_recv_data+0xf2>
 8009c80:	08014aa4 	.word	0x08014aa4
 8009c84:	08014b14 	.word	0x08014b14
 8009c88:	08014150 	.word	0x08014150
 8009c8c:	08014af8 	.word	0x08014af8
 8009c90:	08014ad8 	.word	0x08014ad8

08009c94 <netconn_recv_data_tcp>:
{
 8009c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c96:	4604      	mov	r4, r0
 8009c98:	b091      	sub	sp, #68	@ 0x44
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009c9a:	3010      	adds	r0, #16
{
 8009c9c:	460e      	mov	r6, r1
 8009c9e:	4617      	mov	r7, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009ca0:	f008 ff62 	bl	8012b68 <sys_mbox_valid>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d053      	beq.n	8009d50 <netconn_recv_data_tcp+0xbc>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009ca8:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8009cac:	7f23      	ldrb	r3, [r4, #28]
 8009cae:	2a00      	cmp	r2, #0
 8009cb0:	db1c      	blt.n	8009cec <netconn_recv_data_tcp+0x58>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009cb2:	463a      	mov	r2, r7
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7ff ff5e 	bl	8009b78 <netconn_recv_data>
  if (err != ERR_OK) {
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	b990      	cbnz	r0, 8009ce6 <netconn_recv_data_tcp+0x52>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009cc0:	073a      	lsls	r2, r7, #28
  buf = *new_buf;
 8009cc2:	6836      	ldr	r6, [r6, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009cc4:	d40e      	bmi.n	8009ce4 <netconn_recv_data_tcp+0x50>
    u16_t len = buf ? buf->tot_len : 1;
 8009cc6:	b39e      	cbz	r6, 8009d30 <netconn_recv_data_tcp+0x9c>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009cc8:	8932      	ldrh	r2, [r6, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009cca:	7823      	ldrb	r3, [r4, #0]
 8009ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cd0:	2b10      	cmp	r3, #16
 8009cd2:	d140      	bne.n	8009d56 <netconn_recv_data_tcp+0xc2>
  msg->msg.r.len = len;
 8009cd4:	9202      	str	r2, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009cd6:	4669      	mov	r1, sp
 8009cd8:	f104 020c 	add.w	r2, r4, #12
 8009cdc:	4823      	ldr	r0, [pc, #140]	@ (8009d6c <netconn_recv_data_tcp+0xd8>)
  msg->conn = conn;
 8009cde:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009ce0:	f001 fc84 	bl	800b5ec <tcpip_send_msg_wait_sem>
  if (buf == NULL) {
 8009ce4:	b1de      	cbz	r6, 8009d1e <netconn_recv_data_tcp+0x8a>
}
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	b011      	add	sp, #68	@ 0x44
 8009cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cf0:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009cf2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009cf4:	b11b      	cbz	r3, 8009cfe <netconn_recv_data_tcp+0x6a>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009cfe:	6866      	ldr	r6, [r4, #4]
 8009d00:	b9c6      	cbnz	r6, 8009d34 <netconn_recv_data_tcp+0xa0>
  SYS_ARCH_PROTECT(lev);
 8009d02:	f008 ffb3 	bl	8012c6c <sys_arch_protect>
  err = conn->pending_err;
 8009d06:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8009d0a:	7226      	strb	r6, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009d0c:	f008 ffba 	bl	8012c84 <sys_arch_unprotect>
        return ERR_RST;
 8009d10:	2d00      	cmp	r5, #0
 8009d12:	bf08      	it	eq
 8009d14:	f06f 050d 	mvneq.w	r5, #13
}
 8009d18:	4628      	mov	r0, r5
 8009d1a:	b011      	add	sp, #68	@ 0x44
 8009d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (apiflags & NETCONN_NOFIN) {
 8009d1e:	06fb      	lsls	r3, r7, #27
 8009d20:	d5e7      	bpl.n	8009cf2 <netconn_recv_data_tcp+0x5e>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009d22:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8009d24:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009d28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d2c:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8009d2e:	e7da      	b.n	8009ce6 <netconn_recv_data_tcp+0x52>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009d30:	2201      	movs	r2, #1
 8009d32:	e7ca      	b.n	8009cca <netconn_recv_data_tcp+0x36>
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009d34:	f642 1301 	movw	r3, #10497	@ 0x2901
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009d38:	f104 020c 	add.w	r2, r4, #12
 8009d3c:	a908      	add	r1, sp, #32
 8009d3e:	480c      	ldr	r0, [pc, #48]	@ (8009d70 <netconn_recv_data_tcp+0xdc>)
      return ERR_CLSD;
 8009d40:	f06f 050e 	mvn.w	r5, #14
  API_MSG_VAR_REF(msg).conn = conn;
 8009d44:	9408      	str	r4, [sp, #32]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009d46:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009d4a:	f001 fc4f 	bl	800b5ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8009d4e:	e7ca      	b.n	8009ce6 <netconn_recv_data_tcp+0x52>
    return ERR_CONN;
 8009d50:	f06f 050a 	mvn.w	r5, #10
 8009d54:	e7c7      	b.n	8009ce6 <netconn_recv_data_tcp+0x52>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009d56:	4b07      	ldr	r3, [pc, #28]	@ (8009d74 <netconn_recv_data_tcp+0xe0>)
 8009d58:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8009d5c:	4906      	ldr	r1, [pc, #24]	@ (8009d78 <netconn_recv_data_tcp+0xe4>)
 8009d5e:	4807      	ldr	r0, [pc, #28]	@ (8009d7c <netconn_recv_data_tcp+0xe8>)
 8009d60:	f009 f8c6 	bl	8012ef0 <iprintf>
  if (buf == NULL) {
 8009d64:	2e00      	cmp	r6, #0
 8009d66:	d1be      	bne.n	8009ce6 <netconn_recv_data_tcp+0x52>
 8009d68:	e7d9      	b.n	8009d1e <netconn_recv_data_tcp+0x8a>
 8009d6a:	bf00      	nop
 8009d6c:	0800b221 	.word	0x0800b221
 8009d70:	0800b329 	.word	0x0800b329
 8009d74:	08014aa4 	.word	0x08014aa4
 8009d78:	08014b20 	.word	0x08014b20
 8009d7c:	08014150 	.word	0x08014150

08009d80 <netconn_new_with_proto_and_callback>:
{
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	460d      	mov	r5, r1
 8009d84:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8009d86:	4611      	mov	r1, r2
 8009d88:	f000 ffca 	bl	800ad20 <netconn_alloc>
  if (conn != NULL) {
 8009d8c:	b398      	cbz	r0, 8009df6 <netconn_new_with_proto_and_callback+0x76>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009d8e:	f100 060c 	add.w	r6, r0, #12
 8009d92:	4604      	mov	r4, r0
 8009d94:	4669      	mov	r1, sp
 8009d96:	4823      	ldr	r0, [pc, #140]	@ (8009e24 <netconn_new_with_proto_and_callback+0xa4>)
 8009d98:	4632      	mov	r2, r6
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009d9a:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 8009d9e:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009da0:	f001 fc24 	bl	800b5ec <tcpip_send_msg_wait_sem>
    if (err != ERR_OK) {
 8009da4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009da8:	4318      	orrs	r0, r3
 8009daa:	b240      	sxtb	r0, r0
 8009dac:	b910      	cbnz	r0, 8009db4 <netconn_new_with_proto_and_callback+0x34>
}
 8009dae:	4620      	mov	r0, r4
 8009db0:	b008      	add	sp, #32
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	b12b      	cbz	r3, 8009dc4 <netconn_new_with_proto_and_callback+0x44>
 8009db8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e28 <netconn_new_with_proto_and_callback+0xa8>)
 8009dba:	22a3      	movs	r2, #163	@ 0xa3
 8009dbc:	491b      	ldr	r1, [pc, #108]	@ (8009e2c <netconn_new_with_proto_and_callback+0xac>)
 8009dbe:	481c      	ldr	r0, [pc, #112]	@ (8009e30 <netconn_new_with_proto_and_callback+0xb0>)
 8009dc0:	f009 f896 	bl	8012ef0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009dc4:	f104 0510 	add.w	r5, r4, #16
 8009dc8:	4628      	mov	r0, r5
 8009dca:	f008 fecd 	bl	8012b68 <sys_mbox_valid>
 8009dce:	b310      	cbz	r0, 8009e16 <netconn_new_with_proto_and_callback+0x96>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009dd0:	f104 0014 	add.w	r0, r4, #20
 8009dd4:	f008 fec8 	bl	8012b68 <sys_mbox_valid>
 8009dd8:	b9b0      	cbnz	r0, 8009e08 <netconn_new_with_proto_and_callback+0x88>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f008 ff06 	bl	8012bec <sys_sem_valid>
 8009de0:	b158      	cbz	r0, 8009dfa <netconn_new_with_proto_and_callback+0x7a>
      sys_sem_free(&conn->op_completed);
 8009de2:	4630      	mov	r0, r6
 8009de4:	f008 fefe 	bl	8012be4 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8009de8:	4628      	mov	r0, r5
 8009dea:	f008 fe79 	bl	8012ae0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009dee:	4621      	mov	r1, r4
 8009df0:	2007      	movs	r0, #7
 8009df2:	f002 f815 	bl	800be20 <memp_free>
      return NULL;
 8009df6:	2400      	movs	r4, #0
 8009df8:	e7d9      	b.n	8009dae <netconn_new_with_proto_and_callback+0x2e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <netconn_new_with_proto_and_callback+0xa8>)
 8009dfc:	22a9      	movs	r2, #169	@ 0xa9
 8009dfe:	490d      	ldr	r1, [pc, #52]	@ (8009e34 <netconn_new_with_proto_and_callback+0xb4>)
 8009e00:	480b      	ldr	r0, [pc, #44]	@ (8009e30 <netconn_new_with_proto_and_callback+0xb0>)
 8009e02:	f009 f875 	bl	8012ef0 <iprintf>
 8009e06:	e7ec      	b.n	8009de2 <netconn_new_with_proto_and_callback+0x62>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009e08:	4b07      	ldr	r3, [pc, #28]	@ (8009e28 <netconn_new_with_proto_and_callback+0xa8>)
 8009e0a:	22a6      	movs	r2, #166	@ 0xa6
 8009e0c:	490a      	ldr	r1, [pc, #40]	@ (8009e38 <netconn_new_with_proto_and_callback+0xb8>)
 8009e0e:	4808      	ldr	r0, [pc, #32]	@ (8009e30 <netconn_new_with_proto_and_callback+0xb0>)
 8009e10:	f009 f86e 	bl	8012ef0 <iprintf>
 8009e14:	e7e1      	b.n	8009dda <netconn_new_with_proto_and_callback+0x5a>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009e16:	4b04      	ldr	r3, [pc, #16]	@ (8009e28 <netconn_new_with_proto_and_callback+0xa8>)
 8009e18:	22a4      	movs	r2, #164	@ 0xa4
 8009e1a:	4908      	ldr	r1, [pc, #32]	@ (8009e3c <netconn_new_with_proto_and_callback+0xbc>)
 8009e1c:	4804      	ldr	r0, [pc, #16]	@ (8009e30 <netconn_new_with_proto_and_callback+0xb0>)
 8009e1e:	f009 f867 	bl	8012ef0 <iprintf>
 8009e22:	e7d5      	b.n	8009dd0 <netconn_new_with_proto_and_callback+0x50>
 8009e24:	0800acb9 	.word	0x0800acb9
 8009e28:	08014aa4 	.word	0x08014aa4
 8009e2c:	08014b44 	.word	0x08014b44
 8009e30:	08014150 	.word	0x08014150
 8009e34:	08014ba4 	.word	0x08014ba4
 8009e38:	08014b80 	.word	0x08014b80
 8009e3c:	08014b68 	.word	0x08014b68

08009e40 <netconn_delete>:
  if (conn == NULL) {
 8009e40:	b1c8      	cbz	r0, 8009e76 <netconn_delete+0x36>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009e42:	2329      	movs	r3, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009e44:	f100 020c 	add.w	r2, r0, #12
{
 8009e48:	b510      	push	{r4, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	4604      	mov	r4, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009e4e:	480b      	ldr	r0, [pc, #44]	@ (8009e7c <netconn_delete+0x3c>)
 8009e50:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).conn = conn;
 8009e52:	9400      	str	r4, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009e54:	f88d 3009 	strb.w	r3, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009e58:	f001 fbc8 	bl	800b5ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8009e5c:	b108      	cbz	r0, 8009e62 <netconn_delete+0x22>
}
 8009e5e:	b008      	add	sp, #32
 8009e60:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8009e62:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err != ERR_OK) {
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d1f9      	bne.n	8009e5e <netconn_delete+0x1e>
    netconn_free(conn);
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 ff9e 	bl	800adac <netconn_free>
    return ERR_OK;
 8009e70:	2000      	movs	r0, #0
}
 8009e72:	b008      	add	sp, #32
 8009e74:	bd10      	pop	{r4, pc}
    return ERR_OK;
 8009e76:	2000      	movs	r0, #0
}
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	0800b00d 	.word	0x0800b00d

08009e80 <netconn_bind>:
{
 8009e80:	b500      	push	{lr}
 8009e82:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009e84:	b1a0      	cbz	r0, 8009eb0 <netconn_bind+0x30>
  if (addr == NULL) {
 8009e86:	460b      	mov	r3, r1
 8009e88:	4694      	mov	ip, r2
 8009e8a:	b179      	cbz	r1, 8009eac <netconn_bind+0x2c>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009e8c:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8009e90:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009e92:	4669      	mov	r1, sp
 8009e94:	480b      	ldr	r0, [pc, #44]	@ (8009ec4 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009e96:	9302      	str	r3, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009e98:	f8ad c00c 	strh.w	ip, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009e9c:	f001 fba6 	bl	800b5ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8009ea0:	b908      	cbnz	r0, 8009ea6 <netconn_bind+0x26>
    return apimsg->err;
 8009ea2:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8009ea6:	b009      	add	sp, #36	@ 0x24
 8009ea8:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8009eac:	4b06      	ldr	r3, [pc, #24]	@ (8009ec8 <netconn_bind+0x48>)
 8009eae:	e7ed      	b.n	8009e8c <netconn_bind+0xc>
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009eb0:	4b06      	ldr	r3, [pc, #24]	@ (8009ecc <netconn_bind+0x4c>)
 8009eb2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8009eb6:	4906      	ldr	r1, [pc, #24]	@ (8009ed0 <netconn_bind+0x50>)
 8009eb8:	4806      	ldr	r0, [pc, #24]	@ (8009ed4 <netconn_bind+0x54>)
 8009eba:	f009 f819 	bl	8012ef0 <iprintf>
 8009ebe:	f06f 000f 	mvn.w	r0, #15
 8009ec2:	e7f0      	b.n	8009ea6 <netconn_bind+0x26>
 8009ec4:	0800b11d 	.word	0x0800b11d
 8009ec8:	08016fdc 	.word	0x08016fdc
 8009ecc:	08014aa4 	.word	0x08014aa4
 8009ed0:	08014bc0 	.word	0x08014bc0
 8009ed4:	08014150 	.word	0x08014150

08009ed8 <netconn_listen_with_backlog>:
{
 8009ed8:	b500      	push	{lr}
 8009eda:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009edc:	b168      	cbz	r0, 8009efa <netconn_listen_with_backlog+0x22>
  API_MSG_VAR_REF(msg).conn = conn;
 8009ede:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009ee0:	f100 020c 	add.w	r2, r0, #12
 8009ee4:	4669      	mov	r1, sp
 8009ee6:	480a      	ldr	r0, [pc, #40]	@ (8009f10 <netconn_listen_with_backlog+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 8009ee8:	9300      	str	r3, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009eea:	f001 fb7f 	bl	800b5ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8009eee:	b908      	cbnz	r0, 8009ef4 <netconn_listen_with_backlog+0x1c>
    return apimsg->err;
 8009ef0:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8009ef4:	b009      	add	sp, #36	@ 0x24
 8009ef6:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009efa:	4b06      	ldr	r3, [pc, #24]	@ (8009f14 <netconn_listen_with_backlog+0x3c>)
 8009efc:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8009f00:	4905      	ldr	r1, [pc, #20]	@ (8009f18 <netconn_listen_with_backlog+0x40>)
 8009f02:	4806      	ldr	r0, [pc, #24]	@ (8009f1c <netconn_listen_with_backlog+0x44>)
 8009f04:	f008 fff4 	bl	8012ef0 <iprintf>
 8009f08:	f06f 000f 	mvn.w	r0, #15
 8009f0c:	e7f2      	b.n	8009ef4 <netconn_listen_with_backlog+0x1c>
 8009f0e:	bf00      	nop
 8009f10:	0800b155 	.word	0x0800b155
 8009f14:	08014aa4 	.word	0x08014aa4
 8009f18:	08014bdc 	.word	0x08014bdc
 8009f1c:	08014150 	.word	0x08014150

08009f20 <netconn_accept>:
{
 8009f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f22:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009f24:	2900      	cmp	r1, #0
 8009f26:	d04d      	beq.n	8009fc4 <netconn_accept+0xa4>
  *new_conn = NULL;
 8009f28:	2700      	movs	r7, #0
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d03d      	beq.n	8009fb0 <netconn_accept+0x90>
  SYS_ARCH_PROTECT(lev);
 8009f34:	f008 fe9a 	bl	8012c6c <sys_arch_protect>
  err = conn->pending_err;
 8009f38:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8009f3c:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009f3e:	f008 fea1 	bl	8012c84 <sys_arch_unprotect>
  err = netconn_err(conn);
 8009f42:	f88d 6003 	strb.w	r6, [sp, #3]
  if (err != ERR_OK) {
 8009f46:	b116      	cbz	r6, 8009f4e <netconn_accept+0x2e>
}
 8009f48:	4630      	mov	r0, r6
 8009f4a:	b003      	add	sp, #12
 8009f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009f4e:	f104 0714 	add.w	r7, r4, #20
 8009f52:	4638      	mov	r0, r7
 8009f54:	f008 fe08 	bl	8012b68 <sys_mbox_valid>
 8009f58:	b338      	cbz	r0, 8009faa <netconn_accept+0x8a>
 8009f5a:	7f23      	ldrb	r3, [r4, #28]
 8009f5c:	07da      	lsls	r2, r3, #31
 8009f5e:	d424      	bmi.n	8009faa <netconn_accept+0x8a>
  if (netconn_is_nonblocking(conn)) {
 8009f60:	079b      	lsls	r3, r3, #30
 8009f62:	d517      	bpl.n	8009f94 <netconn_accept+0x74>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009f64:	a901      	add	r1, sp, #4
 8009f66:	4638      	mov	r0, r7
 8009f68:	f008 fdf2 	bl	8012b50 <sys_arch_mbox_tryfetch>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d031      	beq.n	8009fd4 <netconn_accept+0xb4>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009f70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009f72:	b11b      	cbz	r3, 8009f7c <netconn_accept+0x5c>
 8009f74:	2200      	movs	r2, #0
 8009f76:	4620      	mov	r0, r4
 8009f78:	2101      	movs	r1, #1
 8009f7a:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009f7c:	f10d 0103 	add.w	r1, sp, #3
 8009f80:	9801      	ldr	r0, [sp, #4]
 8009f82:	f000 fe6b 	bl	800ac5c <lwip_netconn_is_err_msg>
 8009f86:	b958      	cbnz	r0, 8009fa0 <netconn_accept+0x80>
  if (accept_ptr == NULL) {
 8009f88:	9b01      	ldr	r3, [sp, #4]
 8009f8a:	b173      	cbz	r3, 8009faa <netconn_accept+0x8a>
}
 8009f8c:	4630      	mov	r0, r6
  *new_conn = newconn;
 8009f8e:	602b      	str	r3, [r5, #0]
}
 8009f90:	b003      	add	sp, #12
 8009f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009f94:	4632      	mov	r2, r6
 8009f96:	4638      	mov	r0, r7
 8009f98:	a901      	add	r1, sp, #4
 8009f9a:	f008 fdbb 	bl	8012b14 <sys_arch_mbox_fetch>
 8009f9e:	e7e7      	b.n	8009f70 <netconn_accept+0x50>
    return err;
 8009fa0:	f99d 6003 	ldrsb.w	r6, [sp, #3]
}
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	b003      	add	sp, #12
 8009fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_CLSD;
 8009faa:	f06f 060e 	mvn.w	r6, #14
 8009fae:	e7cb      	b.n	8009f48 <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <netconn_accept+0xbc>)
 8009fb2:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8009fb6:	490a      	ldr	r1, [pc, #40]	@ (8009fe0 <netconn_accept+0xc0>)
 8009fb8:	480a      	ldr	r0, [pc, #40]	@ (8009fe4 <netconn_accept+0xc4>)
 8009fba:	f008 ff99 	bl	8012ef0 <iprintf>
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009fbe:	f06f 060f 	mvn.w	r6, #15
 8009fc2:	e7c1      	b.n	8009f48 <netconn_accept+0x28>
 8009fc4:	4b05      	ldr	r3, [pc, #20]	@ (8009fdc <netconn_accept+0xbc>)
 8009fc6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009fca:	4907      	ldr	r1, [pc, #28]	@ (8009fe8 <netconn_accept+0xc8>)
 8009fcc:	4805      	ldr	r0, [pc, #20]	@ (8009fe4 <netconn_accept+0xc4>)
 8009fce:	f008 ff8f 	bl	8012ef0 <iprintf>
 8009fd2:	e7f4      	b.n	8009fbe <netconn_accept+0x9e>
      return ERR_WOULDBLOCK;
 8009fd4:	f06f 0606 	mvn.w	r6, #6
 8009fd8:	e7b6      	b.n	8009f48 <netconn_accept+0x28>
 8009fda:	bf00      	nop
 8009fdc:	08014aa4 	.word	0x08014aa4
 8009fe0:	08014c1c 	.word	0x08014c1c
 8009fe4:	08014150 	.word	0x08014150
 8009fe8:	08014bfc 	.word	0x08014bfc

08009fec <netconn_recv>:
{
 8009fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fee:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009ff0:	2900      	cmp	r1, #0
 8009ff2:	d046      	beq.n	800a082 <netconn_recv+0x96>
  *new_buf = NULL;
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d036      	beq.n	800a06e <netconn_recv+0x82>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a000:	7803      	ldrb	r3, [r0, #0]
 800a002:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a006:	2b10      	cmp	r3, #16
 800a008:	d117      	bne.n	800a03a <netconn_recv+0x4e>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a00a:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 800a00c:	9601      	str	r6, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a00e:	f001 fec1 	bl	800bd94 <memp_malloc>
    if (buf == NULL) {
 800a012:	4607      	mov	r7, r0
 800a014:	b1b8      	cbz	r0, 800a046 <netconn_recv+0x5a>
    err = netconn_recv_data_tcp(conn, &p, 0);
 800a016:	4620      	mov	r0, r4
 800a018:	4632      	mov	r2, r6
 800a01a:	a901      	add	r1, sp, #4
 800a01c:	f7ff fe3a 	bl	8009c94 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 800a020:	4604      	mov	r4, r0
 800a022:	b9a8      	cbnz	r0, 800a050 <netconn_recv+0x64>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a024:	9e01      	ldr	r6, [sp, #4]
 800a026:	b1d6      	cbz	r6, 800a05e <netconn_recv+0x72>
    buf->port = 0;
 800a028:	2300      	movs	r3, #0
    buf->p = p;
 800a02a:	e9c7 6600 	strd	r6, r6, [r7]
    buf->port = 0;
 800a02e:	81bb      	strh	r3, [r7, #12]
    ip_addr_set_zero(&buf->addr);
 800a030:	60bb      	str	r3, [r7, #8]
    *new_buf = buf;
 800a032:	602f      	str	r7, [r5, #0]
}
 800a034:	4620      	mov	r0, r4
 800a036:	b003      	add	sp, #12
 800a038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a03a:	4632      	mov	r2, r6
}
 800a03c:	b003      	add	sp, #12
 800a03e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a042:	f7ff bd99 	b.w	8009b78 <netconn_recv_data>
      return ERR_MEM;
 800a046:	f04f 34ff 	mov.w	r4, #4294967295
}
 800a04a:	4620      	mov	r0, r4
 800a04c:	b003      	add	sp, #12
 800a04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memp_free(MEMP_NETBUF, buf);
 800a050:	4639      	mov	r1, r7
 800a052:	2006      	movs	r0, #6
 800a054:	f001 fee4 	bl	800be20 <memp_free>
}
 800a058:	4620      	mov	r0, r4
 800a05a:	b003      	add	sp, #12
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LWIP_ASSERT("p != NULL", p != NULL);
 800a05e:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <netconn_recv+0xa8>)
 800a060:	f240 3279 	movw	r2, #889	@ 0x379
 800a064:	490c      	ldr	r1, [pc, #48]	@ (800a098 <netconn_recv+0xac>)
 800a066:	480d      	ldr	r0, [pc, #52]	@ (800a09c <netconn_recv+0xb0>)
 800a068:	f008 ff42 	bl	8012ef0 <iprintf>
 800a06c:	e7dc      	b.n	800a028 <netconn_recv+0x3c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a06e:	4b09      	ldr	r3, [pc, #36]	@ (800a094 <netconn_recv+0xa8>)
 800a070:	f240 3265 	movw	r2, #869	@ 0x365
 800a074:	490a      	ldr	r1, [pc, #40]	@ (800a0a0 <netconn_recv+0xb4>)
 800a076:	4809      	ldr	r0, [pc, #36]	@ (800a09c <netconn_recv+0xb0>)
 800a078:	f008 ff3a 	bl	8012ef0 <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a07c:	f06f 040f 	mvn.w	r4, #15
 800a080:	e7d8      	b.n	800a034 <netconn_recv+0x48>
 800a082:	4b04      	ldr	r3, [pc, #16]	@ (800a094 <netconn_recv+0xa8>)
 800a084:	f240 3263 	movw	r2, #867	@ 0x363
 800a088:	4906      	ldr	r1, [pc, #24]	@ (800a0a4 <netconn_recv+0xb8>)
 800a08a:	4804      	ldr	r0, [pc, #16]	@ (800a09c <netconn_recv+0xb0>)
 800a08c:	f008 ff30 	bl	8012ef0 <iprintf>
 800a090:	e7f4      	b.n	800a07c <netconn_recv+0x90>
 800a092:	bf00      	nop
 800a094:	08014aa4 	.word	0x08014aa4
 800a098:	08014d9c 	.word	0x08014d9c
 800a09c:	08014150 	.word	0x08014150
 800a0a0:	08014af8 	.word	0x08014af8
 800a0a4:	08014ad8 	.word	0x08014ad8

0800a0a8 <netconn_write_vectors_partly>:
{
 800a0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0aa:	b089      	sub	sp, #36	@ 0x24
 800a0ac:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d05b      	beq.n	800a16a <netconn_write_vectors_partly+0xc2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a0b2:	7804      	ldrb	r4, [r0, #0]
 800a0b4:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 800a0b8:	2c10      	cmp	r4, #16
 800a0ba:	d14e      	bne.n	800a15a <netconn_write_vectors_partly+0xb2>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a0bc:	7f04      	ldrb	r4, [r0, #28]
 800a0be:	f003 0604 	and.w	r6, r3, #4
 800a0c2:	f004 0402 	and.w	r4, r4, #2
 800a0c6:	4334      	orrs	r4, r6
 800a0c8:	d016      	beq.n	800a0f8 <netconn_write_vectors_partly+0x50>
  if (dontblock && !bytes_written) {
 800a0ca:	b18d      	cbz	r5, 800a0f0 <netconn_write_vectors_partly+0x48>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a0cc:	2701      	movs	r7, #1
  for (i = 0; i < vectorcnt; i++) {
 800a0ce:	2a00      	cmp	r2, #0
 800a0d0:	d038      	beq.n	800a144 <netconn_write_vectors_partly+0x9c>
 800a0d2:	f04f 0c00 	mov.w	ip, #0
 800a0d6:	f101 0e04 	add.w	lr, r1, #4
  size = 0;
 800a0da:	4666      	mov	r6, ip
 800a0dc:	e001      	b.n	800a0e2 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 800a0de:	4562      	cmp	r2, ip
 800a0e0:	d00c      	beq.n	800a0fc <netconn_write_vectors_partly+0x54>
 800a0e2:	f85e 403c 	ldr.w	r4, [lr, ip, lsl #3]
 800a0e6:	f10c 0c01 	add.w	ip, ip, #1
 800a0ea:	19a4      	adds	r4, r4, r6
    size += vectors[i].len;
 800a0ec:	4626      	mov	r6, r4
    if (size < vectors[i].len) {
 800a0ee:	d3f6      	bcc.n	800a0de <netconn_write_vectors_partly+0x36>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a0f0:	f06f 0005 	mvn.w	r0, #5
}
 800a0f4:	b009      	add	sp, #36	@ 0x24
 800a0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a0f8:	4627      	mov	r7, r4
 800a0fa:	e7e8      	b.n	800a0ce <netconn_write_vectors_partly+0x26>
  if (size == 0) {
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d021      	beq.n	800a144 <netconn_write_vectors_partly+0x9c>
  } else if (size > SSIZE_MAX) {
 800a100:	da03      	bge.n	800a10a <netconn_write_vectors_partly+0x62>
    if (!bytes_written) {
 800a102:	2d00      	cmp	r5, #0
 800a104:	d0f4      	beq.n	800a0f0 <netconn_write_vectors_partly+0x48>
    size = (size_t)limited;
 800a106:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a10a:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a10e:	2300      	movs	r3, #0
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a110:	9102      	str	r1, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a112:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a114:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a118:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 800a11c:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a11e:	4818      	ldr	r0, [pc, #96]	@ (800a180 <netconn_write_vectors_partly+0xd8>)
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a120:	9306      	str	r3, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a122:	e9cd 3604 	strd	r3, r6, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a126:	f001 fa61 	bl	800b5ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d1e2      	bne.n	800a0f4 <netconn_write_vectors_partly+0x4c>
    return apimsg->err;
 800a12e:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err == ERR_OK) {
 800a132:	2800      	cmp	r0, #0
 800a134:	d1de      	bne.n	800a0f4 <netconn_write_vectors_partly+0x4c>
    if (bytes_written != NULL) {
 800a136:	b10d      	cbz	r5, 800a13c <netconn_write_vectors_partly+0x94>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a138:	9b06      	ldr	r3, [sp, #24]
 800a13a:	602b      	str	r3, [r5, #0]
    if (!dontblock) {
 800a13c:	b917      	cbnz	r7, 800a144 <netconn_write_vectors_partly+0x9c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a13e:	9b06      	ldr	r3, [sp, #24]
 800a140:	42b3      	cmp	r3, r6
 800a142:	d102      	bne.n	800a14a <netconn_write_vectors_partly+0xa2>
    return ERR_OK;
 800a144:	2000      	movs	r0, #0
}
 800a146:	b009      	add	sp, #36	@ 0x24
 800a148:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a14a:	4b0e      	ldr	r3, [pc, #56]	@ (800a184 <netconn_write_vectors_partly+0xdc>)
 800a14c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a150:	490d      	ldr	r1, [pc, #52]	@ (800a188 <netconn_write_vectors_partly+0xe0>)
 800a152:	480e      	ldr	r0, [pc, #56]	@ (800a18c <netconn_write_vectors_partly+0xe4>)
 800a154:	f008 fecc 	bl	8012ef0 <iprintf>
 800a158:	e7f4      	b.n	800a144 <netconn_write_vectors_partly+0x9c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a15a:	4b0a      	ldr	r3, [pc, #40]	@ (800a184 <netconn_write_vectors_partly+0xdc>)
 800a15c:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800a160:	490b      	ldr	r1, [pc, #44]	@ (800a190 <netconn_write_vectors_partly+0xe8>)
 800a162:	480a      	ldr	r0, [pc, #40]	@ (800a18c <netconn_write_vectors_partly+0xe4>)
 800a164:	f008 fec4 	bl	8012ef0 <iprintf>
 800a168:	e7c2      	b.n	800a0f0 <netconn_write_vectors_partly+0x48>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a16a:	4b06      	ldr	r3, [pc, #24]	@ (800a184 <netconn_write_vectors_partly+0xdc>)
 800a16c:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a170:	4908      	ldr	r1, [pc, #32]	@ (800a194 <netconn_write_vectors_partly+0xec>)
 800a172:	4806      	ldr	r0, [pc, #24]	@ (800a18c <netconn_write_vectors_partly+0xe4>)
 800a174:	f008 febc 	bl	8012ef0 <iprintf>
 800a178:	f06f 000f 	mvn.w	r0, #15
 800a17c:	e7ba      	b.n	800a0f4 <netconn_write_vectors_partly+0x4c>
 800a17e:	bf00      	nop
 800a180:	0800b25d 	.word	0x0800b25d
 800a184:	08014aa4 	.word	0x08014aa4
 800a188:	08014c7c 	.word	0x08014c7c
 800a18c:	08014150 	.word	0x08014150
 800a190:	08014c58 	.word	0x08014c58
 800a194:	08014c3c 	.word	0x08014c3c

0800a198 <netconn_write_partly>:
{
 800a198:	b510      	push	{r4, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	4614      	mov	r4, r2
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a19e:	9a06      	ldr	r2, [sp, #24]
  vector.len = size;
 800a1a0:	e9cd 1402 	strd	r1, r4, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a1a4:	9200      	str	r2, [sp, #0]
 800a1a6:	a902      	add	r1, sp, #8
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f7ff ff7d 	bl	800a0a8 <netconn_write_vectors_partly>
}
 800a1ae:	b004      	add	sp, #16
 800a1b0:	bd10      	pop	{r4, pc}
 800a1b2:	bf00      	nop

0800a1b4 <netconn_close>:
{
 800a1b4:	b500      	push	{lr}
 800a1b6:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a1b8:	b188      	cbz	r0, 800a1de <netconn_close+0x2a>
  API_MSG_VAR_REF(msg).conn = conn;
 800a1ba:	4603      	mov	r3, r0
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a1bc:	f642 1c03 	movw	ip, #10499	@ 0x2903
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a1c0:	f100 020c 	add.w	r2, r0, #12
 800a1c4:	4669      	mov	r1, sp
 800a1c6:	480b      	ldr	r0, [pc, #44]	@ (800a1f4 <netconn_close+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 800a1c8:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a1ca:	f8ad c008 	strh.w	ip, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a1ce:	f001 fa0d 	bl	800b5ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800a1d2:	b908      	cbnz	r0, 800a1d8 <netconn_close+0x24>
    return apimsg->err;
 800a1d4:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 800a1d8:	b009      	add	sp, #36	@ 0x24
 800a1da:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a1de:	4b06      	ldr	r3, [pc, #24]	@ (800a1f8 <netconn_close+0x44>)
 800a1e0:	f240 4247 	movw	r2, #1095	@ 0x447
 800a1e4:	4905      	ldr	r1, [pc, #20]	@ (800a1fc <netconn_close+0x48>)
 800a1e6:	4806      	ldr	r0, [pc, #24]	@ (800a200 <netconn_close+0x4c>)
 800a1e8:	f008 fe82 	bl	8012ef0 <iprintf>
 800a1ec:	f06f 000f 	mvn.w	r0, #15
 800a1f0:	e7f2      	b.n	800a1d8 <netconn_close+0x24>
 800a1f2:	bf00      	nop
 800a1f4:	0800b329 	.word	0x0800b329
 800a1f8:	08014aa4 	.word	0x08014aa4
 800a1fc:	08014ca0 	.word	0x08014ca0
 800a200:	08014150 	.word	0x08014150

0800a204 <netconn_err>:
{
 800a204:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 800a206:	4604      	mov	r4, r0
 800a208:	b148      	cbz	r0, 800a21e <netconn_err+0x1a>
  SYS_ARCH_PROTECT(lev);
 800a20a:	f008 fd2f 	bl	8012c6c <sys_arch_protect>
  conn->pending_err = ERR_OK;
 800a20e:	2300      	movs	r3, #0
  err = conn->pending_err;
 800a210:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800a214:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a216:	f008 fd35 	bl	8012c84 <sys_arch_unprotect>
  return err;
}
 800a21a:	4628      	mov	r0, r5
 800a21c:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800a21e:	4605      	mov	r5, r0
}
 800a220:	4628      	mov	r0, r5
 800a222:	bd38      	pop	{r3, r4, r5, pc}

0800a224 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	4604      	mov	r4, r0
 800a22a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 800a22e:	4617      	mov	r7, r2
 800a230:	461e      	mov	r6, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a232:	460d      	mov	r5, r1
 800a234:	b379      	cbz	r1, 800a296 <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a236:	2c00      	cmp	r4, #0
 800a238:	d03b      	beq.n	800a2b2 <recv_udp+0x8e>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	42ab      	cmp	r3, r5
 800a23e:	d005      	beq.n	800a24c <recv_udp+0x28>
 800a240:	4b21      	ldr	r3, [pc, #132]	@ (800a2c8 <recv_udp+0xa4>)
 800a242:	22ee      	movs	r2, #238	@ 0xee
 800a244:	4921      	ldr	r1, [pc, #132]	@ (800a2cc <recv_udp+0xa8>)
 800a246:	4822      	ldr	r0, [pc, #136]	@ (800a2d0 <recv_udp+0xac>)
 800a248:	f008 fe52 	bl	8012ef0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a24c:	f104 0910 	add.w	r9, r4, #16
 800a250:	4648      	mov	r0, r9
 800a252:	f008 fc89 	bl	8012b68 <sys_mbox_valid>
 800a256:	b1c8      	cbz	r0, 800a28c <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a258:	2006      	movs	r0, #6
 800a25a:	f001 fd9b 	bl	800bd94 <memp_malloc>
  if (buf == NULL) {
 800a25e:	4605      	mov	r5, r0
 800a260:	b1a0      	cbz	r0, 800a28c <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 800a262:	e9c0 7700 	strd	r7, r7, [r0]
    buf->ptr = p;
    ip_addr_set(&buf->addr, addr);
 800a266:	b106      	cbz	r6, 800a26a <recv_udp+0x46>
 800a268:	6836      	ldr	r6, [r6, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a26a:	4629      	mov	r1, r5
    ip_addr_set(&buf->addr, addr);
 800a26c:	60ae      	str	r6, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a26e:	4648      	mov	r0, r9
    buf->port = port;
 800a270:	f8a5 800c 	strh.w	r8, [r5, #12]
  len = p->tot_len;
 800a274:	893e      	ldrh	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a276:	f008 fc3d 	bl	8012af4 <sys_mbox_trypost>
 800a27a:	4601      	mov	r1, r0
 800a27c:	b990      	cbnz	r0, 800a2a4 <recv_udp+0x80>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a27e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a280:	b1ab      	cbz	r3, 800a2ae <recv_udp+0x8a>
 800a282:	4632      	mov	r2, r6
 800a284:	4620      	mov	r0, r4
  }
}
 800a286:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a28a:	4718      	bx	r3
    pbuf_free(p);
 800a28c:	4638      	mov	r0, r7
}
 800a28e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800a292:	f002 b8d1 	b.w	800c438 <pbuf_free>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a296:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <recv_udp+0xa4>)
 800a298:	22e5      	movs	r2, #229	@ 0xe5
 800a29a:	490e      	ldr	r1, [pc, #56]	@ (800a2d4 <recv_udp+0xb0>)
 800a29c:	480c      	ldr	r0, [pc, #48]	@ (800a2d0 <recv_udp+0xac>)
 800a29e:	f008 fe27 	bl	8012ef0 <iprintf>
 800a2a2:	e7c8      	b.n	800a236 <recv_udp+0x12>
    netbuf_delete(buf);
 800a2a4:	4628      	mov	r0, r5
}
 800a2a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 800a2aa:	f001 b89b 	b.w	800b3e4 <netbuf_delete>
}
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a2b2:	4b05      	ldr	r3, [pc, #20]	@ (800a2c8 <recv_udp+0xa4>)
 800a2b4:	22e6      	movs	r2, #230	@ 0xe6
 800a2b6:	4908      	ldr	r1, [pc, #32]	@ (800a2d8 <recv_udp+0xb4>)
 800a2b8:	4805      	ldr	r0, [pc, #20]	@ (800a2d0 <recv_udp+0xac>)
 800a2ba:	f008 fe19 	bl	8012ef0 <iprintf>
    pbuf_free(p);
 800a2be:	4638      	mov	r0, r7
}
 800a2c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800a2c4:	f002 b8b8 	b.w	800c438 <pbuf_free>
 800a2c8:	08014cbc 	.word	0x08014cbc
 800a2cc:	08014d34 	.word	0x08014d34
 800a2d0:	08014150 	.word	0x08014150
 800a2d4:	08014cf0 	.word	0x08014cf0
 800a2d8:	08014d14 	.word	0x08014d14

0800a2dc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a2dc:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a2de:	6844      	ldr	r4, [r0, #4]
{
 800a2e0:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f002 fed8 	bl	800d098 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4909      	ldr	r1, [pc, #36]	@ (800a310 <setup_tcp+0x34>)
 800a2ec:	f002 fedc 	bl	800d0a8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4908      	ldr	r1, [pc, #32]	@ (800a314 <setup_tcp+0x38>)
 800a2f4:	f002 fef2 	bl	800d0dc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	4907      	ldr	r1, [pc, #28]	@ (800a318 <setup_tcp+0x3c>)
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	f002 ff2d 	bl	800d15c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a302:	4620      	mov	r0, r4
 800a304:	4905      	ldr	r1, [pc, #20]	@ (800a31c <setup_tcp+0x40>)
}
 800a306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 800a30a:	f002 bf01 	b.w	800d110 <tcp_err>
 800a30e:	bf00      	nop
 800a310:	0800aa3d 	.word	0x0800aa3d
 800a314:	0800a9cd 	.word	0x0800a9cd
 800a318:	0800a94d 	.word	0x0800a94d
 800a31c:	0800ab15 	.word	0x0800ab15

0800a320 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a324:	4680      	mov	r8, r0
{
 800a326:	b083      	sub	sp, #12
 800a328:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f000 8140 	beq.w	800a5b0 <lwip_netconn_do_writemore+0x290>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a330:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d006      	beq.n	800a346 <lwip_netconn_do_writemore+0x26>
 800a338:	4bab      	ldr	r3, [pc, #684]	@ (800a5e8 <lwip_netconn_do_writemore+0x2c8>)
 800a33a:	f240 6274 	movw	r2, #1652	@ 0x674
 800a33e:	49ab      	ldr	r1, [pc, #684]	@ (800a5ec <lwip_netconn_do_writemore+0x2cc>)
 800a340:	48ab      	ldr	r0, [pc, #684]	@ (800a5f0 <lwip_netconn_do_writemore+0x2d0>)
 800a342:	f008 fdd5 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a346:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 8138 	beq.w	800a5c0 <lwip_netconn_do_writemore+0x2a0>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a350:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 813f 	beq.w	800a5d8 <lwip_netconn_do_writemore+0x2b8>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a35a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a35e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 800a362:	4291      	cmp	r1, r2
 800a364:	f080 80cf 	bcs.w	800a506 <lwip_netconn_do_writemore+0x1e6>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a368:	899a      	ldrh	r2, [r3, #12]
 800a36a:	2a00      	cmp	r2, #0
 800a36c:	f000 80c1 	beq.w	800a4f2 <lwip_netconn_do_writemore+0x1d2>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a370:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a372:	f898 901c 	ldrb.w	r9, [r8, #28]
 800a376:	f007 0204 	and.w	r2, r7, #4
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a37a:	f8df b26c 	ldr.w	fp, [pc, #620]	@ 800a5e8 <lwip_netconn_do_writemore+0x2c8>
 800a37e:	f009 0902 	and.w	r9, r9, #2
 800a382:	f8df a284 	ldr.w	sl, [pc, #644]	@ 800a608 <lwip_netconn_do_writemore+0x2e8>
 800a386:	9501      	str	r5, [sp, #4]
 800a388:	ea49 0902 	orr.w	r9, r9, r2
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	6919      	ldr	r1, [r3, #16]
 800a390:	e9d2 6c00 	ldrd	r6, ip, [r2]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a394:	ebac 0501 	sub.w	r5, ip, r1
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a398:	440e      	add	r6, r1
      if (diff > 0xffffUL) { /* max_u16_t */
 800a39a:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800a39e:	d371      	bcc.n	800a484 <lwip_netconn_do_writemore+0x164>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a3a0:	f047 0702 	orr.w	r7, r7, #2
        len = 0xffff;
 800a3a4:	f64f 74ff 	movw	r4, #65535	@ 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 800a3a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a3ac:	f8b2 e064 	ldrh.w	lr, [r2, #100]	@ 0x64
 800a3b0:	4610      	mov	r0, r2
      if (available < len) {
 800a3b2:	4574      	cmp	r4, lr
 800a3b4:	d908      	bls.n	800a3c8 <lwip_netconn_do_writemore+0xa8>
        if (dontblock) {
 800a3b6:	f1b9 0f00 	cmp.w	r9, #0
 800a3ba:	f000 8088 	beq.w	800a4ce <lwip_netconn_do_writemore+0x1ae>
          if (!len) {
 800a3be:	f1be 0f00 	cmp.w	lr, #0
 800a3c2:	f000 80aa 	beq.w	800a51a <lwip_netconn_do_writemore+0x1fa>
 800a3c6:	4674      	mov	r4, lr
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a3c8:	4421      	add	r1, r4
 800a3ca:	458c      	cmp	ip, r1
 800a3cc:	d375      	bcc.n	800a4ba <lwip_netconn_do_writemore+0x19a>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a3ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3d2:	429c      	cmp	r4, r3
 800a3d4:	d16c      	bne.n	800a4b0 <lwip_netconn_do_writemore+0x190>
 800a3d6:	429d      	cmp	r5, r3
 800a3d8:	d96a      	bls.n	800a4b0 <lwip_netconn_do_writemore+0x190>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
        write_more = 1;
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a3da:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 800a3de:	2501      	movs	r5, #1
      } else {
        write_more = 0;
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a3e0:	463b      	mov	r3, r7
 800a3e2:	4622      	mov	r2, r4
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	f005 fc07 	bl	800fbf8 <tcp_write>
      if (err == ERR_OK) {
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d14c      	bne.n	800a488 <lwip_netconn_do_writemore+0x168>
        conn->current_msg->msg.w.offset += len;
 800a3ee:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a3f2:	699a      	ldr	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a3f4:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 800a3f6:	4422      	add	r2, r4
 800a3f8:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	4414      	add	r4, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a3fe:	684a      	ldr	r2, [r1, #4]
 800a400:	4294      	cmp	r4, r2
        conn->current_msg->msg.w.vector_off += len;
 800a402:	611c      	str	r4, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a404:	d032      	beq.n	800a46c <lwip_netconn_do_writemore+0x14c>
            conn->current_msg->msg.w.vector++;
            conn->current_msg->msg.w.vector_off = 0;
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a406:	2d00      	cmp	r5, #0
 800a408:	d1c0      	bne.n	800a38c <lwip_netconn_do_writemore+0x6c>
 800a40a:	4606      	mov	r6, r0
 800a40c:	9d01      	ldr	r5, [sp, #4]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a40e:	f1b9 0f00 	cmp.w	r9, #0
 800a412:	f040 80fb 	bne.w	800a60c <lwip_netconn_do_writemore+0x2ec>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a416:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a41a:	f640 3369 	movw	r3, #2921	@ 0xb69
 800a41e:	f8b2 1064 	ldrh.w	r1, [r2, #100]	@ 0x64
 800a422:	4299      	cmp	r1, r3
 800a424:	d903      	bls.n	800a42e <lwip_netconn_do_writemore+0x10e>
 800a426:	f8b2 3066 	ldrh.w	r3, [r2, #102]	@ 0x66
 800a42a:	2b07      	cmp	r3, #7
 800a42c:	d908      	bls.n	800a440 <lwip_netconn_do_writemore+0x120>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a42e:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 800a432:	b12b      	cbz	r3, 800a440 <lwip_netconn_do_writemore+0x120>
 800a434:	2200      	movs	r2, #0
 800a436:	2103      	movs	r1, #3
 800a438:	4640      	mov	r0, r8
 800a43a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a43c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a440:	2e00      	cmp	r6, #0
 800a442:	f000 8086 	beq.w	800a552 <lwip_netconn_do_writemore+0x232>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a446:	4610      	mov	r0, r2
 800a448:	f006 f9ce 	bl	80107e8 <tcp_output>
      if (out_err == ERR_RTE) {
 800a44c:	1d03      	adds	r3, r0, #4
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a44e:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800a450:	d020      	beq.n	800a494 <lwip_netconn_do_writemore+0x174>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
      } else if (dontblock) {
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	f000 808b 	beq.w	800a570 <lwip_netconn_do_writemore+0x250>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a45a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a45e:	699a      	ldr	r2, [r3, #24]
 800a460:	2a00      	cmp	r2, #0
 800a462:	bf14      	ite	ne
 800a464:	2600      	movne	r6, #0
 800a466:	f06f 0606 	mvneq.w	r6, #6
 800a46a:	e015      	b.n	800a498 <lwip_netconn_do_writemore+0x178>
          conn->current_msg->msg.w.vector_cnt--;
 800a46c:	899a      	ldrh	r2, [r3, #12]
 800a46e:	3a01      	subs	r2, #1
 800a470:	b292      	uxth	r2, r2
 800a472:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a474:	2a00      	cmp	r2, #0
 800a476:	d0c6      	beq.n	800a406 <lwip_netconn_do_writemore+0xe6>
            conn->current_msg->msg.w.vector++;
 800a478:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 800a47a:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 800a47c:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 800a47e:	2d00      	cmp	r5, #0
 800a480:	d184      	bne.n	800a38c <lwip_netconn_do_writemore+0x6c>
 800a482:	e7c2      	b.n	800a40a <lwip_netconn_do_writemore+0xea>
        len = (u16_t)diff;
 800a484:	b2ac      	uxth	r4, r5
 800a486:	e78f      	b.n	800a3a8 <lwip_netconn_do_writemore+0x88>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	4606      	mov	r6, r0
 800a48c:	9d01      	ldr	r5, [sp, #4]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2b01      	cmp	r3, #1
 800a492:	d927      	bls.n	800a4e4 <lwip_netconn_do_writemore+0x1c4>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a494:	f8d8 3020 	ldr.w	r3, [r8, #32]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a498:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 800a49a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800a49c:	2300      	movs	r3, #0
 800a49e:	f8c8 3020 	str.w	r3, [r8, #32]
    conn->state = NETCONN_NONE;
 800a4a2:	f888 3001 	strb.w	r3, [r8, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a4a6:	bb05      	cbnz	r5, 800a4ea <lwip_netconn_do_writemore+0x1ca>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800a4a8:	2000      	movs	r0, #0
}
 800a4aa:	b003      	add	sp, #12
 800a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a4b0:	b2ad      	uxth	r5, r5
 800a4b2:	42a5      	cmp	r5, r4
 800a4b4:	d00f      	beq.n	800a4d6 <lwip_netconn_do_writemore+0x1b6>
        write_more = 0;
 800a4b6:	2500      	movs	r5, #0
 800a4b8:	e792      	b.n	800a3e0 <lwip_netconn_do_writemore+0xc0>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a4ba:	465b      	mov	r3, fp
 800a4bc:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800a4c0:	4651      	mov	r1, sl
 800a4c2:	484b      	ldr	r0, [pc, #300]	@ (800a5f0 <lwip_netconn_do_writemore+0x2d0>)
 800a4c4:	f008 fd14 	bl	8012ef0 <iprintf>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a4c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a4cc:	e77f      	b.n	800a3ce <lwip_netconn_do_writemore+0xae>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a4ce:	f047 0702 	orr.w	r7, r7, #2
 800a4d2:	4674      	mov	r4, lr
 800a4d4:	e778      	b.n	800a3c8 <lwip_netconn_do_writemore+0xa8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a4d6:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a4da:	899b      	ldrh	r3, [r3, #12]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	f63f af7c 	bhi.w	800a3da <lwip_netconn_do_writemore+0xba>
 800a4e2:	e7e8      	b.n	800a4b6 <lwip_netconn_do_writemore+0x196>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a4e4:	f04f 36ff 	mov.w	r6, #4294967295
 800a4e8:	e791      	b.n	800a40e <lwip_netconn_do_writemore+0xee>
      sys_sem_signal(op_completed_sem);
 800a4ea:	300c      	adds	r0, #12
 800a4ec:	f008 fb76 	bl	8012bdc <sys_sem_signal>
 800a4f0:	e7da      	b.n	800a4a8 <lwip_netconn_do_writemore+0x188>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a4f2:	4b3d      	ldr	r3, [pc, #244]	@ (800a5e8 <lwip_netconn_do_writemore+0x2c8>)
 800a4f4:	f240 6279 	movw	r2, #1657	@ 0x679
 800a4f8:	493e      	ldr	r1, [pc, #248]	@ (800a5f4 <lwip_netconn_do_writemore+0x2d4>)
 800a4fa:	483d      	ldr	r0, [pc, #244]	@ (800a5f0 <lwip_netconn_do_writemore+0x2d0>)
 800a4fc:	f008 fcf8 	bl	8012ef0 <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 800a500:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a504:	e734      	b.n	800a370 <lwip_netconn_do_writemore+0x50>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a506:	4b38      	ldr	r3, [pc, #224]	@ (800a5e8 <lwip_netconn_do_writemore+0x2c8>)
 800a508:	f240 6277 	movw	r2, #1655	@ 0x677
 800a50c:	493a      	ldr	r1, [pc, #232]	@ (800a5f8 <lwip_netconn_do_writemore+0x2d8>)
 800a50e:	4838      	ldr	r0, [pc, #224]	@ (800a5f0 <lwip_netconn_do_writemore+0x2d0>)
 800a510:	f008 fcee 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a514:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a518:	e726      	b.n	800a368 <lwip_netconn_do_writemore+0x48>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a51a:	6999      	ldr	r1, [r3, #24]
 800a51c:	9d01      	ldr	r5, [sp, #4]
 800a51e:	b961      	cbnz	r1, 800a53a <lwip_netconn_do_writemore+0x21a>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a520:	695a      	ldr	r2, [r3, #20]
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a522:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a526:	bb32      	cbnz	r2, 800a576 <lwip_netconn_do_writemore+0x256>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a528:	b124      	cbz	r4, 800a534 <lwip_netconn_do_writemore+0x214>
 800a52a:	2103      	movs	r1, #3
 800a52c:	4640      	mov	r0, r8
 800a52e:	47a0      	blx	r4
    if (err == ERR_OK) {
 800a530:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a534:	f06f 0606 	mvn.w	r6, #6
 800a538:	e7ae      	b.n	800a498 <lwip_netconn_do_writemore+0x178>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	4299      	cmp	r1, r3
 800a53e:	d37b      	bcc.n	800a638 <lwip_netconn_do_writemore+0x318>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a540:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 800a544:	b34b      	cbz	r3, 800a59a <lwip_netconn_do_writemore+0x27a>
 800a546:	4672      	mov	r2, lr
 800a548:	2103      	movs	r1, #3
 800a54a:	4640      	mov	r0, r8
 800a54c:	4798      	blx	r3
    if (err == ERR_OK) {
 800a54e:	f8d8 2004 	ldr.w	r2, [r8, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a552:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a556:	e9d3 3105 	ldrd	r3, r1, [r3, #20]
 800a55a:	4299      	cmp	r1, r3
 800a55c:	d01d      	beq.n	800a59a <lwip_netconn_do_writemore+0x27a>
 800a55e:	f1b9 0f00 	cmp.w	r9, #0
 800a562:	d11a      	bne.n	800a59a <lwip_netconn_do_writemore+0x27a>
      out_err = tcp_output(conn->pcb.tcp);
 800a564:	4610      	mov	r0, r2
 800a566:	f006 f93f 	bl	80107e8 <tcp_output>
      if (out_err == ERR_RTE) {
 800a56a:	1d02      	adds	r2, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 800a56c:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800a56e:	d091      	beq.n	800a494 <lwip_netconn_do_writemore+0x174>
    return ERR_MEM;
 800a570:	f04f 30ff 	mov.w	r0, #4294967295
 800a574:	e799      	b.n	800a4aa <lwip_netconn_do_writemore+0x18a>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a576:	2c00      	cmp	r4, #0
 800a578:	d063      	beq.n	800a642 <lwip_netconn_do_writemore+0x322>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a57a:	f06f 0606 	mvn.w	r6, #6
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a57e:	2200      	movs	r2, #0
 800a580:	2103      	movs	r1, #3
 800a582:	4640      	mov	r0, r8
 800a584:	47a0      	blx	r4
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a586:	f898 301c 	ldrb.w	r3, [r8, #28]
 800a58a:	f043 0310 	orr.w	r3, r3, #16
 800a58e:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 800a592:	2e00      	cmp	r6, #0
 800a594:	d163      	bne.n	800a65e <lwip_netconn_do_writemore+0x33e>
 800a596:	f8d8 2004 	ldr.w	r2, [r8, #4]
      out_err = tcp_output(conn->pcb.tcp);
 800a59a:	4610      	mov	r0, r2
 800a59c:	f006 f924 	bl	80107e8 <tcp_output>
      if (out_err == ERR_RTE) {
 800a5a0:	1d01      	adds	r1, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 800a5a2:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800a5a4:	f43f af76 	beq.w	800a494 <lwip_netconn_do_writemore+0x174>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a5a8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a5ac:	2600      	movs	r6, #0
 800a5ae:	e773      	b.n	800a498 <lwip_netconn_do_writemore+0x178>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a5b0:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e8 <lwip_netconn_do_writemore+0x2c8>)
 800a5b2:	f240 6273 	movw	r2, #1651	@ 0x673
 800a5b6:	4911      	ldr	r1, [pc, #68]	@ (800a5fc <lwip_netconn_do_writemore+0x2dc>)
 800a5b8:	480d      	ldr	r0, [pc, #52]	@ (800a5f0 <lwip_netconn_do_writemore+0x2d0>)
 800a5ba:	f008 fc99 	bl	8012ef0 <iprintf>
 800a5be:	e6b7      	b.n	800a330 <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a5c0:	4b09      	ldr	r3, [pc, #36]	@ (800a5e8 <lwip_netconn_do_writemore+0x2c8>)
 800a5c2:	f240 6275 	movw	r2, #1653	@ 0x675
 800a5c6:	490e      	ldr	r1, [pc, #56]	@ (800a600 <lwip_netconn_do_writemore+0x2e0>)
 800a5c8:	4809      	ldr	r0, [pc, #36]	@ (800a5f0 <lwip_netconn_do_writemore+0x2d0>)
 800a5ca:	f008 fc91 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a5ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f47f aec1 	bne.w	800a35a <lwip_netconn_do_writemore+0x3a>
 800a5d8:	4b03      	ldr	r3, [pc, #12]	@ (800a5e8 <lwip_netconn_do_writemore+0x2c8>)
 800a5da:	f240 6276 	movw	r2, #1654	@ 0x676
 800a5de:	4909      	ldr	r1, [pc, #36]	@ (800a604 <lwip_netconn_do_writemore+0x2e4>)
 800a5e0:	4803      	ldr	r0, [pc, #12]	@ (800a5f0 <lwip_netconn_do_writemore+0x2d0>)
 800a5e2:	f008 fc85 	bl	8012ef0 <iprintf>
 800a5e6:	e6b8      	b.n	800a35a <lwip_netconn_do_writemore+0x3a>
 800a5e8:	08014cbc 	.word	0x08014cbc
 800a5ec:	08014d54 	.word	0x08014d54
 800a5f0:	08014150 	.word	0x08014150
 800a5f4:	08014de8 	.word	0x08014de8
 800a5f8:	08014da8 	.word	0x08014da8
 800a5fc:	08014240 	.word	0x08014240
 800a600:	08014d74 	.word	0x08014d74
 800a604:	08014d90 	.word	0x08014d90
 800a608:	08014e10 	.word	0x08014e10
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a60c:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800a610:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800a614:	429a      	cmp	r2, r3
 800a616:	f4bf aefe 	bcs.w	800a416 <lwip_netconn_do_writemore+0xf6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a61a:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 800a61e:	2c00      	cmp	r4, #0
 800a620:	d1ad      	bne.n	800a57e <lwip_netconn_do_writemore+0x25e>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a622:	f898 301c 	ldrb.w	r3, [r8, #28]
 800a626:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a62a:	f043 0310 	orr.w	r3, r3, #16
 800a62e:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 800a632:	2e00      	cmp	r6, #0
 800a634:	d0b1      	beq.n	800a59a <lwip_netconn_do_writemore+0x27a>
 800a636:	e706      	b.n	800a446 <lwip_netconn_do_writemore+0x126>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a638:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 800a63c:	b144      	cbz	r4, 800a650 <lwip_netconn_do_writemore+0x330>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a63e:	4676      	mov	r6, lr
 800a640:	e79d      	b.n	800a57e <lwip_netconn_do_writemore+0x25e>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a642:	f898 201c 	ldrb.w	r2, [r8, #28]
 800a646:	f042 0210 	orr.w	r2, r2, #16
 800a64a:	f888 201c 	strb.w	r2, [r8, #28]
    } else if (err == ERR_MEM) {
 800a64e:	e771      	b.n	800a534 <lwip_netconn_do_writemore+0x214>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a650:	f898 301c 	ldrb.w	r3, [r8, #28]
 800a654:	f043 0310 	orr.w	r3, r3, #16
 800a658:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 800a65c:	e79d      	b.n	800a59a <lwip_netconn_do_writemore+0x27a>
    } else if (err == ERR_MEM) {
 800a65e:	3601      	adds	r6, #1
 800a660:	d004      	beq.n	800a66c <lwip_netconn_do_writemore+0x34c>
 800a662:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a666:	f06f 0606 	mvn.w	r6, #6
 800a66a:	e715      	b.n	800a498 <lwip_netconn_do_writemore+0x178>
 800a66c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a670:	e6e9      	b.n	800a446 <lwip_netconn_do_writemore+0x126>
 800a672:	bf00      	nop

0800a674 <lwip_netconn_do_close_internal>:
{
 800a674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a678:	4604      	mov	r4, r0
{
 800a67a:	460e      	mov	r6, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a67c:	2800      	cmp	r0, #0
 800a67e:	f000 80e7 	beq.w	800a850 <lwip_netconn_do_close_internal+0x1dc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a682:	7823      	ldrb	r3, [r4, #0]
 800a684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a688:	2b10      	cmp	r3, #16
 800a68a:	d006      	beq.n	800a69a <lwip_netconn_do_close_internal+0x26>
 800a68c:	4ba4      	ldr	r3, [pc, #656]	@ (800a920 <lwip_netconn_do_close_internal+0x2ac>)
 800a68e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a692:	49a4      	ldr	r1, [pc, #656]	@ (800a924 <lwip_netconn_do_close_internal+0x2b0>)
 800a694:	48a4      	ldr	r0, [pc, #656]	@ (800a928 <lwip_netconn_do_close_internal+0x2b4>)
 800a696:	f008 fc2b 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a69a:	7863      	ldrb	r3, [r4, #1]
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d006      	beq.n	800a6ae <lwip_netconn_do_close_internal+0x3a>
 800a6a0:	4b9f      	ldr	r3, [pc, #636]	@ (800a920 <lwip_netconn_do_close_internal+0x2ac>)
 800a6a2:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a6a6:	49a1      	ldr	r1, [pc, #644]	@ (800a92c <lwip_netconn_do_close_internal+0x2b8>)
 800a6a8:	489f      	ldr	r0, [pc, #636]	@ (800a928 <lwip_netconn_do_close_internal+0x2b4>)
 800a6aa:	f008 fc21 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a6ae:	6863      	ldr	r3, [r4, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 80b9 	beq.w	800a828 <lwip_netconn_do_close_internal+0x1b4>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a6b6:	6a23      	ldr	r3, [r4, #32]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80c0 	beq.w	800a83e <lwip_netconn_do_close_internal+0x1ca>
  shut = conn->current_msg->msg.sd.shut;
 800a6be:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 800a6c0:	6865      	ldr	r5, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 800a6c2:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 800a6c4:	f003 0701 	and.w	r7, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800a6c8:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800a6cc:	d03d      	beq.n	800a74a <lwip_netconn_do_close_internal+0xd6>
  } else if (shut_rx &&
 800a6ce:	b36f      	cbz	r7, 800a72c <lwip_netconn_do_close_internal+0xb8>
             ((tpcb->state == FIN_WAIT_1) ||
 800a6d0:	7d2b      	ldrb	r3, [r5, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a6d2:	1f5a      	subs	r2, r3, #5
  } else if (shut_rx &&
 800a6d4:	2a01      	cmp	r2, #1
 800a6d6:	d978      	bls.n	800a7ca <lwip_netconn_do_close_internal+0x156>
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d076      	beq.n	800a7ca <lwip_netconn_do_close_internal+0x156>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a6dc:	f1b8 0f00 	cmp.w	r8, #0
 800a6e0:	f040 80be 	bne.w	800a860 <lwip_netconn_do_close_internal+0x1ec>
  if (tpcb->state == LISTEN) {
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d06b      	beq.n	800a7c0 <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 800a6e8:	4641      	mov	r1, r8
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f002 fcdc 	bl	800d0a8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f002 fd26 	bl	800d144 <tcp_accept>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a6f8:	4642      	mov	r2, r8
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	f003 fb91 	bl	800de24 <tcp_shutdown>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a702:	6a23      	ldr	r3, [r4, #32]
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a704:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 800a706:	2800      	cmp	r0, #0
 800a708:	f000 8088 	beq.w	800a81c <lwip_netconn_do_close_internal+0x1a8>
    if (err == ERR_MEM) {
 800a70c:	1c41      	adds	r1, r0, #1
 800a70e:	d17e      	bne.n	800a80e <lwip_netconn_do_close_internal+0x19a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a710:	7a5a      	ldrb	r2, [r3, #9]
 800a712:	2a00      	cmp	r2, #0
 800a714:	f040 80e0 	bne.w	800a8d8 <lwip_netconn_do_close_internal+0x264>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a718:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a71a:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a71c:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 800a71e:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 800a720:	7062      	strb	r2, [r4, #1]
    if (delayed)
 800a722:	2e00      	cmp	r6, #0
 800a724:	d145      	bne.n	800a7b2 <lwip_netconn_do_close_internal+0x13e>
    return ERR_OK;
 800a726:	2000      	movs	r0, #0
}
 800a728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a72c:	f1b8 0f00 	cmp.w	r8, #0
 800a730:	d043      	beq.n	800a7ba <lwip_netconn_do_close_internal+0x146>
 800a732:	8b6b      	ldrh	r3, [r5, #26]
 800a734:	06d8      	lsls	r0, r3, #27
 800a736:	f100 8097 	bmi.w	800a868 <lwip_netconn_do_close_internal+0x1f4>
  if (tpcb->state == LISTEN) {
 800a73a:	7d2b      	ldrb	r3, [r5, #20]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d03f      	beq.n	800a7c0 <lwip_netconn_do_close_internal+0x14c>
      tcp_sent(tpcb, NULL);
 800a740:	4639      	mov	r1, r7
 800a742:	4628      	mov	r0, r5
 800a744:	f002 fcca 	bl	800d0dc <tcp_sent>
    if (shut_close) {
 800a748:	e7d6      	b.n	800a6f8 <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 800a74a:	2100      	movs	r1, #0
 800a74c:	4628      	mov	r0, r5
 800a74e:	f002 fca3 	bl	800d098 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800a752:	7d2b      	ldrb	r3, [r5, #20]
 800a754:	2b01      	cmp	r3, #1
 800a756:	f040 80a8 	bne.w	800a8aa <lwip_netconn_do_close_internal+0x236>
    tcp_accept(tpcb, NULL);
 800a75a:	2100      	movs	r1, #0
 800a75c:	4628      	mov	r0, r5
 800a75e:	f002 fcf1 	bl	800d144 <tcp_accept>
      err = tcp_close(tpcb);
 800a762:	4628      	mov	r0, r5
 800a764:	f003 fb3c 	bl	800dde0 <tcp_close>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a768:	6a23      	ldr	r3, [r4, #32]
      err = tcp_close(tpcb);
 800a76a:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d14c      	bne.n	800a80a <lwip_netconn_do_close_internal+0x196>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a770:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a772:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a774:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 800a776:	2200      	movs	r2, #0
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a778:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    conn->current_msg = NULL;
 800a77a:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 800a77c:	7062      	strb	r2, [r4, #1]
        conn->pcb.tcp = NULL;
 800a77e:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a780:	2b00      	cmp	r3, #0
 800a782:	d07f      	beq.n	800a884 <lwip_netconn_do_close_internal+0x210>
 800a784:	2104      	movs	r1, #4
 800a786:	4620      	mov	r0, r4
 800a788:	4798      	blx	r3
      if (shut_rx) {
 800a78a:	b137      	cbz	r7, 800a79a <lwip_netconn_do_close_internal+0x126>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a78c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0c7      	beq.n	800a722 <lwip_netconn_do_close_internal+0xae>
 800a792:	2200      	movs	r2, #0
 800a794:	4620      	mov	r0, r4
 800a796:	4611      	mov	r1, r2
 800a798:	4798      	blx	r3
      if (shut_tx) {
 800a79a:	f1b8 0f00 	cmp.w	r8, #0
 800a79e:	d0c0      	beq.n	800a722 <lwip_netconn_do_close_internal+0xae>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a7a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0bd      	beq.n	800a722 <lwip_netconn_do_close_internal+0xae>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	2102      	movs	r1, #2
 800a7ac:	4798      	blx	r3
    if (delayed)
 800a7ae:	2e00      	cmp	r6, #0
 800a7b0:	d0b9      	beq.n	800a726 <lwip_netconn_do_close_internal+0xb2>
      sys_sem_signal(op_completed_sem);
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f008 fa12 	bl	8012bdc <sys_sem_signal>
 800a7b8:	e7b5      	b.n	800a726 <lwip_netconn_do_close_internal+0xb2>
  if (tpcb->state == LISTEN) {
 800a7ba:	7d2b      	ldrb	r3, [r5, #20]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d19b      	bne.n	800a6f8 <lwip_netconn_do_close_internal+0x84>
    tcp_accept(tpcb, NULL);
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f002 fcbe 	bl	800d144 <tcp_accept>
  if (shut_close) {
 800a7c8:	e796      	b.n	800a6f8 <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f002 fc63 	bl	800d098 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800a7d2:	7d2b      	ldrb	r3, [r5, #20]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d0c0      	beq.n	800a75a <lwip_netconn_do_close_internal+0xe6>
      tcp_recv(tpcb, NULL);
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4628      	mov	r0, r5
 800a7dc:	f002 fc64 	bl	800d0a8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f002 fcae 	bl	800d144 <tcp_accept>
    if (shut_tx) {
 800a7e8:	f1b8 0f00 	cmp.w	r8, #0
 800a7ec:	d003      	beq.n	800a7f6 <lwip_netconn_do_close_internal+0x182>
      tcp_sent(tpcb, NULL);
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f002 fc73 	bl	800d0dc <tcp_sent>
      tcp_poll(tpcb, NULL, 0);
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	f002 fcae 	bl	800d15c <tcp_poll>
      tcp_err(tpcb, NULL);
 800a800:	2100      	movs	r1, #0
 800a802:	4628      	mov	r0, r5
 800a804:	f002 fc84 	bl	800d110 <tcp_err>
  if (shut_close) {
 800a808:	e7ab      	b.n	800a762 <lwip_netconn_do_close_internal+0xee>
    if (err == ERR_MEM) {
 800a80a:	3001      	adds	r0, #1
 800a80c:	d056      	beq.n	800a8bc <lwip_netconn_do_close_internal+0x248>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a80e:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a810:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a812:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a814:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 800a816:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800a818:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800a81a:	e782      	b.n	800a722 <lwip_netconn_do_close_internal+0xae>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a81c:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a81e:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a820:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 800a822:	6220      	str	r0, [r4, #32]
    conn->state = NETCONN_NONE;
 800a824:	7060      	strb	r0, [r4, #1]
 800a826:	e7b0      	b.n	800a78a <lwip_netconn_do_close_internal+0x116>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a828:	4b3d      	ldr	r3, [pc, #244]	@ (800a920 <lwip_netconn_do_close_internal+0x2ac>)
 800a82a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a82e:	4940      	ldr	r1, [pc, #256]	@ (800a930 <lwip_netconn_do_close_internal+0x2bc>)
 800a830:	483d      	ldr	r0, [pc, #244]	@ (800a928 <lwip_netconn_do_close_internal+0x2b4>)
 800a832:	f008 fb5d 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a836:	6a23      	ldr	r3, [r4, #32]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f47f af40 	bne.w	800a6be <lwip_netconn_do_close_internal+0x4a>
 800a83e:	4b38      	ldr	r3, [pc, #224]	@ (800a920 <lwip_netconn_do_close_internal+0x2ac>)
 800a840:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a844:	493b      	ldr	r1, [pc, #236]	@ (800a934 <lwip_netconn_do_close_internal+0x2c0>)
 800a846:	4838      	ldr	r0, [pc, #224]	@ (800a928 <lwip_netconn_do_close_internal+0x2b4>)
 800a848:	f008 fb52 	bl	8012ef0 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800a84c:	6a23      	ldr	r3, [r4, #32]
 800a84e:	e736      	b.n	800a6be <lwip_netconn_do_close_internal+0x4a>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a850:	4b33      	ldr	r3, [pc, #204]	@ (800a920 <lwip_netconn_do_close_internal+0x2ac>)
 800a852:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a856:	4938      	ldr	r1, [pc, #224]	@ (800a938 <lwip_netconn_do_close_internal+0x2c4>)
 800a858:	4833      	ldr	r0, [pc, #204]	@ (800a928 <lwip_netconn_do_close_internal+0x2b4>)
 800a85a:	f008 fb49 	bl	8012ef0 <iprintf>
 800a85e:	e710      	b.n	800a682 <lwip_netconn_do_close_internal+0xe>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a860:	8b69      	ldrh	r1, [r5, #26]
 800a862:	f011 0910 	ands.w	r9, r1, #16
 800a866:	d011      	beq.n	800a88c <lwip_netconn_do_close_internal+0x218>
    tcp_arg(tpcb, NULL);
 800a868:	2100      	movs	r1, #0
 800a86a:	4628      	mov	r0, r5
 800a86c:	f002 fc14 	bl	800d098 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800a870:	7d2b      	ldrb	r3, [r5, #20]
 800a872:	2b01      	cmp	r3, #1
 800a874:	f43f af71 	beq.w	800a75a <lwip_netconn_do_close_internal+0xe6>
    if (shut_rx) {
 800a878:	2f00      	cmp	r7, #0
 800a87a:	d1ad      	bne.n	800a7d8 <lwip_netconn_do_close_internal+0x164>
    if (shut_tx) {
 800a87c:	f1b8 0f00 	cmp.w	r8, #0
 800a880:	d0b9      	beq.n	800a7f6 <lwip_netconn_do_close_internal+0x182>
 800a882:	e7b4      	b.n	800a7ee <lwip_netconn_do_close_internal+0x17a>
      if (shut_rx) {
 800a884:	2f00      	cmp	r7, #0
 800a886:	f47f af4c 	bne.w	800a722 <lwip_netconn_do_close_internal+0xae>
 800a88a:	e786      	b.n	800a79a <lwip_netconn_do_close_internal+0x126>
  if (tpcb->state == LISTEN) {
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d097      	beq.n	800a7c0 <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 800a890:	4649      	mov	r1, r9
 800a892:	4628      	mov	r0, r5
 800a894:	f002 fc08 	bl	800d0a8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a898:	4649      	mov	r1, r9
 800a89a:	4628      	mov	r0, r5
 800a89c:	f002 fc52 	bl	800d144 <tcp_accept>
      tcp_sent(tpcb, NULL);
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f002 fc1a 	bl	800d0dc <tcp_sent>
    if (shut_close) {
 800a8a8:	e726      	b.n	800a6f8 <lwip_netconn_do_close_internal+0x84>
      tcp_recv(tpcb, NULL);
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	f002 fbfb 	bl	800d0a8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f002 fc45 	bl	800d144 <tcp_accept>
    if (shut_tx) {
 800a8ba:	e798      	b.n	800a7ee <lwip_netconn_do_close_internal+0x17a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a8bc:	f893 9009 	ldrb.w	r9, [r3, #9]
 800a8c0:	f1b9 0f00 	cmp.w	r9, #0
 800a8c4:	d108      	bne.n	800a8d8 <lwip_netconn_do_close_internal+0x264>
          tcp_abort(tpcb);
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f003 f8aa 	bl	800da20 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a8cc:	6a23      	ldr	r3, [r4, #32]
 800a8ce:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800a8d0:	f883 9004 	strb.w	r9, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a8d4:	350c      	adds	r5, #12
      if (shut_close) {
 800a8d6:	e74e      	b.n	800a776 <lwip_netconn_do_close_internal+0x102>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a8d8:	7d2b      	ldrb	r3, [r5, #20]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d012      	beq.n	800a904 <lwip_netconn_do_close_internal+0x290>
    if (shut_tx) {
 800a8de:	f1b8 0f00 	cmp.w	r8, #0
 800a8e2:	d117      	bne.n	800a914 <lwip_netconn_do_close_internal+0x2a0>
    tcp_poll(tpcb, poll_tcp, 1);
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	4915      	ldr	r1, [pc, #84]	@ (800a93c <lwip_netconn_do_close_internal+0x2c8>)
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f002 fc37 	bl	800d15c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a8ee:	4914      	ldr	r1, [pc, #80]	@ (800a940 <lwip_netconn_do_close_internal+0x2cc>)
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f002 fc0d 	bl	800d110 <tcp_err>
    tcp_arg(tpcb, conn);
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	f002 fbcd 	bl	800d098 <tcp_arg>
  return err;
 800a8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a902:	e711      	b.n	800a728 <lwip_netconn_do_close_internal+0xb4>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a904:	4b06      	ldr	r3, [pc, #24]	@ (800a920 <lwip_netconn_do_close_internal+0x2ac>)
 800a906:	f240 4241 	movw	r2, #1089	@ 0x441
 800a90a:	490e      	ldr	r1, [pc, #56]	@ (800a944 <lwip_netconn_do_close_internal+0x2d0>)
 800a90c:	4806      	ldr	r0, [pc, #24]	@ (800a928 <lwip_netconn_do_close_internal+0x2b4>)
 800a90e:	f008 faef 	bl	8012ef0 <iprintf>
 800a912:	e7e4      	b.n	800a8de <lwip_netconn_do_close_internal+0x26a>
      tcp_sent(tpcb, sent_tcp);
 800a914:	490c      	ldr	r1, [pc, #48]	@ (800a948 <lwip_netconn_do_close_internal+0x2d4>)
 800a916:	4628      	mov	r0, r5
 800a918:	f002 fbe0 	bl	800d0dc <tcp_sent>
 800a91c:	e7e2      	b.n	800a8e4 <lwip_netconn_do_close_internal+0x270>
 800a91e:	bf00      	nop
 800a920:	08014cbc 	.word	0x08014cbc
 800a924:	08014e3c 	.word	0x08014e3c
 800a928:	08014150 	.word	0x08014150
 800a92c:	08014e5c 	.word	0x08014e5c
 800a930:	08014e80 	.word	0x08014e80
 800a934:	08014d74 	.word	0x08014d74
 800a938:	08014bec 	.word	0x08014bec
 800a93c:	0800a94d 	.word	0x0800a94d
 800a940:	0800ab15 	.word	0x0800ab15
 800a944:	08014e94 	.word	0x08014e94
 800a948:	0800a9cd 	.word	0x0800a9cd

0800a94c <poll_tcp>:
{
 800a94c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a94e:	4604      	mov	r4, r0
 800a950:	b368      	cbz	r0, 800a9ae <poll_tcp+0x62>
  if (conn->state == NETCONN_WRITE) {
 800a952:	7861      	ldrb	r1, [r4, #1]
 800a954:	2901      	cmp	r1, #1
 800a956:	d026      	beq.n	800a9a6 <poll_tcp+0x5a>
  } else if (conn->state == NETCONN_CLOSE) {
 800a958:	2904      	cmp	r1, #4
 800a95a:	d019      	beq.n	800a990 <poll_tcp+0x44>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a95c:	7f23      	ldrb	r3, [r4, #28]
 800a95e:	06da      	lsls	r2, r3, #27
 800a960:	d514      	bpl.n	800a98c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a962:	6862      	ldr	r2, [r4, #4]
 800a964:	b192      	cbz	r2, 800a98c <poll_tcp+0x40>
 800a966:	f8b2 0064 	ldrh.w	r0, [r2, #100]	@ 0x64
 800a96a:	f640 3169 	movw	r1, #2921	@ 0xb69
 800a96e:	4288      	cmp	r0, r1
 800a970:	d90c      	bls.n	800a98c <poll_tcp+0x40>
 800a972:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 800a976:	2a07      	cmp	r2, #7
 800a978:	d808      	bhi.n	800a98c <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a97a:	f023 0310 	bic.w	r3, r3, #16
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a97e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a980:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a982:	b11d      	cbz	r5, 800a98c <poll_tcp+0x40>
 800a984:	2200      	movs	r2, #0
 800a986:	2102      	movs	r1, #2
 800a988:	4620      	mov	r0, r4
 800a98a:	47a8      	blx	r5
}
 800a98c:	2000      	movs	r0, #0
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a990:	6a23      	ldr	r3, [r4, #32]
 800a992:	b11b      	cbz	r3, 800a99c <poll_tcp+0x50>
 800a994:	7a5a      	ldrb	r2, [r3, #9]
 800a996:	b10a      	cbz	r2, 800a99c <poll_tcp+0x50>
      conn->current_msg->msg.sd.polls_left--;
 800a998:	3a01      	subs	r2, #1
 800a99a:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a99c:	2101      	movs	r1, #1
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f7ff fe68 	bl	800a674 <lwip_netconn_do_close_internal>
 800a9a4:	e7da      	b.n	800a95c <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7ff fcba 	bl	800a320 <lwip_netconn_do_writemore>
 800a9ac:	e7d6      	b.n	800a95c <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a9ae:	4b04      	ldr	r3, [pc, #16]	@ (800a9c0 <poll_tcp+0x74>)
 800a9b0:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800a9b4:	4903      	ldr	r1, [pc, #12]	@ (800a9c4 <poll_tcp+0x78>)
 800a9b6:	4804      	ldr	r0, [pc, #16]	@ (800a9c8 <poll_tcp+0x7c>)
 800a9b8:	f008 fa9a 	bl	8012ef0 <iprintf>
 800a9bc:	e7c9      	b.n	800a952 <poll_tcp+0x6>
 800a9be:	bf00      	nop
 800a9c0:	08014cbc 	.word	0x08014cbc
 800a9c4:	08014240 	.word	0x08014240
 800a9c8:	08014150 	.word	0x08014150

0800a9cc <sent_tcp>:
{
 800a9cc:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a9ce:	b1f0      	cbz	r0, 800aa0e <sent_tcp+0x42>
    if (conn->state == NETCONN_WRITE) {
 800a9d0:	7841      	ldrb	r1, [r0, #1]
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4615      	mov	r5, r2
 800a9d6:	2901      	cmp	r1, #1
 800a9d8:	d022      	beq.n	800aa20 <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 800a9da:	2904      	cmp	r1, #4
 800a9dc:	d023      	beq.n	800aa26 <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a9de:	6863      	ldr	r3, [r4, #4]
 800a9e0:	b19b      	cbz	r3, 800aa0a <sent_tcp+0x3e>
 800a9e2:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800a9e6:	f640 3269 	movw	r2, #2921	@ 0xb69
 800a9ea:	4291      	cmp	r1, r2
 800a9ec:	d90d      	bls.n	800aa0a <sent_tcp+0x3e>
 800a9ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a9f2:	2b07      	cmp	r3, #7
 800a9f4:	d809      	bhi.n	800aa0a <sent_tcp+0x3e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a9f6:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a9f8:	6a66      	ldr	r6, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a9fa:	f023 0310 	bic.w	r3, r3, #16
 800a9fe:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800aa00:	b11e      	cbz	r6, 800aa0a <sent_tcp+0x3e>
 800aa02:	462a      	mov	r2, r5
 800aa04:	2102      	movs	r1, #2
 800aa06:	4620      	mov	r0, r4
 800aa08:	47b0      	blx	r6
}
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aa0e:	4b08      	ldr	r3, [pc, #32]	@ (800aa30 <sent_tcp+0x64>)
 800aa10:	f240 1293 	movw	r2, #403	@ 0x193
 800aa14:	4907      	ldr	r1, [pc, #28]	@ (800aa34 <sent_tcp+0x68>)
 800aa16:	4808      	ldr	r0, [pc, #32]	@ (800aa38 <sent_tcp+0x6c>)
 800aa18:	f008 fa6a 	bl	8012ef0 <iprintf>
}
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800aa20:	f7ff fc7e 	bl	800a320 <lwip_netconn_do_writemore>
 800aa24:	e7db      	b.n	800a9de <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aa26:	2101      	movs	r1, #1
 800aa28:	f7ff fe24 	bl	800a674 <lwip_netconn_do_close_internal>
 800aa2c:	e7d7      	b.n	800a9de <sent_tcp+0x12>
 800aa2e:	bf00      	nop
 800aa30:	08014cbc 	.word	0x08014cbc
 800aa34:	08014240 	.word	0x08014240
 800aa38:	08014150 	.word	0x08014150

0800aa3c <recv_tcp>:
{
 800aa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3e:	4604      	mov	r4, r0
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800aa40:	460f      	mov	r7, r1
{
 800aa42:	4615      	mov	r5, r2
 800aa44:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800aa46:	2900      	cmp	r1, #0
 800aa48:	d037      	beq.n	800aaba <recv_tcp+0x7e>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800aa4a:	2c00      	cmp	r4, #0
 800aa4c:	d03e      	beq.n	800aacc <recv_tcp+0x90>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800aa4e:	bb4e      	cbnz	r6, 800aaa4 <recv_tcp+0x68>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800aa50:	6863      	ldr	r3, [r4, #4]
 800aa52:	42bb      	cmp	r3, r7
 800aa54:	d006      	beq.n	800aa64 <recv_tcp+0x28>
 800aa56:	4b28      	ldr	r3, [pc, #160]	@ (800aaf8 <recv_tcp+0xbc>)
 800aa58:	f240 1235 	movw	r2, #309	@ 0x135
 800aa5c:	4927      	ldr	r1, [pc, #156]	@ (800aafc <recv_tcp+0xc0>)
 800aa5e:	4828      	ldr	r0, [pc, #160]	@ (800ab00 <recv_tcp+0xc4>)
 800aa60:	f008 fa46 	bl	8012ef0 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aa64:	f104 0610 	add.w	r6, r4, #16
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f008 f87d 	bl	8012b68 <sys_mbox_valid>
 800aa6e:	b178      	cbz	r0, 800aa90 <recv_tcp+0x54>
  if (p != NULL) {
 800aa70:	b305      	cbz	r5, 800aab4 <recv_tcp+0x78>
    len = p->tot_len;
 800aa72:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800aa74:	4629      	mov	r1, r5
 800aa76:	4630      	mov	r0, r6
 800aa78:	f008 f83c 	bl	8012af4 <sys_mbox_trypost>
 800aa7c:	4601      	mov	r1, r0
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d137      	bne.n	800aaf2 <recv_tcp+0xb6>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800aa82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa84:	b113      	cbz	r3, 800aa8c <recv_tcp+0x50>
 800aa86:	463a      	mov	r2, r7
 800aa88:	4620      	mov	r0, r4
 800aa8a:	4798      	blx	r3
    return ERR_OK;
 800aa8c:	2000      	movs	r0, #0
}
 800aa8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (p != NULL) {
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	d0fb      	beq.n	800aa8c <recv_tcp+0x50>
      tcp_recved(pcb, p->tot_len);
 800aa94:	4638      	mov	r0, r7
 800aa96:	8929      	ldrh	r1, [r5, #8]
 800aa98:	f002 f9c8 	bl	800ce2c <tcp_recved>
      pbuf_free(p);
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f001 fccb 	bl	800c438 <pbuf_free>
 800aaa2:	e7f3      	b.n	800aa8c <recv_tcp+0x50>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800aaa4:	4b14      	ldr	r3, [pc, #80]	@ (800aaf8 <recv_tcp+0xbc>)
 800aaa6:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800aaaa:	4916      	ldr	r1, [pc, #88]	@ (800ab04 <recv_tcp+0xc8>)
 800aaac:	4814      	ldr	r0, [pc, #80]	@ (800ab00 <recv_tcp+0xc4>)
 800aaae:	f008 fa1f 	bl	8012ef0 <iprintf>
  if (conn == NULL) {
 800aab2:	e7cd      	b.n	800aa50 <recv_tcp+0x14>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800aab4:	4d14      	ldr	r5, [pc, #80]	@ (800ab08 <recv_tcp+0xcc>)
    len = 0;
 800aab6:	2700      	movs	r7, #0
 800aab8:	e7dc      	b.n	800aa74 <recv_tcp+0x38>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800aaba:	4b0f      	ldr	r3, [pc, #60]	@ (800aaf8 <recv_tcp+0xbc>)
 800aabc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800aac0:	4912      	ldr	r1, [pc, #72]	@ (800ab0c <recv_tcp+0xd0>)
 800aac2:	480f      	ldr	r0, [pc, #60]	@ (800ab00 <recv_tcp+0xc4>)
 800aac4:	f008 fa14 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	d1c0      	bne.n	800aa4e <recv_tcp+0x12>
 800aacc:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf8 <recv_tcp+0xbc>)
 800aace:	f240 122d 	movw	r2, #301	@ 0x12d
 800aad2:	490f      	ldr	r1, [pc, #60]	@ (800ab10 <recv_tcp+0xd4>)
 800aad4:	480a      	ldr	r0, [pc, #40]	@ (800ab00 <recv_tcp+0xc4>)
 800aad6:	f008 fa0b 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800aada:	b916      	cbnz	r6, 800aae2 <recv_tcp+0xa6>
    return ERR_VAL;
 800aadc:	f06f 0005 	mvn.w	r0, #5
}
 800aae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800aae2:	4b05      	ldr	r3, [pc, #20]	@ (800aaf8 <recv_tcp+0xbc>)
 800aae4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800aae8:	4906      	ldr	r1, [pc, #24]	@ (800ab04 <recv_tcp+0xc8>)
 800aaea:	4805      	ldr	r0, [pc, #20]	@ (800ab00 <recv_tcp+0xc4>)
 800aaec:	f008 fa00 	bl	8012ef0 <iprintf>
  if (conn == NULL) {
 800aaf0:	e7f4      	b.n	800aadc <recv_tcp+0xa0>
    return ERR_MEM;
 800aaf2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800aaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaf8:	08014cbc 	.word	0x08014cbc
 800aafc:	08014f14 	.word	0x08014f14
 800ab00:	08014150 	.word	0x08014150
 800ab04:	08014edc 	.word	0x08014edc
 800ab08:	080150d8 	.word	0x080150d8
 800ab0c:	08014eb8 	.word	0x08014eb8
 800ab10:	08014ef4 	.word	0x08014ef4

0800ab14 <err_tcp>:
{
 800ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ab18:	4604      	mov	r4, r0
{
 800ab1a:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d073      	beq.n	800ac08 <err_tcp+0xf4>
  SYS_ARCH_PROTECT(lev);
 800ab20:	f008 f8a4 	bl	8012c6c <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ab24:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 800ab26:	2600      	movs	r6, #0
  old_state = conn->state;
 800ab28:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ab2a:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 800ab2e:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 800ab30:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ab32:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 800ab34:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800ab36:	f008 f8a5 	bl	8012c84 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ab3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ab3c:	b17b      	cbz	r3, 800ab5e <err_tcp+0x4a>
 800ab3e:	4632      	mov	r2, r6
 800ab40:	2104      	movs	r1, #4
 800ab42:	4620      	mov	r0, r4
 800ab44:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ab46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ab48:	b14b      	cbz	r3, 800ab5e <err_tcp+0x4a>
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	4620      	mov	r0, r4
 800ab50:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ab52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ab54:	b11b      	cbz	r3, 800ab5e <err_tcp+0x4a>
 800ab56:	4632      	mov	r2, r6
 800ab58:	2102      	movs	r1, #2
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	4798      	blx	r3
  switch (err) {
 800ab5e:	f105 030f 	add.w	r3, r5, #15
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d83b      	bhi.n	800abe0 <err_tcp+0xcc>
 800ab68:	4a34      	ldr	r2, [pc, #208]	@ (800ac3c <err_tcp+0x128>)
 800ab6a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ab6e:	f104 0610 	add.w	r6, r4, #16
 800ab72:	4630      	mov	r0, r6
 800ab74:	f007 fff8 	bl	8012b68 <sys_mbox_valid>
 800ab78:	bb68      	cbnz	r0, 800abd6 <err_tcp+0xc2>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ab7a:	f104 0614 	add.w	r6, r4, #20
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f007 fff2 	bl	8012b68 <sys_mbox_valid>
 800ab84:	bb10      	cbnz	r0, 800abcc <err_tcp+0xb8>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ab86:	1efb      	subs	r3, r7, #3
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d901      	bls.n	800ab90 <err_tcp+0x7c>
 800ab8c:	2f01      	cmp	r7, #1
 800ab8e:	d119      	bne.n	800abc4 <err_tcp+0xb0>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ab90:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ab92:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800ab96:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ab98:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 800ab9a:	d415      	bmi.n	800abc8 <err_tcp+0xb4>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ab9c:	6a23      	ldr	r3, [r4, #32]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d042      	beq.n	800ac28 <err_tcp+0x114>
      if (old_state == NETCONN_CLOSE) {
 800aba2:	2f04      	cmp	r7, #4
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aba4:	681e      	ldr	r6, [r3, #0]
 800aba6:	bf08      	it	eq
 800aba8:	2500      	moveq	r5, #0
 800abaa:	360c      	adds	r6, #12
        conn->current_msg->err = ERR_OK;
 800abac:	711d      	strb	r5, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800abae:	4630      	mov	r0, r6
 800abb0:	f008 f81c 	bl	8012bec <sys_sem_valid>
 800abb4:	b380      	cbz	r0, 800ac18 <err_tcp+0x104>
      conn->current_msg = NULL;
 800abb6:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 800abb8:	4630      	mov	r0, r6
      conn->current_msg = NULL;
 800abba:	6223      	str	r3, [r4, #32]
}
 800abbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800abc0:	f008 b80c 	b.w	8012bdc <sys_sem_signal>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800abc4:	6a23      	ldr	r3, [r4, #32]
 800abc6:	b97b      	cbnz	r3, 800abe8 <err_tcp+0xd4>
}
 800abc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800abcc:	4641      	mov	r1, r8
 800abce:	4630      	mov	r0, r6
 800abd0:	f007 ff90 	bl	8012af4 <sys_mbox_trypost>
 800abd4:	e7d7      	b.n	800ab86 <err_tcp+0x72>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800abd6:	4630      	mov	r0, r6
 800abd8:	4641      	mov	r1, r8
 800abda:	f007 ff8b 	bl	8012af4 <sys_mbox_trypost>
 800abde:	e7cc      	b.n	800ab7a <err_tcp+0x66>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800abe0:	b95d      	cbnz	r5, 800abfa <err_tcp+0xe6>
{
 800abe2:	f04f 0800 	mov.w	r8, #0
 800abe6:	e7c2      	b.n	800ab6e <err_tcp+0x5a>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800abe8:	4b15      	ldr	r3, [pc, #84]	@ (800ac40 <err_tcp+0x12c>)
 800abea:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800abee:	4915      	ldr	r1, [pc, #84]	@ (800ac44 <err_tcp+0x130>)
 800abf0:	4815      	ldr	r0, [pc, #84]	@ (800ac48 <err_tcp+0x134>)
}
 800abf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800abf6:	f008 b97b 	b.w	8012ef0 <iprintf>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800abfa:	4b11      	ldr	r3, [pc, #68]	@ (800ac40 <err_tcp+0x12c>)
 800abfc:	227d      	movs	r2, #125	@ 0x7d
 800abfe:	4913      	ldr	r1, [pc, #76]	@ (800ac4c <err_tcp+0x138>)
 800ac00:	4811      	ldr	r0, [pc, #68]	@ (800ac48 <err_tcp+0x134>)
 800ac02:	f008 f975 	bl	8012ef0 <iprintf>
 800ac06:	e7ec      	b.n	800abe2 <err_tcp+0xce>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ac08:	4b0d      	ldr	r3, [pc, #52]	@ (800ac40 <err_tcp+0x12c>)
 800ac0a:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800ac0e:	4910      	ldr	r1, [pc, #64]	@ (800ac50 <err_tcp+0x13c>)
 800ac10:	480d      	ldr	r0, [pc, #52]	@ (800ac48 <err_tcp+0x134>)
 800ac12:	f008 f96d 	bl	8012ef0 <iprintf>
 800ac16:	e783      	b.n	800ab20 <err_tcp+0xc>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ac18:	4b09      	ldr	r3, [pc, #36]	@ (800ac40 <err_tcp+0x12c>)
 800ac1a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800ac1e:	490d      	ldr	r1, [pc, #52]	@ (800ac54 <err_tcp+0x140>)
 800ac20:	4809      	ldr	r0, [pc, #36]	@ (800ac48 <err_tcp+0x134>)
 800ac22:	f008 f965 	bl	8012ef0 <iprintf>
 800ac26:	e7c6      	b.n	800abb6 <err_tcp+0xa2>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ac28:	4b05      	ldr	r3, [pc, #20]	@ (800ac40 <err_tcp+0x12c>)
 800ac2a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ac2e:	490a      	ldr	r1, [pc, #40]	@ (800ac58 <err_tcp+0x144>)
 800ac30:	4805      	ldr	r0, [pc, #20]	@ (800ac48 <err_tcp+0x134>)
 800ac32:	f008 f95d 	bl	8012ef0 <iprintf>
        conn->current_msg->err = ERR_OK;
 800ac36:	6a23      	ldr	r3, [r4, #32]
 800ac38:	e7b3      	b.n	800aba2 <err_tcp+0x8e>
 800ac3a:	bf00      	nop
 800ac3c:	080150cc 	.word	0x080150cc
 800ac40:	08014cbc 	.word	0x08014cbc
 800ac44:	08014f60 	.word	0x08014f60
 800ac48:	08014150 	.word	0x08014150
 800ac4c:	08014f34 	.word	0x08014f34
 800ac50:	08014240 	.word	0x08014240
 800ac54:	08014f44 	.word	0x08014f44
 800ac58:	08014d74 	.word	0x08014d74

0800ac5c <lwip_netconn_is_err_msg>:
{
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 800ac60:	460d      	mov	r5, r1
 800ac62:	b179      	cbz	r1, 800ac84 <lwip_netconn_is_err_msg+0x28>
  if (msg == &netconn_aborted) {
 800ac64:	4b0e      	ldr	r3, [pc, #56]	@ (800aca0 <lwip_netconn_is_err_msg+0x44>)
 800ac66:	429c      	cmp	r4, r3
 800ac68:	d007      	beq.n	800ac7a <lwip_netconn_is_err_msg+0x1e>
  } else if (msg == &netconn_reset) {
 800ac6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <lwip_netconn_is_err_msg+0x48>)
 800ac6c:	429c      	cmp	r4, r3
 800ac6e:	d010      	beq.n	800ac92 <lwip_netconn_is_err_msg+0x36>
  } else if (msg == &netconn_closed) {
 800ac70:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <lwip_netconn_is_err_msg+0x4c>)
 800ac72:	429c      	cmp	r4, r3
 800ac74:	d010      	beq.n	800ac98 <lwip_netconn_is_err_msg+0x3c>
  return 0;
 800ac76:	2000      	movs	r0, #0
}
 800ac78:	bd38      	pop	{r3, r4, r5, pc}
 800ac7a:	f06f 030c 	mvn.w	r3, #12
    return 1;
 800ac7e:	2001      	movs	r0, #1
    *err = ERR_RST;
 800ac80:	702b      	strb	r3, [r5, #0]
}
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 800ac84:	4b09      	ldr	r3, [pc, #36]	@ (800acac <lwip_netconn_is_err_msg+0x50>)
 800ac86:	2285      	movs	r2, #133	@ 0x85
 800ac88:	4909      	ldr	r1, [pc, #36]	@ (800acb0 <lwip_netconn_is_err_msg+0x54>)
 800ac8a:	480a      	ldr	r0, [pc, #40]	@ (800acb4 <lwip_netconn_is_err_msg+0x58>)
 800ac8c:	f008 f930 	bl	8012ef0 <iprintf>
 800ac90:	e7e8      	b.n	800ac64 <lwip_netconn_is_err_msg+0x8>
 800ac92:	f06f 030d 	mvn.w	r3, #13
 800ac96:	e7f2      	b.n	800ac7e <lwip_netconn_is_err_msg+0x22>
 800ac98:	f06f 030e 	mvn.w	r3, #14
 800ac9c:	e7ef      	b.n	800ac7e <lwip_netconn_is_err_msg+0x22>
 800ac9e:	bf00      	nop
 800aca0:	080150da 	.word	0x080150da
 800aca4:	080150d9 	.word	0x080150d9
 800aca8:	080150d8 	.word	0x080150d8
 800acac:	08014cbc 	.word	0x08014cbc
 800acb0:	08014f7c 	.word	0x08014f7c
 800acb4:	08014150 	.word	0x08014150

0800acb8 <lwip_netconn_do_newconn>:
{
 800acb8:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800acba:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 800acbc:	6805      	ldr	r5, [r0, #0]
{
 800acbe:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800acc0:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800acc2:	6868      	ldr	r0, [r5, #4]
 800acc4:	b100      	cbz	r0, 800acc8 <lwip_netconn_do_newconn+0x10>
}
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acc8:	782b      	ldrb	r3, [r5, #0]
 800acca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acce:	2b10      	cmp	r3, #16
 800acd0:	d016      	beq.n	800ad00 <lwip_netconn_do_newconn+0x48>
 800acd2:	2b20      	cmp	r3, #32
 800acd4:	d11f      	bne.n	800ad16 <lwip_netconn_do_newconn+0x5e>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800acd6:	f006 fafd 	bl	80112d4 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 800acda:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800acdc:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 800acde:	6850      	ldr	r0, [r2, #4]
 800ace0:	b158      	cbz	r0, 800acfa <lwip_netconn_do_newconn+0x42>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ace2:	7813      	ldrb	r3, [r2, #0]
 800ace4:	2b22      	cmp	r3, #34	@ 0x22
 800ace6:	d101      	bne.n	800acec <lwip_netconn_do_newconn+0x34>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ace8:	2301      	movs	r3, #1
 800acea:	7403      	strb	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800acec:	490b      	ldr	r1, [pc, #44]	@ (800ad1c <lwip_netconn_do_newconn+0x64>)
 800acee:	f006 faa7 	bl	8011240 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1e5      	bne.n	800acc6 <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 800acfa:	23ff      	movs	r3, #255	@ 0xff
 800acfc:	7123      	strb	r3, [r4, #4]
}
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ad00:	f002 ff9c 	bl	800dc3c <tcp_new_ip_type>
      if (msg->conn->pcb.tcp != NULL) {
 800ad04:	6823      	ldr	r3, [r4, #0]
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ad06:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	2a00      	cmp	r2, #0
 800ad0c:	d0f5      	beq.n	800acfa <lwip_netconn_do_newconn+0x42>
        setup_tcp(msg->conn);
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff fae4 	bl	800a2dc <setup_tcp>
 800ad14:	e7ed      	b.n	800acf2 <lwip_netconn_do_newconn+0x3a>
      msg->err = ERR_VAL;
 800ad16:	23fa      	movs	r3, #250	@ 0xfa
 800ad18:	7123      	strb	r3, [r4, #4]
}
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	0800a225 	.word	0x0800a225

0800ad20 <netconn_alloc>:
{
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ad24:	2007      	movs	r0, #7
{
 800ad26:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ad28:	f001 f834 	bl	800bd94 <memp_malloc>
  if (conn == NULL) {
 800ad2c:	b380      	cbz	r0, 800ad90 <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 800ad2e:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 800ad32:	2200      	movs	r2, #0
 800ad34:	4604      	mov	r4, r0
  conn->type = t;
 800ad36:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 800ad38:	2b10      	cmp	r3, #16
  conn->pending_err = ERR_OK;
 800ad3a:	7202      	strb	r2, [r0, #8]
  conn->pcb.tcp = NULL;
 800ad3c:	6042      	str	r2, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 800ad3e:	d001      	beq.n	800ad44 <netconn_alloc+0x24>
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d11a      	bne.n	800ad7a <netconn_alloc+0x5a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ad44:	f104 0710 	add.w	r7, r4, #16
 800ad48:	2106      	movs	r1, #6
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	f007 feba 	bl	8012ac4 <sys_mbox_new>
 800ad50:	4601      	mov	r1, r0
 800ad52:	b9c8      	cbnz	r0, 800ad88 <netconn_alloc+0x68>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ad54:	f104 000c 	add.w	r0, r4, #12
 800ad58:	f007 ff10 	bl	8012b7c <sys_sem_new>
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	b9d0      	cbnz	r0, 800ad96 <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ad60:	f104 0014 	add.w	r0, r4, #20
 800ad64:	f007 ff06 	bl	8012b74 <sys_mbox_set_invalid>
  conn->socket       = -1;
 800ad68:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad6c:	4620      	mov	r0, r4
  conn->state        = NETCONN_NONE;
 800ad6e:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 800ad70:	6266      	str	r6, [r4, #36]	@ 0x24
  conn->socket       = -1;
 800ad72:	61a3      	str	r3, [r4, #24]
  conn->current_msg  = NULL;
 800ad74:	6225      	str	r5, [r4, #32]
  conn->flags = init_flags;
 800ad76:	7725      	strb	r5, [r4, #28]
}
 800ad78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ad7a:	4b09      	ldr	r3, [pc, #36]	@ (800ada0 <netconn_alloc+0x80>)
 800ad7c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800ad80:	4908      	ldr	r1, [pc, #32]	@ (800ada4 <netconn_alloc+0x84>)
 800ad82:	4809      	ldr	r0, [pc, #36]	@ (800ada8 <netconn_alloc+0x88>)
 800ad84:	f008 f8b4 	bl	8012ef0 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800ad88:	4621      	mov	r1, r4
 800ad8a:	2007      	movs	r0, #7
 800ad8c:	f001 f848 	bl	800be20 <memp_free>
    return NULL;
 800ad90:	2400      	movs	r4, #0
}
 800ad92:	4620      	mov	r0, r4
 800ad94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 800ad96:	4638      	mov	r0, r7
 800ad98:	f007 fea2 	bl	8012ae0 <sys_mbox_free>
    goto free_and_return;
 800ad9c:	e7f4      	b.n	800ad88 <netconn_alloc+0x68>
 800ad9e:	bf00      	nop
 800ada0:	08014cbc 	.word	0x08014cbc
 800ada4:	08014f88 	.word	0x08014f88
 800ada8:	08014150 	.word	0x08014150

0800adac <netconn_free>:
{
 800adac:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800adae:	6843      	ldr	r3, [r0, #4]
{
 800adb0:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800adb2:	b133      	cbz	r3, 800adc2 <netconn_free+0x16>
 800adb4:	4b19      	ldr	r3, [pc, #100]	@ (800ae1c <netconn_free+0x70>)
 800adb6:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800adba:	4919      	ldr	r1, [pc, #100]	@ (800ae20 <netconn_free+0x74>)
 800adbc:	4819      	ldr	r0, [pc, #100]	@ (800ae24 <netconn_free+0x78>)
 800adbe:	f008 f897 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800adc2:	f104 0010 	add.w	r0, r4, #16
 800adc6:	f007 fecf 	bl	8012b68 <sys_mbox_valid>
 800adca:	b990      	cbnz	r0, 800adf2 <netconn_free+0x46>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800adcc:	f104 0014 	add.w	r0, r4, #20
 800add0:	f007 feca 	bl	8012b68 <sys_mbox_valid>
 800add4:	b9d0      	cbnz	r0, 800ae0c <netconn_free+0x60>
  sys_sem_free(&conn->op_completed);
 800add6:	f104 050c 	add.w	r5, r4, #12
 800adda:	4628      	mov	r0, r5
 800addc:	f007 ff02 	bl	8012be4 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ade0:	4628      	mov	r0, r5
 800ade2:	f007 ff09 	bl	8012bf8 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800ade6:	4621      	mov	r1, r4
 800ade8:	2007      	movs	r0, #7
}
 800adea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 800adee:	f001 b817 	b.w	800be20 <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800adf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ae1c <netconn_free+0x70>)
 800adf4:	f240 3223 	movw	r2, #803	@ 0x323
 800adf8:	490b      	ldr	r1, [pc, #44]	@ (800ae28 <netconn_free+0x7c>)
 800adfa:	480a      	ldr	r0, [pc, #40]	@ (800ae24 <netconn_free+0x78>)
 800adfc:	f008 f878 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ae00:	f104 0014 	add.w	r0, r4, #20
 800ae04:	f007 feb0 	bl	8012b68 <sys_mbox_valid>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d0e4      	beq.n	800add6 <netconn_free+0x2a>
 800ae0c:	4b03      	ldr	r3, [pc, #12]	@ (800ae1c <netconn_free+0x70>)
 800ae0e:	f240 3226 	movw	r2, #806	@ 0x326
 800ae12:	4906      	ldr	r1, [pc, #24]	@ (800ae2c <netconn_free+0x80>)
 800ae14:	4803      	ldr	r0, [pc, #12]	@ (800ae24 <netconn_free+0x78>)
 800ae16:	f008 f86b 	bl	8012ef0 <iprintf>
 800ae1a:	e7dc      	b.n	800add6 <netconn_free+0x2a>
 800ae1c:	08014cbc 	.word	0x08014cbc
 800ae20:	08014fb0 	.word	0x08014fb0
 800ae24:	08014150 	.word	0x08014150
 800ae28:	08014fe0 	.word	0x08014fe0
 800ae2c:	0801501c 	.word	0x0801501c

0800ae30 <netconn_drain>:
{
 800ae30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ae34:	f100 0610 	add.w	r6, r0, #16
{
 800ae38:	b082      	sub	sp, #8
 800ae3a:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f007 fe93 	bl	8012b68 <sys_mbox_valid>
 800ae42:	b300      	cbz	r0, 800ae86 <netconn_drain+0x56>
 800ae44:	ad01      	add	r5, sp, #4
  } else if (msg == &netconn_reset) {
 800ae46:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 800af0c <netconn_drain+0xdc>
  if (msg == &netconn_aborted) {
 800ae4a:	4f2f      	ldr	r7, [pc, #188]	@ (800af08 <netconn_drain+0xd8>)
  } else if (msg == &netconn_closed) {
 800ae4c:	f8df 90c0 	ldr.w	r9, [pc, #192]	@ 800af10 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ae50:	4629      	mov	r1, r5
 800ae52:	4630      	mov	r0, r6
 800ae54:	f007 fe7c 	bl	8012b50 <sys_arch_mbox_tryfetch>
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d00e      	beq.n	800ae7a <netconn_drain+0x4a>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ae5c:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ae5e:	9a01      	ldr	r2, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ae60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          netbuf_delete((struct netbuf *)mem);
 800ae64:	4610      	mov	r0, r2
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ae66:	2b10      	cmp	r3, #16
 800ae68:	d045      	beq.n	800aef6 <netconn_drain+0xc6>
          netbuf_delete((struct netbuf *)mem);
 800ae6a:	f000 fabb 	bl	800b3e4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4630      	mov	r0, r6
 800ae72:	f007 fe6d 	bl	8012b50 <sys_arch_mbox_tryfetch>
 800ae76:	3001      	adds	r0, #1
 800ae78:	d1f0      	bne.n	800ae5c <netconn_drain+0x2c>
    sys_mbox_free(&conn->recvmbox);
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f007 fe30 	bl	8012ae0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ae80:	4630      	mov	r0, r6
 800ae82:	f007 fe77 	bl	8012b74 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ae86:	3414      	adds	r4, #20
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f007 fe6d 	bl	8012b68 <sys_mbox_valid>
 800ae8e:	b378      	cbz	r0, 800aef0 <netconn_drain+0xc0>
 800ae90:	ad01      	add	r5, sp, #4
  if (msg == &netconn_aborted) {
 800ae92:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 800af08 <netconn_drain+0xd8>
  } else if (msg == &netconn_reset) {
 800ae96:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800af0c <netconn_drain+0xdc>
  } else if (msg == &netconn_closed) {
 800ae9a:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800af10 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ae9e:	4629      	mov	r1, r5
 800aea0:	4620      	mov	r0, r4
 800aea2:	f007 fe55 	bl	8012b50 <sys_arch_mbox_tryfetch>
 800aea6:	3001      	adds	r0, #1
 800aea8:	d01c      	beq.n	800aee4 <netconn_drain+0xb4>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800aeaa:	9e01      	ldr	r6, [sp, #4]
  } else if (msg == &netconn_closed) {
 800aeac:	4546      	cmp	r6, r8
 800aeae:	bf18      	it	ne
 800aeb0:	454e      	cmpne	r6, r9
          netconn_drain(newconn);
 800aeb2:	4630      	mov	r0, r6
  } else if (msg == &netconn_closed) {
 800aeb4:	d0f3      	beq.n	800ae9e <netconn_drain+0x6e>
 800aeb6:	eba6 070a 	sub.w	r7, r6, sl
 800aeba:	fab7 f787 	clz	r7, r7
 800aebe:	097f      	lsrs	r7, r7, #5
 800aec0:	2f00      	cmp	r7, #0
 800aec2:	d1ec      	bne.n	800ae9e <netconn_drain+0x6e>
          netconn_drain(newconn);
 800aec4:	f7ff ffb4 	bl	800ae30 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800aec8:	6870      	ldr	r0, [r6, #4]
 800aeca:	b110      	cbz	r0, 800aed2 <netconn_drain+0xa2>
            tcp_abort(newconn->pcb.tcp);
 800aecc:	f002 fda8 	bl	800da20 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800aed0:	6077      	str	r7, [r6, #4]
          netconn_free(newconn);
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7ff ff6a 	bl	800adac <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800aed8:	4629      	mov	r1, r5
 800aeda:	4620      	mov	r0, r4
 800aedc:	f007 fe38 	bl	8012b50 <sys_arch_mbox_tryfetch>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d1e2      	bne.n	800aeaa <netconn_drain+0x7a>
    sys_mbox_free(&conn->acceptmbox);
 800aee4:	4620      	mov	r0, r4
 800aee6:	f007 fdfb 	bl	8012ae0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800aeea:	4620      	mov	r0, r4
 800aeec:	f007 fe42 	bl	8012b74 <sys_mbox_set_invalid>
}
 800aef0:	b002      	add	sp, #8
 800aef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (msg == &netconn_closed) {
 800aef6:	42ba      	cmp	r2, r7
 800aef8:	bf18      	it	ne
 800aefa:	4542      	cmpne	r2, r8
 800aefc:	d0a8      	beq.n	800ae50 <netconn_drain+0x20>
 800aefe:	454a      	cmp	r2, r9
 800af00:	d0a6      	beq.n	800ae50 <netconn_drain+0x20>
            pbuf_free((struct pbuf *)mem);
 800af02:	f001 fa99 	bl	800c438 <pbuf_free>
 800af06:	e7a3      	b.n	800ae50 <netconn_drain+0x20>
 800af08:	080150da 	.word	0x080150da
 800af0c:	080150d9 	.word	0x080150d9
 800af10:	080150d8 	.word	0x080150d8

0800af14 <accept_function>:
{
 800af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (conn == NULL) {
 800af16:	2800      	cmp	r0, #0
 800af18:	d066      	beq.n	800afe8 <accept_function+0xd4>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800af1a:	f100 0714 	add.w	r7, r0, #20
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
 800af22:	4616      	mov	r6, r2
 800af24:	4638      	mov	r0, r7
 800af26:	f007 fe1f 	bl	8012b68 <sys_mbox_valid>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d05c      	beq.n	800afe8 <accept_function+0xd4>
  if (newpcb == NULL) {
 800af2e:	2d00      	cmp	r5, #0
 800af30:	d054      	beq.n	800afdc <accept_function+0xc8>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800af32:	b9be      	cbnz	r6, 800af64 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 800af34:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800af36:	7820      	ldrb	r0, [r4, #0]
 800af38:	f7ff fef2 	bl	800ad20 <netconn_alloc>
  if (newconn == NULL) {
 800af3c:	4606      	mov	r6, r0
 800af3e:	2800      	cmp	r0, #0
 800af40:	d03e      	beq.n	800afc0 <accept_function+0xac>
  newconn->pcb.tcp = newpcb;
 800af42:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 800af44:	f7ff f9ca 	bl	800a2dc <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800af48:	4631      	mov	r1, r6
 800af4a:	4638      	mov	r0, r7
 800af4c:	f007 fdd2 	bl	8012af4 <sys_mbox_trypost>
 800af50:	4605      	mov	r5, r0
 800af52:	b978      	cbnz	r0, 800af74 <accept_function+0x60>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800af54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800af56:	b11b      	cbz	r3, 800af60 <accept_function+0x4c>
 800af58:	4602      	mov	r2, r0
 800af5a:	4601      	mov	r1, r0
 800af5c:	4620      	mov	r0, r4
 800af5e:	4798      	blx	r3
}
 800af60:	4628      	mov	r0, r5
 800af62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800af64:	4b25      	ldr	r3, [pc, #148]	@ (800affc <accept_function+0xe8>)
 800af66:	f240 222a 	movw	r2, #554	@ 0x22a
 800af6a:	4925      	ldr	r1, [pc, #148]	@ (800b000 <accept_function+0xec>)
 800af6c:	4825      	ldr	r0, [pc, #148]	@ (800b004 <accept_function+0xf0>)
 800af6e:	f007 ffbf 	bl	8012ef0 <iprintf>
 800af72:	e7df      	b.n	800af34 <accept_function+0x20>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800af74:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 800af76:	2100      	movs	r1, #0
 800af78:	4620      	mov	r0, r4
 800af7a:	f002 f88d 	bl	800d098 <tcp_arg>
    tcp_recv(pcb, NULL);
 800af7e:	4620      	mov	r0, r4
 800af80:	2100      	movs	r1, #0
 800af82:	f002 f891 	bl	800d0a8 <tcp_recv>
    tcp_sent(pcb, NULL);
 800af86:	4620      	mov	r0, r4
 800af88:	2100      	movs	r1, #0
 800af8a:	f002 f8a7 	bl	800d0dc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800af8e:	2200      	movs	r2, #0
 800af90:	4620      	mov	r0, r4
 800af92:	4611      	mov	r1, r2
 800af94:	f002 f8e2 	bl	800d15c <tcp_poll>
    tcp_err(pcb, NULL);
 800af98:	2100      	movs	r1, #0
 800af9a:	4620      	mov	r0, r4
    sys_mbox_free(&newconn->recvmbox);
 800af9c:	f106 0410 	add.w	r4, r6, #16
    tcp_err(pcb, NULL);
 800afa0:	f002 f8b6 	bl	800d110 <tcp_err>
    newconn->pcb.tcp = NULL;
 800afa4:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 800afa6:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 800afa8:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 800afaa:	f007 fd99 	bl	8012ae0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800afae:	4620      	mov	r0, r4
 800afb0:	f007 fde0 	bl	8012b74 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff fef9 	bl	800adac <netconn_free>
    return ERR_MEM;
 800afba:	f04f 35ff 	mov.w	r5, #4294967295
 800afbe:	e7cf      	b.n	800af60 <accept_function+0x4c>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800afc0:	4911      	ldr	r1, [pc, #68]	@ (800b008 <accept_function+0xf4>)
 800afc2:	4638      	mov	r0, r7
 800afc4:	f007 fd96 	bl	8012af4 <sys_mbox_trypost>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d1f6      	bne.n	800afba <accept_function+0xa6>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800afcc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0f3      	beq.n	800afba <accept_function+0xa6>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4601      	mov	r1, r0
 800afd6:	4620      	mov	r0, r4
 800afd8:	4798      	blx	r3
 800afda:	e7ee      	b.n	800afba <accept_function+0xa6>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800afdc:	490a      	ldr	r1, [pc, #40]	@ (800b008 <accept_function+0xf4>)
 800afde:	4638      	mov	r0, r7
 800afe0:	f007 fd88 	bl	8012af4 <sys_mbox_trypost>
 800afe4:	4602      	mov	r2, r0
 800afe6:	b110      	cbz	r0, 800afee <accept_function+0xda>
    return ERR_VAL;
 800afe8:	f06f 0505 	mvn.w	r5, #5
 800afec:	e7b8      	b.n	800af60 <accept_function+0x4c>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800afee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0f9      	beq.n	800afe8 <accept_function+0xd4>
 800aff4:	4601      	mov	r1, r0
 800aff6:	4620      	mov	r0, r4
 800aff8:	4798      	blx	r3
 800affa:	e7f5      	b.n	800afe8 <accept_function+0xd4>
 800affc:	08014cbc 	.word	0x08014cbc
 800b000:	08015058 	.word	0x08015058
 800b004:	08014150 	.word	0x08014150
 800b008:	080150da 	.word	0x080150da

0800b00c <lwip_netconn_do_delconn>:
{
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 800b010:	6800      	ldr	r0, [r0, #0]
 800b012:	7845      	ldrb	r5, [r0, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b014:	b195      	cbz	r5, 800b03c <lwip_netconn_do_delconn+0x30>
 800b016:	7803      	ldrb	r3, [r0, #0]
 800b018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b01c:	2b10      	cmp	r3, #16
 800b01e:	d135      	bne.n	800b08c <lwip_netconn_do_delconn+0x80>
  if (((state != NETCONN_NONE) &&
 800b020:	2d02      	cmp	r5, #2
 800b022:	d00b      	beq.n	800b03c <lwip_netconn_do_delconn+0x30>
       (state != NETCONN_LISTEN) &&
 800b024:	2d03      	cmp	r5, #3
 800b026:	d006      	beq.n	800b036 <lwip_netconn_do_delconn+0x2a>
    msg->err = ERR_INPROGRESS;
 800b028:	23fb      	movs	r3, #251	@ 0xfb
 800b02a:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b02c:	300c      	adds	r0, #12
}
 800b02e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b032:	f007 bddb 	b.w	8012bec <sys_sem_valid>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b036:	7f03      	ldrb	r3, [r0, #28]
 800b038:	075b      	lsls	r3, r3, #29
 800b03a:	d5f5      	bpl.n	800b028 <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 800b03c:	2500      	movs	r5, #0
 800b03e:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800b040:	f7ff fef6 	bl	800ae30 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	6842      	ldr	r2, [r0, #4]
 800b048:	b16a      	cbz	r2, 800b066 <lwip_netconn_do_delconn+0x5a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b04a:	7803      	ldrb	r3, [r0, #0]
 800b04c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b050:	2b10      	cmp	r3, #16
 800b052:	d024      	beq.n	800b09e <lwip_netconn_do_delconn+0x92>
 800b054:	2b20      	cmp	r3, #32
 800b056:	d104      	bne.n	800b062 <lwip_netconn_do_delconn+0x56>
          udp_remove(msg->conn->pcb.udp);
 800b058:	4610      	mov	r0, r2
          msg->conn->pcb.udp->recv_arg = NULL;
 800b05a:	61d5      	str	r5, [r2, #28]
          udp_remove(msg->conn->pcb.udp);
 800b05c:	f006 f90a 	bl	8011274 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	2300      	movs	r3, #0
 800b064:	6043      	str	r3, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b066:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d0df      	beq.n	800b02c <lwip_netconn_do_delconn+0x20>
 800b06c:	2200      	movs	r2, #0
 800b06e:	4611      	mov	r1, r2
 800b070:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b072:	6820      	ldr	r0, [r4, #0]
 800b074:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0d8      	beq.n	800b02c <lwip_netconn_do_delconn+0x20>
 800b07a:	2200      	movs	r2, #0
 800b07c:	2102      	movs	r1, #2
 800b07e:	4798      	blx	r3
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b080:	6820      	ldr	r0, [r4, #0]
}
 800b082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b086:	300c      	adds	r0, #12
 800b088:	f007 bdb0 	b.w	8012bec <sys_sem_valid>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b08c:	4b1e      	ldr	r3, [pc, #120]	@ (800b108 <lwip_netconn_do_delconn+0xfc>)
 800b08e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800b092:	491e      	ldr	r1, [pc, #120]	@ (800b10c <lwip_netconn_do_delconn+0x100>)
 800b094:	481e      	ldr	r0, [pc, #120]	@ (800b110 <lwip_netconn_do_delconn+0x104>)
 800b096:	f007 ff2b 	bl	8012ef0 <iprintf>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b09a:	6820      	ldr	r0, [r4, #0]
 800b09c:	e7c0      	b.n	800b020 <lwip_netconn_do_delconn+0x14>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b09e:	6a03      	ldr	r3, [r0, #32]
 800b0a0:	b13b      	cbz	r3, 800b0b2 <lwip_netconn_do_delconn+0xa6>
 800b0a2:	4b19      	ldr	r3, [pc, #100]	@ (800b108 <lwip_netconn_do_delconn+0xfc>)
 800b0a4:	f240 4294 	movw	r2, #1172	@ 0x494
 800b0a8:	491a      	ldr	r1, [pc, #104]	@ (800b114 <lwip_netconn_do_delconn+0x108>)
 800b0aa:	4819      	ldr	r0, [pc, #100]	@ (800b110 <lwip_netconn_do_delconn+0x104>)
 800b0ac:	f007 ff20 	bl	8012ef0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b0b0:	6820      	ldr	r0, [r4, #0]
 800b0b2:	2204      	movs	r2, #4
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b0b4:	2303      	movs	r3, #3
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b0b6:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 800b0b8:	7042      	strb	r2, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b0ba:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800b0bc:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b0be:	f7ff fad9 	bl	800a674 <lwip_netconn_do_close_internal>
 800b0c2:	b178      	cbz	r0, 800b0e4 <lwip_netconn_do_delconn+0xd8>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d10c      	bne.n	800b0e6 <lwip_netconn_do_delconn+0xda>
            UNLOCK_TCPIP_CORE();
 800b0cc:	f7fc f924 	bl	8007318 <sys_unlock_tcpip_core>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b0d0:	6820      	ldr	r0, [r4, #0]
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	300c      	adds	r0, #12
 800b0d6:	f007 fd65 	bl	8012ba4 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b0da:	f7fc f89f 	bl	800721c <sys_lock_tcpip_core>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	785b      	ldrb	r3, [r3, #1]
 800b0e2:	b943      	cbnz	r3, 800b0f6 <lwip_netconn_do_delconn+0xea>
}
 800b0e4:	bd70      	pop	{r4, r5, r6, pc}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b0e6:	4b08      	ldr	r3, [pc, #32]	@ (800b108 <lwip_netconn_do_delconn+0xfc>)
 800b0e8:	f240 429a 	movw	r2, #1178	@ 0x49a
 800b0ec:	490a      	ldr	r1, [pc, #40]	@ (800b118 <lwip_netconn_do_delconn+0x10c>)
 800b0ee:	4808      	ldr	r0, [pc, #32]	@ (800b110 <lwip_netconn_do_delconn+0x104>)
 800b0f0:	f007 fefe 	bl	8012ef0 <iprintf>
 800b0f4:	e7ea      	b.n	800b0cc <lwip_netconn_do_delconn+0xc0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b0f6:	4b04      	ldr	r3, [pc, #16]	@ (800b108 <lwip_netconn_do_delconn+0xfc>)
 800b0f8:	f240 429e 	movw	r2, #1182	@ 0x49e
 800b0fc:	4906      	ldr	r1, [pc, #24]	@ (800b118 <lwip_netconn_do_delconn+0x10c>)
 800b0fe:	4804      	ldr	r0, [pc, #16]	@ (800b110 <lwip_netconn_do_delconn+0x104>)
}
 800b100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b104:	f007 bef4 	b.w	8012ef0 <iprintf>
 800b108:	08014cbc 	.word	0x08014cbc
 800b10c:	08015080 	.word	0x08015080
 800b110:	08014150 	.word	0x08014150
 800b114:	08015094 	.word	0x08015094
 800b118:	080150b0 	.word	0x080150b0

0800b11c <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 800b11c:	6803      	ldr	r3, [r0, #0]
{
 800b11e:	b510      	push	{r4, lr}
 800b120:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800b122:	6858      	ldr	r0, [r3, #4]
 800b124:	b130      	cbz	r0, 800b134 <lwip_netconn_do_bind+0x18>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b12c:	2b10      	cmp	r3, #16
 800b12e:	d00b      	beq.n	800b148 <lwip_netconn_do_bind+0x2c>
 800b130:	2b20      	cmp	r3, #32
 800b132:	d003      	beq.n	800b13c <lwip_netconn_do_bind+0x20>
 800b134:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 800b138:	7120      	strb	r0, [r4, #4]
}
 800b13a:	bd10      	pop	{r4, pc}
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b13c:	89a2      	ldrh	r2, [r4, #12]
 800b13e:	68a1      	ldr	r1, [r4, #8]
 800b140:	f005 fffe 	bl	8011140 <udp_bind>
  msg->err = err;
 800b144:	7120      	strb	r0, [r4, #4]
}
 800b146:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b148:	89a2      	ldrh	r2, [r4, #12]
 800b14a:	68a1      	ldr	r1, [r4, #8]
 800b14c:	f001 fd3c 	bl	800cbc8 <tcp_bind>
  msg->err = err;
 800b150:	7120      	strb	r0, [r4, #4]
}
 800b152:	bd10      	pop	{r4, pc}

0800b154 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 800b154:	6803      	ldr	r3, [r0, #0]
{
 800b156:	b530      	push	{r4, r5, lr}
 800b158:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800b15a:	6858      	ldr	r0, [r3, #4]
{
 800b15c:	b083      	sub	sp, #12
  if (msg->conn->pcb.tcp != NULL) {
 800b15e:	b180      	cbz	r0, 800b182 <lwip_netconn_do_listen+0x2e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b160:	781a      	ldrb	r2, [r3, #0]
 800b162:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800b166:	2a10      	cmp	r2, #16
 800b168:	d004      	beq.n	800b174 <lwip_netconn_do_listen+0x20>
 800b16a:	f06f 030f 	mvn.w	r3, #15
  msg->err = err;
 800b16e:	7123      	strb	r3, [r4, #4]
}
 800b170:	b003      	add	sp, #12
 800b172:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 800b174:	785b      	ldrb	r3, [r3, #1]
 800b176:	b94b      	cbnz	r3, 800b18c <lwip_netconn_do_listen+0x38>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800b178:	7d03      	ldrb	r3, [r0, #20]
 800b17a:	b17b      	cbz	r3, 800b19c <lwip_netconn_do_listen+0x48>
 800b17c:	f06f 0305 	mvn.w	r3, #5
 800b180:	e7f5      	b.n	800b16e <lwip_netconn_do_listen+0x1a>
 800b182:	f06f 030a 	mvn.w	r3, #10
  msg->err = err;
 800b186:	7123      	strb	r3, [r4, #4]
}
 800b188:	b003      	add	sp, #12
 800b18a:	bd30      	pop	{r4, r5, pc}
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	bf14      	ite	ne
 800b190:	f06f 030a 	mvnne.w	r3, #10
 800b194:	2300      	moveq	r3, #0
  msg->err = err;
 800b196:	7123      	strb	r3, [r4, #4]
}
 800b198:	b003      	add	sp, #12
 800b19a:	bd30      	pop	{r4, r5, pc}
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800b19c:	f10d 0207 	add.w	r2, sp, #7
 800b1a0:	21ff      	movs	r1, #255	@ 0xff
 800b1a2:	f001 fd79 	bl	800cc98 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	b1d8      	cbz	r0, 800b1e2 <lwip_netconn_do_listen+0x8e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800b1aa:	6820      	ldr	r0, [r4, #0]
 800b1ac:	3010      	adds	r0, #16
 800b1ae:	f007 fcdb 	bl	8012b68 <sys_mbox_valid>
 800b1b2:	bb50      	cbnz	r0, 800b20a <lwip_netconn_do_listen+0xb6>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b1b4:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800b1b6:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b1b8:	3014      	adds	r0, #20
            err = ERR_OK;
 800b1ba:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b1be:	f007 fcd3 	bl	8012b68 <sys_mbox_valid>
 800b1c2:	b1d0      	cbz	r0, 800b1fa <lwip_netconn_do_listen+0xa6>
            if (err == ERR_OK) {
 800b1c4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800b1c8:	b970      	cbnz	r0, 800b1e8 <lwip_netconn_do_listen+0x94>
              msg->conn->state = NETCONN_LISTEN;
 800b1ca:	6821      	ldr	r1, [r4, #0]
 800b1cc:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b1ce:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 800b1d0:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 800b1d2:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b1d4:	f001 ff60 	bl	800d098 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	4910      	ldr	r1, [pc, #64]	@ (800b21c <lwip_netconn_do_listen+0xc8>)
 800b1dc:	6858      	ldr	r0, [r3, #4]
 800b1de:	f001 ffb1 	bl	800d144 <tcp_accept>
  msg->err = err;
 800b1e2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800b1e6:	e7c2      	b.n	800b16e <lwip_netconn_do_listen+0x1a>
              tcp_close(lpcb);
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f002 fdf9 	bl	800dde0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800b1ee:	6822      	ldr	r2, [r4, #0]
 800b1f0:	2100      	movs	r1, #0
  msg->err = err;
 800b1f2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
              msg->conn->pcb.tcp = NULL;
 800b1f6:	6051      	str	r1, [r2, #4]
 800b1f8:	e7b9      	b.n	800b16e <lwip_netconn_do_listen+0x1a>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800b1fa:	6820      	ldr	r0, [r4, #0]
 800b1fc:	2106      	movs	r1, #6
 800b1fe:	3014      	adds	r0, #20
 800b200:	f007 fc60 	bl	8012ac4 <sys_mbox_new>
 800b204:	f88d 0007 	strb.w	r0, [sp, #7]
 800b208:	e7de      	b.n	800b1c8 <lwip_netconn_do_listen+0x74>
              sys_mbox_free(&msg->conn->recvmbox);
 800b20a:	6820      	ldr	r0, [r4, #0]
 800b20c:	3010      	adds	r0, #16
 800b20e:	f007 fc67 	bl	8012ae0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800b212:	6820      	ldr	r0, [r4, #0]
 800b214:	3010      	adds	r0, #16
 800b216:	f007 fcad 	bl	8012b74 <sys_mbox_set_invalid>
 800b21a:	e7cb      	b.n	800b1b4 <lwip_netconn_do_listen+0x60>
 800b21c:	0800af15 	.word	0x0800af15

0800b220 <lwip_netconn_do_recv>:
{
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800b222:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 800b224:	6803      	ldr	r3, [r0, #0]
{
 800b226:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 800b228:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b22a:	6858      	ldr	r0, [r3, #4]
 800b22c:	b120      	cbz	r0, 800b238 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b234:	2b10      	cmp	r3, #16
 800b236:	d000      	beq.n	800b23a <lwip_netconn_do_recv+0x1a>
}
 800b238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 800b23a:	68b4      	ldr	r4, [r6, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b23c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800b240:	e001      	b.n	800b246 <lwip_netconn_do_recv+0x26>
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b242:	6833      	ldr	r3, [r6, #0]
 800b244:	6858      	ldr	r0, [r3, #4]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b246:	42bc      	cmp	r4, r7
 800b248:	4625      	mov	r5, r4
 800b24a:	bf28      	it	cs
 800b24c:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b24e:	b2a9      	uxth	r1, r5
 800b250:	f001 fdec 	bl	800ce2c <tcp_recved>
      } while (remaining != 0);
 800b254:	1b64      	subs	r4, r4, r5
 800b256:	d1f4      	bne.n	800b242 <lwip_netconn_do_recv+0x22>
}
 800b258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b25a:	bf00      	nop

0800b25c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b25c:	b510      	push	{r4, lr}
 800b25e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800b260:	6800      	ldr	r0, [r0, #0]
 800b262:	f7fe ffcf 	bl	800a204 <netconn_err>
  if (err == ERR_OK) {
 800b266:	b938      	cbnz	r0, 800b278 <lwip_netconn_do_write+0x1c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b268:	6822      	ldr	r2, [r4, #0]
 800b26a:	7813      	ldrb	r3, [r2, #0]
 800b26c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b270:	2b10      	cmp	r3, #16
 800b272:	d003      	beq.n	800b27c <lwip_netconn_do_write+0x20>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b274:	f06f 0005 	mvn.w	r0, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b278:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b27a:	bd10      	pop	{r4, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800b27c:	7853      	ldrb	r3, [r2, #1]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d137      	bne.n	800b2f2 <lwip_netconn_do_write+0x96>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b282:	6853      	ldr	r3, [r2, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d038      	beq.n	800b2fa <lwip_netconn_do_write+0x9e>
        msg->conn->state = NETCONN_WRITE;
 800b288:	2101      	movs	r1, #1
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b28a:	6a13      	ldr	r3, [r2, #32]
        msg->conn->state = NETCONN_WRITE;
 800b28c:	7051      	strb	r1, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b28e:	b133      	cbz	r3, 800b29e <lwip_netconn_do_write+0x42>
 800b290:	4b20      	ldr	r3, [pc, #128]	@ (800b314 <lwip_netconn_do_write+0xb8>)
 800b292:	f240 7223 	movw	r2, #1827	@ 0x723
 800b296:	4920      	ldr	r1, [pc, #128]	@ (800b318 <lwip_netconn_do_write+0xbc>)
 800b298:	4820      	ldr	r0, [pc, #128]	@ (800b31c <lwip_netconn_do_write+0xc0>)
 800b29a:	f007 fe29 	bl	8012ef0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b29e:	6963      	ldr	r3, [r4, #20]
 800b2a0:	b37b      	cbz	r3, 800b302 <lwip_netconn_do_write+0xa6>
        msg->conn->current_msg = msg;
 800b2a2:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b2a4:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800b2a6:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b2a8:	f7ff f83a 	bl	800a320 <lwip_netconn_do_writemore>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d0e4      	beq.n	800b27a <lwip_netconn_do_write+0x1e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	785b      	ldrb	r3, [r3, #1]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d006      	beq.n	800b2c6 <lwip_netconn_do_write+0x6a>
 800b2b8:	4b16      	ldr	r3, [pc, #88]	@ (800b314 <lwip_netconn_do_write+0xb8>)
 800b2ba:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800b2be:	4918      	ldr	r1, [pc, #96]	@ (800b320 <lwip_netconn_do_write+0xc4>)
 800b2c0:	4816      	ldr	r0, [pc, #88]	@ (800b31c <lwip_netconn_do_write+0xc0>)
 800b2c2:	f007 fe15 	bl	8012ef0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b2c6:	f7fc f827 	bl	8007318 <sys_unlock_tcpip_core>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	300c      	adds	r0, #12
 800b2d0:	f007 fc68 	bl	8012ba4 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b2d4:	f7fb ffa2 	bl	800721c <sys_lock_tcpip_core>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d1cc      	bne.n	800b27a <lwip_netconn_do_write+0x1e>
 800b2e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b314 <lwip_netconn_do_write+0xb8>)
 800b2e2:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b2e6:	490e      	ldr	r1, [pc, #56]	@ (800b320 <lwip_netconn_do_write+0xc4>)
 800b2e8:	480c      	ldr	r0, [pc, #48]	@ (800b31c <lwip_netconn_do_write+0xc0>)
}
 800b2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b2ee:	f007 bdff 	b.w	8012ef0 <iprintf>
        err = ERR_INPROGRESS;
 800b2f2:	f06f 0004 	mvn.w	r0, #4
  msg->err = err;
 800b2f6:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800b2f8:	e7bf      	b.n	800b27a <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 800b2fa:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 800b2fe:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800b300:	e7bb      	b.n	800b27a <lwip_netconn_do_write+0x1e>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b302:	4b04      	ldr	r3, [pc, #16]	@ (800b314 <lwip_netconn_do_write+0xb8>)
 800b304:	f240 7224 	movw	r2, #1828	@ 0x724
 800b308:	4906      	ldr	r1, [pc, #24]	@ (800b324 <lwip_netconn_do_write+0xc8>)
 800b30a:	4804      	ldr	r0, [pc, #16]	@ (800b31c <lwip_netconn_do_write+0xc0>)
 800b30c:	f007 fdf0 	bl	8012ef0 <iprintf>
 800b310:	e7c7      	b.n	800b2a2 <lwip_netconn_do_write+0x46>
 800b312:	bf00      	nop
 800b314:	08014cbc 	.word	0x08014cbc
 800b318:	08015094 	.word	0x08015094
 800b31c:	08014150 	.word	0x08014150
 800b320:	080150b0 	.word	0x080150b0
 800b324:	080150b8 	.word	0x080150b8

0800b328 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b328:	b510      	push	{r4, lr}
 800b32a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b32c:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b32e:	6843      	ldr	r3, [r0, #4]
  enum netconn_state state = msg->conn->state;
 800b330:	7842      	ldrb	r2, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 800b332:	b123      	cbz	r3, 800b33e <lwip_netconn_do_close+0x16>
 800b334:	7803      	ldrb	r3, [r0, #0]
 800b336:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b33a:	2b10      	cmp	r3, #16
 800b33c:	d002      	beq.n	800b344 <lwip_netconn_do_close+0x1c>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b33e:	23f5      	movs	r3, #245	@ 0xf5
 800b340:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b342:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b344:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b346:	2b03      	cmp	r3, #3
 800b348:	d039      	beq.n	800b3be <lwip_netconn_do_close+0x96>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b34a:	1e91      	subs	r1, r2, #2
 800b34c:	2901      	cmp	r1, #1
 800b34e:	d9f6      	bls.n	800b33e <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 800b350:	2a01      	cmp	r2, #1
 800b352:	d038      	beq.n	800b3c6 <lwip_netconn_do_close+0x9e>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b354:	07db      	lsls	r3, r3, #31
 800b356:	d439      	bmi.n	800b3cc <lwip_netconn_do_close+0xa4>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b358:	6a03      	ldr	r3, [r0, #32]
 800b35a:	b13b      	cbz	r3, 800b36c <lwip_netconn_do_close+0x44>
 800b35c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d4 <lwip_netconn_do_close+0xac>)
 800b35e:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b362:	491d      	ldr	r1, [pc, #116]	@ (800b3d8 <lwip_netconn_do_close+0xb0>)
 800b364:	481d      	ldr	r0, [pc, #116]	@ (800b3dc <lwip_netconn_do_close+0xb4>)
 800b366:	f007 fdc3 	bl	8012ef0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b36a:	6820      	ldr	r0, [r4, #0]
 800b36c:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b36e:	2100      	movs	r1, #0
      msg->conn->current_msg = msg;
 800b370:	6204      	str	r4, [r0, #32]
      msg->conn->state = NETCONN_CLOSE;
 800b372:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b374:	f7ff f97e 	bl	800a674 <lwip_netconn_do_close_internal>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d0e2      	beq.n	800b342 <lwip_netconn_do_close+0x1a>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	785b      	ldrb	r3, [r3, #1]
 800b380:	2b04      	cmp	r3, #4
 800b382:	d006      	beq.n	800b392 <lwip_netconn_do_close+0x6a>
 800b384:	4b13      	ldr	r3, [pc, #76]	@ (800b3d4 <lwip_netconn_do_close+0xac>)
 800b386:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b38a:	4915      	ldr	r1, [pc, #84]	@ (800b3e0 <lwip_netconn_do_close+0xb8>)
 800b38c:	4813      	ldr	r0, [pc, #76]	@ (800b3dc <lwip_netconn_do_close+0xb4>)
 800b38e:	f007 fdaf 	bl	8012ef0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b392:	f7fb ffc1 	bl	8007318 <sys_unlock_tcpip_core>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b396:	6820      	ldr	r0, [r4, #0]
 800b398:	2100      	movs	r1, #0
 800b39a:	300c      	adds	r0, #12
 800b39c:	f007 fc02 	bl	8012ba4 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b3a0:	f7fb ff3c 	bl	800721c <sys_lock_tcpip_core>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	785b      	ldrb	r3, [r3, #1]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d0ca      	beq.n	800b342 <lwip_netconn_do_close+0x1a>
 800b3ac:	4b09      	ldr	r3, [pc, #36]	@ (800b3d4 <lwip_netconn_do_close+0xac>)
 800b3ae:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b3b2:	490b      	ldr	r1, [pc, #44]	@ (800b3e0 <lwip_netconn_do_close+0xb8>)
 800b3b4:	4809      	ldr	r0, [pc, #36]	@ (800b3dc <lwip_netconn_do_close+0xb4>)
}
 800b3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b3ba:	f007 bd99 	b.w	8012ef0 <iprintf>
    if (state == NETCONN_CONNECT) {
 800b3be:	2a03      	cmp	r2, #3
 800b3c0:	d0bd      	beq.n	800b33e <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 800b3c2:	2a01      	cmp	r2, #1
 800b3c4:	d102      	bne.n	800b3cc <lwip_netconn_do_close+0xa4>
      msg->err = ERR_INPROGRESS;
 800b3c6:	23fb      	movs	r3, #251	@ 0xfb
 800b3c8:	7123      	strb	r3, [r4, #4]
}
 800b3ca:	bd10      	pop	{r4, pc}
        netconn_drain(msg->conn);
 800b3cc:	f7ff fd30 	bl	800ae30 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b3d0:	6820      	ldr	r0, [r4, #0]
 800b3d2:	e7c1      	b.n	800b358 <lwip_netconn_do_close+0x30>
 800b3d4:	08014cbc 	.word	0x08014cbc
 800b3d8:	08015094 	.word	0x08015094
 800b3dc:	08014150 	.word	0x08014150
 800b3e0:	080150b0 	.word	0x080150b0

0800b3e4 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 800b3e4:	b170      	cbz	r0, 800b404 <netbuf_delete+0x20>
{
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 800b3ea:	6800      	ldr	r0, [r0, #0]
 800b3ec:	b120      	cbz	r0, 800b3f8 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800b3ee:	f001 f823 	bl	800c438 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	2006      	movs	r0, #6
  }
}
 800b3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 800b400:	f000 bd0e 	b.w	800be20 <memp_free>
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop

0800b408 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b408:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b40a:	b140      	cbz	r0, 800b41e <netbuf_next+0x16>
  if (buf->ptr->next == NULL) {
 800b40c:	6843      	ldr	r3, [r0, #4]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	b15a      	cbz	r2, 800b42a <netbuf_next+0x22>
    return -1;
  }
  buf->ptr = buf->ptr->next;
  if (buf->ptr->next == NULL) {
 800b412:	6813      	ldr	r3, [r2, #0]
  buf->ptr = buf->ptr->next;
 800b414:	6042      	str	r2, [r0, #4]
  if (buf->ptr->next == NULL) {
 800b416:	fab3 f083 	clz	r0, r3
 800b41a:	0940      	lsrs	r0, r0, #5
    return 1;
  }
  return 0;
}
 800b41c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b41e:	4b04      	ldr	r3, [pc, #16]	@ (800b430 <netbuf_next+0x28>)
 800b420:	22e0      	movs	r2, #224	@ 0xe0
 800b422:	4904      	ldr	r1, [pc, #16]	@ (800b434 <netbuf_next+0x2c>)
 800b424:	4804      	ldr	r0, [pc, #16]	@ (800b438 <netbuf_next+0x30>)
 800b426:	f007 fd63 	bl	8012ef0 <iprintf>
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b42e:	bd08      	pop	{r3, pc}
 800b430:	080150dc 	.word	0x080150dc
 800b434:	08015150 	.word	0x08015150
 800b438:	08014150 	.word	0x08014150

0800b43c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800b440:	f7fb ffa6 	bl	8007390 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 800b444:	f7fb feea 	bl	800721c <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800b448:	4b2c      	ldr	r3, [pc, #176]	@ (800b4fc <tcpip_thread+0xc0>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	b113      	cbz	r3, 800b454 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 800b44e:	4a2c      	ldr	r2, [pc, #176]	@ (800b500 <tcpip_thread+0xc4>)
 800b450:	6810      	ldr	r0, [r2, #0]
 800b452:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b454:	4d2b      	ldr	r5, [pc, #172]	@ (800b504 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b456:	4f2c      	ldr	r7, [pc, #176]	@ (800b508 <tcpip_thread+0xcc>)
 800b458:	4e2c      	ldr	r6, [pc, #176]	@ (800b50c <tcpip_thread+0xd0>)
 800b45a:	e00e      	b.n	800b47a <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 800b45c:	b158      	cbz	r0, 800b476 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 800b45e:	f7fb ff5b 	bl	8007318 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b462:	4622      	mov	r2, r4
 800b464:	a901      	add	r1, sp, #4
 800b466:	4628      	mov	r0, r5
 800b468:	f007 fb54 	bl	8012b14 <sys_arch_mbox_fetch>
 800b46c:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800b46e:	f7fb fed5 	bl	800721c <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 800b472:	3401      	adds	r4, #1
 800b474:	d111      	bne.n	800b49a <tcpip_thread+0x5e>
    sys_check_timeouts();
 800b476:	f005 fd17 	bl	8010ea8 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 800b47a:	f7fb ff57 	bl	800732c <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 800b47e:	f005 fd3d 	bl	8010efc <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b482:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 800b484:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b486:	d1e9      	bne.n	800b45c <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 800b488:	f7fb ff46 	bl	8007318 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b48c:	2200      	movs	r2, #0
 800b48e:	a901      	add	r1, sp, #4
 800b490:	4628      	mov	r0, r5
 800b492:	f007 fb3f 	bl	8012b14 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b496:	f7fb fec1 	bl	800721c <sys_lock_tcpip_core>
    if (msg == NULL) {
 800b49a:	9c01      	ldr	r4, [sp, #4]
 800b49c:	b164      	cbz	r4, 800b4b8 <tcpip_thread+0x7c>
  switch (msg->type) {
 800b49e:	7823      	ldrb	r3, [r4, #0]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d01e      	beq.n	800b4e2 <tcpip_thread+0xa6>
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d018      	beq.n	800b4da <tcpip_thread+0x9e>
 800b4a8:	b16b      	cbz	r3, 800b4c6 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	22cf      	movs	r2, #207	@ 0xcf
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	4817      	ldr	r0, [pc, #92]	@ (800b510 <tcpip_thread+0xd4>)
 800b4b2:	f007 fd1d 	bl	8012ef0 <iprintf>
      break;
 800b4b6:	e7e0      	b.n	800b47a <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	2291      	movs	r2, #145	@ 0x91
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4814      	ldr	r0, [pc, #80]	@ (800b510 <tcpip_thread+0xd4>)
 800b4c0:	f007 fd16 	bl	8012ef0 <iprintf>
      continue;
 800b4c4:	e7d9      	b.n	800b47a <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b4c6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800b4ca:	6860      	ldr	r0, [r4, #4]
 800b4cc:	4798      	blx	r3
 800b4ce:	b980      	cbnz	r0, 800b4f2 <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	2009      	movs	r0, #9
 800b4d4:	f000 fca4 	bl	800be20 <memp_free>
      break;
 800b4d8:	e7cf      	b.n	800b47a <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4da:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800b4de:	4798      	blx	r3
      break;
 800b4e0:	e7cb      	b.n	800b47a <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4e2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800b4e6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	2008      	movs	r0, #8
 800b4ec:	f000 fc98 	bl	800be20 <memp_free>
      break;
 800b4f0:	e7c3      	b.n	800b47a <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b4f2:	6860      	ldr	r0, [r4, #4]
 800b4f4:	f000 ffa0 	bl	800c438 <pbuf_free>
 800b4f8:	e7ea      	b.n	800b4d0 <tcpip_thread+0x94>
 800b4fa:	bf00      	nop
 800b4fc:	240091fc 	.word	0x240091fc
 800b500:	240091f8 	.word	0x240091f8
 800b504:	240091f4 	.word	0x240091f4
 800b508:	0801516c 	.word	0x0801516c
 800b50c:	0801519c 	.word	0x0801519c
 800b510:	08014150 	.word	0x08014150

0800b514 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b516:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b518:	4811      	ldr	r0, [pc, #68]	@ (800b560 <tcpip_inpkt+0x4c>)
{
 800b51a:	460e      	mov	r6, r1
 800b51c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b51e:	f007 fb23 	bl	8012b68 <sys_mbox_valid>
 800b522:	b178      	cbz	r0, 800b544 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b524:	2009      	movs	r0, #9
 800b526:	f000 fc35 	bl	800bd94 <memp_malloc>
  if (msg == NULL) {
 800b52a:	4604      	mov	r4, r0
 800b52c:	b1a8      	cbz	r0, 800b55a <tcpip_inpkt+0x46>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800b52e:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800b530:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800b532:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b534:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 800b536:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b538:	4809      	ldr	r0, [pc, #36]	@ (800b560 <tcpip_inpkt+0x4c>)
  msg->msg.inp.input_fn = input_fn;
 800b53a:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b53c:	f007 fada 	bl	8012af4 <sys_mbox_trypost>
 800b540:	b938      	cbnz	r0, 800b552 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b544:	4b07      	ldr	r3, [pc, #28]	@ (800b564 <tcpip_inpkt+0x50>)
 800b546:	22fc      	movs	r2, #252	@ 0xfc
 800b548:	4907      	ldr	r1, [pc, #28]	@ (800b568 <tcpip_inpkt+0x54>)
 800b54a:	4808      	ldr	r0, [pc, #32]	@ (800b56c <tcpip_inpkt+0x58>)
 800b54c:	f007 fcd0 	bl	8012ef0 <iprintf>
 800b550:	e7e8      	b.n	800b524 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b552:	4621      	mov	r1, r4
 800b554:	2009      	movs	r0, #9
 800b556:	f000 fc63 	bl	800be20 <memp_free>
    return ERR_MEM;
 800b55a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b560:	240091f4 	.word	0x240091f4
 800b564:	0801516c 	.word	0x0801516c
 800b568:	080151bc 	.word	0x080151bc
 800b56c:	08014150 	.word	0x08014150

0800b570 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b570:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 800b574:	f013 0f18 	tst.w	r3, #24
 800b578:	d002      	beq.n	800b580 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b57a:	4a03      	ldr	r2, [pc, #12]	@ (800b588 <tcpip_input+0x18>)
 800b57c:	f7ff bfca 	b.w	800b514 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b580:	4a02      	ldr	r2, [pc, #8]	@ (800b58c <tcpip_input+0x1c>)
 800b582:	f7ff bfc7 	b.w	800b514 <tcpip_inpkt>
 800b586:	bf00      	nop
 800b588:	080129a9 	.word	0x080129a9
 800b58c:	08011ddd 	.word	0x08011ddd

0800b590 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b594:	4811      	ldr	r0, [pc, #68]	@ (800b5dc <tcpip_try_callback+0x4c>)
{
 800b596:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b598:	f007 fae6 	bl	8012b68 <sys_mbox_valid>
 800b59c:	b170      	cbz	r0, 800b5bc <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b59e:	2008      	movs	r0, #8
 800b5a0:	f000 fbf8 	bl	800bd94 <memp_malloc>
  if (msg == NULL) {
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	b1a8      	cbz	r0, 800b5d4 <tcpip_try_callback+0x44>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b5a8:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b5aa:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 800b5ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b5b0:	480a      	ldr	r0, [pc, #40]	@ (800b5dc <tcpip_try_callback+0x4c>)
  msg->type = TCPIP_MSG_CALLBACK;
 800b5b2:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b5b4:	f007 fa9e 	bl	8012af4 <sys_mbox_trypost>
 800b5b8:	b940      	cbnz	r0, 800b5cc <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b5bc:	4b08      	ldr	r3, [pc, #32]	@ (800b5e0 <tcpip_try_callback+0x50>)
 800b5be:	f240 125d 	movw	r2, #349	@ 0x15d
 800b5c2:	4908      	ldr	r1, [pc, #32]	@ (800b5e4 <tcpip_try_callback+0x54>)
 800b5c4:	4808      	ldr	r0, [pc, #32]	@ (800b5e8 <tcpip_try_callback+0x58>)
 800b5c6:	f007 fc93 	bl	8012ef0 <iprintf>
 800b5ca:	e7e8      	b.n	800b59e <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	2008      	movs	r0, #8
 800b5d0:	f000 fc26 	bl	800be20 <memp_free>
    return ERR_MEM;
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
 800b5da:	bf00      	nop
 800b5dc:	240091f4 	.word	0x240091f4
 800b5e0:	0801516c 	.word	0x0801516c
 800b5e4:	080151bc 	.word	0x080151bc
 800b5e8:	08014150 	.word	0x08014150

0800b5ec <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	4604      	mov	r4, r0
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b5f2:	f7fb fe13 	bl	800721c <sys_lock_tcpip_core>
  fn(apimsg);
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800b5fa:	f7fb fe8d 	bl	8007318 <sys_unlock_tcpip_core>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b5fe:	2000      	movs	r0, #0
 800b600:	bd38      	pop	{r3, r4, r5, pc}
 800b602:	bf00      	nop

0800b604 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b604:	b530      	push	{r4, r5, lr}
 800b606:	b083      	sub	sp, #12
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
  lwip_init();
 800b60c:	f000 f8b2 	bl	800b774 <lwip_init>

  tcpip_init_done = initfunc;
 800b610:	4a15      	ldr	r2, [pc, #84]	@ (800b668 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b612:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800b614:	4b15      	ldr	r3, [pc, #84]	@ (800b66c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b616:	4816      	ldr	r0, [pc, #88]	@ (800b670 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 800b618:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800b61a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b61c:	f007 fa52 	bl	8012ac4 <sys_mbox_new>
 800b620:	b970      	cbnz	r0, 800b640 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b622:	4814      	ldr	r0, [pc, #80]	@ (800b674 <tcpip_init+0x70>)
 800b624:	f007 faf6 	bl	8012c14 <sys_mutex_new>
 800b628:	b9b0      	cbnz	r0, 800b658 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b62a:	2418      	movs	r4, #24
 800b62c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b630:	2200      	movs	r2, #0
 800b632:	4911      	ldr	r1, [pc, #68]	@ (800b678 <tcpip_init+0x74>)
 800b634:	9400      	str	r4, [sp, #0]
 800b636:	4811      	ldr	r0, [pc, #68]	@ (800b67c <tcpip_init+0x78>)
 800b638:	f007 fb02 	bl	8012c40 <sys_thread_new>
}
 800b63c:	b003      	add	sp, #12
 800b63e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b640:	4b0f      	ldr	r3, [pc, #60]	@ (800b680 <tcpip_init+0x7c>)
 800b642:	f240 2261 	movw	r2, #609	@ 0x261
 800b646:	490f      	ldr	r1, [pc, #60]	@ (800b684 <tcpip_init+0x80>)
 800b648:	480f      	ldr	r0, [pc, #60]	@ (800b688 <tcpip_init+0x84>)
 800b64a:	f007 fc51 	bl	8012ef0 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b64e:	4809      	ldr	r0, [pc, #36]	@ (800b674 <tcpip_init+0x70>)
 800b650:	f007 fae0 	bl	8012c14 <sys_mutex_new>
 800b654:	2800      	cmp	r0, #0
 800b656:	d0e8      	beq.n	800b62a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b658:	4b09      	ldr	r3, [pc, #36]	@ (800b680 <tcpip_init+0x7c>)
 800b65a:	f240 2265 	movw	r2, #613	@ 0x265
 800b65e:	490b      	ldr	r1, [pc, #44]	@ (800b68c <tcpip_init+0x88>)
 800b660:	4809      	ldr	r0, [pc, #36]	@ (800b688 <tcpip_init+0x84>)
 800b662:	f007 fc45 	bl	8012ef0 <iprintf>
 800b666:	e7e0      	b.n	800b62a <tcpip_init+0x26>
 800b668:	240091fc 	.word	0x240091fc
 800b66c:	240091f8 	.word	0x240091f8
 800b670:	240091f4 	.word	0x240091f4
 800b674:	240091f0 	.word	0x240091f0
 800b678:	0800b43d 	.word	0x0800b43d
 800b67c:	08015214 	.word	0x08015214
 800b680:	0801516c 	.word	0x0801516c
 800b684:	080151cc 	.word	0x080151cc
 800b688:	08014150 	.word	0x08014150
 800b68c:	080151f0 	.word	0x080151f0

0800b690 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800b690:	ba40      	rev16	r0, r0
}
 800b692:	b280      	uxth	r0, r0
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop

0800b698 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800b698:	ba00      	rev	r0, r0
 800b69a:	4770      	bx	lr

0800b69c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b69c:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800b69e:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 800b6a2:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b6a6:	4571      	cmp	r1, lr
 800b6a8:	dd05      	ble.n	800b6b6 <lwip_standard_chksum+0x1a>
 800b6aa:	b125      	cbz	r5, 800b6b6 <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 800b6ac:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 800b6b0:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 800b6b2:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800b6b6:	2901      	cmp	r1, #1
 800b6b8:	dd27      	ble.n	800b70a <lwip_standard_chksum+0x6e>
 800b6ba:	3902      	subs	r1, #2
  u32_t sum = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	084c      	lsrs	r4, r1, #1
 800b6c0:	f104 0c01 	add.w	ip, r4, #1
 800b6c4:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 800b6c8:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 800b6cc:	4584      	cmp	ip, r0
    sum += *ps++;
 800b6ce:	4413      	add	r3, r2
  while (len > 1) {
 800b6d0:	d1fa      	bne.n	800b6c8 <lwip_standard_chksum+0x2c>
    len -= 2;
 800b6d2:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 800b6d6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b6da:	2901      	cmp	r1, #1
 800b6dc:	d105      	bne.n	800b6ea <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b6de:	f89c 2000 	ldrb.w	r2, [ip]
 800b6e2:	f362 0e07 	bfi	lr, r2, #0, #8
 800b6e6:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 800b6ea:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b6ec:	fa1f f38e 	uxth.w	r3, lr
 800b6f0:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 800b6f4:	b298      	uxth	r0, r3
 800b6f6:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800b6fa:	b125      	cbz	r5, 800b706 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b6fc:	0203      	lsls	r3, r0, #8
 800b6fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800b702:	b29b      	uxth	r3, r3
 800b704:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800b706:	b280      	uxth	r0, r0
 800b708:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 800b70a:	4684      	mov	ip, r0
  u32_t sum = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	e7e4      	b.n	800b6da <lwip_standard_chksum+0x3e>

0800b710 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b710:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b712:	f7ff ffc3 	bl	800b69c <lwip_standard_chksum>
 800b716:	43c0      	mvns	r0, r0
}
 800b718:	b280      	uxth	r0, r0
 800b71a:	bd08      	pop	{r3, pc}

0800b71c <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 800b71c:	b338      	cbz	r0, 800b76e <inet_chksum_pbuf+0x52>
{
 800b71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 800b720:	2700      	movs	r7, #0
 800b722:	4605      	mov	r5, r0
  acc = 0;
 800b724:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b726:	896e      	ldrh	r6, [r5, #10]
 800b728:	6868      	ldr	r0, [r5, #4]
 800b72a:	4631      	mov	r1, r6
 800b72c:	f7ff ffb6 	bl	800b69c <lwip_standard_chksum>
 800b730:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 800b732:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 800b736:	b2a3      	uxth	r3, r4
 800b738:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 800b73c:	ea4f 2304 	mov.w	r3, r4, lsl #8
 800b740:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 800b744:	d004      	beq.n	800b750 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 800b746:	b29b      	uxth	r3, r3
 800b748:	f087 0701 	eor.w	r7, r7, #1
 800b74c:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 800b750:	682d      	ldr	r5, [r5, #0]
 800b752:	2d00      	cmp	r5, #0
 800b754:	d1e7      	bne.n	800b726 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 800b756:	b13f      	cbz	r7, 800b768 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b758:	0220      	lsls	r0, r4, #8
 800b75a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b75e:	b280      	uxth	r0, r0
 800b760:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 800b762:	43c0      	mvns	r0, r0
 800b764:	b280      	uxth	r0, r0
}
 800b766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 800b768:	43e4      	mvns	r4, r4
 800b76a:	b2a0      	uxth	r0, r4
}
 800b76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 800b76e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 800b772:	4770      	bx	lr

0800b774 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b774:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b776:	f007 fa43 	bl	8012c00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b77a:	f000 f80d 	bl	800b798 <mem_init>
  memp_init();
 800b77e:	f000 fac7 	bl	800bd10 <memp_init>
  pbuf_init();
  netif_init();
 800b782:	f000 fba1 	bl	800bec8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b786:	f005 fbcd 	bl	8010f24 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b78a:	f001 f9f3 	bl	800cb74 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800b78e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800b792:	f005 bb6b 	b.w	8010e6c <sys_timeouts_init>
 800b796:	bf00      	nop

0800b798 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b798:	b510      	push	{r4, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b79a:	4b11      	ldr	r3, [pc, #68]	@ (800b7e0 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800b79c:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b79e:	4c11      	ldr	r4, [pc, #68]	@ (800b7e4 <mem_init+0x4c>)
  mem->next = MEM_SIZE_ALIGNED;
 800b7a0:	4911      	ldr	r1, [pc, #68]	@ (800b7e8 <mem_init+0x50>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b7a2:	6023      	str	r3, [r4, #0]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b7a4:	4811      	ldr	r0, [pc, #68]	@ (800b7ec <mem_init+0x54>)
 800b7a6:	4c12      	ldr	r4, [pc, #72]	@ (800b7f0 <mem_init+0x58>)
  mem->used = 0;
 800b7a8:	721a      	strb	r2, [r3, #8]
  mem->prev = 0;
 800b7aa:	e9c3 1200 	strd	r1, r2, [r3]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b7ae:	6004      	str	r4, [r0, #0]
  ram_end->used = 1;
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	4a10      	ldr	r2, [pc, #64]	@ (800b7f4 <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b7b4:	4c10      	ldr	r4, [pc, #64]	@ (800b7f8 <mem_init+0x60>)
  ram_end->used = 1;
 800b7b6:	f882 00f0 	strb.w	r0, [r2, #240]	@ 0xf0
  ram_end->next = MEM_SIZE_ALIGNED;
 800b7ba:	f8c2 10e8 	str.w	r1, [r2, #232]	@ 0xe8
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b7be:	f8c2 10ec 	str.w	r1, [r2, #236]	@ 0xec

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b7c2:	480e      	ldr	r0, [pc, #56]	@ (800b7fc <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 800b7c4:	6023      	str	r3, [r4, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b7c6:	f007 fa25 	bl	8012c14 <sys_mutex_new>
 800b7ca:	b900      	cbnz	r0, 800b7ce <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800b7cc:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b7ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b800 <mem_init+0x68>)
 800b7d0:	f240 221f 	movw	r2, #543	@ 0x21f
 800b7d4:	490b      	ldr	r1, [pc, #44]	@ (800b804 <mem_init+0x6c>)
 800b7d6:	480c      	ldr	r0, [pc, #48]	@ (800b808 <mem_init+0x70>)
}
 800b7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b7dc:	f007 bb88 	b.w	8012ef0 <iprintf>
 800b7e0:	30020000 	.word	0x30020000
 800b7e4:	24009224 	.word	0x24009224
 800b7e8:	0001ffe8 	.word	0x0001ffe8
 800b7ec:	24009220 	.word	0x24009220
 800b7f0:	3003ffe8 	.word	0x3003ffe8
 800b7f4:	3003ff00 	.word	0x3003ff00
 800b7f8:	24009218 	.word	0x24009218
 800b7fc:	2400921c 	.word	0x2400921c
 800b800:	08015224 	.word	0x08015224
 800b804:	08015254 	.word	0x08015254
 800b808:	08014150 	.word	0x08014150

0800b80c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b80c:	2800      	cmp	r0, #0
 800b80e:	f000 8095 	beq.w	800b93c <mem_free+0x130>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b812:	0783      	lsls	r3, r0, #30
{
 800b814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b818:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b81a:	f040 808a 	bne.w	800b932 <mem_free+0x126>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b81e:	4e5f      	ldr	r6, [pc, #380]	@ (800b99c <mem_free+0x190>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b820:	f1a0 050c 	sub.w	r5, r0, #12
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b824:	6833      	ldr	r3, [r6, #0]
 800b826:	42ab      	cmp	r3, r5
 800b828:	d805      	bhi.n	800b836 <mem_free+0x2a>
 800b82a:	4f5d      	ldr	r7, [pc, #372]	@ (800b9a0 <mem_free+0x194>)
 800b82c:	f100 030c 	add.w	r3, r0, #12
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d20c      	bcs.n	800b850 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b836:	4b5b      	ldr	r3, [pc, #364]	@ (800b9a4 <mem_free+0x198>)
 800b838:	f240 227f 	movw	r2, #639	@ 0x27f
 800b83c:	495a      	ldr	r1, [pc, #360]	@ (800b9a8 <mem_free+0x19c>)
 800b83e:	485b      	ldr	r0, [pc, #364]	@ (800b9ac <mem_free+0x1a0>)
 800b840:	f007 fb56 	bl	8012ef0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b844:	f007 fa12 	bl	8012c6c <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800b84c:	f007 ba1a 	b.w	8012c84 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 800b850:	4857      	ldr	r0, [pc, #348]	@ (800b9b0 <mem_free+0x1a4>)
 800b852:	f007 f9eb 	bl	8012c2c <sys_mutex_lock>
  if (!mem->used) {
 800b856:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 8099 	beq.w	800b992 <mem_free+0x186>
  pmem = ptr_to_mem(mem->prev);
 800b860:	f854 1c08 	ldr.w	r1, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b864:	4853      	ldr	r0, [pc, #332]	@ (800b9b4 <mem_free+0x1a8>)
  return (mem_size_t)((u8_t *)mem - ram);
 800b866:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b868:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 800b86a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b86e:	d807      	bhi.n	800b880 <mem_free+0x74>
 800b870:	4283      	cmp	r3, r0
 800b872:	d805      	bhi.n	800b880 <mem_free+0x74>
  return (mem_size_t)((u8_t *)mem - ram);
 800b874:	1aa8      	subs	r0, r5, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b876:	4288      	cmp	r0, r1
 800b878:	d012      	beq.n	800b8a0 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b87a:	5851      	ldr	r1, [r2, r1]
 800b87c:	4288      	cmp	r0, r1
 800b87e:	d00f      	beq.n	800b8a0 <mem_free+0x94>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b880:	4b48      	ldr	r3, [pc, #288]	@ (800b9a4 <mem_free+0x198>)
 800b882:	f240 2295 	movw	r2, #661	@ 0x295
 800b886:	494c      	ldr	r1, [pc, #304]	@ (800b9b8 <mem_free+0x1ac>)
 800b888:	4848      	ldr	r0, [pc, #288]	@ (800b9ac <mem_free+0x1a0>)
 800b88a:	f007 fb31 	bl	8012ef0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b88e:	4848      	ldr	r0, [pc, #288]	@ (800b9b0 <mem_free+0x1a4>)
 800b890:	f007 f9d2 	bl	8012c38 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800b894:	f007 f9ea 	bl	8012c6c <sys_arch_protect>
}
 800b898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800b89c:	f007 b9f2 	b.w	8012c84 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 800b8a0:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b8a2:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b8a6:	4561      	cmp	r1, ip
 800b8a8:	d002      	beq.n	800b8b0 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b8aa:	6849      	ldr	r1, [r1, #4]
 800b8ac:	4288      	cmp	r0, r1
 800b8ae:	d1e7      	bne.n	800b880 <mem_free+0x74>
  if (mem < lfree) {
 800b8b0:	f8df 8120 	ldr.w	r8, [pc, #288]	@ 800b9d4 <mem_free+0x1c8>
  mem->used = 0;
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 800b8ba:	f8d8 1000 	ldr.w	r1, [r8]
 800b8be:	42a9      	cmp	r1, r5
    lfree = mem;
 800b8c0:	bf88      	it	hi
 800b8c2:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b8c6:	4295      	cmp	r5, r2
 800b8c8:	d339      	bcc.n	800b93e <mem_free+0x132>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b8ca:	4565      	cmp	r5, ip
 800b8cc:	d241      	bcs.n	800b952 <mem_free+0x146>
  return (struct mem *)(void *)&ram[ptr];
 800b8ce:	6832      	ldr	r2, [r6, #0]
 800b8d0:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b8d2:	429d      	cmp	r5, r3
 800b8d4:	d013      	beq.n	800b8fe <mem_free+0xf2>
 800b8d6:	7a19      	ldrb	r1, [r3, #8]
 800b8d8:	b989      	cbnz	r1, 800b8fe <mem_free+0xf2>
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	428b      	cmp	r3, r1
 800b8de:	d00e      	beq.n	800b8fe <mem_free+0xf2>
    if (lfree == nmem) {
 800b8e0:	f8d8 1000 	ldr.w	r1, [r8]
 800b8e4:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800b8e6:	681b      	ldr	r3, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b8e8:	4932      	ldr	r1, [pc, #200]	@ (800b9b4 <mem_free+0x1a8>)
      lfree = mem;
 800b8ea:	bf08      	it	eq
 800b8ec:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b8f0:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800b8f2:	f844 3c0c 	str.w	r3, [r4, #-12]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b8f6:	d002      	beq.n	800b8fe <mem_free+0xf2>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b8f8:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 800b8fa:	1aa9      	subs	r1, r5, r2
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b8fc:	6059      	str	r1, [r3, #4]
  pmem = ptr_to_mem(mem->prev);
 800b8fe:	f854 1c08 	ldr.w	r1, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800b902:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 800b904:	429d      	cmp	r5, r3
 800b906:	d00f      	beq.n	800b928 <mem_free+0x11c>
 800b908:	7a18      	ldrb	r0, [r3, #8]
 800b90a:	b968      	cbnz	r0, 800b928 <mem_free+0x11c>
    if (lfree == mem) {
 800b90c:	f8d8 0000 	ldr.w	r0, [r8]
 800b910:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b912:	4828      	ldr	r0, [pc, #160]	@ (800b9b4 <mem_free+0x1a8>)
      lfree = pmem;
 800b914:	bf08      	it	eq
 800b916:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 800b91a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b91e:	4283      	cmp	r3, r0
    pmem->next = mem->next;
 800b920:	5053      	str	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b922:	d001      	beq.n	800b928 <mem_free+0x11c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b924:	441a      	add	r2, r3
 800b926:	6051      	str	r1, [r2, #4]
  LWIP_MEM_FREE_UNPROTECT();
 800b928:	4821      	ldr	r0, [pc, #132]	@ (800b9b0 <mem_free+0x1a4>)
}
 800b92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800b92e:	f007 b983 	b.w	8012c38 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b932:	4b1c      	ldr	r3, [pc, #112]	@ (800b9a4 <mem_free+0x198>)
 800b934:	f240 2273 	movw	r2, #627	@ 0x273
 800b938:	4920      	ldr	r1, [pc, #128]	@ (800b9bc <mem_free+0x1b0>)
 800b93a:	e780      	b.n	800b83e <mem_free+0x32>
 800b93c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b93e:	4b19      	ldr	r3, [pc, #100]	@ (800b9a4 <mem_free+0x198>)
 800b940:	f240 12df 	movw	r2, #479	@ 0x1df
 800b944:	491e      	ldr	r1, [pc, #120]	@ (800b9c0 <mem_free+0x1b4>)
 800b946:	4819      	ldr	r0, [pc, #100]	@ (800b9ac <mem_free+0x1a0>)
 800b948:	f007 fad2 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	429d      	cmp	r5, r3
 800b950:	d306      	bcc.n	800b960 <mem_free+0x154>
 800b952:	4b14      	ldr	r3, [pc, #80]	@ (800b9a4 <mem_free+0x198>)
 800b954:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b958:	491a      	ldr	r1, [pc, #104]	@ (800b9c4 <mem_free+0x1b8>)
 800b95a:	4814      	ldr	r0, [pc, #80]	@ (800b9ac <mem_free+0x1a0>)
 800b95c:	f007 fac8 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b960:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800b964:	b133      	cbz	r3, 800b974 <mem_free+0x168>
 800b966:	4b0f      	ldr	r3, [pc, #60]	@ (800b9a4 <mem_free+0x198>)
 800b968:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b96c:	4916      	ldr	r1, [pc, #88]	@ (800b9c8 <mem_free+0x1bc>)
 800b96e:	480f      	ldr	r0, [pc, #60]	@ (800b9ac <mem_free+0x1a0>)
 800b970:	f007 fabe 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b974:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800b978:	4a0e      	ldr	r2, [pc, #56]	@ (800b9b4 <mem_free+0x1a8>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d9a7      	bls.n	800b8ce <mem_free+0xc2>
 800b97e:	4b09      	ldr	r3, [pc, #36]	@ (800b9a4 <mem_free+0x198>)
 800b980:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b984:	4911      	ldr	r1, [pc, #68]	@ (800b9cc <mem_free+0x1c0>)
 800b986:	4809      	ldr	r0, [pc, #36]	@ (800b9ac <mem_free+0x1a0>)
 800b988:	f007 fab2 	bl	8012ef0 <iprintf>
  nmem = ptr_to_mem(mem->next);
 800b98c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800b990:	e79d      	b.n	800b8ce <mem_free+0xc2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b992:	4b04      	ldr	r3, [pc, #16]	@ (800b9a4 <mem_free+0x198>)
 800b994:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b998:	490d      	ldr	r1, [pc, #52]	@ (800b9d0 <mem_free+0x1c4>)
 800b99a:	e775      	b.n	800b888 <mem_free+0x7c>
 800b99c:	24009224 	.word	0x24009224
 800b9a0:	24009220 	.word	0x24009220
 800b9a4:	08015224 	.word	0x08015224
 800b9a8:	08015294 	.word	0x08015294
 800b9ac:	08014150 	.word	0x08014150
 800b9b0:	2400921c 	.word	0x2400921c
 800b9b4:	0001ffe8 	.word	0x0001ffe8
 800b9b8:	080152d8 	.word	0x080152d8
 800b9bc:	08015270 	.word	0x08015270
 800b9c0:	0801530c 	.word	0x0801530c
 800b9c4:	08015324 	.word	0x08015324
 800b9c8:	08015340 	.word	0x08015340
 800b9cc:	0801535c 	.word	0x0801535c
 800b9d0:	080152b0 	.word	0x080152b0
 800b9d4:	24009218 	.word	0x24009218

0800b9d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b9dc:	1ccb      	adds	r3, r1, #3
 800b9de:	f023 0303 	bic.w	r3, r3, #3
  if (newsize < MIN_SIZE_ALIGNED) {
 800b9e2:	2b0c      	cmp	r3, #12
 800b9e4:	461d      	mov	r5, r3
 800b9e6:	bf38      	it	cc
 800b9e8:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b9ea:	428d      	cmp	r5, r1
 800b9ec:	d37a      	bcc.n	800bae4 <mem_trim+0x10c>
 800b9ee:	4a49      	ldr	r2, [pc, #292]	@ (800bb14 <mem_trim+0x13c>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d877      	bhi.n	800bae4 <mem_trim+0x10c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b9f4:	4f48      	ldr	r7, [pc, #288]	@ (800bb18 <mem_trim+0x140>)
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	4283      	cmp	r3, r0
 800b9fc:	d83a      	bhi.n	800ba74 <mem_trim+0x9c>
 800b9fe:	4a47      	ldr	r2, [pc, #284]	@ (800bb1c <mem_trim+0x144>)
 800ba00:	6812      	ldr	r2, [r2, #0]
 800ba02:	4282      	cmp	r2, r0
 800ba04:	d936      	bls.n	800ba74 <mem_trim+0x9c>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba06:	f1a4 080c 	sub.w	r8, r4, #12
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ba0a:	f854 6c0c 	ldr.w	r6, [r4, #-12]
  return (mem_size_t)((u8_t *)mem - ram);
 800ba0e:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ba12:	3e0c      	subs	r6, #12
 800ba14:	eba6 0608 	sub.w	r6, r6, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ba18:	42b5      	cmp	r5, r6
 800ba1a:	d85c      	bhi.n	800bad6 <mem_trim+0xfe>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800ba1c:	d028      	beq.n	800ba70 <mem_trim+0x98>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba1e:	4840      	ldr	r0, [pc, #256]	@ (800bb20 <mem_trim+0x148>)
 800ba20:	f007 f904 	bl	8012c2c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ba24:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 800ba2e:	f899 1008 	ldrb.w	r1, [r9, #8]
 800ba32:	2900      	cmp	r1, #0
 800ba34:	d132      	bne.n	800ba9c <mem_trim+0xc4>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ba36:	4937      	ldr	r1, [pc, #220]	@ (800bb14 <mem_trim+0x13c>)
 800ba38:	428a      	cmp	r2, r1
 800ba3a:	d061      	beq.n	800bb00 <mem_trim+0x128>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
    if (lfree == mem2) {
 800ba3c:	4939      	ldr	r1, [pc, #228]	@ (800bb24 <mem_trim+0x14c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ba3e:	350c      	adds	r5, #12
    next = mem2->next;
 800ba40:	f8d9 6000 	ldr.w	r6, [r9]
    if (lfree == mem2) {
 800ba44:	6808      	ldr	r0, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ba46:	4445      	add	r5, r8
    if (lfree == mem2) {
 800ba48:	4548      	cmp	r0, r9
  return (struct mem *)(void *)&ram[ptr];
 800ba4a:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 800ba4e:	bf08      	it	eq
 800ba50:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 800ba52:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
    /* link it back to mem */
    mem2->prev = ptr;
 800ba54:	e9c2 6800 	strd	r6, r8, [r2]
    mem2->used = 0;
 800ba58:	7211      	strb	r1, [r2, #8]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba5a:	492e      	ldr	r1, [pc, #184]	@ (800bb14 <mem_trim+0x13c>)
    mem->next = ptr2;
 800ba5c:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	428a      	cmp	r2, r1
 800ba64:	d001      	beq.n	800ba6a <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ba66:	441a      	add	r2, r3
 800ba68:	6055      	str	r5, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ba6a:	482d      	ldr	r0, [pc, #180]	@ (800bb20 <mem_trim+0x148>)
 800ba6c:	f007 f8e4 	bl	8012c38 <sys_mutex_unlock>
    return NULL;
 800ba70:	4620      	mov	r0, r4
 800ba72:	e038      	b.n	800bae6 <mem_trim+0x10e>
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ba74:	4b2c      	ldr	r3, [pc, #176]	@ (800bb28 <mem_trim+0x150>)
 800ba76:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ba7a:	492c      	ldr	r1, [pc, #176]	@ (800bb2c <mem_trim+0x154>)
 800ba7c:	482c      	ldr	r0, [pc, #176]	@ (800bb30 <mem_trim+0x158>)
 800ba7e:	f007 fa37 	bl	8012ef0 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	d803      	bhi.n	800ba90 <mem_trim+0xb8>
 800ba88:	4a24      	ldr	r2, [pc, #144]	@ (800bb1c <mem_trim+0x144>)
 800ba8a:	6812      	ldr	r2, [r2, #0]
 800ba8c:	42a2      	cmp	r2, r4
 800ba8e:	d8ba      	bhi.n	800ba06 <mem_trim+0x2e>
    MEM_STATS_INC_LOCKED(illegal);
 800ba90:	f007 f8ec 	bl	8012c6c <sys_arch_protect>
 800ba94:	f007 f8f6 	bl	8012c84 <sys_arch_unprotect>
    return NULL;
 800ba98:	4620      	mov	r0, r4
 800ba9a:	e024      	b.n	800bae6 <mem_trim+0x10e>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ba9c:	f105 0118 	add.w	r1, r5, #24
 800baa0:	42b1      	cmp	r1, r6
 800baa2:	d8e2      	bhi.n	800ba6a <mem_trim+0x92>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800baa4:	491b      	ldr	r1, [pc, #108]	@ (800bb14 <mem_trim+0x13c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800baa6:	350c      	adds	r5, #12
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800baa8:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800baaa:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800baac:	d01d      	beq.n	800baea <mem_trim+0x112>
    if (mem2 < lfree) {
 800baae:	481d      	ldr	r0, [pc, #116]	@ (800bb24 <mem_trim+0x14c>)
  return (struct mem *)(void *)&ram[ptr];
 800bab0:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 800bab2:	6806      	ldr	r6, [r0, #0]
    mem2->prev = ptr;
 800bab4:	e9c1 2800 	strd	r2, r8, [r1]
    if (mem2 < lfree) {
 800bab8:	428e      	cmp	r6, r1
    mem2->used = 0;
 800baba:	f04f 0200 	mov.w	r2, #0
      lfree = mem2;
 800babe:	bf88      	it	hi
 800bac0:	6001      	strhi	r1, [r0, #0]
    mem2->used = 0;
 800bac2:	720a      	strb	r2, [r1, #8]
    mem->next = ptr2;
 800bac4:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bac8:	680a      	ldr	r2, [r1, #0]
 800baca:	4912      	ldr	r1, [pc, #72]	@ (800bb14 <mem_trim+0x13c>)
 800bacc:	428a      	cmp	r2, r1
 800bace:	d0cc      	beq.n	800ba6a <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bad0:	4413      	add	r3, r2
 800bad2:	605d      	str	r5, [r3, #4]
 800bad4:	e7c9      	b.n	800ba6a <mem_trim+0x92>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bad6:	4b14      	ldr	r3, [pc, #80]	@ (800bb28 <mem_trim+0x150>)
 800bad8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800badc:	4915      	ldr	r1, [pc, #84]	@ (800bb34 <mem_trim+0x15c>)
 800bade:	4814      	ldr	r0, [pc, #80]	@ (800bb30 <mem_trim+0x158>)
 800bae0:	f007 fa06 	bl	8012ef0 <iprintf>
    return NULL;
 800bae4:	2000      	movs	r0, #0
  return rmem;
}
 800bae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800baea:	4b0f      	ldr	r3, [pc, #60]	@ (800bb28 <mem_trim+0x150>)
 800baec:	f240 3216 	movw	r2, #790	@ 0x316
 800baf0:	4911      	ldr	r1, [pc, #68]	@ (800bb38 <mem_trim+0x160>)
 800baf2:	480f      	ldr	r0, [pc, #60]	@ (800bb30 <mem_trim+0x158>)
 800baf4:	f007 f9fc 	bl	8012ef0 <iprintf>
    mem2->next = mem->next;
 800baf8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	e7d6      	b.n	800baae <mem_trim+0xd6>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bb00:	4b09      	ldr	r3, [pc, #36]	@ (800bb28 <mem_trim+0x150>)
 800bb02:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bb06:	490c      	ldr	r1, [pc, #48]	@ (800bb38 <mem_trim+0x160>)
 800bb08:	4809      	ldr	r0, [pc, #36]	@ (800bb30 <mem_trim+0x158>)
 800bb0a:	f007 f9f1 	bl	8012ef0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	e794      	b.n	800ba3c <mem_trim+0x64>
 800bb12:	bf00      	nop
 800bb14:	0001ffe8 	.word	0x0001ffe8
 800bb18:	24009224 	.word	0x24009224
 800bb1c:	24009220 	.word	0x24009220
 800bb20:	2400921c 	.word	0x2400921c
 800bb24:	24009218 	.word	0x24009218
 800bb28:	08015224 	.word	0x08015224
 800bb2c:	08015388 	.word	0x08015388
 800bb30:	08014150 	.word	0x08014150
 800bb34:	080153a0 	.word	0x080153a0
 800bb38:	080153c0 	.word	0x080153c0

0800bb3c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d061      	beq.n	800bc04 <mem_malloc+0xc8>
{
 800bb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bb44:	1cc3      	adds	r3, r0, #3
 800bb46:	f023 0303 	bic.w	r3, r3, #3
  if (size < MIN_SIZE_ALIGNED) {
 800bb4a:	2b0c      	cmp	r3, #12
 800bb4c:	4698      	mov	r8, r3
 800bb4e:	bf38      	it	cc
 800bb50:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bb54:	4540      	cmp	r0, r8
 800bb56:	d821      	bhi.n	800bb9c <mem_malloc+0x60>
 800bb58:	4c43      	ldr	r4, [pc, #268]	@ (800bc68 <mem_malloc+0x12c>)
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	d81e      	bhi.n	800bb9c <mem_malloc+0x60>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb5e:	4f43      	ldr	r7, [pc, #268]	@ (800bc6c <mem_malloc+0x130>)
  return (mem_size_t)((u8_t *)mem - ram);
 800bb60:	4e43      	ldr	r6, [pc, #268]	@ (800bc70 <mem_malloc+0x134>)
  sys_mutex_lock(&mem_mutex);
 800bb62:	4844      	ldr	r0, [pc, #272]	@ (800bc74 <mem_malloc+0x138>)
 800bb64:	f007 f862 	bl	8012c2c <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb68:	f8d7 c000 	ldr.w	ip, [r7]
  return (mem_size_t)((u8_t *)mem - ram);
 800bb6c:	6831      	ldr	r1, [r6, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb6e:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 800bb72:	ebac 0301 	sub.w	r3, ip, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb76:	4573      	cmp	r3, lr
 800bb78:	d20d      	bcs.n	800bb96 <mem_malloc+0x5a>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bb7a:	f06f 090b 	mvn.w	r9, #11
  return (struct mem *)(void *)&ram[ptr];
 800bb7e:	18cc      	adds	r4, r1, r3
      if ((!mem->used) &&
 800bb80:	461d      	mov	r5, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bb82:	58cb      	ldr	r3, [r1, r3]
 800bb84:	eba9 0205 	sub.w	r2, r9, r5
      if ((!mem->used) &&
 800bb88:	7a20      	ldrb	r0, [r4, #8]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bb8a:	441a      	add	r2, r3
      if ((!mem->used) &&
 800bb8c:	b908      	cbnz	r0, 800bb92 <mem_malloc+0x56>
 800bb8e:	4542      	cmp	r2, r8
 800bb90:	d207      	bcs.n	800bba2 <mem_malloc+0x66>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb92:	459e      	cmp	lr, r3
 800bb94:	d8f3      	bhi.n	800bb7e <mem_malloc+0x42>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bb96:	4837      	ldr	r0, [pc, #220]	@ (800bc74 <mem_malloc+0x138>)
 800bb98:	f007 f84e 	bl	8012c38 <sys_mutex_unlock>
    return NULL;
 800bb9c:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 800bb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bba2:	f108 0018 	add.w	r0, r8, #24
 800bba6:	f108 080c 	add.w	r8, r8, #12
 800bbaa:	4282      	cmp	r2, r0
 800bbac:	d327      	bcc.n	800bbfe <mem_malloc+0xc2>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bbae:	eb05 0908 	add.w	r9, r5, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bbb2:	4a2d      	ldr	r2, [pc, #180]	@ (800bc68 <mem_malloc+0x12c>)
 800bbb4:	4591      	cmp	r9, r2
 800bbb6:	d04a      	beq.n	800bc4e <mem_malloc+0x112>
  return (struct mem *)(void *)&ram[ptr];
 800bbb8:	eb01 0209 	add.w	r2, r1, r9
          mem2->used = 0;
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	7210      	strb	r0, [r2, #8]
          mem2->next = mem->next;
 800bbc0:	f841 3009 	str.w	r3, [r1, r9]
          mem->used = 1;
 800bbc4:	2301      	movs	r3, #1
          mem2->prev = ptr;
 800bbc6:	6055      	str	r5, [r2, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bbc8:	4a27      	ldr	r2, [pc, #156]	@ (800bc68 <mem_malloc+0x12c>)
          mem->next = ptr2;
 800bbca:	f8c4 9000 	str.w	r9, [r4]
          mem->used = 1;
 800bbce:	7223      	strb	r3, [r4, #8]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bbd0:	f851 3009 	ldr.w	r3, [r1, r9]
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d002      	beq.n	800bbde <mem_malloc+0xa2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bbd8:	4419      	add	r1, r3
 800bbda:	f8c1 9004 	str.w	r9, [r1, #4]
        if (mem == lfree) {
 800bbde:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 800bbe0:	4d25      	ldr	r5, [pc, #148]	@ (800bc78 <mem_malloc+0x13c>)
        if (mem == lfree) {
 800bbe2:	d028      	beq.n	800bc36 <mem_malloc+0xfa>
        sys_mutex_unlock(&mem_mutex);
 800bbe4:	4823      	ldr	r0, [pc, #140]	@ (800bc74 <mem_malloc+0x138>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bbe6:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 800bbe8:	f007 f826 	bl	8012c38 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	4543      	cmp	r3, r8
 800bbf0:	d319      	bcc.n	800bc26 <mem_malloc+0xea>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bbf2:	07a3      	lsls	r3, r4, #30
 800bbf4:	d108      	bne.n	800bc08 <mem_malloc+0xcc>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bbf6:	f104 000c 	add.w	r0, r4, #12
}
 800bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	7223      	strb	r3, [r4, #8]
 800bc02:	e7ec      	b.n	800bbde <mem_malloc+0xa2>
    return NULL;
 800bc04:	2000      	movs	r0, #0
}
 800bc06:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bc08:	4b1c      	ldr	r3, [pc, #112]	@ (800bc7c <mem_malloc+0x140>)
 800bc0a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800bc0e:	491c      	ldr	r1, [pc, #112]	@ (800bc80 <mem_malloc+0x144>)
 800bc10:	481c      	ldr	r0, [pc, #112]	@ (800bc84 <mem_malloc+0x148>)
 800bc12:	f007 f96d 	bl	8012ef0 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bc16:	4b19      	ldr	r3, [pc, #100]	@ (800bc7c <mem_malloc+0x140>)
 800bc18:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bc1c:	491a      	ldr	r1, [pc, #104]	@ (800bc88 <mem_malloc+0x14c>)
 800bc1e:	4819      	ldr	r0, [pc, #100]	@ (800bc84 <mem_malloc+0x148>)
 800bc20:	f007 f966 	bl	8012ef0 <iprintf>
 800bc24:	e7e7      	b.n	800bbf6 <mem_malloc+0xba>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bc26:	4b15      	ldr	r3, [pc, #84]	@ (800bc7c <mem_malloc+0x140>)
 800bc28:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800bc2c:	4917      	ldr	r1, [pc, #92]	@ (800bc8c <mem_malloc+0x150>)
 800bc2e:	4815      	ldr	r0, [pc, #84]	@ (800bc84 <mem_malloc+0x148>)
 800bc30:	f007 f95e 	bl	8012ef0 <iprintf>
 800bc34:	e7dd      	b.n	800bbf2 <mem_malloc+0xb6>
  return (struct mem *)(void *)&ram[ptr];
 800bc36:	6830      	ldr	r0, [r6, #0]
 800bc38:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 800bc3a:	6829      	ldr	r1, [r5, #0]
 800bc3c:	e003      	b.n	800bc46 <mem_malloc+0x10a>
  return (struct mem *)(void *)&ram[ptr];
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 800bc42:	7a1a      	ldrb	r2, [r3, #8]
 800bc44:	b10a      	cbz	r2, 800bc4a <mem_malloc+0x10e>
 800bc46:	4299      	cmp	r1, r3
 800bc48:	d1f9      	bne.n	800bc3e <mem_malloc+0x102>
          lfree = cur;
 800bc4a:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bc4c:	e7ca      	b.n	800bbe4 <mem_malloc+0xa8>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bc4e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc7c <mem_malloc+0x140>)
 800bc50:	f240 3287 	movw	r2, #903	@ 0x387
 800bc54:	490e      	ldr	r1, [pc, #56]	@ (800bc90 <mem_malloc+0x154>)
 800bc56:	480b      	ldr	r0, [pc, #44]	@ (800bc84 <mem_malloc+0x148>)
 800bc58:	f007 f94a 	bl	8012ef0 <iprintf>
          mem2->next = mem->next;
 800bc5c:	6823      	ldr	r3, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 800bc5e:	6831      	ldr	r1, [r6, #0]
        if (mem == lfree) {
 800bc60:	f8d7 c000 	ldr.w	ip, [r7]
 800bc64:	e7a8      	b.n	800bbb8 <mem_malloc+0x7c>
 800bc66:	bf00      	nop
 800bc68:	0001ffe8 	.word	0x0001ffe8
 800bc6c:	24009218 	.word	0x24009218
 800bc70:	24009224 	.word	0x24009224
 800bc74:	2400921c 	.word	0x2400921c
 800bc78:	24009220 	.word	0x24009220
 800bc7c:	08015224 	.word	0x08015224
 800bc80:	08015404 	.word	0x08015404
 800bc84:	08014150 	.word	0x08014150
 800bc88:	08015434 	.word	0x08015434
 800bc8c:	080153d4 	.word	0x080153d4
 800bc90:	080153c0 	.word	0x080153c0

0800bc94 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bc98:	f006 ffe8 	bl	8012c6c <sys_arch_protect>

  memp = *desc->tab;
 800bc9c:	68a3      	ldr	r3, [r4, #8]
 800bc9e:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bca0:	b18c      	cbz	r4, 800bcc6 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bca2:	6822      	ldr	r2, [r4, #0]
 800bca4:	4605      	mov	r5, r0
 800bca6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bca8:	07a3      	lsls	r3, r4, #30
 800bcaa:	d104      	bne.n	800bcb6 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bcac:	4628      	mov	r0, r5
 800bcae:	f006 ffe9 	bl	8012c84 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bcb6:	4b06      	ldr	r3, [pc, #24]	@ (800bcd0 <do_memp_malloc_pool+0x3c>)
 800bcb8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800bcbc:	4905      	ldr	r1, [pc, #20]	@ (800bcd4 <do_memp_malloc_pool+0x40>)
 800bcbe:	4806      	ldr	r0, [pc, #24]	@ (800bcd8 <do_memp_malloc_pool+0x44>)
 800bcc0:	f007 f916 	bl	8012ef0 <iprintf>
 800bcc4:	e7f2      	b.n	800bcac <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 800bcc6:	f006 ffdd 	bl	8012c84 <sys_arch_unprotect>
}
 800bcca:	4620      	mov	r0, r4
 800bccc:	bd38      	pop	{r3, r4, r5, pc}
 800bcce:	bf00      	nop
 800bcd0:	08015458 	.word	0x08015458
 800bcd4:	08015488 	.word	0x08015488
 800bcd8:	08014150 	.word	0x08014150

0800bcdc <memp_init_pool>:
{
 800bcdc:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 800bcde:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 800bce0:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800bce2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800bce6:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 800bce8:	b17c      	cbz	r4, 800bd0a <memp_init_pool+0x2e>
 800bcea:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bcec:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 800bcf0:	460a      	mov	r2, r1
 800bcf2:	f023 0303 	bic.w	r3, r3, #3
 800bcf6:	e000      	b.n	800bcfa <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bcf8:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800bcfa:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800bcfc:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bcfe:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800bd02:	4619      	mov	r1, r3
 800bd04:	42a2      	cmp	r2, r4
 800bd06:	d1f7      	bne.n	800bcf8 <memp_init_pool+0x1c>
 800bd08:	602b      	str	r3, [r5, #0]
}
 800bd0a:	bc30      	pop	{r4, r5}
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop

0800bd10 <memp_init>:
{
 800bd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd12:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800bd68 <memp_init+0x58>
 800bd16:	2404      	movs	r4, #4
 800bd18:	4b11      	ldr	r3, [pc, #68]	@ (800bd60 <memp_init+0x50>)
  *desc->tab = NULL;
 800bd1a:	2600      	movs	r6, #0
{
 800bd1c:	4d11      	ldr	r5, [pc, #68]	@ (800bd64 <memp_init+0x54>)
 800bd1e:	f10e 0734 	add.w	r7, lr, #52	@ 0x34
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bd22:	3303      	adds	r3, #3
    memp_init_pool(memp_pools[i]);
 800bd24:	f85e 2b04 	ldr.w	r2, [lr], #4
  *desc->tab = NULL;
 800bd28:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bd2a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800bd2e:	b16c      	cbz	r4, 800bd4c <memp_init+0x3c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bd30:	2100      	movs	r1, #0
 800bd32:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 800bd36:	460a      	mov	r2, r1
 800bd38:	e000      	b.n	800bd3c <memp_init+0x2c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bd3a:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800bd3c:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800bd3e:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bd40:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800bd44:	4619      	mov	r1, r3
 800bd46:	42a2      	cmp	r2, r4
 800bd48:	d1f7      	bne.n	800bd3a <memp_init+0x2a>
 800bd4a:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bd4c:	4577      	cmp	r7, lr
 800bd4e:	d005      	beq.n	800bd5c <memp_init+0x4c>
    memp_init_pool(memp_pools[i]);
 800bd50:	f8de 2000 	ldr.w	r2, [lr]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bd54:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800bd58:	8854      	ldrh	r4, [r2, #2]
 800bd5a:	e7e2      	b.n	800bd22 <memp_init+0x12>
}
 800bd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	2400fc30 	.word	0x2400fc30
 800bd64:	2400fc2c 	.word	0x2400fc2c
 800bd68:	0801551c 	.word	0x0801551c

0800bd6c <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bd6c:	b108      	cbz	r0, 800bd72 <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bd6e:	f7ff bf91 	b.w	800bc94 <do_memp_malloc_pool>
{
 800bd72:	b510      	push	{r4, lr}
 800bd74:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bd76:	4b04      	ldr	r3, [pc, #16]	@ (800bd88 <memp_malloc_pool+0x1c>)
 800bd78:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800bd7c:	4903      	ldr	r1, [pc, #12]	@ (800bd8c <memp_malloc_pool+0x20>)
 800bd7e:	4804      	ldr	r0, [pc, #16]	@ (800bd90 <memp_malloc_pool+0x24>)
 800bd80:	f007 f8b6 	bl	8012ef0 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bd84:	4620      	mov	r0, r4
 800bd86:	bd10      	pop	{r4, pc}
 800bd88:	08015458 	.word	0x08015458
 800bd8c:	080154ac 	.word	0x080154ac
 800bd90:	08014150 	.word	0x08014150

0800bd94 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bd94:	280c      	cmp	r0, #12
{
 800bd96:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bd98:	d806      	bhi.n	800bda8 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bd9a:	4b08      	ldr	r3, [pc, #32]	@ (800bdbc <memp_malloc+0x28>)
 800bd9c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 800bda0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bda4:	f7ff bf76 	b.w	800bc94 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bda8:	4b05      	ldr	r3, [pc, #20]	@ (800bdc0 <memp_malloc+0x2c>)
 800bdaa:	f240 1257 	movw	r2, #343	@ 0x157
 800bdae:	4905      	ldr	r1, [pc, #20]	@ (800bdc4 <memp_malloc+0x30>)
 800bdb0:	4805      	ldr	r0, [pc, #20]	@ (800bdc8 <memp_malloc+0x34>)
 800bdb2:	f007 f89d 	bl	8012ef0 <iprintf>
}
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	bd08      	pop	{r3, pc}
 800bdba:	bf00      	nop
 800bdbc:	0801551c 	.word	0x0801551c
 800bdc0:	08015458 	.word	0x08015458
 800bdc4:	080154c0 	.word	0x080154c0
 800bdc8:	08014150 	.word	0x08014150

0800bdcc <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bdcc:	b1c0      	cbz	r0, 800be00 <memp_free_pool+0x34>
{
 800bdce:	b570      	push	{r4, r5, r6, lr}
 800bdd0:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800bdd2:	b161      	cbz	r1, 800bdee <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800bdd4:	078b      	lsls	r3, r1, #30
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	d10a      	bne.n	800bdf0 <memp_free_pool+0x24>
  SYS_ARCH_PROTECT(old_level);
 800bdda:	f006 ff47 	bl	8012c6c <sys_arch_protect>
  memp->next = *desc->tab;
 800bdde:	68ab      	ldr	r3, [r5, #8]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800bde4:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 800bde6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800bdea:	f006 bf4b 	b.w	8012c84 <sys_arch_unprotect>
}
 800bdee:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800bdf0:	4b07      	ldr	r3, [pc, #28]	@ (800be10 <memp_free_pool+0x44>)
 800bdf2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800bdf6:	4907      	ldr	r1, [pc, #28]	@ (800be14 <memp_free_pool+0x48>)
 800bdf8:	4807      	ldr	r0, [pc, #28]	@ (800be18 <memp_free_pool+0x4c>)
 800bdfa:	f007 f879 	bl	8012ef0 <iprintf>
 800bdfe:	e7ec      	b.n	800bdda <memp_free_pool+0xe>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800be00:	4b03      	ldr	r3, [pc, #12]	@ (800be10 <memp_free_pool+0x44>)
 800be02:	f240 1295 	movw	r2, #405	@ 0x195
 800be06:	4905      	ldr	r1, [pc, #20]	@ (800be1c <memp_free_pool+0x50>)
 800be08:	4803      	ldr	r0, [pc, #12]	@ (800be18 <memp_free_pool+0x4c>)
 800be0a:	f007 b871 	b.w	8012ef0 <iprintf>
 800be0e:	bf00      	nop
 800be10:	08015458 	.word	0x08015458
 800be14:	080154e0 	.word	0x080154e0
 800be18:	08014150 	.word	0x08014150
 800be1c:	080154ac 	.word	0x080154ac

0800be20 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800be20:	280c      	cmp	r0, #12
 800be22:	d812      	bhi.n	800be4a <memp_free+0x2a>
{
 800be24:	b570      	push	{r4, r5, r6, lr}
 800be26:	460c      	mov	r4, r1

  if (mem == NULL) {
 800be28:	b171      	cbz	r1, 800be48 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800be2a:	4b0f      	ldr	r3, [pc, #60]	@ (800be68 <memp_free+0x48>)
 800be2c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 800be30:	078b      	lsls	r3, r1, #30
 800be32:	d111      	bne.n	800be58 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 800be34:	f006 ff1a 	bl	8012c6c <sys_arch_protect>
  memp->next = *desc->tab;
 800be38:	68ab      	ldr	r3, [r5, #8]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800be3e:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800be40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800be44:	f006 bf1e 	b.w	8012c84 <sys_arch_unprotect>
}
 800be48:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800be4a:	4b08      	ldr	r3, [pc, #32]	@ (800be6c <memp_free+0x4c>)
 800be4c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800be50:	4907      	ldr	r1, [pc, #28]	@ (800be70 <memp_free+0x50>)
 800be52:	4808      	ldr	r0, [pc, #32]	@ (800be74 <memp_free+0x54>)
 800be54:	f007 b84c 	b.w	8012ef0 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800be58:	4b04      	ldr	r3, [pc, #16]	@ (800be6c <memp_free+0x4c>)
 800be5a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800be5e:	4906      	ldr	r1, [pc, #24]	@ (800be78 <memp_free+0x58>)
 800be60:	4804      	ldr	r0, [pc, #16]	@ (800be74 <memp_free+0x54>)
 800be62:	f007 f845 	bl	8012ef0 <iprintf>
 800be66:	e7e5      	b.n	800be34 <memp_free+0x14>
 800be68:	0801551c 	.word	0x0801551c
 800be6c:	08015458 	.word	0x08015458
 800be70:	08015500 	.word	0x08015500
 800be74:	08014150 	.word	0x08014150
 800be78:	080154e0 	.word	0x080154e0

0800be7c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800be7c:	f06f 000b 	mvn.w	r0, #11
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop

0800be84 <netif_issue_reports>:
{
 800be84:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800be86:	4604      	mov	r4, r0
 800be88:	b150      	cbz	r0, 800bea0 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800be8a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800be8e:	f003 0205 	and.w	r2, r3, #5
 800be92:	2a05      	cmp	r2, #5
 800be94:	d103      	bne.n	800be9e <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800be96:	6862      	ldr	r2, [r4, #4]
 800be98:	b10a      	cbz	r2, 800be9e <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800be9a:	071b      	lsls	r3, r3, #28
 800be9c:	d408      	bmi.n	800beb0 <netif_issue_reports+0x2c>
}
 800be9e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bea0:	4b06      	ldr	r3, [pc, #24]	@ (800bebc <netif_issue_reports+0x38>)
 800bea2:	f240 326d 	movw	r2, #877	@ 0x36d
 800bea6:	4906      	ldr	r1, [pc, #24]	@ (800bec0 <netif_issue_reports+0x3c>)
 800bea8:	4806      	ldr	r0, [pc, #24]	@ (800bec4 <netif_issue_reports+0x40>)
 800beaa:	f007 f821 	bl	8012ef0 <iprintf>
 800beae:	e7ec      	b.n	800be8a <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 800beb0:	1d21      	adds	r1, r4, #4
 800beb2:	4620      	mov	r0, r4
}
 800beb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 800beb8:	f005 be46 	b.w	8011b48 <etharp_request>
 800bebc:	080155ec 	.word	0x080155ec
 800bec0:	08015620 	.word	0x08015620
 800bec4:	08014150 	.word	0x08014150

0800bec8 <netif_init>:
}
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop

0800becc <netif_set_addr>:
{
 800becc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bece:	460d      	mov	r5, r1
 800bed0:	b083      	sub	sp, #12
 800bed2:	4604      	mov	r4, r0
 800bed4:	4617      	mov	r7, r2
 800bed6:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 800bed8:	f7fb fa28 	bl	800732c <sys_check_core_locking>
  if (ipaddr == NULL) {
 800bedc:	b1e5      	cbz	r5, 800bf18 <netif_set_addr+0x4c>
  if (netmask == NULL) {
 800bede:	b187      	cbz	r7, 800bf02 <netif_set_addr+0x36>
  if (gw == NULL) {
 800bee0:	b196      	cbz	r6, 800bf08 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 800bee2:	682b      	ldr	r3, [r5, #0]
 800bee4:	b1a3      	cbz	r3, 800bf10 <netif_set_addr+0x44>
 800bee6:	2100      	movs	r1, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	68a2      	ldr	r2, [r4, #8]
 800beec:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800beee:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bef0:	bf18      	it	ne
 800bef2:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bef4:	6833      	ldr	r3, [r6, #0]
 800bef6:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bef8:	bf18      	it	ne
 800befa:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800befc:	b181      	cbz	r1, 800bf20 <netif_set_addr+0x54>
}
 800befe:	b003      	add	sp, #12
 800bf00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 800bf02:	4f1b      	ldr	r7, [pc, #108]	@ (800bf70 <netif_set_addr+0xa4>)
  if (gw == NULL) {
 800bf04:	2e00      	cmp	r6, #0
 800bf06:	d1ec      	bne.n	800bee2 <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 800bf08:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 800bf0a:	4e19      	ldr	r6, [pc, #100]	@ (800bf70 <netif_set_addr+0xa4>)
  remove = ip4_addr_isany(ipaddr);
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1ea      	bne.n	800bee6 <netif_set_addr+0x1a>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bf10:	6862      	ldr	r2, [r4, #4]
 800bf12:	b9da      	cbnz	r2, 800bf4c <netif_set_addr+0x80>
  remove = ip4_addr_isany(ipaddr);
 800bf14:	2101      	movs	r1, #1
 800bf16:	e7e7      	b.n	800bee8 <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 800bf18:	4d15      	ldr	r5, [pc, #84]	@ (800bf70 <netif_set_addr+0xa4>)
  if (netmask == NULL) {
 800bf1a:	2f00      	cmp	r7, #0
 800bf1c:	d1e0      	bne.n	800bee0 <netif_set_addr+0x14>
 800bf1e:	e7f0      	b.n	800bf02 <netif_set_addr+0x36>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bf20:	6863      	ldr	r3, [r4, #4]
 800bf22:	682a      	ldr	r2, [r5, #0]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d0ea      	beq.n	800befe <netif_set_addr+0x32>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bf28:	a901      	add	r1, sp, #4
 800bf2a:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bf2c:	e9cd 3200 	strd	r3, r2, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bf30:	f002 f8bc 	bl	800e0ac <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bf34:	a901      	add	r1, sp, #4
 800bf36:	4668      	mov	r0, sp
 800bf38:	f005 f9de 	bl	80112f8 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bf3c:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bf3e:	2101      	movs	r1, #1
 800bf40:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bf42:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bf44:	f7ff ff9e 	bl	800be84 <netif_issue_reports>
}
 800bf48:	b003      	add	sp, #12
 800bf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bf4c:	a901      	add	r1, sp, #4
 800bf4e:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bf50:	e9cd 2300 	strd	r2, r3, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bf54:	f002 f8aa 	bl	800e0ac <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bf58:	a901      	add	r1, sp, #4
 800bf5a:	4668      	mov	r0, sp
 800bf5c:	f005 f9cc 	bl	80112f8 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bf60:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bf62:	2101      	movs	r1, #1
 800bf64:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bf66:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bf68:	f7ff ff8c 	bl	800be84 <netif_issue_reports>
    return 1; /* address changed */
 800bf6c:	e7d2      	b.n	800bf14 <netif_set_addr+0x48>
 800bf6e:	bf00      	nop
 800bf70:	08016fdc 	.word	0x08016fdc

0800bf74 <netif_add>:
{
 800bf74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	4606      	mov	r6, r0
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	4615      	mov	r5, r2
 800bf7e:	461f      	mov	r7, r3
 800bf80:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 800bf84:	f7fb f9d2 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bf88:	2e00      	cmp	r6, #0
 800bf8a:	d07f      	beq.n	800c08c <netif_add+0x118>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bf8c:	f1b8 0f00 	cmp.w	r8, #0
 800bf90:	f000 8085 	beq.w	800c09e <netif_add+0x12a>
  if (ipaddr == NULL) {
 800bf94:	2c00      	cmp	r4, #0
 800bf96:	d070      	beq.n	800c07a <netif_add+0x106>
  if (netmask == NULL) {
 800bf98:	2d00      	cmp	r5, #0
 800bf9a:	d069      	beq.n	800c070 <netif_add+0xfc>
  if (gw == NULL) {
 800bf9c:	2f00      	cmp	r7, #0
 800bf9e:	d06a      	beq.n	800c076 <netif_add+0x102>
  netif->state = state;
 800bfa0:	980a      	ldr	r0, [sp, #40]	@ 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bfa2:	463b      	mov	r3, r7
  netif->num = netif_num;
 800bfa4:	f8df b124 	ldr.w	fp, [pc, #292]	@ 800c0cc <netif_add+0x158>
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bfa8:	462a      	mov	r2, r5
  netif->state = state;
 800bfaa:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bfac:	4621      	mov	r1, r4
  netif->input = input;
 800bfae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800bfb0:	6130      	str	r0, [r6, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	e9c6 0001 	strd	r0, r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 800bfb8:	60f0      	str	r0, [r6, #12]
  netif->mtu = 0;
 800bfba:	84b0      	strh	r0, [r6, #36]	@ 0x24
  netif->flags = 0;
 800bfbc:	f886 002d 	strb.w	r0, [r6, #45]	@ 0x2d
  netif->link_callback = NULL;
 800bfc0:	61f0      	str	r0, [r6, #28]
  netif->num = netif_num;
 800bfc2:	f89b 0000 	ldrb.w	r0, [fp]
 800bfc6:	f886 0030 	strb.w	r0, [r6, #48]	@ 0x30
  netif->output = netif_null_output_ip4;
 800bfca:	4839      	ldr	r0, [pc, #228]	@ (800c0b0 <netif_add+0x13c>)
 800bfcc:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f7ff ff7c 	bl	800becc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	47c0      	blx	r8
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d15e      	bne.n	800c09a <netif_add+0x126>
      if (netif->num == 255) {
 800bfdc:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 800bfe0:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800c0d0 <netif_add+0x15c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bfe4:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800c0c0 <netif_add+0x14c>
 800bfe8:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 800c0d4 <netif_add+0x160>
 800bfec:	4f31      	ldr	r7, [pc, #196]	@ (800c0b4 <netif_add+0x140>)
      if (netif->num == 255) {
 800bfee:	2bff      	cmp	r3, #255	@ 0xff
 800bff0:	d102      	bne.n	800bff8 <netif_add+0x84>
        netif->num = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bff8:	f8d9 4000 	ldr.w	r4, [r9]
 800bffc:	2c00      	cmp	r4, #0
 800bffe:	d042      	beq.n	800c086 <netif_add+0x112>
      num_netifs = 0;
 800c000:	2500      	movs	r5, #0
 800c002:	e007      	b.n	800c014 <netif_add+0xa0>
        if (netif2->num == netif->num) {
 800c004:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800c008:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d014      	beq.n	800c03a <netif_add+0xc6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c010:	6824      	ldr	r4, [r4, #0]
 800c012:	b1fc      	cbz	r4, 800c054 <netif_add+0xe0>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c014:	42a6      	cmp	r6, r4
        num_netifs++;
 800c016:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c01a:	d013      	beq.n	800c044 <netif_add+0xd0>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c01c:	2dff      	cmp	r5, #255	@ 0xff
 800c01e:	ddf1      	ble.n	800c004 <netif_add+0x90>
 800c020:	4643      	mov	r3, r8
 800c022:	f240 128d 	movw	r2, #397	@ 0x18d
 800c026:	4924      	ldr	r1, [pc, #144]	@ (800c0b8 <netif_add+0x144>)
 800c028:	4638      	mov	r0, r7
 800c02a:	f006 ff61 	bl	8012ef0 <iprintf>
        if (netif2->num == netif->num) {
 800c02e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800c032:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 800c036:	4293      	cmp	r3, r2
 800c038:	d1ea      	bne.n	800c010 <netif_add+0x9c>
          netif->num++;
 800c03a:	3301      	adds	r3, #1
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
    } while (netif2 != NULL);
 800c042:	e7d4      	b.n	800bfee <netif_add+0x7a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c044:	4643      	mov	r3, r8
 800c046:	f240 128b 	movw	r2, #395	@ 0x18b
 800c04a:	4651      	mov	r1, sl
 800c04c:	4638      	mov	r0, r7
 800c04e:	f006 ff4f 	bl	8012ef0 <iprintf>
 800c052:	e7e3      	b.n	800c01c <netif_add+0xa8>
  netif->next = netif_list;
 800c054:	f8d9 4000 	ldr.w	r4, [r9]
  if (netif->num == 254) {
 800c058:	2afe      	cmp	r2, #254	@ 0xfe
 800c05a:	d012      	beq.n	800c082 <netif_add+0x10e>
    netif_num = (u8_t)(netif->num + 1);
 800c05c:	1c53      	adds	r3, r2, #1
 800c05e:	b2db      	uxtb	r3, r3
  return netif;
 800c060:	4630      	mov	r0, r6
  netif->next = netif_list;
 800c062:	6034      	str	r4, [r6, #0]
 800c064:	f88b 3000 	strb.w	r3, [fp]
  netif_list = netif;
 800c068:	f8c9 6000 	str.w	r6, [r9]
}
 800c06c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c070:	4d12      	ldr	r5, [pc, #72]	@ (800c0bc <netif_add+0x148>)
  if (gw == NULL) {
 800c072:	2f00      	cmp	r7, #0
 800c074:	d194      	bne.n	800bfa0 <netif_add+0x2c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c076:	4f11      	ldr	r7, [pc, #68]	@ (800c0bc <netif_add+0x148>)
 800c078:	e792      	b.n	800bfa0 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c07a:	4c10      	ldr	r4, [pc, #64]	@ (800c0bc <netif_add+0x148>)
  if (netmask == NULL) {
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	d18d      	bne.n	800bf9c <netif_add+0x28>
 800c080:	e7f6      	b.n	800c070 <netif_add+0xfc>
    netif_num = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	e7ec      	b.n	800c060 <netif_add+0xec>
  if (netif->num == 254) {
 800c086:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 800c08a:	e7e5      	b.n	800c058 <netif_add+0xe4>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c08c:	4b0c      	ldr	r3, [pc, #48]	@ (800c0c0 <netif_add+0x14c>)
 800c08e:	f240 1227 	movw	r2, #295	@ 0x127
 800c092:	490c      	ldr	r1, [pc, #48]	@ (800c0c4 <netif_add+0x150>)
 800c094:	4807      	ldr	r0, [pc, #28]	@ (800c0b4 <netif_add+0x140>)
 800c096:	f006 ff2b 	bl	8012ef0 <iprintf>
 800c09a:	2000      	movs	r0, #0
 800c09c:	e7e6      	b.n	800c06c <netif_add+0xf8>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c09e:	4b08      	ldr	r3, [pc, #32]	@ (800c0c0 <netif_add+0x14c>)
 800c0a0:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c0a4:	4908      	ldr	r1, [pc, #32]	@ (800c0c8 <netif_add+0x154>)
 800c0a6:	4803      	ldr	r0, [pc, #12]	@ (800c0b4 <netif_add+0x140>)
 800c0a8:	f006 ff22 	bl	8012ef0 <iprintf>
 800c0ac:	e7f5      	b.n	800c09a <netif_add+0x126>
 800c0ae:	bf00      	nop
 800c0b0:	0800be7d 	.word	0x0800be7d
 800c0b4:	08014150 	.word	0x08014150
 800c0b8:	08015698 	.word	0x08015698
 800c0bc:	08016fdc 	.word	0x08016fdc
 800c0c0:	080155ec 	.word	0x080155ec
 800c0c4:	08015644 	.word	0x08015644
 800c0c8:	08015660 	.word	0x08015660
 800c0cc:	2400fcb3 	.word	0x2400fcb3
 800c0d0:	2400fcb8 	.word	0x2400fcb8
 800c0d4:	08015684 	.word	0x08015684

0800c0d8 <netif_set_default>:
{
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800c0dc:	f7fb f926 	bl	800732c <sys_check_core_locking>
  netif_default = netif;
 800c0e0:	4b01      	ldr	r3, [pc, #4]	@ (800c0e8 <netif_set_default+0x10>)
 800c0e2:	601c      	str	r4, [r3, #0]
}
 800c0e4:	bd10      	pop	{r4, pc}
 800c0e6:	bf00      	nop
 800c0e8:	2400fcb4 	.word	0x2400fcb4

0800c0ec <netif_set_up>:
{
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800c0f0:	f7fb f91c 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c0f4:	b174      	cbz	r4, 800c114 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c0f6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c0fa:	07da      	lsls	r2, r3, #31
 800c0fc:	d500      	bpl.n	800c100 <netif_set_up+0x14>
}
 800c0fe:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c100:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c104:	4620      	mov	r0, r4
 800c106:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c108:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 800c10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c110:	f7ff beb8 	b.w	800be84 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c114:	4b04      	ldr	r3, [pc, #16]	@ (800c128 <netif_set_up+0x3c>)
 800c116:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c11a:	4904      	ldr	r1, [pc, #16]	@ (800c12c <netif_set_up+0x40>)
 800c11c:	4804      	ldr	r0, [pc, #16]	@ (800c130 <netif_set_up+0x44>)
}
 800c11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c122:	f006 bee5 	b.w	8012ef0 <iprintf>
 800c126:	bf00      	nop
 800c128:	080155ec 	.word	0x080155ec
 800c12c:	080156c8 	.word	0x080156c8
 800c130:	08014150 	.word	0x08014150

0800c134 <netif_set_down>:
{
 800c134:	b510      	push	{r4, lr}
 800c136:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800c138:	f7fb f8f8 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c13c:	b17c      	cbz	r4, 800c15e <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 800c13e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c142:	07da      	lsls	r2, r3, #31
 800c144:	d505      	bpl.n	800c152 <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c146:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c14a:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c14c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c150:	d400      	bmi.n	800c154 <netif_set_down+0x20>
}
 800c152:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 800c154:	4620      	mov	r0, r4
}
 800c156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 800c15a:	f005 babd 	b.w	80116d8 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c15e:	4b04      	ldr	r3, [pc, #16]	@ (800c170 <netif_set_down+0x3c>)
 800c160:	f240 329b 	movw	r2, #923	@ 0x39b
 800c164:	4903      	ldr	r1, [pc, #12]	@ (800c174 <netif_set_down+0x40>)
 800c166:	4804      	ldr	r0, [pc, #16]	@ (800c178 <netif_set_down+0x44>)
}
 800c168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c16c:	f006 bec0 	b.w	8012ef0 <iprintf>
 800c170:	080155ec 	.word	0x080155ec
 800c174:	080156e4 	.word	0x080156e4
 800c178:	08014150 	.word	0x08014150

0800c17c <netif_set_link_up>:
{
 800c17c:	b510      	push	{r4, lr}
 800c17e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800c180:	f7fb f8d4 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c184:	b19c      	cbz	r4, 800c1ae <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c186:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c18a:	075a      	lsls	r2, r3, #29
 800c18c:	d500      	bpl.n	800c190 <netif_set_link_up+0x14>
}
 800c18e:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c190:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c194:	2103      	movs	r1, #3
 800c196:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c198:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c19c:	f7ff fe72 	bl	800be84 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800c1a0:	69e3      	ldr	r3, [r4, #28]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d0f3      	beq.n	800c18e <netif_set_link_up+0x12>
 800c1a6:	4620      	mov	r0, r4
}
 800c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800c1ac:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c1ae:	4b04      	ldr	r3, [pc, #16]	@ (800c1c0 <netif_set_link_up+0x44>)
 800c1b0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c1b4:	4903      	ldr	r1, [pc, #12]	@ (800c1c4 <netif_set_link_up+0x48>)
 800c1b6:	4804      	ldr	r0, [pc, #16]	@ (800c1c8 <netif_set_link_up+0x4c>)
}
 800c1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c1bc:	f006 be98 	b.w	8012ef0 <iprintf>
 800c1c0:	080155ec 	.word	0x080155ec
 800c1c4:	08015704 	.word	0x08015704
 800c1c8:	08014150 	.word	0x08014150

0800c1cc <netif_set_link_down>:
{
 800c1cc:	b510      	push	{r4, lr}
 800c1ce:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800c1d0:	f7fb f8ac 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c1d4:	b174      	cbz	r4, 800c1f4 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c1d6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800c1da:	075a      	lsls	r2, r3, #29
 800c1dc:	d509      	bpl.n	800c1f2 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c1de:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800c1e2:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c1e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c1e8:	b11a      	cbz	r2, 800c1f2 <netif_set_link_down+0x26>
 800c1ea:	4620      	mov	r0, r4
}
 800c1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800c1f0:	4710      	bx	r2
}
 800c1f2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c1f4:	4b04      	ldr	r3, [pc, #16]	@ (800c208 <netif_set_link_down+0x3c>)
 800c1f6:	f240 4206 	movw	r2, #1030	@ 0x406
 800c1fa:	4904      	ldr	r1, [pc, #16]	@ (800c20c <netif_set_link_down+0x40>)
 800c1fc:	4804      	ldr	r0, [pc, #16]	@ (800c210 <netif_set_link_down+0x44>)
}
 800c1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c202:	f006 be75 	b.w	8012ef0 <iprintf>
 800c206:	bf00      	nop
 800c208:	080155ec 	.word	0x080155ec
 800c20c:	08015728 	.word	0x08015728
 800c210:	08014150 	.word	0x08014150

0800c214 <netif_set_link_callback>:
{
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800c21a:	f7fb f887 	bl	800732c <sys_check_core_locking>
  if (netif) {
 800c21e:	b104      	cbz	r4, 800c222 <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 800c220:	61e5      	str	r5, [r4, #28]
}
 800c222:	bd38      	pop	{r3, r4, r5, pc}

0800c224 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c224:	b510      	push	{r4, lr}
 800c226:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800c228:	f7fb f880 	bl	800732c <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800c22c:	b164      	cbz	r4, 800c248 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 800c22e:	4b07      	ldr	r3, [pc, #28]	@ (800c24c <netif_get_by_index+0x28>)
 800c230:	6818      	ldr	r0, [r3, #0]
 800c232:	b910      	cbnz	r0, 800c23a <netif_get_by_index+0x16>
 800c234:	e007      	b.n	800c246 <netif_get_by_index+0x22>
 800c236:	6800      	ldr	r0, [r0, #0]
 800c238:	b128      	cbz	r0, 800c246 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 800c23a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800c23e:	3301      	adds	r3, #1
 800c240:	b2db      	uxtb	r3, r3
 800c242:	42a3      	cmp	r3, r4
 800c244:	d1f7      	bne.n	800c236 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 800c246:	bd10      	pop	{r4, pc}
  return NULL;
 800c248:	4620      	mov	r0, r4
}
 800c24a:	bd10      	pop	{r4, pc}
 800c24c:	2400fcb8 	.word	0x2400fcb8

0800c250 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c250:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c252:	f006 fd0b 	bl	8012c6c <sys_arch_protect>
 800c256:	4b09      	ldr	r3, [pc, #36]	@ (800c27c <pbuf_free_ooseq_callback+0x2c>)
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]
 800c25c:	f006 fd12 	bl	8012c84 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c260:	4b07      	ldr	r3, [pc, #28]	@ (800c280 <pbuf_free_ooseq_callback+0x30>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	b910      	cbnz	r0, 800c26c <pbuf_free_ooseq_callback+0x1c>
 800c266:	e008      	b.n	800c27a <pbuf_free_ooseq_callback+0x2a>
 800c268:	68c0      	ldr	r0, [r0, #12]
 800c26a:	b130      	cbz	r0, 800c27a <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 800c26c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d0fa      	beq.n	800c268 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 800c272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 800c276:	f001 bf43 	b.w	800e100 <tcp_free_ooseq>
}
 800c27a:	bd08      	pop	{r3, pc}
 800c27c:	2400fcbc 	.word	0x2400fcbc
 800c280:	2400fcc4 	.word	0x2400fcc4

0800c284 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c284:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c286:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800c28a:	2500      	movs	r5, #0
{
 800c28c:	4614      	mov	r4, r2
 800c28e:	4606      	mov	r6, r0
 800c290:	f361 050f 	bfi	r5, r1, #0, #16
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c294:	2b01      	cmp	r3, #1
 800c296:	f361 451f 	bfi	r5, r1, #16, #16
 800c29a:	d10c      	bne.n	800c2b6 <pbuf_alloc_reference+0x32>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c29c:	200b      	movs	r0, #11
 800c29e:	f7ff fd79 	bl	800bd94 <memp_malloc>
  if (p == NULL) {
 800c2a2:	b138      	cbz	r0, 800c2b4 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 800c2a4:	2300      	movs	r3, #0
  p->ref = 1;
 800c2a6:	2201      	movs	r2, #1
  p->payload = payload;
 800c2a8:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800c2aa:	6085      	str	r5, [r0, #8]
  p->next = NULL;
 800c2ac:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800c2ae:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800c2b0:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800c2b2:	81c2      	strh	r2, [r0, #14]
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
  return p;
}
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c2b6:	4b04      	ldr	r3, [pc, #16]	@ (800c2c8 <pbuf_alloc_reference+0x44>)
 800c2b8:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c2bc:	4903      	ldr	r1, [pc, #12]	@ (800c2cc <pbuf_alloc_reference+0x48>)
 800c2be:	4804      	ldr	r0, [pc, #16]	@ (800c2d0 <pbuf_alloc_reference+0x4c>)
 800c2c0:	f006 fe16 	bl	8012ef0 <iprintf>
 800c2c4:	e7ea      	b.n	800c29c <pbuf_alloc_reference+0x18>
 800c2c6:	bf00      	nop
 800c2c8:	0801574c 	.word	0x0801574c
 800c2cc:	0801577c 	.word	0x0801577c
 800c2d0:	08014150 	.word	0x08014150

0800c2d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c2d4:	b430      	push	{r4, r5}
  u16_t offset = (u16_t)l;
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c2d6:	3003      	adds	r0, #3
 800c2d8:	2400      	movs	r4, #0
{
 800c2da:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800c2de:	f361 040f 	bfi	r4, r1, #0, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c2e2:	f020 0003 	bic.w	r0, r0, #3
{
 800c2e6:	9d02      	ldr	r5, [sp, #8]
 800c2e8:	f361 441f 	bfi	r4, r1, #16, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c2ec:	4401      	add	r1, r0
 800c2ee:	4561      	cmp	r1, ip
 800c2f0:	d80d      	bhi.n	800c30e <pbuf_alloced_custom+0x3a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  if (payload_mem != NULL) {
 800c2f2:	b105      	cbz	r5, 800c2f6 <pbuf_alloced_custom+0x22>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c2f4:	4405      	add	r5, r0
  } else {
    payload = NULL;
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c2f6:	4618      	mov	r0, r3
  p->next = NULL;
 800c2f8:	2300      	movs	r3, #0
  p->flags = flags;
 800c2fa:	2102      	movs	r1, #2
  p->next = NULL;
 800c2fc:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 800c2fe:	2301      	movs	r3, #1
  p->payload = payload;
 800c300:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 800c302:	6084      	str	r4, [r0, #8]
  p->type_internal = (u8_t)type;
 800c304:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800c306:	7341      	strb	r1, [r0, #13]
  p->ref = 1;
 800c308:	81c3      	strh	r3, [r0, #14]
  return &p->pbuf;
}
 800c30a:	bc30      	pop	{r4, r5}
 800c30c:	4770      	bx	lr
    return NULL;
 800c30e:	2000      	movs	r0, #0
}
 800c310:	bc30      	pop	{r4, r5}
 800c312:	4770      	bx	lr

0800c314 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c314:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c316:	b1f0      	cbz	r0, 800c356 <pbuf_add_header+0x42>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c318:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800c31c:	d20b      	bcs.n	800c336 <pbuf_add_header+0x22>
  if (header_size_increment == 0) {
 800c31e:	b1c1      	cbz	r1, 800c352 <pbuf_add_header+0x3e>
  increment_magnitude = (u16_t)header_size_increment;
 800c320:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c322:	8903      	ldrh	r3, [r0, #8]
 800c324:	4413      	add	r3, r2
 800c326:	b29b      	uxth	r3, r3
 800c328:	429a      	cmp	r2, r3
 800c32a:	d804      	bhi.n	800c336 <pbuf_add_header+0x22>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c32c:	f990 c00c 	ldrsb.w	ip, [r0, #12]
 800c330:	f1bc 0f00 	cmp.w	ip, #0
 800c334:	db01      	blt.n	800c33a <pbuf_add_header+0x26>
    return 1;
 800c336:	2001      	movs	r0, #1
  return pbuf_add_header_impl(p, header_size_increment, 0);
}
 800c338:	bd10      	pop	{r4, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 800c33a:	6844      	ldr	r4, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c33c:	f100 0c10 	add.w	ip, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 800c340:	1a61      	subs	r1, r4, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c342:	4561      	cmp	r1, ip
 800c344:	d3f7      	bcc.n	800c336 <pbuf_add_header+0x22>
  p->len = (u16_t)(p->len + increment_magnitude);
 800c346:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  p->payload = payload;
 800c34a:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c34c:	4462      	add	r2, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c34e:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c350:	8142      	strh	r2, [r0, #10]
    return 0;
 800c352:	2000      	movs	r0, #0
}
 800c354:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c356:	4b04      	ldr	r3, [pc, #16]	@ (800c368 <pbuf_add_header+0x54>)
 800c358:	f240 12df 	movw	r2, #479	@ 0x1df
 800c35c:	4903      	ldr	r1, [pc, #12]	@ (800c36c <pbuf_add_header+0x58>)
 800c35e:	4804      	ldr	r0, [pc, #16]	@ (800c370 <pbuf_add_header+0x5c>)
 800c360:	f006 fdc6 	bl	8012ef0 <iprintf>
    return 1;
 800c364:	2001      	movs	r0, #1
 800c366:	e7e7      	b.n	800c338 <pbuf_add_header+0x24>
 800c368:	0801574c 	.word	0x0801574c
 800c36c:	08014d9c 	.word	0x08014d9c
 800c370:	08014150 	.word	0x08014150

0800c374 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c374:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c376:	b188      	cbz	r0, 800c39c <pbuf_remove_header+0x28>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c378:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800c37c:	d215      	bcs.n	800c3aa <pbuf_remove_header+0x36>
    return 1;
  }
  if (header_size_decrement == 0) {
 800c37e:	b159      	cbz	r1, 800c398 <pbuf_remove_header+0x24>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c380:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c382:	8943      	ldrh	r3, [r0, #10]
 800c384:	4293      	cmp	r3, r2
 800c386:	d312      	bcc.n	800c3ae <pbuf_remove_header+0x3a>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c388:	6844      	ldr	r4, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c38a:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c38c:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c38e:	8901      	ldrh	r1, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800c390:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c392:	1a8b      	subs	r3, r1, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c394:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c396:	8103      	strh	r3, [r0, #8]
    return 0;
 800c398:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
}
 800c39a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c39c:	4b08      	ldr	r3, [pc, #32]	@ (800c3c0 <pbuf_remove_header+0x4c>)
 800c39e:	f240 224b 	movw	r2, #587	@ 0x24b
 800c3a2:	4908      	ldr	r1, [pc, #32]	@ (800c3c4 <pbuf_remove_header+0x50>)
 800c3a4:	4808      	ldr	r0, [pc, #32]	@ (800c3c8 <pbuf_remove_header+0x54>)
 800c3a6:	f006 fda3 	bl	8012ef0 <iprintf>
    return 1;
 800c3aa:	2001      	movs	r0, #1
}
 800c3ac:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c3ae:	4b04      	ldr	r3, [pc, #16]	@ (800c3c0 <pbuf_remove_header+0x4c>)
 800c3b0:	f240 2255 	movw	r2, #597	@ 0x255
 800c3b4:	4905      	ldr	r1, [pc, #20]	@ (800c3cc <pbuf_remove_header+0x58>)
 800c3b6:	4804      	ldr	r0, [pc, #16]	@ (800c3c8 <pbuf_remove_header+0x54>)
 800c3b8:	f006 fd9a 	bl	8012ef0 <iprintf>
 800c3bc:	e7f5      	b.n	800c3aa <pbuf_remove_header+0x36>
 800c3be:	bf00      	nop
 800c3c0:	0801574c 	.word	0x0801574c
 800c3c4:	08014d9c 	.word	0x08014d9c
 800c3c8:	08014150 	.word	0x08014150
 800c3cc:	08015790 	.word	0x08015790

0800c3d0 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	db19      	blt.n	800c408 <pbuf_header_force+0x38>
  LWIP_ASSERT("p != NULL", p != NULL);
 800c3d4:	4603      	mov	r3, r0
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c3d6:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800c3d8:	b1c8      	cbz	r0, 800c40e <pbuf_header_force+0x3e>
  if (header_size_increment == 0) {
 800c3da:	b199      	cbz	r1, 800c404 <pbuf_header_force+0x34>
  increment_magnitude = (u16_t)header_size_increment;
 800c3dc:	b288      	uxth	r0, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c3de:	891a      	ldrh	r2, [r3, #8]
 800c3e0:	4402      	add	r2, r0
 800c3e2:	b292      	uxth	r2, r2
 800c3e4:	4290      	cmp	r0, r2
 800c3e6:	d819      	bhi.n	800c41c <pbuf_header_force+0x4c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c3e8:	f993 c00c 	ldrsb.w	ip, [r3, #12]
    payload = (u8_t *)p->payload - header_size_increment;
 800c3ec:	685c      	ldr	r4, [r3, #4]
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c3ee:	f1bc 0f00 	cmp.w	ip, #0
    payload = (u8_t *)p->payload - header_size_increment;
 800c3f2:	eba4 0101 	sub.w	r1, r4, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c3f6:	db13      	blt.n	800c420 <pbuf_header_force+0x50>
  p->len = (u16_t)(p->len + increment_magnitude);
 800c3f8:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
  p->payload = payload;
 800c3fc:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c3fe:	4460      	add	r0, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c400:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c402:	8158      	strh	r0, [r3, #10]
    return 0;
 800c404:	2000      	movs	r0, #0
  return pbuf_header_impl(p, header_size_increment, 1);
}
 800c406:	bd10      	pop	{r4, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c408:	4249      	negs	r1, r1
 800c40a:	f7ff bfb3 	b.w	800c374 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800c40e:	4b07      	ldr	r3, [pc, #28]	@ (800c42c <pbuf_header_force+0x5c>)
 800c410:	f240 12df 	movw	r2, #479	@ 0x1df
 800c414:	4906      	ldr	r1, [pc, #24]	@ (800c430 <pbuf_header_force+0x60>)
 800c416:	4807      	ldr	r0, [pc, #28]	@ (800c434 <pbuf_header_force+0x64>)
 800c418:	f006 fd6a 	bl	8012ef0 <iprintf>
    return 1;
 800c41c:	2001      	movs	r0, #1
}
 800c41e:	bd10      	pop	{r4, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c420:	f103 0c10 	add.w	ip, r3, #16
 800c424:	4561      	cmp	r1, ip
 800c426:	d2e7      	bcs.n	800c3f8 <pbuf_header_force+0x28>
 800c428:	e7f8      	b.n	800c41c <pbuf_header_force+0x4c>
 800c42a:	bf00      	nop
 800c42c:	0801574c 	.word	0x0801574c
 800c430:	08014d9c 	.word	0x08014d9c
 800c434:	08014150 	.word	0x08014150

0800c438 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c43c:	4605      	mov	r5, r0
 800c43e:	2800      	cmp	r0, #0
 800c440:	d055      	beq.n	800c4ee <pbuf_free+0xb6>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c442:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c444:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c508 <pbuf_free+0xd0>
 800c448:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800c514 <pbuf_free+0xdc>
 800c44c:	4f2c      	ldr	r7, [pc, #176]	@ (800c500 <pbuf_free+0xc8>)
 800c44e:	e008      	b.n	800c462 <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c450:	692b      	ldr	r3, [r5, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d03d      	beq.n	800c4d2 <pbuf_free+0x9a>
        pc->custom_free_function(p);
 800c456:	4628      	mov	r0, r5
 800c458:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 800c45a:	3601      	adds	r6, #1
 800c45c:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800c45e:	b1fc      	cbz	r4, 800c4a0 <pbuf_free+0x68>
      /* proceed to next pbuf */
      p = q;
 800c460:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800c462:	f006 fc03 	bl	8012c6c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c466:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800c468:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c46a:	b1e3      	cbz	r3, 800c4a6 <pbuf_free+0x6e>
    ref = --(p->ref);
 800c46c:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800c46e:	4620      	mov	r0, r4
    ref = --(p->ref);
 800c470:	b2dc      	uxtb	r4, r3
 800c472:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800c474:	f006 fc06 	bl	8012c84 <sys_arch_unprotect>
    if (ref == 0) {
 800c478:	b994      	cbnz	r4, 800c4a0 <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c47a:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 800c47c:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c47e:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800c480:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c482:	d4e5      	bmi.n	800c450 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800c484:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d01d      	beq.n	800c4c8 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d029      	beq.n	800c4e4 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c490:	b993      	cbnz	r3, 800c4b8 <pbuf_free+0x80>
      count++;
 800c492:	3601      	adds	r6, #1
          mem_free(p);
 800c494:	4628      	mov	r0, r5
 800c496:	f7ff f9b9 	bl	800b80c <mem_free>
      count++;
 800c49a:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800c49c:	2c00      	cmp	r4, #0
 800c49e:	d1df      	bne.n	800c460 <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c4a6:	4643      	mov	r3, r8
 800c4a8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c4ac:	4649      	mov	r1, r9
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f006 fd1e 	bl	8012ef0 <iprintf>
    ref = --(p->ref);
 800c4b4:	7bab      	ldrb	r3, [r5, #14]
 800c4b6:	e7d9      	b.n	800c46c <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800c4b8:	4643      	mov	r3, r8
 800c4ba:	f240 320f 	movw	r2, #783	@ 0x30f
 800c4be:	4911      	ldr	r1, [pc, #68]	@ (800c504 <pbuf_free+0xcc>)
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	f006 fd15 	bl	8012ef0 <iprintf>
 800c4c6:	e7c8      	b.n	800c45a <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	200c      	movs	r0, #12
 800c4cc:	f7ff fca8 	bl	800be20 <memp_free>
 800c4d0:	e7c3      	b.n	800c45a <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c508 <pbuf_free+0xd0>)
 800c4d4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c4d8:	490c      	ldr	r1, [pc, #48]	@ (800c50c <pbuf_free+0xd4>)
 800c4da:	4809      	ldr	r0, [pc, #36]	@ (800c500 <pbuf_free+0xc8>)
 800c4dc:	f006 fd08 	bl	8012ef0 <iprintf>
        pc->custom_free_function(p);
 800c4e0:	692b      	ldr	r3, [r5, #16]
 800c4e2:	e7b8      	b.n	800c456 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	200b      	movs	r0, #11
 800c4e8:	f7ff fc9a 	bl	800be20 <memp_free>
 800c4ec:	e7b5      	b.n	800c45a <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c4ee:	4b06      	ldr	r3, [pc, #24]	@ (800c508 <pbuf_free+0xd0>)
 800c4f0:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c4f4:	4906      	ldr	r1, [pc, #24]	@ (800c510 <pbuf_free+0xd8>)
    return 0;
 800c4f6:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 800c4f8:	4801      	ldr	r0, [pc, #4]	@ (800c500 <pbuf_free+0xc8>)
 800c4fa:	f006 fcf9 	bl	8012ef0 <iprintf>
    return 0;
 800c4fe:	e7cf      	b.n	800c4a0 <pbuf_free+0x68>
 800c500:	08014150 	.word	0x08014150
 800c504:	080157ec 	.word	0x080157ec
 800c508:	0801574c 	.word	0x0801574c
 800c50c:	080157c8 	.word	0x080157c8
 800c510:	08014d9c 	.word	0x08014d9c
 800c514:	080157b0 	.word	0x080157b0

0800c518 <pbuf_alloc>:
  switch (type) {
 800c518:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 800c51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c520:	460c      	mov	r4, r1
 800c522:	b083      	sub	sp, #12
  switch (type) {
 800c524:	d03e      	beq.n	800c5a4 <pbuf_alloc+0x8c>
 800c526:	d810      	bhi.n	800c54a <pbuf_alloc+0x32>
 800c528:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d033      	beq.n	800c598 <pbuf_alloc+0x80>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c530:	4b43      	ldr	r3, [pc, #268]	@ (800c640 <pbuf_alloc+0x128>)
 800c532:	f240 1227 	movw	r2, #295	@ 0x127
 800c536:	4943      	ldr	r1, [pc, #268]	@ (800c644 <pbuf_alloc+0x12c>)
 800c538:	4843      	ldr	r0, [pc, #268]	@ (800c648 <pbuf_alloc+0x130>)
 800c53a:	f006 fcd9 	bl	8012ef0 <iprintf>
          return NULL;
 800c53e:	f04f 0800 	mov.w	r8, #0
}
 800c542:	4640      	mov	r0, r8
 800c544:	b003      	add	sp, #12
 800c546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 800c54a:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 800c54e:	d1ef      	bne.n	800c530 <pbuf_alloc+0x18>
 800c550:	4605      	mov	r5, r0
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c552:	1ccb      	adds	r3, r1, #3
 800c554:	3003      	adds	r0, #3
 800c556:	f023 0303 	bic.w	r3, r3, #3
 800c55a:	f020 0003 	bic.w	r0, r0, #3
 800c55e:	4418      	add	r0, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c560:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c562:	4298      	cmp	r0, r3
 800c564:	d3eb      	bcc.n	800c53e <pbuf_alloc+0x26>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c566:	3010      	adds	r0, #16
 800c568:	f7ff fae8 	bl	800bb3c <mem_malloc>
      if (p == NULL) {
 800c56c:	4680      	mov	r8, r0
 800c56e:	2800      	cmp	r0, #0
 800c570:	d0e7      	beq.n	800c542 <pbuf_alloc+0x2a>
  p->next = NULL;
 800c572:	2200      	movs	r2, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c574:	4405      	add	r5, r0
  p->type_internal = (u8_t)type;
 800c576:	4935      	ldr	r1, [pc, #212]	@ (800c64c <pbuf_alloc+0x134>)
  p->tot_len = tot_len;
 800c578:	4613      	mov	r3, r2
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c57a:	3513      	adds	r5, #19
  p->type_internal = (u8_t)type;
 800c57c:	60c1      	str	r1, [r0, #12]
  p->tot_len = tot_len;
 800c57e:	f364 030f 	bfi	r3, r4, #0, #16
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c582:	f025 0503 	bic.w	r5, r5, #3
  p->tot_len = tot_len;
 800c586:	f364 431f 	bfi	r3, r4, #16, #16
  p->payload = payload;
 800c58a:	e9c0 2500 	strd	r2, r5, [r0]
  p->tot_len = tot_len;
 800c58e:	6083      	str	r3, [r0, #8]
}
 800c590:	4640      	mov	r0, r8
 800c592:	b003      	add	sp, #12
 800c594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800c598:	2000      	movs	r0, #0
}
 800c59a:	b003      	add	sp, #12
 800c59c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800c5a0:	f7ff be70 	b.w	800c284 <pbuf_alloc_reference>
  switch (type) {
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4681      	mov	r9, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c5a8:	f240 56ec 	movw	r6, #1516	@ 0x5ec
  p->type_internal = (u8_t)type;
 800c5ac:	4d28      	ldr	r5, [pc, #160]	@ (800c650 <pbuf_alloc+0x138>)
  switch (type) {
 800c5ae:	4688      	mov	r8, r1
 800c5b0:	e006      	b.n	800c5c0 <pbuf_alloc+0xa8>
          last->next = q;
 800c5b2:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800c5b4:	1ae3      	subs	r3, r4, r3
        offset = 0;
 800c5b6:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800c5ba:	b29c      	uxth	r4, r3
      } while (rem_len > 0);
 800c5bc:	2c00      	cmp	r4, #0
 800c5be:	d0c0      	beq.n	800c542 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c5c0:	200c      	movs	r0, #12
 800c5c2:	460f      	mov	r7, r1
 800c5c4:	f7ff fbe6 	bl	800bd94 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c5c8:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 800c5cc:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	b1b0      	cbz	r0, 800c602 <pbuf_alloc+0xea>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c5d4:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c5d8:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 800c5dc:	8104      	strh	r4, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c5de:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c5e0:	3213      	adds	r2, #19
  p->next = NULL;
 800c5e2:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c5e6:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c5e8:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 800c5ec:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c5ee:	42a3      	cmp	r3, r4
  p->payload = payload;
 800c5f0:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c5f2:	bf28      	it	cs
 800c5f4:	4623      	movcs	r3, r4
  p->len = len;
 800c5f6:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800c5f8:	f1b8 0f00 	cmp.w	r8, #0
 800c5fc:	d1d9      	bne.n	800c5b2 <pbuf_alloc+0x9a>
 800c5fe:	4680      	mov	r8, r0
 800c600:	e7d8      	b.n	800c5b4 <pbuf_alloc+0x9c>
  queued = pbuf_free_ooseq_pending;
 800c602:	4d14      	ldr	r5, [pc, #80]	@ (800c654 <pbuf_alloc+0x13c>)
 800c604:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800c606:	f006 fb31 	bl	8012c6c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800c60a:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 800c60c:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800c60e:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 800c610:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c612:	f006 fb37 	bl	8012c84 <sys_arch_unprotect>
  if (!queued) {
 800c616:	9901      	ldr	r1, [sp, #4]
 800c618:	b134      	cbz	r4, 800c628 <pbuf_alloc+0x110>
          if (p) {
 800c61a:	f1b8 0f00 	cmp.w	r8, #0
 800c61e:	d08e      	beq.n	800c53e <pbuf_alloc+0x26>
            pbuf_free(p);
 800c620:	4640      	mov	r0, r8
 800c622:	f7ff ff09 	bl	800c438 <pbuf_free>
 800c626:	e78a      	b.n	800c53e <pbuf_alloc+0x26>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c628:	480b      	ldr	r0, [pc, #44]	@ (800c658 <pbuf_alloc+0x140>)
 800c62a:	f7fe ffb1 	bl	800b590 <tcpip_try_callback>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d0f3      	beq.n	800c61a <pbuf_alloc+0x102>
 800c632:	f006 fb1b 	bl	8012c6c <sys_arch_protect>
 800c636:	9901      	ldr	r1, [sp, #4]
 800c638:	7029      	strb	r1, [r5, #0]
 800c63a:	f006 fb23 	bl	8012c84 <sys_arch_unprotect>
 800c63e:	e7ec      	b.n	800c61a <pbuf_alloc+0x102>
 800c640:	0801574c 	.word	0x0801574c
 800c644:	08015800 	.word	0x08015800
 800c648:	08014150 	.word	0x08014150
 800c64c:	00010080 	.word	0x00010080
 800c650:	00010082 	.word	0x00010082
 800c654:	2400fcbc 	.word	0x2400fcbc
 800c658:	0800c251 	.word	0x0800c251

0800c65c <pbuf_realloc>:
{
 800c65c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c65e:	4604      	mov	r4, r0
{
 800c660:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c662:	2800      	cmp	r0, #0
 800c664:	d03a      	beq.n	800c6dc <pbuf_realloc+0x80>
  if (new_len >= p->tot_len) {
 800c666:	8922      	ldrh	r2, [r4, #8]
 800c668:	42aa      	cmp	r2, r5
 800c66a:	d91f      	bls.n	800c6ac <pbuf_realloc+0x50>
  while (rem_len > q->len) {
 800c66c:	8963      	ldrh	r3, [r4, #10]
 800c66e:	429d      	cmp	r5, r3
 800c670:	d90d      	bls.n	800c68e <pbuf_realloc+0x32>
 800c672:	1aa9      	subs	r1, r5, r2
 800c674:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c676:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 800c678:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c67a:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800c67c:	b29d      	uxth	r5, r3
    q = q->next;
 800c67e:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c680:	2c00      	cmp	r4, #0
 800c682:	d033      	beq.n	800c6ec <pbuf_realloc+0x90>
  while (rem_len > q->len) {
 800c684:	8963      	ldrh	r3, [r4, #10]
 800c686:	42ab      	cmp	r3, r5
 800c688:	d201      	bcs.n	800c68e <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c68a:	8922      	ldrh	r2, [r4, #8]
 800c68c:	e7f3      	b.n	800c676 <pbuf_realloc+0x1a>
 800c68e:	2600      	movs	r6, #0
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c690:	7b22      	ldrb	r2, [r4, #12]
 800c692:	f365 060f 	bfi	r6, r5, #0, #16
 800c696:	0712      	lsls	r2, r2, #28
 800c698:	f365 461f 	bfi	r6, r5, #16, #16
 800c69c:	d007      	beq.n	800c6ae <pbuf_realloc+0x52>
  if (q->next != NULL) {
 800c69e:	6820      	ldr	r0, [r4, #0]
  q->tot_len = q->len;
 800c6a0:	60a6      	str	r6, [r4, #8]
  if (q->next != NULL) {
 800c6a2:	b108      	cbz	r0, 800c6a8 <pbuf_realloc+0x4c>
    pbuf_free(q->next);
 800c6a4:	f7ff fec8 	bl	800c438 <pbuf_free>
  q->next = NULL;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	6023      	str	r3, [r4, #0]
}
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c6ae:	42ab      	cmp	r3, r5
 800c6b0:	d0f5      	beq.n	800c69e <pbuf_realloc+0x42>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c6b2:	7b63      	ldrb	r3, [r4, #13]
 800c6b4:	079b      	lsls	r3, r3, #30
 800c6b6:	d4f2      	bmi.n	800c69e <pbuf_realloc+0x42>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c6b8:	6863      	ldr	r3, [r4, #4]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	1b1b      	subs	r3, r3, r4
 800c6be:	1959      	adds	r1, r3, r5
 800c6c0:	f7ff f98a 	bl	800b9d8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d1e9      	bne.n	800c69e <pbuf_realloc+0x42>
 800c6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c700 <pbuf_realloc+0xa4>)
 800c6cc:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c6d0:	490c      	ldr	r1, [pc, #48]	@ (800c704 <pbuf_realloc+0xa8>)
 800c6d2:	480d      	ldr	r0, [pc, #52]	@ (800c708 <pbuf_realloc+0xac>)
 800c6d4:	f006 fc0c 	bl	8012ef0 <iprintf>
  q->len = rem_len;
 800c6d8:	8164      	strh	r4, [r4, #10]
 800c6da:	deff      	udf	#255	@ 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c6dc:	4b08      	ldr	r3, [pc, #32]	@ (800c700 <pbuf_realloc+0xa4>)
 800c6de:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c6e2:	490a      	ldr	r1, [pc, #40]	@ (800c70c <pbuf_realloc+0xb0>)
 800c6e4:	4808      	ldr	r0, [pc, #32]	@ (800c708 <pbuf_realloc+0xac>)
 800c6e6:	f006 fc03 	bl	8012ef0 <iprintf>
 800c6ea:	e7bc      	b.n	800c666 <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c6ec:	4b04      	ldr	r3, [pc, #16]	@ (800c700 <pbuf_realloc+0xa4>)
 800c6ee:	f240 12af 	movw	r2, #431	@ 0x1af
 800c6f2:	4907      	ldr	r1, [pc, #28]	@ (800c710 <pbuf_realloc+0xb4>)
 800c6f4:	4804      	ldr	r0, [pc, #16]	@ (800c708 <pbuf_realloc+0xac>)
 800c6f6:	f006 fbfb 	bl	8012ef0 <iprintf>
  while (rem_len > q->len) {
 800c6fa:	8963      	ldrh	r3, [r4, #10]
 800c6fc:	deff      	udf	#255	@ 0xff
 800c6fe:	bf00      	nop
 800c700:	0801574c 	.word	0x0801574c
 800c704:	0801584c 	.word	0x0801584c
 800c708:	08014150 	.word	0x08014150
 800c70c:	0801581c 	.word	0x0801581c
 800c710:	08015834 	.word	0x08015834

0800c714 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800c714:	4603      	mov	r3, r0
 800c716:	b130      	cbz	r0, 800c726 <pbuf_clen+0x12>
  len = 0;
 800c718:	2000      	movs	r0, #0
    ++len;
 800c71a:	3001      	adds	r0, #1
    p = p->next;
 800c71c:	681b      	ldr	r3, [r3, #0]
    ++len;
 800c71e:	b280      	uxth	r0, r0
  while (p != NULL) {
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1fa      	bne.n	800c71a <pbuf_clen+0x6>
 800c724:	4770      	bx	lr
  }
  return len;
}
 800c726:	4770      	bx	lr

0800c728 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800c728:	b158      	cbz	r0, 800c742 <pbuf_ref+0x1a>
{
 800c72a:	b510      	push	{r4, lr}
 800c72c:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c72e:	f006 fa9d 	bl	8012c6c <sys_arch_protect>
 800c732:	7ba3      	ldrb	r3, [r4, #14]
 800c734:	3301      	adds	r3, #1
 800c736:	73a3      	strb	r3, [r4, #14]
 800c738:	f006 faa4 	bl	8012c84 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c73c:	7ba3      	ldrb	r3, [r4, #14]
 800c73e:	b10b      	cbz	r3, 800c744 <pbuf_ref+0x1c>
  }
}
 800c740:	bd10      	pop	{r4, pc}
 800c742:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c744:	4b04      	ldr	r3, [pc, #16]	@ (800c758 <pbuf_ref+0x30>)
 800c746:	f240 3242 	movw	r2, #834	@ 0x342
 800c74a:	4904      	ldr	r1, [pc, #16]	@ (800c75c <pbuf_ref+0x34>)
 800c74c:	4804      	ldr	r0, [pc, #16]	@ (800c760 <pbuf_ref+0x38>)
}
 800c74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c752:	f006 bbcd 	b.w	8012ef0 <iprintf>
 800c756:	bf00      	nop
 800c758:	0801574c 	.word	0x0801574c
 800c75c:	08015868 	.word	0x08015868
 800c760:	08014150 	.word	0x08014150

0800c764 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c764:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c766:	2800      	cmp	r0, #0
 800c768:	d02d      	beq.n	800c7c6 <pbuf_cat+0x62>
 800c76a:	460d      	mov	r5, r1
 800c76c:	2900      	cmp	r1, #0
 800c76e:	d02a      	beq.n	800c7c6 <pbuf_cat+0x62>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c770:	6803      	ldr	r3, [r0, #0]
 800c772:	4604      	mov	r4, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c774:	8902      	ldrh	r2, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c776:	b18b      	cbz	r3, 800c79c <pbuf_cat+0x38>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c778:	8922      	ldrh	r2, [r4, #8]
 800c77a:	8928      	ldrh	r0, [r5, #8]
 800c77c:	4402      	add	r2, r0
 800c77e:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c780:	461c      	mov	r4, r3
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1f7      	bne.n	800c778 <pbuf_cat+0x14>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c788:	8922      	ldrh	r2, [r4, #8]
 800c78a:	8963      	ldrh	r3, [r4, #10]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d108      	bne.n	800c7a2 <pbuf_cat+0x3e>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c790:	8922      	ldrh	r2, [r4, #8]
 800c792:	892b      	ldrh	r3, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c794:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c796:	441a      	add	r2, r3
 800c798:	8122      	strh	r2, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c79c:	8943      	ldrh	r3, [r0, #10]
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d0f7      	beq.n	800c792 <pbuf_cat+0x2e>
 800c7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d8 <pbuf_cat+0x74>)
 800c7a4:	f240 3262 	movw	r2, #866	@ 0x362
 800c7a8:	490c      	ldr	r1, [pc, #48]	@ (800c7dc <pbuf_cat+0x78>)
 800c7aa:	480d      	ldr	r0, [pc, #52]	@ (800c7e0 <pbuf_cat+0x7c>)
 800c7ac:	f006 fba0 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0ec      	beq.n	800c790 <pbuf_cat+0x2c>
 800c7b6:	4b08      	ldr	r3, [pc, #32]	@ (800c7d8 <pbuf_cat+0x74>)
 800c7b8:	f240 3263 	movw	r2, #867	@ 0x363
 800c7bc:	4909      	ldr	r1, [pc, #36]	@ (800c7e4 <pbuf_cat+0x80>)
 800c7be:	4808      	ldr	r0, [pc, #32]	@ (800c7e0 <pbuf_cat+0x7c>)
 800c7c0:	f006 fb96 	bl	8012ef0 <iprintf>
 800c7c4:	e7e4      	b.n	800c790 <pbuf_cat+0x2c>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c7c6:	4b04      	ldr	r3, [pc, #16]	@ (800c7d8 <pbuf_cat+0x74>)
 800c7c8:	f240 3259 	movw	r2, #857	@ 0x359
 800c7cc:	4906      	ldr	r1, [pc, #24]	@ (800c7e8 <pbuf_cat+0x84>)
 800c7ce:	4804      	ldr	r0, [pc, #16]	@ (800c7e0 <pbuf_cat+0x7c>)
}
 800c7d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c7d4:	f006 bb8c 	b.w	8012ef0 <iprintf>
 800c7d8:	0801574c 	.word	0x0801574c
 800c7dc:	080158b4 	.word	0x080158b4
 800c7e0:	08014150 	.word	0x08014150
 800c7e4:	080158e4 	.word	0x080158e4
 800c7e8:	0801587c 	.word	0x0801587c

0800c7ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c7ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	f000 80ad 	beq.w	800c950 <pbuf_copy+0x164>
 800c7f6:	fab1 f581 	clz	r5, r1
 800c7fa:	460e      	mov	r6, r1
 800c7fc:	096d      	lsrs	r5, r5, #5
 800c7fe:	2900      	cmp	r1, #0
 800c800:	f000 80a6 	beq.w	800c950 <pbuf_copy+0x164>
 800c804:	8902      	ldrh	r2, [r0, #8]
 800c806:	4604      	mov	r4, r0
 800c808:	890b      	ldrh	r3, [r1, #8]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	f0c0 80a0 	bcc.w	800c950 <pbuf_copy+0x164>
 800c810:	8942      	ldrh	r2, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 800c812:	462f      	mov	r7, r5
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c814:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 800c964 <pbuf_copy+0x178>
 800c818:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 800c978 <pbuf_copy+0x18c>
 800c81c:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 800c96c <pbuf_copy+0x180>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c820:	8973      	ldrh	r3, [r6, #10]
 800c822:	eba2 0b07 	sub.w	fp, r2, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c826:	6860      	ldr	r0, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c828:	1b5b      	subs	r3, r3, r5
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c82a:	6871      	ldr	r1, [r6, #4]
 800c82c:	4438      	add	r0, r7
 800c82e:	459b      	cmp	fp, r3
 800c830:	4429      	add	r1, r5
 800c832:	bf28      	it	cs
 800c834:	469b      	movcs	fp, r3
 800c836:	465a      	mov	r2, fp
    offset_to += len;
 800c838:	445f      	add	r7, fp
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c83a:	f006 fcde 	bl	80131fa <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c83e:	8963      	ldrh	r3, [r4, #10]
    offset_from += len;
 800c840:	445d      	add	r5, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c842:	42bb      	cmp	r3, r7
 800c844:	d328      	bcc.n	800c898 <pbuf_copy+0xac>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c846:	8973      	ldrh	r3, [r6, #10]
 800c848:	42ab      	cmp	r3, r5
 800c84a:	d31c      	bcc.n	800c886 <pbuf_copy+0x9a>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800c84c:	8962      	ldrh	r2, [r4, #10]
    if (offset_from >= p_from->len) {
 800c84e:	42ab      	cmp	r3, r5
    if (offset_to == p_to->len) {
 800c850:	4611      	mov	r1, r2
    if (offset_from >= p_from->len) {
 800c852:	d90c      	bls.n	800c86e <pbuf_copy+0x82>
    if (offset_to == p_to->len) {
 800c854:	4297      	cmp	r7, r2
 800c856:	d027      	beq.n	800c8a8 <pbuf_copy+0xbc>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c858:	8931      	ldrh	r1, [r6, #8]
 800c85a:	4299      	cmp	r1, r3
 800c85c:	d053      	beq.n	800c906 <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c85e:	8923      	ldrh	r3, [r4, #8]
 800c860:	4293      	cmp	r3, r2
 800c862:	d1dd      	bne.n	800c820 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d137      	bne.n	800c8da <pbuf_copy+0xee>
 800c86a:	8962      	ldrh	r2, [r4, #10]
 800c86c:	e7d8      	b.n	800c820 <pbuf_copy+0x34>
    if (offset_to == p_to->len) {
 800c86e:	4297      	cmp	r7, r2
      p_from = p_from->next;
 800c870:	6836      	ldr	r6, [r6, #0]
    if (offset_to == p_to->len) {
 800c872:	d025      	beq.n	800c8c0 <pbuf_copy+0xd4>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c874:	2e00      	cmp	r6, #0
 800c876:	d138      	bne.n	800c8ea <pbuf_copy+0xfe>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c878:	8923      	ldrh	r3, [r4, #8]
 800c87a:	428b      	cmp	r3, r1
 800c87c:	d02a      	beq.n	800c8d4 <pbuf_copy+0xe8>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c87e:	2400      	movs	r4, #0
}
 800c880:	4620      	mov	r0, r4
 800c882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c886:	464b      	mov	r3, r9
 800c888:	f240 32da 	movw	r2, #986	@ 0x3da
 800c88c:	4934      	ldr	r1, [pc, #208]	@ (800c960 <pbuf_copy+0x174>)
 800c88e:	4640      	mov	r0, r8
 800c890:	f006 fb2e 	bl	8012ef0 <iprintf>
    if (offset_from >= p_from->len) {
 800c894:	8973      	ldrh	r3, [r6, #10]
 800c896:	e7d9      	b.n	800c84c <pbuf_copy+0x60>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c898:	464b      	mov	r3, r9
 800c89a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c89e:	4651      	mov	r1, sl
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	f006 fb25 	bl	8012ef0 <iprintf>
 800c8a6:	e7ce      	b.n	800c846 <pbuf_copy+0x5a>
      p_to = p_to->next;
 800c8a8:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c8aa:	2c00      	cmp	r4, #0
 800c8ac:	d044      	beq.n	800c938 <pbuf_copy+0x14c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c8ae:	8932      	ldrh	r2, [r6, #8]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d136      	bne.n	800c922 <pbuf_copy+0x136>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c8b4:	6833      	ldr	r3, [r6, #0]
 800c8b6:	bb43      	cbnz	r3, 800c90a <pbuf_copy+0x11e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c8b8:	2c00      	cmp	r4, #0
 800c8ba:	d132      	bne.n	800c922 <pbuf_copy+0x136>
 800c8bc:	4627      	mov	r7, r4
 800c8be:	e7d4      	b.n	800c86a <pbuf_copy+0x7e>
      p_to = p_to->next;
 800c8c0:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c8c2:	b9c4      	cbnz	r4, 800c8f6 <pbuf_copy+0x10a>
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	d137      	bne.n	800c938 <pbuf_copy+0x14c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c8c8:	2c00      	cmp	r4, #0
 800c8ca:	d0d9      	beq.n	800c880 <pbuf_copy+0x94>
 800c8cc:	8961      	ldrh	r1, [r4, #10]
 800c8ce:	8923      	ldrh	r3, [r4, #8]
 800c8d0:	428b      	cmp	r3, r1
 800c8d2:	d1d4      	bne.n	800c87e <pbuf_copy+0x92>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c8d4:	6824      	ldr	r4, [r4, #0]
 800c8d6:	2c00      	cmp	r4, #0
 800c8d8:	d0d2      	beq.n	800c880 <pbuf_copy+0x94>
 800c8da:	4b22      	ldr	r3, [pc, #136]	@ (800c964 <pbuf_copy+0x178>)
 800c8dc:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c8e0:	4921      	ldr	r1, [pc, #132]	@ (800c968 <pbuf_copy+0x17c>)
 800c8e2:	4822      	ldr	r0, [pc, #136]	@ (800c96c <pbuf_copy+0x180>)
 800c8e4:	f006 fb04 	bl	8012ef0 <iprintf>
 800c8e8:	e016      	b.n	800c918 <pbuf_copy+0x12c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c8ea:	8971      	ldrh	r1, [r6, #10]
 800c8ec:	8933      	ldrh	r3, [r6, #8]
 800c8ee:	4299      	cmp	r1, r3
 800c8f0:	d01e      	beq.n	800c930 <pbuf_copy+0x144>
      offset_from = 0;
 800c8f2:	2500      	movs	r5, #0
 800c8f4:	e7b3      	b.n	800c85e <pbuf_copy+0x72>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c8f6:	2e00      	cmp	r6, #0
 800c8f8:	d0e6      	beq.n	800c8c8 <pbuf_copy+0xdc>
 800c8fa:	8932      	ldrh	r2, [r6, #8]
      offset_from = 0;
 800c8fc:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c8fe:	8973      	ldrh	r3, [r6, #10]
 800c900:	429a      	cmp	r2, r3
 800c902:	d1d9      	bne.n	800c8b8 <pbuf_copy+0xcc>
 800c904:	e7d6      	b.n	800c8b4 <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c906:	6833      	ldr	r3, [r6, #0]
 800c908:	b163      	cbz	r3, 800c924 <pbuf_copy+0x138>
 800c90a:	4b16      	ldr	r3, [pc, #88]	@ (800c964 <pbuf_copy+0x178>)
 800c90c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c910:	4915      	ldr	r1, [pc, #84]	@ (800c968 <pbuf_copy+0x17c>)
 800c912:	4816      	ldr	r0, [pc, #88]	@ (800c96c <pbuf_copy+0x180>)
 800c914:	f006 faec 	bl	8012ef0 <iprintf>
 800c918:	f06f 0405 	mvn.w	r4, #5
}
 800c91c:	4620      	mov	r0, r4
 800c91e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c922:	2700      	movs	r7, #0
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c924:	8923      	ldrh	r3, [r4, #8]
 800c926:	8962      	ldrh	r2, [r4, #10]
 800c928:	4293      	cmp	r3, r2
 800c92a:	f47f af79 	bne.w	800c820 <pbuf_copy+0x34>
 800c92e:	e799      	b.n	800c864 <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c930:	6835      	ldr	r5, [r6, #0]
 800c932:	2d00      	cmp	r5, #0
 800c934:	d093      	beq.n	800c85e <pbuf_copy+0x72>
 800c936:	e7e8      	b.n	800c90a <pbuf_copy+0x11e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c938:	4b0a      	ldr	r3, [pc, #40]	@ (800c964 <pbuf_copy+0x178>)
 800c93a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c93e:	490c      	ldr	r1, [pc, #48]	@ (800c970 <pbuf_copy+0x184>)
 800c940:	480a      	ldr	r0, [pc, #40]	@ (800c96c <pbuf_copy+0x180>)
 800c942:	f006 fad5 	bl	8012ef0 <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c946:	f06f 040f 	mvn.w	r4, #15
}
 800c94a:	4620      	mov	r0, r4
 800c94c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c950:	4b04      	ldr	r3, [pc, #16]	@ (800c964 <pbuf_copy+0x178>)
 800c952:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c956:	4907      	ldr	r1, [pc, #28]	@ (800c974 <pbuf_copy+0x188>)
 800c958:	4804      	ldr	r0, [pc, #16]	@ (800c96c <pbuf_copy+0x180>)
 800c95a:	f006 fac9 	bl	8012ef0 <iprintf>
 800c95e:	e7f2      	b.n	800c946 <pbuf_copy+0x15a>
 800c960:	0801593c 	.word	0x0801593c
 800c964:	0801574c 	.word	0x0801574c
 800c968:	08015968 	.word	0x08015968
 800c96c:	08014150 	.word	0x08014150
 800c970:	08015958 	.word	0x08015958
 800c974:	080158f4 	.word	0x080158f4
 800c978:	08015924 	.word	0x08015924

0800c97c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c980:	b378      	cbz	r0, 800c9e2 <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c982:	460f      	mov	r7, r1
 800c984:	2900      	cmp	r1, #0
 800c986:	d035      	beq.n	800c9f4 <pbuf_copy_partial+0x78>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c988:	4690      	mov	r8, r2
 800c98a:	b38a      	cbz	r2, 800c9f0 <pbuf_copy_partial+0x74>
 800c98c:	4605      	mov	r5, r0
 800c98e:	4619      	mov	r1, r3
  u16_t left = 0;
 800c990:	2600      	movs	r6, #0
 800c992:	e005      	b.n	800c9a0 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c994:	b299      	uxth	r1, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c996:	682d      	ldr	r5, [r5, #0]
 800c998:	f1b8 0f00 	cmp.w	r8, #0
 800c99c:	d01e      	beq.n	800c9dc <pbuf_copy_partial+0x60>
 800c99e:	b1ed      	cbz	r5, 800c9dc <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c9a0:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 800c9a2:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800c9a6:	b119      	cbz	r1, 800c9b0 <pbuf_copy_partial+0x34>
 800c9a8:	4561      	cmp	r1, ip
      offset = (u16_t)(offset - p->len);
 800c9aa:	eba1 030c 	sub.w	r3, r1, ip
    if ((offset != 0) && (offset >= p->len)) {
 800c9ae:	d2f1      	bcs.n	800c994 <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 800c9b0:	ebac 0401 	sub.w	r4, ip, r1
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c9b4:	686a      	ldr	r2, [r5, #4]
 800c9b6:	b2a4      	uxth	r4, r4
 800c9b8:	4411      	add	r1, r2
 800c9ba:	4544      	cmp	r4, r8
 800c9bc:	bf28      	it	cs
 800c9be:	4644      	movcs	r4, r8
 800c9c0:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c9c2:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800c9c4:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c9c8:	f006 fc17 	bl	80131fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c9cc:	b2b6      	uxth	r6, r6
      offset = 0;
 800c9ce:	2100      	movs	r1, #0
      len = (u16_t)(len - buf_copy_len);
 800c9d0:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c9d4:	682d      	ldr	r5, [r5, #0]
 800c9d6:	f1b8 0f00 	cmp.w	r8, #0
 800c9da:	d1e0      	bne.n	800c99e <pbuf_copy_partial+0x22>
    }
  }
  return copied_total;
}
 800c9dc:	4630      	mov	r0, r6
 800c9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c9e2:	4b08      	ldr	r3, [pc, #32]	@ (800ca04 <pbuf_copy_partial+0x88>)
 800c9e4:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c9e8:	4907      	ldr	r1, [pc, #28]	@ (800ca08 <pbuf_copy_partial+0x8c>)
 800c9ea:	4808      	ldr	r0, [pc, #32]	@ (800ca0c <pbuf_copy_partial+0x90>)
 800c9ec:	f006 fa80 	bl	8012ef0 <iprintf>
 800c9f0:	2600      	movs	r6, #0
 800c9f2:	e7f3      	b.n	800c9dc <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c9f4:	4b03      	ldr	r3, [pc, #12]	@ (800ca04 <pbuf_copy_partial+0x88>)
 800c9f6:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c9fa:	4905      	ldr	r1, [pc, #20]	@ (800ca10 <pbuf_copy_partial+0x94>)
 800c9fc:	4803      	ldr	r0, [pc, #12]	@ (800ca0c <pbuf_copy_partial+0x90>)
 800c9fe:	f006 fa77 	bl	8012ef0 <iprintf>
 800ca02:	e7f5      	b.n	800c9f0 <pbuf_copy_partial+0x74>
 800ca04:	0801574c 	.word	0x0801574c
 800ca08:	08015994 	.word	0x08015994
 800ca0c:	08014150 	.word	0x08014150
 800ca10:	080159b4 	.word	0x080159b4

0800ca14 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4615      	mov	r5, r2
 800ca18:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ca1a:	8929      	ldrh	r1, [r5, #8]
 800ca1c:	f7ff fd7c 	bl	800c518 <pbuf_alloc>
  if (q == NULL) {
 800ca20:	4604      	mov	r4, r0
 800ca22:	b118      	cbz	r0, 800ca2c <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7ff fee1 	bl	800c7ec <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ca2a:	b908      	cbnz	r0, 800ca30 <pbuf_clone+0x1c>
  return q;
}
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ca30:	4b04      	ldr	r3, [pc, #16]	@ (800ca44 <pbuf_clone+0x30>)
 800ca32:	f240 5224 	movw	r2, #1316	@ 0x524
 800ca36:	4904      	ldr	r1, [pc, #16]	@ (800ca48 <pbuf_clone+0x34>)
 800ca38:	4804      	ldr	r0, [pc, #16]	@ (800ca4c <pbuf_clone+0x38>)
 800ca3a:	f006 fa59 	bl	8012ef0 <iprintf>
}
 800ca3e:	4620      	mov	r0, r4
 800ca40:	bd38      	pop	{r3, r4, r5, pc}
 800ca42:	bf00      	nop
 800ca44:	0801574c 	.word	0x0801574c
 800ca48:	080159d8 	.word	0x080159d8
 800ca4c:	08014150 	.word	0x08014150

0800ca50 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800ca50:	b530      	push	{r4, r5, lr}
 800ca52:	4604      	mov	r4, r0
 800ca54:	461d      	mov	r5, r3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800ca56:	8900      	ldrh	r0, [r0, #8]
 800ca58:	18cb      	adds	r3, r1, r3
 800ca5a:	4298      	cmp	r0, r3
 800ca5c:	da03      	bge.n	800ca66 <pbuf_memcmp+0x16>
 800ca5e:	e028      	b.n	800cab2 <pbuf_memcmp+0x62>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
    q = q->next;
 800ca60:	6824      	ldr	r4, [r4, #0]
    start = (u16_t)(start - q->len);
 800ca62:	b281      	uxth	r1, r0
  while ((q != NULL) && (q->len <= start)) {
 800ca64:	b124      	cbz	r4, 800ca70 <pbuf_memcmp+0x20>
 800ca66:	8960      	ldrh	r0, [r4, #10]
 800ca68:	4288      	cmp	r0, r1
    start = (u16_t)(start - q->len);
 800ca6a:	eba1 0000 	sub.w	r0, r1, r0
  while ((q != NULL) && (q->len <= start)) {
 800ca6e:	d9f7      	bls.n	800ca60 <pbuf_memcmp+0x10>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800ca70:	b1ed      	cbz	r5, 800caae <pbuf_memcmp+0x5e>
 800ca72:	f102 3eff 	add.w	lr, r2, #4294967295
 800ca76:	2000      	movs	r0, #0
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800ca78:	eb01 0c00 	add.w	ip, r1, r0
  const struct pbuf *q = in;
 800ca7c:	4623      	mov	r3, r4
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800ca7e:	fa1f fc8c 	uxth.w	ip, ip
  while ((q != NULL) && (q->len <= offset_left)) {
 800ca82:	b924      	cbnz	r4, 800ca8e <pbuf_memcmp+0x3e>
 800ca84:	e00b      	b.n	800ca9e <pbuf_memcmp+0x4e>
    q = q->next;
 800ca86:	681b      	ldr	r3, [r3, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800ca88:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800ca8c:	b13b      	cbz	r3, 800ca9e <pbuf_memcmp+0x4e>
 800ca8e:	895a      	ldrh	r2, [r3, #10]
 800ca90:	4562      	cmp	r2, ip
    offset_left = (u16_t)(offset_left - q->len);
 800ca92:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800ca96:	d9f6      	bls.n	800ca86 <pbuf_memcmp+0x36>
    return ((u8_t *)q->payload)[q_idx];
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	f813 300c 	ldrb.w	r3, [r3, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 800ca9e:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800caa2:	3001      	adds	r0, #1
    if (a != b) {
 800caa4:	429a      	cmp	r2, r3
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800caa6:	b280      	uxth	r0, r0
    if (a != b) {
 800caa8:	d102      	bne.n	800cab0 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 800caaa:	42a8      	cmp	r0, r5
 800caac:	d1e4      	bne.n	800ca78 <pbuf_memcmp+0x28>
    }
  }
  return 0;
 800caae:	2000      	movs	r0, #0
}
 800cab0:	bd30      	pop	{r4, r5, pc}
    return 0xffff;
 800cab2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 800cab6:	bd30      	pop	{r4, r5, pc}

0800cab8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cab8:	b470      	push	{r4, r5, r6}
 800caba:	4e12      	ldr	r6, [pc, #72]	@ (800cb04 <tcp_new_port+0x4c>)
 800cabc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cac0:	4d11      	ldr	r5, [pc, #68]	@ (800cb08 <tcp_new_port+0x50>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cac2:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800cac6:	8831      	ldrh	r1, [r6, #0]
  tcp_port++;
 800cac8:	3101      	adds	r1, #1
 800caca:	4c10      	ldr	r4, [pc, #64]	@ (800cb0c <tcp_new_port+0x54>)
 800cacc:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cace:	4561      	cmp	r1, ip
 800cad0:	bf08      	it	eq
 800cad2:	f44f 4140 	moveq.w	r1, #49152	@ 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	b913      	cbnz	r3, 800cae2 <tcp_new_port+0x2a>
 800cadc:	e00b      	b.n	800caf6 <tcp_new_port+0x3e>
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	b14b      	cbz	r3, 800caf6 <tcp_new_port+0x3e>
      if (pcb->local_port == tcp_port) {
 800cae2:	8ada      	ldrh	r2, [r3, #22]
 800cae4:	428a      	cmp	r2, r1
 800cae6:	d1fa      	bne.n	800cade <tcp_new_port+0x26>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cae8:	3801      	subs	r0, #1
 800caea:	b280      	uxth	r0, r0
 800caec:	2800      	cmp	r0, #0
 800caee:	d1eb      	bne.n	800cac8 <tcp_new_port+0x10>
 800caf0:	8031      	strh	r1, [r6, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800caf2:	bc70      	pop	{r4, r5, r6}
 800caf4:	4770      	bx	lr
 800caf6:	3404      	adds	r4, #4
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800caf8:	42ac      	cmp	r4, r5
 800cafa:	d1ec      	bne.n	800cad6 <tcp_new_port+0x1e>
 800cafc:	4608      	mov	r0, r1
 800cafe:	8031      	strh	r1, [r6, #0]
}
 800cb00:	bc70      	pop	{r4, r5, r6}
 800cb02:	4770      	bx	lr
 800cb04:	24000034 	.word	0x24000034
 800cb08:	080160d0 	.word	0x080160d0
 800cb0c:	080160c0 	.word	0x080160c0

0800cb10 <tcp_close_shutdown_fin>:
{
 800cb10:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cb12:	4604      	mov	r4, r0
 800cb14:	b1f8      	cbz	r0, 800cb56 <tcp_close_shutdown_fin+0x46>
  switch (pcb->state) {
 800cb16:	7d23      	ldrb	r3, [r4, #20]
 800cb18:	2b04      	cmp	r3, #4
 800cb1a:	d005      	beq.n	800cb28 <tcp_close_shutdown_fin+0x18>
 800cb1c:	2b07      	cmp	r3, #7
 800cb1e:	d00d      	beq.n	800cb3c <tcp_close_shutdown_fin+0x2c>
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d001      	beq.n	800cb28 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 800cb24:	2000      	movs	r0, #0
}
 800cb26:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f003 fcef 	bl	801050c <tcp_send_fin>
      if (err == ERR_OK) {
 800cb2e:	b948      	cbnz	r0, 800cb44 <tcp_close_shutdown_fin+0x34>
  if (err == ERR_OK) {
 800cb30:	2305      	movs	r3, #5
    tcp_output(pcb);
 800cb32:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800cb34:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800cb36:	f003 fe57 	bl	80107e8 <tcp_output>
 800cb3a:	e7f3      	b.n	800cb24 <tcp_close_shutdown_fin+0x14>
      err = tcp_send_fin(pcb);
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f003 fce5 	bl	801050c <tcp_send_fin>
      if (err == ERR_OK) {
 800cb42:	b130      	cbz	r0, 800cb52 <tcp_close_shutdown_fin+0x42>
  } else if (err == ERR_MEM) {
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d1ee      	bne.n	800cb26 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb48:	8b63      	ldrh	r3, [r4, #26]
 800cb4a:	f043 0308 	orr.w	r3, r3, #8
 800cb4e:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800cb50:	e7e8      	b.n	800cb24 <tcp_close_shutdown_fin+0x14>
 800cb52:	2309      	movs	r3, #9
 800cb54:	e7ed      	b.n	800cb32 <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cb56:	4b04      	ldr	r3, [pc, #16]	@ (800cb68 <tcp_close_shutdown_fin+0x58>)
 800cb58:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800cb5c:	4903      	ldr	r1, [pc, #12]	@ (800cb6c <tcp_close_shutdown_fin+0x5c>)
 800cb5e:	4804      	ldr	r0, [pc, #16]	@ (800cb70 <tcp_close_shutdown_fin+0x60>)
 800cb60:	f006 f9c6 	bl	8012ef0 <iprintf>
 800cb64:	e7d7      	b.n	800cb16 <tcp_close_shutdown_fin+0x6>
 800cb66:	bf00      	nop
 800cb68:	080159ec 	.word	0x080159ec
 800cb6c:	08015a1c 	.word	0x08015a1c
 800cb70:	08014150 	.word	0x08014150

0800cb74 <tcp_init>:
{
 800cb74:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cb76:	f006 f8a9 	bl	8012ccc <rand>
 800cb7a:	4b02      	ldr	r3, [pc, #8]	@ (800cb84 <tcp_init+0x10>)
 800cb7c:	4a02      	ldr	r2, [pc, #8]	@ (800cb88 <tcp_init+0x14>)
 800cb7e:	4303      	orrs	r3, r0
 800cb80:	8013      	strh	r3, [r2, #0]
}
 800cb82:	bd08      	pop	{r3, pc}
 800cb84:	ffffc000 	.word	0xffffc000
 800cb88:	24000034 	.word	0x24000034

0800cb8c <tcp_free>:
{
 800cb8c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cb8e:	7d03      	ldrb	r3, [r0, #20]
{
 800cb90:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d005      	beq.n	800cba2 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800cb96:	4621      	mov	r1, r4
 800cb98:	2001      	movs	r0, #1
}
 800cb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800cb9e:	f7ff b93f 	b.w	800be20 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cba2:	4906      	ldr	r1, [pc, #24]	@ (800cbbc <tcp_free+0x30>)
 800cba4:	22d4      	movs	r2, #212	@ 0xd4
 800cba6:	4b06      	ldr	r3, [pc, #24]	@ (800cbc0 <tcp_free+0x34>)
 800cba8:	4806      	ldr	r0, [pc, #24]	@ (800cbc4 <tcp_free+0x38>)
 800cbaa:	f006 f9a1 	bl	8012ef0 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800cbae:	4621      	mov	r1, r4
 800cbb0:	2001      	movs	r0, #1
}
 800cbb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800cbb6:	f7ff b933 	b.w	800be20 <memp_free>
 800cbba:	bf00      	nop
 800cbbc:	08015a28 	.word	0x08015a28
 800cbc0:	080159ec 	.word	0x080159ec
 800cbc4:	08014150 	.word	0x08014150

0800cbc8 <tcp_bind>:
{
 800cbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbcc:	460f      	mov	r7, r1
 800cbce:	4680      	mov	r8, r0
 800cbd0:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 800cbd2:	f7fa fbab 	bl	800732c <sys_check_core_locking>
  if (ipaddr == NULL) {
 800cbd6:	b1f7      	cbz	r7, 800cc16 <tcp_bind+0x4e>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbd8:	f1b8 0f00 	cmp.w	r8, #0
 800cbdc:	d043      	beq.n	800cc66 <tcp_bind+0x9e>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cbde:	f898 3014 	ldrb.w	r3, [r8, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d135      	bne.n	800cc52 <tcp_bind+0x8a>
  if (port == 0) {
 800cbe6:	b364      	cbz	r4, 800cc42 <tcp_bind+0x7a>
 800cbe8:	4e24      	ldr	r6, [pc, #144]	@ (800cc7c <tcp_bind+0xb4>)
 800cbea:	f106 0110 	add.w	r1, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cbee:	6833      	ldr	r3, [r6, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	b913      	cbnz	r3, 800cbfa <tcp_bind+0x32>
 800cbf4:	e011      	b.n	800cc1a <tcp_bind+0x52>
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	b17b      	cbz	r3, 800cc1a <tcp_bind+0x52>
        if (cpcb->local_port == port) {
 800cbfa:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800cbfe:	45a4      	cmp	ip, r4
 800cc00:	d1f9      	bne.n	800cbf6 <tcp_bind+0x2e>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	b11a      	cbz	r2, 800cc0e <tcp_bind+0x46>
                 ip_addr_isany(ipaddr) ||
 800cc06:	683d      	ldr	r5, [r7, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cc08:	b10d      	cbz	r5, 800cc0e <tcp_bind+0x46>
 800cc0a:	42aa      	cmp	r2, r5
 800cc0c:	d1f3      	bne.n	800cbf6 <tcp_bind+0x2e>
              return ERR_USE;
 800cc0e:	f06f 0007 	mvn.w	r0, #7
}
 800cc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 800cc16:	4f1a      	ldr	r7, [pc, #104]	@ (800cc80 <tcp_bind+0xb8>)
 800cc18:	e7de      	b.n	800cbd8 <tcp_bind+0x10>
 800cc1a:	3604      	adds	r6, #4
    for (i = 0; i < max_pcb_list; i++) {
 800cc1c:	428e      	cmp	r6, r1
 800cc1e:	d1e6      	bne.n	800cbee <tcp_bind+0x26>
  if (!ip_addr_isany(ipaddr)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	b10b      	cbz	r3, 800cc28 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cc24:	f8c8 3000 	str.w	r3, [r8]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cc28:	4b16      	ldr	r3, [pc, #88]	@ (800cc84 <tcp_bind+0xbc>)
  pcb->local_port = port;
 800cc2a:	f8a8 4016 	strh.w	r4, [r8, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	f8c3 8000 	str.w	r8, [r3]
 800cc34:	f8c8 200c 	str.w	r2, [r8, #12]
 800cc38:	f004 f8f4 	bl	8010e24 <tcp_timer_needed>
  return ERR_OK;
 800cc3c:	2000      	movs	r0, #0
}
 800cc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    port = tcp_new_port();
 800cc42:	f7ff ff39 	bl	800cab8 <tcp_new_port>
    if (port == 0) {
 800cc46:	4604      	mov	r4, r0
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d1e9      	bne.n	800cc20 <tcp_bind+0x58>
      return ERR_BUF;
 800cc4c:	f06f 0001 	mvn.w	r0, #1
 800cc50:	e7df      	b.n	800cc12 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cc52:	4b0d      	ldr	r3, [pc, #52]	@ (800cc88 <tcp_bind+0xc0>)
 800cc54:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800cc58:	490c      	ldr	r1, [pc, #48]	@ (800cc8c <tcp_bind+0xc4>)
 800cc5a:	480d      	ldr	r0, [pc, #52]	@ (800cc90 <tcp_bind+0xc8>)
 800cc5c:	f006 f948 	bl	8012ef0 <iprintf>
 800cc60:	f06f 0005 	mvn.w	r0, #5
 800cc64:	e7d5      	b.n	800cc12 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc66:	4b08      	ldr	r3, [pc, #32]	@ (800cc88 <tcp_bind+0xc0>)
 800cc68:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800cc6c:	4909      	ldr	r1, [pc, #36]	@ (800cc94 <tcp_bind+0xcc>)
 800cc6e:	4808      	ldr	r0, [pc, #32]	@ (800cc90 <tcp_bind+0xc8>)
 800cc70:	f006 f93e 	bl	8012ef0 <iprintf>
 800cc74:	f06f 000f 	mvn.w	r0, #15
 800cc78:	e7cb      	b.n	800cc12 <tcp_bind+0x4a>
 800cc7a:	bf00      	nop
 800cc7c:	080160c0 	.word	0x080160c0
 800cc80:	08016fdc 	.word	0x08016fdc
 800cc84:	2400fccc 	.word	0x2400fccc
 800cc88:	080159ec 	.word	0x080159ec
 800cc8c:	08015a54 	.word	0x08015a54
 800cc90:	08014150 	.word	0x08014150
 800cc94:	08015a3c 	.word	0x08015a3c

0800cc98 <tcp_listen_with_backlog_and_err>:
{
 800cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	4617      	mov	r7, r2
  LWIP_ASSERT_CORE_LOCKED();
 800cc9e:	f7fa fb45 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cca2:	2c00      	cmp	r4, #0
 800cca4:	d05d      	beq.n	800cd62 <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cca6:	7d25      	ldrb	r5, [r4, #20]
 800cca8:	2d00      	cmp	r5, #0
 800ccaa:	d147      	bne.n	800cd3c <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ccac:	2002      	movs	r0, #2
 800ccae:	f7ff f871 	bl	800bd94 <memp_malloc>
  if (lpcb == NULL) {
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d051      	beq.n	800cd5c <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 800ccb8:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800ccba:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800ccbc:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800ccbe:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800ccc0:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800ccc2:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800ccc4:	7d62      	ldrb	r2, [r4, #21]
 800ccc6:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800ccc8:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ccca:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800cccc:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800ccce:	7ae2      	ldrb	r2, [r4, #11]
 800ccd0:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800ccd2:	7aa2      	ldrb	r2, [r4, #10]
 800ccd4:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ccd6:	6822      	ldr	r2, [r4, #0]
 800ccd8:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800ccda:	b99b      	cbnz	r3, 800cd04 <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ccdc:	7d23      	ldrb	r3, [r4, #20]
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d020      	beq.n	800cd24 <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 800cce2:	4621      	mov	r1, r4
 800cce4:	2001      	movs	r0, #1
 800cce6:	f7ff f89b 	bl	800be20 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ccea:	4b23      	ldr	r3, [pc, #140]	@ (800cd78 <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 800ccec:	4923      	ldr	r1, [pc, #140]	@ (800cd7c <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ccee:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 800ccf0:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ccf2:	60f2      	str	r2, [r6, #12]
 800ccf4:	601e      	str	r6, [r3, #0]
 800ccf6:	f004 f895 	bl	8010e24 <tcp_timer_needed>
  res = ERR_OK;
 800ccfa:	2300      	movs	r3, #0
  if (err != NULL) {
 800ccfc:	b107      	cbz	r7, 800cd00 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 800ccfe:	703b      	strb	r3, [r7, #0]
}
 800cd00:	4630      	mov	r0, r6
 800cd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd04:	4a1e      	ldr	r2, [pc, #120]	@ (800cd80 <tcp_listen_with_backlog_and_err+0xe8>)
 800cd06:	6813      	ldr	r3, [r2, #0]
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	d012      	beq.n	800cd32 <tcp_listen_with_backlog_and_err+0x9a>
 800cd0c:	b12b      	cbz	r3, 800cd1a <tcp_listen_with_backlog_and_err+0x82>
 800cd0e:	68d9      	ldr	r1, [r3, #12]
 800cd10:	42a1      	cmp	r1, r4
 800cd12:	d01e      	beq.n	800cd52 <tcp_listen_with_backlog_and_err+0xba>
 800cd14:	460b      	mov	r3, r1
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1f9      	bne.n	800cd0e <tcp_listen_with_backlog_and_err+0x76>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cd1e:	7d23      	ldrb	r3, [r4, #20]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d1de      	bne.n	800cce2 <tcp_listen_with_backlog_and_err+0x4a>
 800cd24:	4b17      	ldr	r3, [pc, #92]	@ (800cd84 <tcp_listen_with_backlog_and_err+0xec>)
 800cd26:	22d4      	movs	r2, #212	@ 0xd4
 800cd28:	4917      	ldr	r1, [pc, #92]	@ (800cd88 <tcp_listen_with_backlog_and_err+0xf0>)
 800cd2a:	4818      	ldr	r0, [pc, #96]	@ (800cd8c <tcp_listen_with_backlog_and_err+0xf4>)
 800cd2c:	f006 f8e0 	bl	8012ef0 <iprintf>
 800cd30:	e7d7      	b.n	800cce2 <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd32:	68e3      	ldr	r3, [r4, #12]
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	2300      	movs	r3, #0
 800cd38:	60e3      	str	r3, [r4, #12]
 800cd3a:	e7f0      	b.n	800cd1e <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cd3c:	4b11      	ldr	r3, [pc, #68]	@ (800cd84 <tcp_listen_with_backlog_and_err+0xec>)
 800cd3e:	f240 325a 	movw	r2, #858	@ 0x35a
 800cd42:	4913      	ldr	r1, [pc, #76]	@ (800cd90 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 800cd44:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cd46:	4811      	ldr	r0, [pc, #68]	@ (800cd8c <tcp_listen_with_backlog_and_err+0xf4>)
 800cd48:	f006 f8d2 	bl	8012ef0 <iprintf>
 800cd4c:	f06f 030e 	mvn.w	r3, #14
 800cd50:	e7d4      	b.n	800ccfc <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd52:	68e2      	ldr	r2, [r4, #12]
 800cd54:	60da      	str	r2, [r3, #12]
 800cd56:	2300      	movs	r3, #0
 800cd58:	60e3      	str	r3, [r4, #12]
 800cd5a:	e7e0      	b.n	800cd1e <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 800cd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd60:	e7cc      	b.n	800ccfc <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cd62:	4b08      	ldr	r3, [pc, #32]	@ (800cd84 <tcp_listen_with_backlog_and_err+0xec>)
 800cd64:	f240 3259 	movw	r2, #857	@ 0x359
 800cd68:	490a      	ldr	r1, [pc, #40]	@ (800cd94 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800cd6a:	4626      	mov	r6, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cd6c:	4807      	ldr	r0, [pc, #28]	@ (800cd8c <tcp_listen_with_backlog_and_err+0xf4>)
 800cd6e:	f006 f8bf 	bl	8012ef0 <iprintf>
 800cd72:	f06f 030f 	mvn.w	r3, #15
 800cd76:	e7c1      	b.n	800ccfc <tcp_listen_with_backlog_and_err+0x64>
 800cd78:	2400fcc8 	.word	0x2400fcc8
 800cd7c:	0800da29 	.word	0x0800da29
 800cd80:	2400fccc 	.word	0x2400fccc
 800cd84:	080159ec 	.word	0x080159ec
 800cd88:	08015a28 	.word	0x08015a28
 800cd8c:	08014150 	.word	0x08014150
 800cd90:	08015aac 	.word	0x08015aac
 800cd94:	08015a7c 	.word	0x08015a7c

0800cd98 <tcp_listen_with_backlog>:
{
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800cd9e:	f7fa fac5 	bl	800732c <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cda2:	2200      	movs	r2, #0
 800cda4:	4629      	mov	r1, r5
 800cda6:	4620      	mov	r0, r4
}
 800cda8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cdac:	f7ff bf74 	b.w	800cc98 <tcp_listen_with_backlog_and_err>

0800cdb0 <tcp_update_rcv_ann_wnd>:
{
 800cdb0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	b1c8      	cbz	r0, 800cdea <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cdb6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cdb8:	f640 3c68 	movw	ip, #2920	@ 0xb68
 800cdbc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cdbe:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cdc2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cdc4:	1a58      	subs	r0, r3, r1
 800cdc6:	45e6      	cmp	lr, ip
 800cdc8:	4410      	add	r0, r2
 800cdca:	bf94      	ite	ls
 800cdcc:	eba0 050e 	subls.w	r5, r0, lr
 800cdd0:	eba0 050c 	subhi.w	r5, r0, ip
 800cdd4:	2d00      	cmp	r5, #0
 800cdd6:	db01      	blt.n	800cddc <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cdd8:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cddc:	1a53      	subs	r3, r2, r1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	dd0b      	ble.n	800cdfa <tcp_update_rcv_ann_wnd+0x4a>
 800cde2:	2300      	movs	r3, #0
    return 0;
 800cde4:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cde6:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800cde8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cdea:	4b0c      	ldr	r3, [pc, #48]	@ (800ce1c <tcp_update_rcv_ann_wnd+0x6c>)
 800cdec:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cdf0:	490b      	ldr	r1, [pc, #44]	@ (800ce20 <tcp_update_rcv_ann_wnd+0x70>)
 800cdf2:	480c      	ldr	r0, [pc, #48]	@ (800ce24 <tcp_update_rcv_ann_wnd+0x74>)
 800cdf4:	f006 f87c 	bl	8012ef0 <iprintf>
 800cdf8:	e7dd      	b.n	800cdb6 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cdfa:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cdfc:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800ce00:	d203      	bcs.n	800ce0a <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ce02:	b2ab      	uxth	r3, r5
    return 0;
 800ce04:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ce06:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800ce08:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ce0a:	4b04      	ldr	r3, [pc, #16]	@ (800ce1c <tcp_update_rcv_ann_wnd+0x6c>)
 800ce0c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ce10:	4905      	ldr	r1, [pc, #20]	@ (800ce28 <tcp_update_rcv_ann_wnd+0x78>)
 800ce12:	4804      	ldr	r0, [pc, #16]	@ (800ce24 <tcp_update_rcv_ann_wnd+0x74>)
 800ce14:	f006 f86c 	bl	8012ef0 <iprintf>
 800ce18:	e7f3      	b.n	800ce02 <tcp_update_rcv_ann_wnd+0x52>
 800ce1a:	bf00      	nop
 800ce1c:	080159ec 	.word	0x080159ec
 800ce20:	08015ae4 	.word	0x08015ae4
 800ce24:	08014150 	.word	0x08014150
 800ce28:	08015b08 	.word	0x08015b08

0800ce2c <tcp_recved>:
{
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	4605      	mov	r5, r0
 800ce30:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 800ce32:	f7fa fa7b 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce36:	b33d      	cbz	r5, 800ce88 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce38:	7d2b      	ldrb	r3, [r5, #20]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d01c      	beq.n	800ce78 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ce3e:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800ce40:	1919      	adds	r1, r3, r4
 800ce42:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ce44:	428b      	cmp	r3, r1
 800ce46:	d803      	bhi.n	800ce50 <tcp_recved+0x24>
 800ce48:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 800ce4c:	4299      	cmp	r1, r3
 800ce4e:	d901      	bls.n	800ce54 <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce50:	f241 61d0 	movw	r1, #5840	@ 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce54:	4628      	mov	r0, r5
 800ce56:	8529      	strh	r1, [r5, #40]	@ 0x28
 800ce58:	f7ff ffaa 	bl	800cdb0 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ce5c:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 800ce60:	4298      	cmp	r0, r3
 800ce62:	d800      	bhi.n	800ce66 <tcp_recved+0x3a>
}
 800ce64:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 800ce66:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800ce68:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800ce6a:	f043 0302 	orr.w	r3, r3, #2
 800ce6e:	836b      	strh	r3, [r5, #26]
}
 800ce70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800ce74:	f003 bcb8 	b.w	80107e8 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce78:	4b08      	ldr	r3, [pc, #32]	@ (800ce9c <tcp_recved+0x70>)
 800ce7a:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ce7e:	4908      	ldr	r1, [pc, #32]	@ (800cea0 <tcp_recved+0x74>)
 800ce80:	4808      	ldr	r0, [pc, #32]	@ (800cea4 <tcp_recved+0x78>)
 800ce82:	f006 f835 	bl	8012ef0 <iprintf>
 800ce86:	e7da      	b.n	800ce3e <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce88:	4b04      	ldr	r3, [pc, #16]	@ (800ce9c <tcp_recved+0x70>)
 800ce8a:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ce8e:	4906      	ldr	r1, [pc, #24]	@ (800cea8 <tcp_recved+0x7c>)
 800ce90:	4804      	ldr	r0, [pc, #16]	@ (800cea4 <tcp_recved+0x78>)
}
 800ce92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce96:	f006 b82b 	b.w	8012ef0 <iprintf>
 800ce9a:	bf00      	nop
 800ce9c:	080159ec 	.word	0x080159ec
 800cea0:	08015b3c 	.word	0x08015b3c
 800cea4:	08014150 	.word	0x08014150
 800cea8:	08015b24 	.word	0x08015b24

0800ceac <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	4604      	mov	r4, r0
 800ceb0:	460e      	mov	r6, r1
 800ceb2:	4617      	mov	r7, r2
 800ceb4:	461d      	mov	r5, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800ceb6:	f7fa fa39 	bl	800732c <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	f000 808a 	beq.w	800cfd4 <tcp_connect+0x128>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cec0:	2e00      	cmp	r6, #0
 800cec2:	d07d      	beq.n	800cfc0 <tcp_connect+0x114>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800cec4:	7d23      	ldrb	r3, [r4, #20]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d16a      	bne.n	800cfa0 <tcp_connect+0xf4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ceca:	6833      	ldr	r3, [r6, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cecc:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 800cece:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ced0:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d049      	beq.n	800cf6a <tcp_connect+0xbe>
    netif = netif_get_by_index(pcb->netif_idx);
 800ced6:	f7ff f9a5 	bl	800c224 <netif_get_by_index>
 800ceda:	4607      	mov	r7, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 800cedc:	2f00      	cmp	r7, #0
 800cede:	d06c      	beq.n	800cfba <tcp_connect+0x10e>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	b90b      	cbnz	r3, 800cee8 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800cee8:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 800ceea:	b926      	cbnz	r6, 800cef6 <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 800ceec:	f7ff fde4 	bl	800cab8 <tcp_new_port>
 800cef0:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d05e      	beq.n	800cfb4 <tcp_connect+0x108>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cef6:	4b3b      	ldr	r3, [pc, #236]	@ (800cfe4 <tcp_connect+0x138>)
 800cef8:	4a3b      	ldr	r2, [pc, #236]	@ (800cfe8 <tcp_connect+0x13c>)
 800cefa:	6811      	ldr	r1, [r2, #0]
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	440a      	add	r2, r1
 800cf00:	601a      	str	r2, [r3, #0]
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cf02:	4b3a      	ldr	r3, [pc, #232]	@ (800cfec <tcp_connect+0x140>)
  pcb->snd_nxt = iss;
 800cf04:	6522      	str	r2, [r4, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800cf06:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cf08:	62a3      	str	r3, [r4, #40]	@ 0x28
  pcb->snd_wnd = TCP_WND;
 800cf0a:	f241 63d0 	movw	r3, #5840	@ 0x16d0
  pcb->lastack = iss - 1;
 800cf0e:	6462      	str	r2, [r4, #68]	@ 0x44
  pcb->snd_lbb = iss - 1;
 800cf10:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 800cf14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
  pcb->snd_wnd = TCP_WND;
 800cf16:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  pcb->rcv_nxt = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	6263      	str	r3, [r4, #36]	@ 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cf1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cf20:	2a00      	cmp	r2, #0
 800cf22:	d037      	beq.n	800cf94 <tcp_connect+0xe8>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cf24:	2a28      	cmp	r2, #40	@ 0x28
 800cf26:	bf38      	it	cc
 800cf28:	2228      	movcc	r2, #40	@ 0x28
 800cf2a:	3a28      	subs	r2, #40	@ 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cf2c:	b292      	uxth	r2, r2
 800cf2e:	f5b2 7f06 	cmp.w	r2, #536	@ 0x218
 800cf32:	bf28      	it	cs
 800cf34:	f44f 7206 	movcs.w	r2, #536	@ 0x218
  pcb->cwnd = 1;
 800cf38:	2301      	movs	r3, #1
  pcb->connected = connected;
 800cf3a:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800cf3e:	2102      	movs	r1, #2
 800cf40:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800cf42:	8662      	strh	r2, [r4, #50]	@ 0x32
  pcb->cwnd = 1;
 800cf44:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800cf48:	f003 fa40 	bl	80103cc <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800cf4c:	4605      	mov	r5, r0
 800cf4e:	b9f8      	cbnz	r0, 800cf90 <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 800cf50:	2302      	movs	r3, #2
 800cf52:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800cf54:	b186      	cbz	r6, 800cf78 <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf56:	4a26      	ldr	r2, [pc, #152]	@ (800cff0 <tcp_connect+0x144>)
 800cf58:	6813      	ldr	r3, [r2, #0]
 800cf5a:	42a3      	cmp	r3, r4
 800cf5c:	d01d      	beq.n	800cf9a <tcp_connect+0xee>
 800cf5e:	b15b      	cbz	r3, 800cf78 <tcp_connect+0xcc>
 800cf60:	68da      	ldr	r2, [r3, #12]
 800cf62:	42a2      	cmp	r2, r4
 800cf64:	d006      	beq.n	800cf74 <tcp_connect+0xc8>
 800cf66:	4613      	mov	r3, r2
 800cf68:	e7f9      	b.n	800cf5e <tcp_connect+0xb2>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cf6a:	1d20      	adds	r0, r4, #4
 800cf6c:	f004 ff02 	bl	8011d74 <ip4_route>
 800cf70:	4607      	mov	r7, r0
 800cf72:	e7b3      	b.n	800cedc <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf74:	68e2      	ldr	r2, [r4, #12]
 800cf76:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 800cf78:	4b1e      	ldr	r3, [pc, #120]	@ (800cff4 <tcp_connect+0x148>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	601c      	str	r4, [r3, #0]
 800cf7e:	60e2      	str	r2, [r4, #12]
 800cf80:	f003 ff50 	bl	8010e24 <tcp_timer_needed>
 800cf84:	4b1c      	ldr	r3, [pc, #112]	@ (800cff8 <tcp_connect+0x14c>)
 800cf86:	2201      	movs	r2, #1
    tcp_output(pcb);
 800cf88:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 800cf8a:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800cf8c:	f003 fc2c 	bl	80107e8 <tcp_output>
}
 800cf90:	4628      	mov	r0, r5
 800cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return sendmss;
 800cf94:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cf98:	e7ce      	b.n	800cf38 <tcp_connect+0x8c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf9a:	68e3      	ldr	r3, [r4, #12]
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	e7eb      	b.n	800cf78 <tcp_connect+0xcc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800cfa0:	4b16      	ldr	r3, [pc, #88]	@ (800cffc <tcp_connect+0x150>)
 800cfa2:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800cfa6:	4916      	ldr	r1, [pc, #88]	@ (800d000 <tcp_connect+0x154>)
 800cfa8:	f06f 0509 	mvn.w	r5, #9
 800cfac:	4815      	ldr	r0, [pc, #84]	@ (800d004 <tcp_connect+0x158>)
 800cfae:	f005 ff9f 	bl	8012ef0 <iprintf>
 800cfb2:	e7ed      	b.n	800cf90 <tcp_connect+0xe4>
      return ERR_BUF;
 800cfb4:	f06f 0501 	mvn.w	r5, #1
 800cfb8:	e7ea      	b.n	800cf90 <tcp_connect+0xe4>
    return ERR_RTE;
 800cfba:	f06f 0503 	mvn.w	r5, #3
 800cfbe:	e7e7      	b.n	800cf90 <tcp_connect+0xe4>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cfc0:	4b0e      	ldr	r3, [pc, #56]	@ (800cffc <tcp_connect+0x150>)
 800cfc2:	f240 4236 	movw	r2, #1078	@ 0x436
 800cfc6:	4910      	ldr	r1, [pc, #64]	@ (800d008 <tcp_connect+0x15c>)
 800cfc8:	480e      	ldr	r0, [pc, #56]	@ (800d004 <tcp_connect+0x158>)
 800cfca:	f005 ff91 	bl	8012ef0 <iprintf>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfce:	f06f 050f 	mvn.w	r5, #15
 800cfd2:	e7dd      	b.n	800cf90 <tcp_connect+0xe4>
 800cfd4:	4b09      	ldr	r3, [pc, #36]	@ (800cffc <tcp_connect+0x150>)
 800cfd6:	f240 4235 	movw	r2, #1077	@ 0x435
 800cfda:	490c      	ldr	r1, [pc, #48]	@ (800d00c <tcp_connect+0x160>)
 800cfdc:	4809      	ldr	r0, [pc, #36]	@ (800d004 <tcp_connect+0x158>)
 800cfde:	f005 ff87 	bl	8012ef0 <iprintf>
 800cfe2:	e7f4      	b.n	800cfce <tcp_connect+0x122>
 800cfe4:	24000030 	.word	0x24000030
 800cfe8:	2400fcd0 	.word	0x2400fcd0
 800cfec:	16d016d0 	.word	0x16d016d0
 800cff0:	2400fccc 	.word	0x2400fccc
 800cff4:	2400fcc4 	.word	0x2400fcc4
 800cff8:	2400fcbf 	.word	0x2400fcbf
 800cffc:	080159ec 	.word	0x080159ec
 800d000:	08015b9c 	.word	0x08015b9c
 800d004:	08014150 	.word	0x08014150
 800d008:	08015b80 	.word	0x08015b80
 800d00c:	08015b64 	.word	0x08015b64

0800d010 <tcp_segs_free>:
  while (seg != NULL) {
 800d010:	b170      	cbz	r0, 800d030 <tcp_segs_free+0x20>
{
 800d012:	b538      	push	{r3, r4, r5, lr}
 800d014:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 800d016:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800d018:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d01a:	6868      	ldr	r0, [r5, #4]
 800d01c:	b108      	cbz	r0, 800d022 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800d01e:	f7ff fa0b 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d022:	4629      	mov	r1, r5
 800d024:	2003      	movs	r0, #3
 800d026:	f7fe fefb 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800d02a:	2c00      	cmp	r4, #0
 800d02c:	d1f3      	bne.n	800d016 <tcp_segs_free+0x6>
}
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop

0800d034 <tcp_seg_free>:
  if (seg != NULL) {
 800d034:	b158      	cbz	r0, 800d04e <tcp_seg_free+0x1a>
{
 800d036:	b510      	push	{r4, lr}
 800d038:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800d03a:	6840      	ldr	r0, [r0, #4]
 800d03c:	b108      	cbz	r0, 800d042 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800d03e:	f7ff f9fb 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d042:	4621      	mov	r1, r4
 800d044:	2003      	movs	r0, #3
}
 800d046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800d04a:	f7fe bee9 	b.w	800be20 <memp_free>
 800d04e:	4770      	bx	lr

0800d050 <tcp_seg_copy>:
{
 800d050:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d052:	4605      	mov	r5, r0
 800d054:	b188      	cbz	r0, 800d07a <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d056:	2003      	movs	r0, #3
 800d058:	f7fe fe9c 	bl	800bd94 <memp_malloc>
  if (cseg == NULL) {
 800d05c:	4604      	mov	r4, r0
 800d05e:	b150      	cbz	r0, 800d076 <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d060:	6868      	ldr	r0, [r5, #4]
 800d062:	6829      	ldr	r1, [r5, #0]
 800d064:	68aa      	ldr	r2, [r5, #8]
 800d066:	68eb      	ldr	r3, [r5, #12]
 800d068:	6060      	str	r0, [r4, #4]
 800d06a:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 800d06c:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d06e:	60a2      	str	r2, [r4, #8]
 800d070:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800d072:	f7ff fb59 	bl	800c728 <pbuf_ref>
}
 800d076:	4620      	mov	r0, r4
 800d078:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d07a:	4b04      	ldr	r3, [pc, #16]	@ (800d08c <tcp_seg_copy+0x3c>)
 800d07c:	f240 6282 	movw	r2, #1666	@ 0x682
 800d080:	4903      	ldr	r1, [pc, #12]	@ (800d090 <tcp_seg_copy+0x40>)
 800d082:	4804      	ldr	r0, [pc, #16]	@ (800d094 <tcp_seg_copy+0x44>)
 800d084:	f005 ff34 	bl	8012ef0 <iprintf>
 800d088:	e7e5      	b.n	800d056 <tcp_seg_copy+0x6>
 800d08a:	bf00      	nop
 800d08c:	080159ec 	.word	0x080159ec
 800d090:	08015bcc 	.word	0x08015bcc
 800d094:	08014150 	.word	0x08014150

0800d098 <tcp_arg>:
{
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4604      	mov	r4, r0
 800d09c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800d09e:	f7fa f945 	bl	800732c <sys_check_core_locking>
  if (pcb != NULL) {
 800d0a2:	b104      	cbz	r4, 800d0a6 <tcp_arg+0xe>
    pcb->callback_arg = arg;
 800d0a4:	6125      	str	r5, [r4, #16]
}
 800d0a6:	bd38      	pop	{r3, r4, r5, pc}

0800d0a8 <tcp_recv>:
{
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800d0ae:	f7fa f93d 	bl	800732c <sys_check_core_locking>
  if (pcb != NULL) {
 800d0b2:	b124      	cbz	r4, 800d0be <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d0b4:	7d23      	ldrb	r3, [r4, #20]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d002      	beq.n	800d0c0 <tcp_recv+0x18>
    pcb->recv = recv;
 800d0ba:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 800d0be:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d0c0:	4b03      	ldr	r3, [pc, #12]	@ (800d0d0 <tcp_recv+0x28>)
 800d0c2:	f240 72df 	movw	r2, #2015	@ 0x7df
 800d0c6:	4903      	ldr	r1, [pc, #12]	@ (800d0d4 <tcp_recv+0x2c>)
 800d0c8:	4803      	ldr	r0, [pc, #12]	@ (800d0d8 <tcp_recv+0x30>)
 800d0ca:	f005 ff11 	bl	8012ef0 <iprintf>
 800d0ce:	e7f4      	b.n	800d0ba <tcp_recv+0x12>
 800d0d0:	080159ec 	.word	0x080159ec
 800d0d4:	08015be8 	.word	0x08015be8
 800d0d8:	08014150 	.word	0x08014150

0800d0dc <tcp_sent>:
{
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4604      	mov	r4, r0
 800d0e0:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800d0e2:	f7fa f923 	bl	800732c <sys_check_core_locking>
  if (pcb != NULL) {
 800d0e6:	b124      	cbz	r4, 800d0f2 <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d0e8:	7d23      	ldrb	r3, [r4, #20]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d002      	beq.n	800d0f4 <tcp_sent+0x18>
    pcb->sent = sent;
 800d0ee:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
}
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d0f4:	4b03      	ldr	r3, [pc, #12]	@ (800d104 <tcp_sent+0x28>)
 800d0f6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800d0fa:	4903      	ldr	r1, [pc, #12]	@ (800d108 <tcp_sent+0x2c>)
 800d0fc:	4803      	ldr	r0, [pc, #12]	@ (800d10c <tcp_sent+0x30>)
 800d0fe:	f005 fef7 	bl	8012ef0 <iprintf>
 800d102:	e7f4      	b.n	800d0ee <tcp_sent+0x12>
 800d104:	080159ec 	.word	0x080159ec
 800d108:	08015c10 	.word	0x08015c10
 800d10c:	08014150 	.word	0x08014150

0800d110 <tcp_err>:
{
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4604      	mov	r4, r0
 800d114:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800d116:	f7fa f909 	bl	800732c <sys_check_core_locking>
  if (pcb != NULL) {
 800d11a:	b124      	cbz	r4, 800d126 <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d11c:	7d23      	ldrb	r3, [r4, #20]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d002      	beq.n	800d128 <tcp_err+0x18>
    pcb->errf = err;
 800d122:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 800d126:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d128:	4b03      	ldr	r3, [pc, #12]	@ (800d138 <tcp_err+0x28>)
 800d12a:	f640 020d 	movw	r2, #2061	@ 0x80d
 800d12e:	4903      	ldr	r1, [pc, #12]	@ (800d13c <tcp_err+0x2c>)
 800d130:	4803      	ldr	r0, [pc, #12]	@ (800d140 <tcp_err+0x30>)
 800d132:	f005 fedd 	bl	8012ef0 <iprintf>
 800d136:	e7f4      	b.n	800d122 <tcp_err+0x12>
 800d138:	080159ec 	.word	0x080159ec
 800d13c:	08015c38 	.word	0x08015c38
 800d140:	08014150 	.word	0x08014150

0800d144 <tcp_accept>:
{
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4604      	mov	r4, r0
 800d148:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800d14a:	f7fa f8ef 	bl	800732c <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d14e:	b11c      	cbz	r4, 800d158 <tcp_accept+0x14>
 800d150:	7d23      	ldrb	r3, [r4, #20]
 800d152:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 800d154:	bf08      	it	eq
 800d156:	61a5      	streq	r5, [r4, #24]
}
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop

0800d15c <tcp_poll>:
{
 800d15c:	b570      	push	{r4, r5, r6, lr}
 800d15e:	4604      	mov	r4, r0
 800d160:	460e      	mov	r6, r1
 800d162:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800d164:	f7fa f8e2 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d168:	b18c      	cbz	r4, 800d18e <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d16a:	7d23      	ldrb	r3, [r4, #20]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d003      	beq.n	800d178 <tcp_poll+0x1c>
  pcb->poll = poll;
 800d170:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 800d174:	7765      	strb	r5, [r4, #29]
}
 800d176:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d178:	4b09      	ldr	r3, [pc, #36]	@ (800d1a0 <tcp_poll+0x44>)
 800d17a:	f640 023e 	movw	r2, #2110	@ 0x83e
 800d17e:	4909      	ldr	r1, [pc, #36]	@ (800d1a4 <tcp_poll+0x48>)
 800d180:	4809      	ldr	r0, [pc, #36]	@ (800d1a8 <tcp_poll+0x4c>)
 800d182:	f005 feb5 	bl	8012ef0 <iprintf>
  pcb->poll = poll;
 800d186:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 800d18a:	7765      	strb	r5, [r4, #29]
}
 800d18c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d18e:	4b04      	ldr	r3, [pc, #16]	@ (800d1a0 <tcp_poll+0x44>)
 800d190:	f640 023d 	movw	r2, #2109	@ 0x83d
 800d194:	4905      	ldr	r1, [pc, #20]	@ (800d1ac <tcp_poll+0x50>)
 800d196:	4804      	ldr	r0, [pc, #16]	@ (800d1a8 <tcp_poll+0x4c>)
}
 800d198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d19c:	f005 bea8 	b.w	8012ef0 <iprintf>
 800d1a0:	080159ec 	.word	0x080159ec
 800d1a4:	08015c78 	.word	0x08015c78
 800d1a8:	08014150 	.word	0x08014150
 800d1ac:	08015c60 	.word	0x08015c60

0800d1b0 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d041      	beq.n	800d238 <tcp_pcb_purge+0x88>
{
 800d1b4:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 800d1b6:	7d03      	ldrb	r3, [r0, #20]
 800d1b8:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 800d1ba:	2b0a      	cmp	r3, #10
 800d1bc:	d001      	beq.n	800d1c2 <tcp_pcb_purge+0x12>
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d800      	bhi.n	800d1c4 <tcp_pcb_purge+0x14>
}
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800d1c4:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800d1c6:	b118      	cbz	r0, 800d1d0 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800d1c8:	f7ff f936 	bl	800c438 <pbuf_free>
      pcb->refused_data = NULL;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	67ab      	str	r3, [r5, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 800d1d0:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800d1d2:	b164      	cbz	r4, 800d1ee <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800d1d4:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800d1d6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d1d8:	6870      	ldr	r0, [r6, #4]
 800d1da:	b108      	cbz	r0, 800d1e0 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800d1dc:	f7ff f92c 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	2003      	movs	r0, #3
 800d1e4:	f7fe fe1c 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	d1f3      	bne.n	800d1d4 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800d1ec:	676c      	str	r4, [r5, #116]	@ 0x74
    pcb->rtime = -1;
 800d1ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 800d1f2:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
    pcb->rtime = -1;
 800d1f4:	862b      	strh	r3, [r5, #48]	@ 0x30
  while (seg != NULL) {
 800d1f6:	b15c      	cbz	r4, 800d210 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800d1f8:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800d1fa:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d1fc:	6870      	ldr	r0, [r6, #4]
 800d1fe:	b108      	cbz	r0, 800d204 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800d200:	f7ff f91a 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d204:	4631      	mov	r1, r6
 800d206:	2003      	movs	r0, #3
 800d208:	f7fe fe0a 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800d20c:	2c00      	cmp	r4, #0
 800d20e:	d1f3      	bne.n	800d1f8 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800d210:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
  while (seg != NULL) {
 800d212:	b15c      	cbz	r4, 800d22c <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800d214:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800d216:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d218:	6870      	ldr	r0, [r6, #4]
 800d21a:	b108      	cbz	r0, 800d220 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800d21c:	f7ff f90c 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d220:	4631      	mov	r1, r6
 800d222:	2003      	movs	r0, #3
 800d224:	f7fe fdfc 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800d228:	2c00      	cmp	r4, #0
 800d22a:	d1f3      	bne.n	800d214 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800d22c:	2300      	movs	r3, #0
 800d22e:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 800d232:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
}
 800d236:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d238:	4b03      	ldr	r3, [pc, #12]	@ (800d248 <tcp_pcb_purge+0x98>)
 800d23a:	f640 0251 	movw	r2, #2129	@ 0x851
 800d23e:	4903      	ldr	r1, [pc, #12]	@ (800d24c <tcp_pcb_purge+0x9c>)
 800d240:	4803      	ldr	r0, [pc, #12]	@ (800d250 <tcp_pcb_purge+0xa0>)
 800d242:	f005 be55 	b.w	8012ef0 <iprintf>
 800d246:	bf00      	nop
 800d248:	080159ec 	.word	0x080159ec
 800d24c:	08015c98 	.word	0x08015c98
 800d250:	08014150 	.word	0x08014150

0800d254 <tcp_slowtmr>:
{
 800d254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800d258:	4da7      	ldr	r5, [pc, #668]	@ (800d4f8 <tcp_slowtmr+0x2a4>)
{
 800d25a:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800d25c:	4ea7      	ldr	r6, [pc, #668]	@ (800d4fc <tcp_slowtmr+0x2a8>)
  ++tcp_ticks;
 800d25e:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d260:	f8df b2c4 	ldr.w	fp, [pc, #708]	@ 800d528 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800d264:	3301      	adds	r3, #1
 800d266:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800d268:	7833      	ldrb	r3, [r6, #0]
 800d26a:	3301      	adds	r3, #1
 800d26c:	7033      	strb	r3, [r6, #0]
  pcb = tcp_active_pcbs;
 800d26e:	4ba4      	ldr	r3, [pc, #656]	@ (800d500 <tcp_slowtmr+0x2ac>)
 800d270:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800d272:	2c00      	cmp	r4, #0
 800d274:	d05f      	beq.n	800d336 <tcp_slowtmr+0xe2>
  prev = NULL;
 800d276:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d278:	46b9      	mov	r9, r7
 800d27a:	7d23      	ldrb	r3, [r4, #20]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 80e4 	beq.w	800d44a <tcp_slowtmr+0x1f6>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d282:	2b01      	cmp	r3, #1
 800d284:	f000 80ec 	beq.w	800d460 <tcp_slowtmr+0x20c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d288:	2b0a      	cmp	r3, #10
 800d28a:	f000 80f4 	beq.w	800d476 <tcp_slowtmr+0x222>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d28e:	7833      	ldrb	r3, [r6, #0]
 800d290:	7fa2      	ldrb	r2, [r4, #30]
 800d292:	429a      	cmp	r2, r3
 800d294:	f000 80fb 	beq.w	800d48e <tcp_slowtmr+0x23a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d298:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800d29a:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d29c:	2a02      	cmp	r2, #2
 800d29e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800d2a2:	f000 809e 	beq.w	800d3e2 <tcp_slowtmr+0x18e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d2a6:	2b0b      	cmp	r3, #11
 800d2a8:	f240 80a2 	bls.w	800d3f0 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800d2ac:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800d2b0:	2a06      	cmp	r2, #6
 800d2b2:	f000 80bb 	beq.w	800d42c <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d2b6:	7a63      	ldrb	r3, [r4, #9]
 800d2b8:	071b      	lsls	r3, r3, #28
 800d2ba:	f140 8096 	bpl.w	800d3ea <tcp_slowtmr+0x196>
 800d2be:	2a04      	cmp	r2, #4
 800d2c0:	d002      	beq.n	800d2c8 <tcp_slowtmr+0x74>
 800d2c2:	2a07      	cmp	r2, #7
 800d2c4:	f040 8091 	bne.w	800d3ea <tcp_slowtmr+0x196>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d2c8:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800d2cc:	4b8d      	ldr	r3, [pc, #564]	@ (800d504 <tcp_slowtmr+0x2b0>)
 800d2ce:	498e      	ldr	r1, [pc, #568]	@ (800d508 <tcp_slowtmr+0x2b4>)
 800d2d0:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2d2:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d2d4:	fba1 1303 	umull	r1, r3, r1, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2d8:	6a21      	ldr	r1, [r4, #32]
 800d2da:	1a52      	subs	r2, r2, r1
 800d2dc:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800d2e0:	f240 8189 	bls.w	800d5f6 <tcp_slowtmr+0x3a2>
        ++pcb_remove;
 800d2e4:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800d2e8:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800d2ec:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800d2f0:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 800d2f2:	b157      	cbz	r7, 800d30a <tcp_slowtmr+0xb6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d2f4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800d2f8:	682a      	ldr	r2, [r5, #0]
 800d2fa:	6a21      	ldr	r1, [r4, #32]
 800d2fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d300:	1a52      	subs	r2, r2, r1
    if (pcb->ooseq != NULL &&
 800d302:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800d306:	f080 80e7 	bcs.w	800d4d8 <tcp_slowtmr+0x284>
    if (pcb->state == SYN_RCVD) {
 800d30a:	7d23      	ldrb	r3, [r4, #20]
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	f000 80c4 	beq.w	800d49a <tcp_slowtmr+0x246>
    if (pcb->state == LAST_ACK) {
 800d312:	2b09      	cmp	r3, #9
 800d314:	d030      	beq.n	800d378 <tcp_slowtmr+0x124>
    if (pcb_remove) {
 800d316:	f1b8 0f00 	cmp.w	r8, #0
 800d31a:	d132      	bne.n	800d382 <tcp_slowtmr+0x12e>
      ++prev->polltmr;
 800d31c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d31e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800d320:	3301      	adds	r3, #1
      pcb = pcb->next;
 800d322:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 800d324:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800d326:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800d328:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d32a:	f240 80bd 	bls.w	800d4a8 <tcp_slowtmr+0x254>
    pcb_reset = 0;
 800d32e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800d330:	463c      	mov	r4, r7
  while (pcb != NULL) {
 800d332:	2c00      	cmp	r4, #0
 800d334:	d1a1      	bne.n	800d27a <tcp_slowtmr+0x26>
  pcb = tcp_tw_pcbs;
 800d336:	4f75      	ldr	r7, [pc, #468]	@ (800d50c <tcp_slowtmr+0x2b8>)
 800d338:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800d33a:	b1d4      	cbz	r4, 800d372 <tcp_slowtmr+0x11e>
  prev = NULL;
 800d33c:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d33e:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 800d528 <tcp_slowtmr+0x2d4>
 800d342:	f8df 91e8 	ldr.w	r9, [pc, #488]	@ 800d52c <tcp_slowtmr+0x2d8>
 800d346:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 800d518 <tcp_slowtmr+0x2c4>
 800d34a:	7d23      	ldrb	r3, [r4, #20]
 800d34c:	2b0a      	cmp	r3, #10
 800d34e:	d006      	beq.n	800d35e <tcp_slowtmr+0x10a>
 800d350:	4653      	mov	r3, sl
 800d352:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d356:	4649      	mov	r1, r9
 800d358:	4640      	mov	r0, r8
 800d35a:	f005 fdc9 	bl	8012ef0 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d35e:	682b      	ldr	r3, [r5, #0]
 800d360:	6a22      	ldr	r2, [r4, #32]
 800d362:	1a9b      	subs	r3, r3, r2
 800d364:	2bf0      	cmp	r3, #240	@ 0xf0
 800d366:	f200 812b 	bhi.w	800d5c0 <tcp_slowtmr+0x36c>
      pcb = pcb->next;
 800d36a:	4626      	mov	r6, r4
 800d36c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800d36e:	2c00      	cmp	r4, #0
 800d370:	d1eb      	bne.n	800d34a <tcp_slowtmr+0xf6>
}
 800d372:	b007      	add	sp, #28
 800d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	6a22      	ldr	r2, [r4, #32]
 800d37c:	1a9b      	subs	r3, r3, r2
 800d37e:	2bf0      	cmp	r3, #240	@ 0xf0
 800d380:	d9c9      	bls.n	800d316 <tcp_slowtmr+0xc2>
      tcp_pcb_purge(pcb);
 800d382:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800d384:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 800d388:	f7ff ff12 	bl	800d1b0 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d38c:	4b5c      	ldr	r3, [pc, #368]	@ (800d500 <tcp_slowtmr+0x2ac>)
 800d38e:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800d390:	f1b9 0f00 	cmp.w	r9, #0
 800d394:	f000 8176 	beq.w	800d684 <tcp_slowtmr+0x430>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d398:	42a3      	cmp	r3, r4
 800d39a:	f000 819d 	beq.w	800d6d8 <tcp_slowtmr+0x484>
        prev->next = pcb->next;
 800d39e:	68e3      	ldr	r3, [r4, #12]
 800d3a0:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800d3a4:	f1ba 0f00 	cmp.w	sl, #0
 800d3a8:	f040 813f 	bne.w	800d62a <tcp_slowtmr+0x3d6>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d3ac:	7d23      	ldrb	r3, [r4, #20]
 800d3ae:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800d3b0:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d3b4:	f000 814b 	beq.w	800d64e <tcp_slowtmr+0x3fa>
  memp_free(MEMP_TCP_PCB, pcb);
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	f7fe fd30 	bl	800be20 <memp_free>
      tcp_active_pcbs_changed = 0;
 800d3c0:	4c53      	ldr	r4, [pc, #332]	@ (800d510 <tcp_slowtmr+0x2bc>)
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d3c6:	b13f      	cbz	r7, 800d3d8 <tcp_slowtmr+0x184>
 800d3c8:	f06f 010c 	mvn.w	r1, #12
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 800d3d0:	7823      	ldrb	r3, [r4, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f47f af4b 	bne.w	800d26e <tcp_slowtmr+0x1a>
      pcb = pcb->next;
 800d3d8:	4654      	mov	r4, sl
  while (pcb != NULL) {
 800d3da:	2c00      	cmp	r4, #0
 800d3dc:	f47f af4d 	bne.w	800d27a <tcp_slowtmr+0x26>
 800d3e0:	e7a9      	b.n	800d336 <tcp_slowtmr+0xe2>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d3e2:	2b05      	cmp	r3, #5
 800d3e4:	d904      	bls.n	800d3f0 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800d3e6:	f04f 0801 	mov.w	r8, #1
    pcb_reset = 0;
 800d3ea:	f04f 0a00 	mov.w	sl, #0
 800d3ee:	e77f      	b.n	800d2f0 <tcp_slowtmr+0x9c>
      if (pcb->persist_backoff > 0) {
 800d3f0:	f894 8099 	ldrb.w	r8, [r4, #153]	@ 0x99
 800d3f4:	f1b8 0f00 	cmp.w	r8, #0
 800d3f8:	f000 809a 	beq.w	800d530 <tcp_slowtmr+0x2dc>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d3fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d3fe:	b133      	cbz	r3, 800d40e <tcp_slowtmr+0x1ba>
 800d400:	465b      	mov	r3, fp
 800d402:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d406:	4943      	ldr	r1, [pc, #268]	@ (800d514 <tcp_slowtmr+0x2c0>)
 800d408:	4843      	ldr	r0, [pc, #268]	@ (800d518 <tcp_slowtmr+0x2c4>)
 800d40a:	f005 fd71 	bl	8012ef0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d40e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 8182 	beq.w	800d71a <tcp_slowtmr+0x4c6>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d416:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800d41a:	2b0b      	cmp	r3, #11
 800d41c:	f240 811e 	bls.w	800d65c <tcp_slowtmr+0x408>
    if (pcb->state == FIN_WAIT_2) {
 800d420:	7d22      	ldrb	r2, [r4, #20]
      ++pcb_remove;
 800d422:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800d426:	2a06      	cmp	r2, #6
 800d428:	f47f af45 	bne.w	800d2b6 <tcp_slowtmr+0x62>
      if (pcb->flags & TF_RXCLOSED) {
 800d42c:	8b63      	ldrh	r3, [r4, #26]
 800d42e:	06da      	lsls	r2, r3, #27
 800d430:	d5db      	bpl.n	800d3ea <tcp_slowtmr+0x196>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d432:	682b      	ldr	r3, [r5, #0]
 800d434:	6a22      	ldr	r2, [r4, #32]
 800d436:	1a9b      	subs	r3, r3, r2
 800d438:	2b28      	cmp	r3, #40	@ 0x28
 800d43a:	d9d6      	bls.n	800d3ea <tcp_slowtmr+0x196>
          ++pcb_remove;
 800d43c:	f108 0801 	add.w	r8, r8, #1
    pcb_reset = 0;
 800d440:	f04f 0a00 	mov.w	sl, #0
          ++pcb_remove;
 800d444:	fa5f f888 	uxtb.w	r8, r8
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d448:	e752      	b.n	800d2f0 <tcp_slowtmr+0x9c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d44a:	465b      	mov	r3, fp
 800d44c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d450:	4932      	ldr	r1, [pc, #200]	@ (800d51c <tcp_slowtmr+0x2c8>)
 800d452:	4831      	ldr	r0, [pc, #196]	@ (800d518 <tcp_slowtmr+0x2c4>)
 800d454:	f005 fd4c 	bl	8012ef0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d458:	7d23      	ldrb	r3, [r4, #20]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	f47f af14 	bne.w	800d288 <tcp_slowtmr+0x34>
 800d460:	465b      	mov	r3, fp
 800d462:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d466:	492e      	ldr	r1, [pc, #184]	@ (800d520 <tcp_slowtmr+0x2cc>)
 800d468:	482b      	ldr	r0, [pc, #172]	@ (800d518 <tcp_slowtmr+0x2c4>)
 800d46a:	f005 fd41 	bl	8012ef0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d46e:	7d23      	ldrb	r3, [r4, #20]
 800d470:	2b0a      	cmp	r3, #10
 800d472:	f47f af0c 	bne.w	800d28e <tcp_slowtmr+0x3a>
 800d476:	465b      	mov	r3, fp
 800d478:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d47c:	4929      	ldr	r1, [pc, #164]	@ (800d524 <tcp_slowtmr+0x2d0>)
 800d47e:	4826      	ldr	r0, [pc, #152]	@ (800d518 <tcp_slowtmr+0x2c4>)
 800d480:	f005 fd36 	bl	8012ef0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d484:	7833      	ldrb	r3, [r6, #0]
 800d486:	7fa2      	ldrb	r2, [r4, #30]
 800d488:	429a      	cmp	r2, r3
 800d48a:	f47f af05 	bne.w	800d298 <tcp_slowtmr+0x44>
      continue;
 800d48e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800d490:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800d492:	2c00      	cmp	r4, #0
 800d494:	f47f aef1 	bne.w	800d27a <tcp_slowtmr+0x26>
 800d498:	e74d      	b.n	800d336 <tcp_slowtmr+0xe2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d49a:	682b      	ldr	r3, [r5, #0]
 800d49c:	6a22      	ldr	r2, [r4, #32]
 800d49e:	1a9b      	subs	r3, r3, r2
 800d4a0:	2b28      	cmp	r3, #40	@ 0x28
 800d4a2:	f63f af6e 	bhi.w	800d382 <tcp_slowtmr+0x12e>
 800d4a6:	e736      	b.n	800d316 <tcp_slowtmr+0xc2>
        tcp_active_pcbs_changed = 0;
 800d4a8:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800d510 <tcp_slowtmr+0x2bc>
        TCP_EVENT_POLL(prev, err);
 800d4ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 800d4b0:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800d4b4:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800d4b8:	b153      	cbz	r3, 800d4d0 <tcp_slowtmr+0x27c>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	6920      	ldr	r0, [r4, #16]
 800d4be:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800d4c0:	f899 3000 	ldrb.w	r3, [r9]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f47f aed2 	bne.w	800d26e <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	f47f af2f 	bne.w	800d32e <tcp_slowtmr+0xda>
          tcp_output(prev);
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f003 f989 	bl	80107e8 <tcp_output>
 800d4d6:	e72a      	b.n	800d32e <tcp_slowtmr+0xda>
 800d4d8:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800d4da:	463c      	mov	r4, r7
    struct tcp_seg *next = seg->next;
 800d4dc:	683f      	ldr	r7, [r7, #0]
    if (seg->p != NULL) {
 800d4de:	6860      	ldr	r0, [r4, #4]
 800d4e0:	b108      	cbz	r0, 800d4e6 <tcp_slowtmr+0x292>
      pbuf_free(seg->p);
 800d4e2:	f7fe ffa9 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	2003      	movs	r0, #3
 800d4ea:	f7fe fc99 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800d4ee:	2f00      	cmp	r7, #0
 800d4f0:	d1f3      	bne.n	800d4da <tcp_slowtmr+0x286>
    pcb->ooseq = NULL;
 800d4f2:	9c05      	ldr	r4, [sp, #20]
 800d4f4:	6767      	str	r7, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d4f6:	e708      	b.n	800d30a <tcp_slowtmr+0xb6>
 800d4f8:	2400fcd0 	.word	0x2400fcd0
 800d4fc:	2400fcbd 	.word	0x2400fcbd
 800d500:	2400fcc4 	.word	0x2400fcc4
 800d504:	000a4cb8 	.word	0x000a4cb8
 800d508:	10624dd3 	.word	0x10624dd3
 800d50c:	2400fcc0 	.word	0x2400fcc0
 800d510:	2400fcbf 	.word	0x2400fcbf
 800d514:	08015d3c 	.word	0x08015d3c
 800d518:	08014150 	.word	0x08014150
 800d51c:	08015cb4 	.word	0x08015cb4
 800d520:	08015ce0 	.word	0x08015ce0
 800d524:	08015d0c 	.word	0x08015d0c
 800d528:	080159ec 	.word	0x080159ec
 800d52c:	08015e00 	.word	0x08015e00
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d530:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800d534:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 800d538:	b299      	uxth	r1, r3
 800d53a:	4281      	cmp	r1, r0
 800d53c:	d802      	bhi.n	800d544 <tcp_slowtmr+0x2f0>
          ++pcb->rtime;
 800d53e:	3101      	adds	r1, #1
 800d540:	b20b      	sxth	r3, r1
 800d542:	8623      	strh	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d544:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	@ 0x40
 800d548:	4299      	cmp	r1, r3
 800d54a:	f73f aeb1 	bgt.w	800d2b0 <tcp_slowtmr+0x5c>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d54e:	4620      	mov	r0, r4
 800d550:	f003 f80e 	bl	8010570 <tcp_rexmit_rto_prepare>
 800d554:	2800      	cmp	r0, #0
 800d556:	f040 80e8 	bne.w	800d72a <tcp_slowtmr+0x4d6>
 800d55a:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 800d55c:	2b02      	cmp	r3, #2
 800d55e:	d014      	beq.n	800d58a <tcp_slowtmr+0x336>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d560:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d564:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	@ 0x3c
 800d568:	2a0c      	cmp	r2, #12
 800d56a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 800d56e:	bf28      	it	cs
 800d570:	220c      	movcs	r2, #12
 800d572:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800d576:	497a      	ldr	r1, [pc, #488]	@ (800d760 <tcp_slowtmr+0x50c>)
 800d578:	5c8a      	ldrb	r2, [r1, r2]
 800d57a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d57c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d580:	4293      	cmp	r3, r2
 800d582:	bfa8      	it	ge
 800d584:	4613      	movge	r3, r2
 800d586:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d58a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
            tcp_rexmit_rto_commit(pcb);
 800d58c:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d58e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
            pcb->cwnd = pcb->mss;
 800d592:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d596:	005b      	lsls	r3, r3, #1
 800d598:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d59a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800d59e:	428b      	cmp	r3, r1
 800d5a0:	bf28      	it	cs
 800d5a2:	460b      	movcs	r3, r1
 800d5a4:	085b      	lsrs	r3, r3, #1
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	bf38      	it	cc
 800d5aa:	4613      	movcc	r3, r2
 800d5ac:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
            pcb->rtime = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	8623      	strh	r3, [r4, #48]	@ 0x30
            pcb->bytes_acked = 0;
 800d5b4:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d5b8:	f003 faea 	bl	8010b90 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d5bc:	7d22      	ldrb	r2, [r4, #20]
 800d5be:	e677      	b.n	800d2b0 <tcp_slowtmr+0x5c>
      tcp_pcb_purge(pcb);
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f7ff fdf5 	bl	800d1b0 <tcp_pcb_purge>
      if (prev != NULL) {
 800d5c6:	2e00      	cmp	r6, #0
 800d5c8:	f000 808e 	beq.w	800d6e8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	42a3      	cmp	r3, r4
 800d5d0:	f000 80b6 	beq.w	800d740 <tcp_slowtmr+0x4ec>
        prev->next = pcb->next;
 800d5d4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800d5d8:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d5dc:	7d23      	ldrb	r3, [r4, #20]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	f000 8094 	beq.w	800d70c <tcp_slowtmr+0x4b8>
  memp_free(MEMP_TCP_PCB, pcb);
 800d5e4:	4621      	mov	r1, r4
      pcb = pcb->next;
 800d5e6:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	f7fe fc19 	bl	800be20 <memp_free>
  while (pcb != NULL) {
 800d5ee:	2c00      	cmp	r4, #0
 800d5f0:	f47f aeab 	bne.w	800d34a <tcp_slowtmr+0xf6>
 800d5f4:	e6bd      	b.n	800d372 <tcp_slowtmr+0x11e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d5f6:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 800d5fa:	495a      	ldr	r1, [pc, #360]	@ (800d764 <tcp_slowtmr+0x510>)
 800d5fc:	fb01 0003 	mla	r0, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 800d600:	4b59      	ldr	r3, [pc, #356]	@ (800d768 <tcp_slowtmr+0x514>)
 800d602:	fba3 3000 	umull	r3, r0, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d606:	ebb2 1f50 	cmp.w	r2, r0, lsr #5
 800d60a:	f67f aeee 	bls.w	800d3ea <tcp_slowtmr+0x196>
        err = tcp_keepalive(pcb);
 800d60e:	4620      	mov	r0, r4
 800d610:	f003 fb0a 	bl	8010c28 <tcp_keepalive>
        if (err == ERR_OK) {
 800d614:	2800      	cmp	r0, #0
 800d616:	f47f aee8 	bne.w	800d3ea <tcp_slowtmr+0x196>
          pcb->keep_cnt_sent++;
 800d61a:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
    pcb_reset = 0;
 800d61e:	f04f 0a00 	mov.w	sl, #0
          pcb->keep_cnt_sent++;
 800d622:	3301      	adds	r3, #1
 800d624:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d628:	e662      	b.n	800d2f0 <tcp_slowtmr+0x9c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d62a:	8b23      	ldrh	r3, [r4, #24]
 800d62c:	4620      	mov	r0, r4
 800d62e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d630:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800d632:	9302      	str	r3, [sp, #8]
 800d634:	8ae3      	ldrh	r3, [r4, #22]
 800d636:	9301      	str	r3, [sp, #4]
 800d638:	1d23      	adds	r3, r4, #4
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	4623      	mov	r3, r4
 800d63e:	f003 f859 	bl	80106f4 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d642:	7d23      	ldrb	r3, [r4, #20]
 800d644:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800d646:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d64a:	f47f aeb5 	bne.w	800d3b8 <tcp_slowtmr+0x164>
 800d64e:	465b      	mov	r3, fp
 800d650:	22d4      	movs	r2, #212	@ 0xd4
 800d652:	4946      	ldr	r1, [pc, #280]	@ (800d76c <tcp_slowtmr+0x518>)
 800d654:	4846      	ldr	r0, [pc, #280]	@ (800d770 <tcp_slowtmr+0x51c>)
 800d656:	f005 fc4b 	bl	8012ef0 <iprintf>
 800d65a:	e6ad      	b.n	800d3b8 <tcp_slowtmr+0x164>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d65c:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800d660:	4a44      	ldr	r2, [pc, #272]	@ (800d774 <tcp_slowtmr+0x520>)
 800d662:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800d664:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d668:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d216      	bcs.n	800d69e <tcp_slowtmr+0x44a>
            pcb->persist_cnt++;
 800d670:	3301      	adds	r3, #1
 800d672:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800d674:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800d676:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d67a:	d210      	bcs.n	800d69e <tcp_slowtmr+0x44a>
    if (pcb->state == FIN_WAIT_2) {
 800d67c:	7d22      	ldrb	r2, [r4, #20]
    pcb_remove = 0;
 800d67e:	f04f 0800 	mov.w	r8, #0
 800d682:	e615      	b.n	800d2b0 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d684:	42a3      	cmp	r3, r4
 800d686:	d006      	beq.n	800d696 <tcp_slowtmr+0x442>
 800d688:	465b      	mov	r3, fp
 800d68a:	f240 5271 	movw	r2, #1393	@ 0x571
 800d68e:	493a      	ldr	r1, [pc, #232]	@ (800d778 <tcp_slowtmr+0x524>)
 800d690:	4837      	ldr	r0, [pc, #220]	@ (800d770 <tcp_slowtmr+0x51c>)
 800d692:	f005 fc2d 	bl	8012ef0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d696:	68e3      	ldr	r3, [r4, #12]
 800d698:	4a38      	ldr	r2, [pc, #224]	@ (800d77c <tcp_slowtmr+0x528>)
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	e682      	b.n	800d3a4 <tcp_slowtmr+0x150>
            if (pcb->snd_wnd == 0) {
 800d69e:	f8b4 7060 	ldrh.w	r7, [r4, #96]	@ 0x60
 800d6a2:	b937      	cbnz	r7, 800d6b2 <tcp_slowtmr+0x45e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f003 fae5 	bl	8010c74 <tcp_zero_window_probe>
 800d6aa:	b140      	cbz	r0, 800d6be <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800d6ac:	46b8      	mov	r8, r7
    if (pcb->state == FIN_WAIT_2) {
 800d6ae:	7d22      	ldrb	r2, [r4, #20]
 800d6b0:	e5fe      	b.n	800d2b0 <tcp_slowtmr+0x5c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f002 fdaf 	bl	8010218 <tcp_split_unsent_seg>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d048      	beq.n	800d750 <tcp_slowtmr+0x4fc>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d6be:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
              pcb->persist_cnt = 0;
 800d6c2:	f04f 0800 	mov.w	r8, #0
    if (pcb->state == FIN_WAIT_2) {
 800d6c6:	7d22      	ldrb	r2, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d6c8:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800d6ca:	f884 8098 	strb.w	r8, [r4, #152]	@ 0x98
                pcb->persist_backoff++;
 800d6ce:	bf9c      	itt	ls
 800d6d0:	3301      	addls	r3, #1
 800d6d2:	f884 3099 	strbls.w	r3, [r4, #153]	@ 0x99
 800d6d6:	e5eb      	b.n	800d2b0 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d6d8:	4b29      	ldr	r3, [pc, #164]	@ (800d780 <tcp_slowtmr+0x52c>)
 800d6da:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d6de:	4929      	ldr	r1, [pc, #164]	@ (800d784 <tcp_slowtmr+0x530>)
 800d6e0:	4823      	ldr	r0, [pc, #140]	@ (800d770 <tcp_slowtmr+0x51c>)
 800d6e2:	f005 fc05 	bl	8012ef0 <iprintf>
 800d6e6:	e65a      	b.n	800d39e <tcp_slowtmr+0x14a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	42a3      	cmp	r3, r4
 800d6ec:	d006      	beq.n	800d6fc <tcp_slowtmr+0x4a8>
 800d6ee:	4b24      	ldr	r3, [pc, #144]	@ (800d780 <tcp_slowtmr+0x52c>)
 800d6f0:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d6f4:	4924      	ldr	r1, [pc, #144]	@ (800d788 <tcp_slowtmr+0x534>)
 800d6f6:	481e      	ldr	r0, [pc, #120]	@ (800d770 <tcp_slowtmr+0x51c>)
 800d6f8:	f005 fbfa 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d6fc:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800d6fe:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d702:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800d704:	f8c7 b000 	str.w	fp, [r7]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d708:	f47f af6c 	bne.w	800d5e4 <tcp_slowtmr+0x390>
 800d70c:	4b1c      	ldr	r3, [pc, #112]	@ (800d780 <tcp_slowtmr+0x52c>)
 800d70e:	22d4      	movs	r2, #212	@ 0xd4
 800d710:	4916      	ldr	r1, [pc, #88]	@ (800d76c <tcp_slowtmr+0x518>)
 800d712:	4817      	ldr	r0, [pc, #92]	@ (800d770 <tcp_slowtmr+0x51c>)
 800d714:	f005 fbec 	bl	8012ef0 <iprintf>
 800d718:	e764      	b.n	800d5e4 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d71a:	4b19      	ldr	r3, [pc, #100]	@ (800d780 <tcp_slowtmr+0x52c>)
 800d71c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d720:	491a      	ldr	r1, [pc, #104]	@ (800d78c <tcp_slowtmr+0x538>)
 800d722:	4813      	ldr	r0, [pc, #76]	@ (800d770 <tcp_slowtmr+0x51c>)
 800d724:	f005 fbe4 	bl	8012ef0 <iprintf>
 800d728:	e675      	b.n	800d416 <tcp_slowtmr+0x1c2>
            if (pcb->state != SYN_SENT) {
 800d72a:	7d22      	ldrb	r2, [r4, #20]
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d72c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
            if (pcb->state != SYN_SENT) {
 800d72e:	4613      	mov	r3, r2
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d730:	2900      	cmp	r1, #0
 800d732:	f47f adbd 	bne.w	800d2b0 <tcp_slowtmr+0x5c>
 800d736:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800d738:	2900      	cmp	r1, #0
 800d73a:	f47f af0f 	bne.w	800d55c <tcp_slowtmr+0x308>
 800d73e:	e5b7      	b.n	800d2b0 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d740:	4b0f      	ldr	r3, [pc, #60]	@ (800d780 <tcp_slowtmr+0x52c>)
 800d742:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d746:	4912      	ldr	r1, [pc, #72]	@ (800d790 <tcp_slowtmr+0x53c>)
 800d748:	4809      	ldr	r0, [pc, #36]	@ (800d770 <tcp_slowtmr+0x51c>)
 800d74a:	f005 fbd1 	bl	8012ef0 <iprintf>
 800d74e:	e741      	b.n	800d5d4 <tcp_slowtmr+0x380>
                if (tcp_output(pcb) == ERR_OK) {
 800d750:	4620      	mov	r0, r4
 800d752:	f003 f849 	bl	80107e8 <tcp_output>
 800d756:	2800      	cmp	r0, #0
 800d758:	d1b1      	bne.n	800d6be <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800d75a:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800d75c:	7d22      	ldrb	r2, [r4, #20]
 800d75e:	e5a7      	b.n	800d2b0 <tcp_slowtmr+0x5c>
 800d760:	080160d8 	.word	0x080160d8
 800d764:	000124f8 	.word	0x000124f8
 800d768:	10624dd3 	.word	0x10624dd3
 800d76c:	08015a28 	.word	0x08015a28
 800d770:	08014150 	.word	0x08014150
 800d774:	080160d0 	.word	0x080160d0
 800d778:	08015dd4 	.word	0x08015dd4
 800d77c:	2400fcc4 	.word	0x2400fcc4
 800d780:	080159ec 	.word	0x080159ec
 800d784:	08015da8 	.word	0x08015da8
 800d788:	08015e58 	.word	0x08015e58
 800d78c:	08015d70 	.word	0x08015d70
 800d790:	08015e30 	.word	0x08015e30

0800d794 <tcp_pcb_remove>:
{
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d798:	460c      	mov	r4, r1
 800d79a:	2900      	cmp	r1, #0
 800d79c:	d04a      	beq.n	800d834 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d79e:	2d00      	cmp	r5, #0
 800d7a0:	d051      	beq.n	800d846 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800d7a2:	682b      	ldr	r3, [r5, #0]
 800d7a4:	42a3      	cmp	r3, r4
 800d7a6:	d032      	beq.n	800d80e <tcp_pcb_remove+0x7a>
 800d7a8:	b12b      	cbz	r3, 800d7b6 <tcp_pcb_remove+0x22>
 800d7aa:	68da      	ldr	r2, [r3, #12]
 800d7ac:	42a2      	cmp	r2, r4
 800d7ae:	d03e      	beq.n	800d82e <tcp_pcb_remove+0x9a>
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1f9      	bne.n	800d7aa <tcp_pcb_remove+0x16>
 800d7b6:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800d7b8:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800d7ba:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800d7bc:	f7ff fcf8 	bl	800d1b0 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800d7c0:	7d23      	ldrb	r3, [r4, #20]
 800d7c2:	2b0a      	cmp	r3, #10
 800d7c4:	d02d      	beq.n	800d822 <tcp_pcb_remove+0x8e>
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d01d      	beq.n	800d806 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800d7ca:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800d7cc:	07da      	lsls	r2, r3, #31
 800d7ce:	d421      	bmi.n	800d814 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d7d0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d7d2:	b133      	cbz	r3, 800d7e2 <tcp_pcb_remove+0x4e>
 800d7d4:	4b20      	ldr	r3, [pc, #128]	@ (800d858 <tcp_pcb_remove+0xc4>)
 800d7d6:	f640 0293 	movw	r2, #2195	@ 0x893
 800d7da:	4920      	ldr	r1, [pc, #128]	@ (800d85c <tcp_pcb_remove+0xc8>)
 800d7dc:	4820      	ldr	r0, [pc, #128]	@ (800d860 <tcp_pcb_remove+0xcc>)
 800d7de:	f005 fb87 	bl	8012ef0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d7e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d7e4:	b133      	cbz	r3, 800d7f4 <tcp_pcb_remove+0x60>
 800d7e6:	4b1c      	ldr	r3, [pc, #112]	@ (800d858 <tcp_pcb_remove+0xc4>)
 800d7e8:	f640 0294 	movw	r2, #2196	@ 0x894
 800d7ec:	491d      	ldr	r1, [pc, #116]	@ (800d864 <tcp_pcb_remove+0xd0>)
 800d7ee:	481c      	ldr	r0, [pc, #112]	@ (800d860 <tcp_pcb_remove+0xcc>)
 800d7f0:	f005 fb7e 	bl	8012ef0 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d7f4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800d7f6:	b133      	cbz	r3, 800d806 <tcp_pcb_remove+0x72>
 800d7f8:	4b17      	ldr	r3, [pc, #92]	@ (800d858 <tcp_pcb_remove+0xc4>)
 800d7fa:	f640 0296 	movw	r2, #2198	@ 0x896
 800d7fe:	491a      	ldr	r1, [pc, #104]	@ (800d868 <tcp_pcb_remove+0xd4>)
 800d800:	4817      	ldr	r0, [pc, #92]	@ (800d860 <tcp_pcb_remove+0xcc>)
 800d802:	f005 fb75 	bl	8012ef0 <iprintf>
  pcb->state = CLOSED;
 800d806:	2300      	movs	r3, #0
 800d808:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800d80a:	82e3      	strh	r3, [r4, #22]
}
 800d80c:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800d80e:	68e3      	ldr	r3, [r4, #12]
 800d810:	602b      	str	r3, [r5, #0]
 800d812:	e7d0      	b.n	800d7b6 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800d814:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800d818:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800d81a:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800d81c:	f002 ffe4 	bl	80107e8 <tcp_output>
  if (pcb->state != LISTEN) {
 800d820:	7d23      	ldrb	r3, [r4, #20]
 800d822:	2b01      	cmp	r3, #1
 800d824:	d0ef      	beq.n	800d806 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d826:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1d3      	bne.n	800d7d4 <tcp_pcb_remove+0x40>
 800d82c:	e7d9      	b.n	800d7e2 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800d82e:	68e2      	ldr	r2, [r4, #12]
 800d830:	60da      	str	r2, [r3, #12]
 800d832:	e7c0      	b.n	800d7b6 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d834:	4b08      	ldr	r3, [pc, #32]	@ (800d858 <tcp_pcb_remove+0xc4>)
 800d836:	f640 0283 	movw	r2, #2179	@ 0x883
 800d83a:	490c      	ldr	r1, [pc, #48]	@ (800d86c <tcp_pcb_remove+0xd8>)
 800d83c:	4808      	ldr	r0, [pc, #32]	@ (800d860 <tcp_pcb_remove+0xcc>)
 800d83e:	f005 fb57 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d842:	2d00      	cmp	r5, #0
 800d844:	d1ad      	bne.n	800d7a2 <tcp_pcb_remove+0xe>
 800d846:	4b04      	ldr	r3, [pc, #16]	@ (800d858 <tcp_pcb_remove+0xc4>)
 800d848:	f640 0284 	movw	r2, #2180	@ 0x884
 800d84c:	4908      	ldr	r1, [pc, #32]	@ (800d870 <tcp_pcb_remove+0xdc>)
 800d84e:	4804      	ldr	r0, [pc, #16]	@ (800d860 <tcp_pcb_remove+0xcc>)
 800d850:	f005 fb4e 	bl	8012ef0 <iprintf>
 800d854:	e7a5      	b.n	800d7a2 <tcp_pcb_remove+0xe>
 800d856:	bf00      	nop
 800d858:	080159ec 	.word	0x080159ec
 800d85c:	08015ebc 	.word	0x08015ebc
 800d860:	08014150 	.word	0x08014150
 800d864:	08015ed4 	.word	0x08015ed4
 800d868:	08015ef0 	.word	0x08015ef0
 800d86c:	08015e80 	.word	0x08015e80
 800d870:	08015e9c 	.word	0x08015e9c

0800d874 <tcp_abandon>:
{
 800d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d878:	4605      	mov	r5, r0
 800d87a:	b087      	sub	sp, #28
 800d87c:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 800d87e:	f7f9 fd55 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d882:	2d00      	cmp	r5, #0
 800d884:	f000 80a9 	beq.w	800d9da <tcp_abandon+0x166>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d888:	7d2b      	ldrb	r3, [r5, #20]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	f000 808c 	beq.w	800d9a8 <tcp_abandon+0x134>
  if (pcb->state == TIME_WAIT) {
 800d890:	2b0a      	cmp	r3, #10
 800d892:	f000 8094 	beq.w	800d9be <tcp_abandon+0x14a>
    seqno = pcb->snd_nxt;
 800d896:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 800d898:	f8d5 b024 	ldr.w	fp, [r5, #36]	@ 0x24
    errf = pcb->errf;
 800d89c:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 800d8a0:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (pcb->local_port != 0) {
 800d8a4:	f8b5 8016 	ldrh.w	r8, [r5, #22]
    seqno = pcb->snd_nxt;
 800d8a8:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d144      	bne.n	800d938 <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 800d8ae:	f1b8 0f00 	cmp.w	r8, #0
 800d8b2:	d149      	bne.n	800d948 <tcp_abandon+0xd4>
    u16_t local_port = 0;
 800d8b4:	f04f 0800 	mov.w	r8, #0
    int send_rst = 0;
 800d8b8:	4646      	mov	r6, r8
    if (pcb->unacked != NULL) {
 800d8ba:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
 800d8bc:	b164      	cbz	r4, 800d8d8 <tcp_abandon+0x64>
      pbuf_free(seg->p);
 800d8be:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800d8c0:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d8c2:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d8c6:	b108      	cbz	r0, 800d8cc <tcp_abandon+0x58>
      pbuf_free(seg->p);
 800d8c8:	f7fe fdb6 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d8cc:	4651      	mov	r1, sl
 800d8ce:	2003      	movs	r0, #3
 800d8d0:	f7fe faa6 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800d8d4:	2c00      	cmp	r4, #0
 800d8d6:	d1f2      	bne.n	800d8be <tcp_abandon+0x4a>
    if (pcb->unsent != NULL) {
 800d8d8:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
 800d8da:	b164      	cbz	r4, 800d8f6 <tcp_abandon+0x82>
      pbuf_free(seg->p);
 800d8dc:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800d8de:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d8e0:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d8e4:	b108      	cbz	r0, 800d8ea <tcp_abandon+0x76>
      pbuf_free(seg->p);
 800d8e6:	f7fe fda7 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d8ea:	4651      	mov	r1, sl
 800d8ec:	2003      	movs	r0, #3
 800d8ee:	f7fe fa97 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800d8f2:	2c00      	cmp	r4, #0
 800d8f4:	d1f2      	bne.n	800d8dc <tcp_abandon+0x68>
    if (pcb->ooseq != NULL) {
 800d8f6:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800d8f8:	b164      	cbz	r4, 800d914 <tcp_abandon+0xa0>
      pbuf_free(seg->p);
 800d8fa:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800d8fc:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800d8fe:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d902:	b108      	cbz	r0, 800d908 <tcp_abandon+0x94>
      pbuf_free(seg->p);
 800d904:	f7fe fd98 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d908:	4651      	mov	r1, sl
 800d90a:	2003      	movs	r0, #3
 800d90c:	f7fe fa88 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800d910:	2c00      	cmp	r4, #0
 800d912:	d1f2      	bne.n	800d8fa <tcp_abandon+0x86>
    if (send_rst) {
 800d914:	bb3e      	cbnz	r6, 800d966 <tcp_abandon+0xf2>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d916:	7d2b      	ldrb	r3, [r5, #20]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d033      	beq.n	800d984 <tcp_abandon+0x110>
  memp_free(MEMP_TCP_PCB, pcb);
 800d91c:	4629      	mov	r1, r5
 800d91e:	2001      	movs	r0, #1
 800d920:	f7fe fa7e 	bl	800be20 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d924:	2f00      	cmp	r7, #0
 800d926:	d039      	beq.n	800d99c <tcp_abandon+0x128>
 800d928:	f06f 010c 	mvn.w	r1, #12
 800d92c:	4648      	mov	r0, r9
 800d92e:	463b      	mov	r3, r7
}
 800d930:	b007      	add	sp, #28
 800d932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d936:	4718      	bx	r3
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d938:	4629      	mov	r1, r5
 800d93a:	4830      	ldr	r0, [pc, #192]	@ (800d9fc <tcp_abandon+0x188>)
 800d93c:	f7ff ff2a 	bl	800d794 <tcp_pcb_remove>
 800d940:	4b2f      	ldr	r3, [pc, #188]	@ (800da00 <tcp_abandon+0x18c>)
 800d942:	2201      	movs	r2, #1
 800d944:	701a      	strb	r2, [r3, #0]
 800d946:	e7b8      	b.n	800d8ba <tcp_abandon+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d948:	4a2e      	ldr	r2, [pc, #184]	@ (800da04 <tcp_abandon+0x190>)
 800d94a:	6813      	ldr	r3, [r2, #0]
 800d94c:	42ab      	cmp	r3, r5
 800d94e:	d028      	beq.n	800d9a2 <tcp_abandon+0x12e>
 800d950:	b133      	cbz	r3, 800d960 <tcp_abandon+0xec>
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	42aa      	cmp	r2, r5
 800d956:	d001      	beq.n	800d95c <tcp_abandon+0xe8>
 800d958:	4613      	mov	r3, r2
 800d95a:	e7f9      	b.n	800d950 <tcp_abandon+0xdc>
 800d95c:	68ea      	ldr	r2, [r5, #12]
 800d95e:	60da      	str	r2, [r3, #12]
 800d960:	2300      	movs	r3, #0
 800d962:	60eb      	str	r3, [r5, #12]
 800d964:	e7a6      	b.n	800d8b4 <tcp_abandon+0x40>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d966:	f8cd 8004 	str.w	r8, [sp, #4]
 800d96a:	465a      	mov	r2, fp
 800d96c:	8b2b      	ldrh	r3, [r5, #24]
 800d96e:	4628      	mov	r0, r5
 800d970:	9905      	ldr	r1, [sp, #20]
 800d972:	9302      	str	r3, [sp, #8]
 800d974:	1d2b      	adds	r3, r5, #4
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	462b      	mov	r3, r5
 800d97a:	f002 febb 	bl	80106f4 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d97e:	7d2b      	ldrb	r3, [r5, #20]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d1cb      	bne.n	800d91c <tcp_abandon+0xa8>
 800d984:	4920      	ldr	r1, [pc, #128]	@ (800da08 <tcp_abandon+0x194>)
 800d986:	22d4      	movs	r2, #212	@ 0xd4
 800d988:	4b20      	ldr	r3, [pc, #128]	@ (800da0c <tcp_abandon+0x198>)
 800d98a:	4821      	ldr	r0, [pc, #132]	@ (800da10 <tcp_abandon+0x19c>)
 800d98c:	f005 fab0 	bl	8012ef0 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800d990:	4629      	mov	r1, r5
 800d992:	2001      	movs	r0, #1
 800d994:	f7fe fa44 	bl	800be20 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d998:	2f00      	cmp	r7, #0
 800d99a:	d1c5      	bne.n	800d928 <tcp_abandon+0xb4>
}
 800d99c:	b007      	add	sp, #28
 800d99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9a2:	68eb      	ldr	r3, [r5, #12]
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	e7db      	b.n	800d960 <tcp_abandon+0xec>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d9a8:	4b18      	ldr	r3, [pc, #96]	@ (800da0c <tcp_abandon+0x198>)
 800d9aa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d9ae:	4919      	ldr	r1, [pc, #100]	@ (800da14 <tcp_abandon+0x1a0>)
 800d9b0:	4817      	ldr	r0, [pc, #92]	@ (800da10 <tcp_abandon+0x19c>)
 800d9b2:	f005 fa9d 	bl	8012ef0 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800d9b6:	7d2b      	ldrb	r3, [r5, #20]
 800d9b8:	2b0a      	cmp	r3, #10
 800d9ba:	f47f af6c 	bne.w	800d896 <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4815      	ldr	r0, [pc, #84]	@ (800da18 <tcp_abandon+0x1a4>)
 800d9c2:	f7ff fee7 	bl	800d794 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d9c6:	7d2b      	ldrb	r3, [r5, #20]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d010      	beq.n	800d9ee <tcp_abandon+0x17a>
  memp_free(MEMP_TCP_PCB, pcb);
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	2001      	movs	r0, #1
}
 800d9d0:	b007      	add	sp, #28
 800d9d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800d9d6:	f7fe ba23 	b.w	800be20 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d9da:	4b0c      	ldr	r3, [pc, #48]	@ (800da0c <tcp_abandon+0x198>)
 800d9dc:	f240 223d 	movw	r2, #573	@ 0x23d
 800d9e0:	490e      	ldr	r1, [pc, #56]	@ (800da1c <tcp_abandon+0x1a8>)
 800d9e2:	480b      	ldr	r0, [pc, #44]	@ (800da10 <tcp_abandon+0x19c>)
}
 800d9e4:	b007      	add	sp, #28
 800d9e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d9ea:	f005 ba81 	b.w	8012ef0 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d9ee:	4b07      	ldr	r3, [pc, #28]	@ (800da0c <tcp_abandon+0x198>)
 800d9f0:	22d4      	movs	r2, #212	@ 0xd4
 800d9f2:	4905      	ldr	r1, [pc, #20]	@ (800da08 <tcp_abandon+0x194>)
 800d9f4:	4806      	ldr	r0, [pc, #24]	@ (800da10 <tcp_abandon+0x19c>)
 800d9f6:	f005 fa7b 	bl	8012ef0 <iprintf>
 800d9fa:	e7e7      	b.n	800d9cc <tcp_abandon+0x158>
 800d9fc:	2400fcc4 	.word	0x2400fcc4
 800da00:	2400fcbf 	.word	0x2400fcbf
 800da04:	2400fccc 	.word	0x2400fccc
 800da08:	08015a28 	.word	0x08015a28
 800da0c:	080159ec 	.word	0x080159ec
 800da10:	08014150 	.word	0x08014150
 800da14:	08015f24 	.word	0x08015f24
 800da18:	2400fcc0 	.word	0x2400fcc0
 800da1c:	08015f08 	.word	0x08015f08

0800da20 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800da20:	2101      	movs	r1, #1
 800da22:	f7ff bf27 	b.w	800d874 <tcp_abandon>
 800da26:	bf00      	nop

0800da28 <tcp_accept_null>:
{
 800da28:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800da2a:	460c      	mov	r4, r1
 800da2c:	b131      	cbz	r1, 800da3c <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 800da2e:	4620      	mov	r0, r4
 800da30:	2101      	movs	r1, #1
 800da32:	f7ff ff1f 	bl	800d874 <tcp_abandon>
}
 800da36:	f06f 000c 	mvn.w	r0, #12
 800da3a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800da3c:	4b06      	ldr	r3, [pc, #24]	@ (800da58 <tcp_accept_null+0x30>)
 800da3e:	f240 320f 	movw	r2, #783	@ 0x30f
 800da42:	4906      	ldr	r1, [pc, #24]	@ (800da5c <tcp_accept_null+0x34>)
 800da44:	4806      	ldr	r0, [pc, #24]	@ (800da60 <tcp_accept_null+0x38>)
 800da46:	f005 fa53 	bl	8012ef0 <iprintf>
  tcp_abandon(pcb, 1);
 800da4a:	4620      	mov	r0, r4
 800da4c:	2101      	movs	r1, #1
 800da4e:	f7ff ff11 	bl	800d874 <tcp_abandon>
}
 800da52:	f06f 000c 	mvn.w	r0, #12
 800da56:	bd10      	pop	{r4, pc}
 800da58:	080159ec 	.word	0x080159ec
 800da5c:	08015f58 	.word	0x08015f58
 800da60:	08014150 	.word	0x08014150

0800da64 <tcp_netif_ip_addr_changed_pcblist>:
{
 800da64:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800da66:	4605      	mov	r5, r0
{
 800da68:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800da6a:	b160      	cbz	r0, 800da86 <tcp_netif_ip_addr_changed_pcblist+0x22>
  while (pcb != NULL) {
 800da6c:	b154      	cbz	r4, 800da84 <tcp_netif_ip_addr_changed_pcblist+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800da6e:	6822      	ldr	r2, [r4, #0]
 800da70:	4620      	mov	r0, r4
 800da72:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800da74:	68e4      	ldr	r4, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800da76:	429a      	cmp	r2, r3
 800da78:	d1f8      	bne.n	800da6c <tcp_netif_ip_addr_changed_pcblist+0x8>
  tcp_abandon(pcb, 1);
 800da7a:	2101      	movs	r1, #1
 800da7c:	f7ff fefa 	bl	800d874 <tcp_abandon>
  while (pcb != NULL) {
 800da80:	2c00      	cmp	r4, #0
 800da82:	d1f4      	bne.n	800da6e <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800da84:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800da86:	4b04      	ldr	r3, [pc, #16]	@ (800da98 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800da88:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800da8c:	4903      	ldr	r1, [pc, #12]	@ (800da9c <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800da8e:	4804      	ldr	r0, [pc, #16]	@ (800daa0 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800da90:	f005 fa2e 	bl	8012ef0 <iprintf>
 800da94:	e7ea      	b.n	800da6c <tcp_netif_ip_addr_changed_pcblist+0x8>
 800da96:	bf00      	nop
 800da98:	080159ec 	.word	0x080159ec
 800da9c:	08015f78 	.word	0x08015f78
 800daa0:	08014150 	.word	0x08014150

0800daa4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800daa4:	4b10      	ldr	r3, [pc, #64]	@ (800dae8 <tcp_kill_state+0x44>)
 800daa6:	6819      	ldr	r1, [r3, #0]
 800daa8:	b1e9      	cbz	r1, 800dae6 <tcp_kill_state+0x42>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800daaa:	4b10      	ldr	r3, [pc, #64]	@ (800daec <tcp_kill_state+0x48>)
  inactivity = 0;
 800daac:	f04f 0c00 	mov.w	ip, #0
 800dab0:	4602      	mov	r2, r0
  inactive = NULL;
 800dab2:	4660      	mov	r0, ip
{
 800dab4:	b410      	push	{r4}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dab6:	681c      	ldr	r4, [r3, #0]
 800dab8:	e001      	b.n	800dabe <tcp_kill_state+0x1a>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800daba:	68c9      	ldr	r1, [r1, #12]
 800dabc:	b159      	cbz	r1, 800dad6 <tcp_kill_state+0x32>
    if (pcb->state == state) {
 800dabe:	7d0b      	ldrb	r3, [r1, #20]
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d1fa      	bne.n	800daba <tcp_kill_state+0x16>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dac4:	6a0b      	ldr	r3, [r1, #32]
 800dac6:	1ae3      	subs	r3, r4, r3
 800dac8:	459c      	cmp	ip, r3
 800daca:	d8f6      	bhi.n	800daba <tcp_kill_state+0x16>
 800dacc:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dace:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dad0:	469c      	mov	ip, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dad2:	2900      	cmp	r1, #0
 800dad4:	d1f3      	bne.n	800dabe <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800dad6:	b118      	cbz	r0, 800dae0 <tcp_kill_state+0x3c>
}
 800dad8:	f85d 4b04 	ldr.w	r4, [sp], #4
    tcp_abandon(inactive, 0);
 800dadc:	f7ff beca 	b.w	800d874 <tcp_abandon>
}
 800dae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	4770      	bx	lr
 800dae8:	2400fcc4 	.word	0x2400fcc4
 800daec:	2400fcd0 	.word	0x2400fcd0

0800daf0 <tcp_alloc>:
{
 800daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf2:	4606      	mov	r6, r0
  LWIP_ASSERT_CORE_LOCKED();
 800daf4:	f7f9 fc1a 	bl	800732c <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800daf8:	2001      	movs	r0, #1
 800dafa:	f7fe f94b 	bl	800bd94 <memp_malloc>
  if (pcb == NULL) {
 800dafe:	4604      	mov	r4, r0
 800db00:	b318      	cbz	r0, 800db4a <tcp_alloc+0x5a>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800db02:	229c      	movs	r2, #156	@ 0x9c
 800db04:	2100      	movs	r1, #0
 800db06:	4620      	mov	r0, r4
 800db08:	f005 fa91 	bl	801302e <memset>
    pcb->tmr = tcp_ticks;
 800db0c:	4b42      	ldr	r3, [pc, #264]	@ (800dc18 <tcp_alloc+0x128>)
    pcb->last_timer = tcp_timer_ctr;
 800db0e:	4943      	ldr	r1, [pc, #268]	@ (800dc1c <tcp_alloc+0x12c>)
    pcb->snd_buf = TCP_SND_BUF;
 800db10:	f241 60d0 	movw	r0, #5840	@ 0x16d0
    pcb->tmr = tcp_ticks;
 800db14:	681a      	ldr	r2, [r3, #0]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800db16:	4b42      	ldr	r3, [pc, #264]	@ (800dc20 <tcp_alloc+0x130>)
    pcb->last_timer = tcp_timer_ctr;
 800db18:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800db1a:	6222      	str	r2, [r4, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800db1c:	62a3      	str	r3, [r4, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800db1e:	23ff      	movs	r3, #255	@ 0xff
    pcb->cwnd = 1;
 800db20:	4a40      	ldr	r2, [pc, #256]	@ (800dc24 <tcp_alloc+0x134>)
    pcb->snd_buf = TCP_SND_BUF;
 800db22:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
    pcb->last_timer = tcp_timer_ctr;
 800db26:	77a1      	strb	r1, [r4, #30]
    pcb->recv = tcp_recv_null;
 800db28:	483f      	ldr	r0, [pc, #252]	@ (800dc28 <tcp_alloc+0x138>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800db2a:	4940      	ldr	r1, [pc, #256]	@ (800dc2c <tcp_alloc+0x13c>)
    pcb->cwnd = 1;
 800db2c:	64a2      	str	r2, [r4, #72]	@ 0x48
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800db2e:	f04f 1206 	mov.w	r2, #393222	@ 0x60006
    pcb->ttl = TCP_TTL;
 800db32:	72e3      	strb	r3, [r4, #11]
    pcb->rtime = -1;
 800db34:	4b3e      	ldr	r3, [pc, #248]	@ (800dc30 <tcp_alloc+0x140>)
    pcb->prio = prio;
 800db36:	7566      	strb	r6, [r4, #21]
    pcb->recv = tcp_recv_null;
 800db38:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800db3c:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800db40:	f8c4 203e 	str.w	r2, [r4, #62]	@ 0x3e
    pcb->rtime = -1;
 800db44:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800db46:	4620      	mov	r0, r4
 800db48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800db4a:	4f3a      	ldr	r7, [pc, #232]	@ (800dc34 <tcp_alloc+0x144>)
 800db4c:	683d      	ldr	r5, [r7, #0]
  while (pcb != NULL) {
 800db4e:	b15d      	cbz	r5, 800db68 <tcp_alloc+0x78>
    struct tcp_pcb *next = pcb->next;
 800db50:	4628      	mov	r0, r5
 800db52:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800db54:	8b43      	ldrh	r3, [r0, #26]
 800db56:	071a      	lsls	r2, r3, #28
 800db58:	d5f9      	bpl.n	800db4e <tcp_alloc+0x5e>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800db5a:	f023 0308 	bic.w	r3, r3, #8
 800db5e:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800db60:	f7fe ffd6 	bl	800cb10 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800db64:	2d00      	cmp	r5, #0
 800db66:	d1f3      	bne.n	800db50 <tcp_alloc+0x60>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db68:	4b33      	ldr	r3, [pc, #204]	@ (800dc38 <tcp_alloc+0x148>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	b183      	cbz	r3, 800db90 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db6e:	4a2a      	ldr	r2, [pc, #168]	@ (800dc18 <tcp_alloc+0x128>)
  inactivity = 0;
 800db70:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db72:	6810      	ldr	r0, [r2, #0]
 800db74:	6a1a      	ldr	r2, [r3, #32]
 800db76:	1a82      	subs	r2, r0, r2
 800db78:	428a      	cmp	r2, r1
 800db7a:	d301      	bcc.n	800db80 <tcp_alloc+0x90>
 800db7c:	461c      	mov	r4, r3
 800db7e:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1f6      	bne.n	800db74 <tcp_alloc+0x84>
  if (inactive != NULL) {
 800db86:	b11c      	cbz	r4, 800db90 <tcp_alloc+0xa0>
  tcp_abandon(pcb, 1);
 800db88:	2101      	movs	r1, #1
 800db8a:	4620      	mov	r0, r4
 800db8c:	f7ff fe72 	bl	800d874 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800db90:	2001      	movs	r0, #1
 800db92:	f7fe f8ff 	bl	800bd94 <memp_malloc>
    if (pcb == NULL) {
 800db96:	4604      	mov	r4, r0
 800db98:	2800      	cmp	r0, #0
 800db9a:	d1b2      	bne.n	800db02 <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800db9c:	2009      	movs	r0, #9
 800db9e:	f7ff ff81 	bl	800daa4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dba2:	2001      	movs	r0, #1
 800dba4:	f7fe f8f6 	bl	800bd94 <memp_malloc>
      if (pcb == NULL) {
 800dba8:	4604      	mov	r4, r0
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d1a9      	bne.n	800db02 <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800dbae:	2008      	movs	r0, #8
 800dbb0:	f7ff ff78 	bl	800daa4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbb4:	2001      	movs	r0, #1
 800dbb6:	f7fe f8ed 	bl	800bd94 <memp_malloc>
        if (pcb == NULL) {
 800dbba:	4604      	mov	r4, r0
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d1a0      	bne.n	800db02 <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dbc0:	0633      	lsls	r3, r6, #24
 800dbc2:	d426      	bmi.n	800dc12 <tcp_alloc+0x122>
  if (mprio == 0) {
 800dbc4:	b1ee      	cbz	r6, 800dc02 <tcp_alloc+0x112>
 800dbc6:	4633      	mov	r3, r6
  mprio--;
 800dbc8:	1e5a      	subs	r2, r3, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbca:	683b      	ldr	r3, [r7, #0]
  mprio--;
 800dbcc:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbce:	b1c3      	cbz	r3, 800dc02 <tcp_alloc+0x112>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dbd0:	4911      	ldr	r1, [pc, #68]	@ (800dc18 <tcp_alloc+0x128>)
  inactivity = 0;
 800dbd2:	2500      	movs	r5, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dbd4:	680f      	ldr	r7, [r1, #0]
 800dbd6:	e005      	b.n	800dbe4 <tcp_alloc+0xf4>
 800dbd8:	6a18      	ldr	r0, [r3, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800dbda:	1a3d      	subs	r5, r7, r0
    if ((pcb->prio < mprio) ||
 800dbdc:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800dbde:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	b14b      	cbz	r3, 800dbf8 <tcp_alloc+0x108>
    if ((pcb->prio < mprio) ||
 800dbe4:	7d59      	ldrb	r1, [r3, #21]
 800dbe6:	428a      	cmp	r2, r1
 800dbe8:	d8f6      	bhi.n	800dbd8 <tcp_alloc+0xe8>
 800dbea:	d1f9      	bne.n	800dbe0 <tcp_alloc+0xf0>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dbec:	6a18      	ldr	r0, [r3, #32]
 800dbee:	eba7 0c00 	sub.w	ip, r7, r0
 800dbf2:	45ac      	cmp	ip, r5
 800dbf4:	d3f4      	bcc.n	800dbe0 <tcp_alloc+0xf0>
 800dbf6:	e7f0      	b.n	800dbda <tcp_alloc+0xea>
  if (inactive != NULL) {
 800dbf8:	b11c      	cbz	r4, 800dc02 <tcp_alloc+0x112>
  tcp_abandon(pcb, 1);
 800dbfa:	2101      	movs	r1, #1
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f7ff fe39 	bl	800d874 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc02:	2001      	movs	r0, #1
 800dc04:	f7fe f8c6 	bl	800bd94 <memp_malloc>
  if (pcb != NULL) {
 800dc08:	4604      	mov	r4, r0
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	f47f af79 	bne.w	800db02 <tcp_alloc+0x12>
 800dc10:	e799      	b.n	800db46 <tcp_alloc+0x56>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dc12:	237f      	movs	r3, #127	@ 0x7f
 800dc14:	e7d8      	b.n	800dbc8 <tcp_alloc+0xd8>
 800dc16:	bf00      	nop
 800dc18:	2400fcd0 	.word	0x2400fcd0
 800dc1c:	2400fcbd 	.word	0x2400fcbd
 800dc20:	16d016d0 	.word	0x16d016d0
 800dc24:	16d00001 	.word	0x16d00001
 800dc28:	0800dea1 	.word	0x0800dea1
 800dc2c:	006ddd00 	.word	0x006ddd00
 800dc30:	0218ffff 	.word	0x0218ffff
 800dc34:	2400fcc4 	.word	0x2400fcc4
 800dc38:	2400fcc0 	.word	0x2400fcc0

0800dc3c <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dc3c:	2040      	movs	r0, #64	@ 0x40
 800dc3e:	f7ff bf57 	b.w	800daf0 <tcp_alloc>
 800dc42:	bf00      	nop

0800dc44 <tcp_close_shutdown>:
{
 800dc44:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dc46:	4604      	mov	r4, r0
{
 800dc48:	b085      	sub	sp, #20
 800dc4a:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	f000 808a 	beq.w	800dd66 <tcp_close_shutdown+0x122>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dc52:	7d23      	ldrb	r3, [r4, #20]
 800dc54:	b11d      	cbz	r5, 800dc5e <tcp_close_shutdown+0x1a>
 800dc56:	2b04      	cmp	r3, #4
 800dc58:	d01e      	beq.n	800dc98 <tcp_close_shutdown+0x54>
 800dc5a:	2b07      	cmp	r3, #7
 800dc5c:	d01c      	beq.n	800dc98 <tcp_close_shutdown+0x54>
  switch (pcb->state) {
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d03a      	beq.n	800dcd8 <tcp_close_shutdown+0x94>
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	d007      	beq.n	800dc76 <tcp_close_shutdown+0x32>
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d055      	beq.n	800dd16 <tcp_close_shutdown+0xd2>
      return tcp_close_shutdown_fin(pcb);
 800dc6a:	4620      	mov	r0, r4
}
 800dc6c:	b005      	add	sp, #20
 800dc6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800dc72:	f7fe bf4d 	b.w	800cb10 <tcp_close_shutdown_fin>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc76:	4621      	mov	r1, r4
 800dc78:	484d      	ldr	r0, [pc, #308]	@ (800ddb0 <tcp_close_shutdown+0x16c>)
 800dc7a:	f7ff fd8b 	bl	800d794 <tcp_pcb_remove>
 800dc7e:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dc80:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc82:	4a4c      	ldr	r2, [pc, #304]	@ (800ddb4 <tcp_close_shutdown+0x170>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dc84:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc86:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dc88:	d066      	beq.n	800dd58 <tcp_close_shutdown+0x114>
  memp_free(MEMP_TCP_PCB, pcb);
 800dc8a:	4621      	mov	r1, r4
 800dc8c:	2001      	movs	r0, #1
 800dc8e:	f7fe f8c7 	bl	800be20 <memp_free>
}
 800dc92:	2000      	movs	r0, #0
 800dc94:	b005      	add	sp, #20
 800dc96:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dc98:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800dc9a:	2a00      	cmp	r2, #0
 800dc9c:	d048      	beq.n	800dd30 <tcp_close_shutdown+0xec>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dc9e:	8b63      	ldrh	r3, [r4, #26]
 800dca0:	06db      	lsls	r3, r3, #27
 800dca2:	d570      	bpl.n	800dd86 <tcp_close_shutdown+0x142>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dca4:	8b21      	ldrh	r1, [r4, #24]
 800dca6:	1d20      	adds	r0, r4, #4
 800dca8:	8ae2      	ldrh	r2, [r4, #22]
 800dcaa:	4623      	mov	r3, r4
 800dcac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800dcb0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800dcb2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800dcb4:	9000      	str	r0, [sp, #0]
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f002 fd1c 	bl	80106f4 <tcp_rst>
      tcp_pcb_purge(pcb);
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f7ff fa77 	bl	800d1b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dcc2:	4a3b      	ldr	r2, [pc, #236]	@ (800ddb0 <tcp_close_shutdown+0x16c>)
 800dcc4:	6813      	ldr	r3, [r2, #0]
 800dcc6:	42a3      	cmp	r3, r4
 800dcc8:	d038      	beq.n	800dd3c <tcp_close_shutdown+0xf8>
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d038      	beq.n	800dd40 <tcp_close_shutdown+0xfc>
 800dcce:	68da      	ldr	r2, [r3, #12]
 800dcd0:	42a2      	cmp	r2, r4
 800dcd2:	d055      	beq.n	800dd80 <tcp_close_shutdown+0x13c>
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	e7f8      	b.n	800dcca <tcp_close_shutdown+0x86>
 800dcd8:	4937      	ldr	r1, [pc, #220]	@ (800ddb8 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 800dcda:	2000      	movs	r0, #0
 800dcdc:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dce0:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800dce4:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dce6:	b133      	cbz	r3, 800dcf6 <tcp_close_shutdown+0xb2>
    if (pcb->listener == lpcb) {
 800dce8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800dcea:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800dcec:	bf08      	it	eq
 800dcee:	67d8      	streq	r0, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1f8      	bne.n	800dce8 <tcp_close_shutdown+0xa4>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dcf6:	428d      	cmp	r5, r1
 800dcf8:	d1f2      	bne.n	800dce0 <tcp_close_shutdown+0x9c>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dcfa:	4621      	mov	r1, r4
 800dcfc:	482f      	ldr	r0, [pc, #188]	@ (800ddbc <tcp_close_shutdown+0x178>)
 800dcfe:	f7ff fd49 	bl	800d794 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dd02:	7d23      	ldrb	r3, [r4, #20]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d049      	beq.n	800dd9c <tcp_close_shutdown+0x158>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dd08:	4621      	mov	r1, r4
 800dd0a:	2002      	movs	r0, #2
 800dd0c:	f7fe f888 	bl	800be20 <memp_free>
}
 800dd10:	2000      	movs	r0, #0
 800dd12:	b005      	add	sp, #20
 800dd14:	bd30      	pop	{r4, r5, pc}
      if (pcb->local_port != 0) {
 800dd16:	8ae3      	ldrh	r3, [r4, #22]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0b6      	beq.n	800dc8a <tcp_close_shutdown+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd1c:	4a28      	ldr	r2, [pc, #160]	@ (800ddc0 <tcp_close_shutdown+0x17c>)
 800dd1e:	6813      	ldr	r3, [r2, #0]
 800dd20:	42a3      	cmp	r3, r4
 800dd22:	d042      	beq.n	800ddaa <tcp_close_shutdown+0x166>
 800dd24:	b34b      	cbz	r3, 800dd7a <tcp_close_shutdown+0x136>
 800dd26:	68da      	ldr	r2, [r3, #12]
 800dd28:	42a2      	cmp	r2, r4
 800dd2a:	d024      	beq.n	800dd76 <tcp_close_shutdown+0x132>
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	e7f9      	b.n	800dd24 <tcp_close_shutdown+0xe0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dd30:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800dd32:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800dd36:	4291      	cmp	r1, r2
 800dd38:	d095      	beq.n	800dc66 <tcp_close_shutdown+0x22>
 800dd3a:	e7b0      	b.n	800dc9e <tcp_close_shutdown+0x5a>
      TCP_RMV_ACTIVE(pcb);
 800dd3c:	68e3      	ldr	r3, [r4, #12]
 800dd3e:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800dd40:	4b20      	ldr	r3, [pc, #128]	@ (800ddc4 <tcp_close_shutdown+0x180>)
      TCP_RMV_ACTIVE(pcb);
 800dd42:	2000      	movs	r0, #0
 800dd44:	4a1b      	ldr	r2, [pc, #108]	@ (800ddb4 <tcp_close_shutdown+0x170>)
 800dd46:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800dd48:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800dd4a:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800dd4c:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800dd4e:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800dd50:	d021      	beq.n	800dd96 <tcp_close_shutdown+0x152>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dd52:	7d23      	ldrb	r3, [r4, #20]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d198      	bne.n	800dc8a <tcp_close_shutdown+0x46>
 800dd58:	4b1b      	ldr	r3, [pc, #108]	@ (800ddc8 <tcp_close_shutdown+0x184>)
 800dd5a:	22d4      	movs	r2, #212	@ 0xd4
 800dd5c:	491b      	ldr	r1, [pc, #108]	@ (800ddcc <tcp_close_shutdown+0x188>)
 800dd5e:	481c      	ldr	r0, [pc, #112]	@ (800ddd0 <tcp_close_shutdown+0x18c>)
 800dd60:	f005 f8c6 	bl	8012ef0 <iprintf>
 800dd64:	e791      	b.n	800dc8a <tcp_close_shutdown+0x46>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dd66:	4b18      	ldr	r3, [pc, #96]	@ (800ddc8 <tcp_close_shutdown+0x184>)
 800dd68:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800dd6c:	4919      	ldr	r1, [pc, #100]	@ (800ddd4 <tcp_close_shutdown+0x190>)
 800dd6e:	4818      	ldr	r0, [pc, #96]	@ (800ddd0 <tcp_close_shutdown+0x18c>)
 800dd70:	f005 f8be 	bl	8012ef0 <iprintf>
 800dd74:	e76d      	b.n	800dc52 <tcp_close_shutdown+0xe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd76:	68e2      	ldr	r2, [r4, #12]
 800dd78:	60da      	str	r2, [r3, #12]
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800dd7e:	e784      	b.n	800dc8a <tcp_close_shutdown+0x46>
      TCP_RMV_ACTIVE(pcb);
 800dd80:	68e2      	ldr	r2, [r4, #12]
 800dd82:	60da      	str	r2, [r3, #12]
 800dd84:	e7dc      	b.n	800dd40 <tcp_close_shutdown+0xfc>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dd86:	4b10      	ldr	r3, [pc, #64]	@ (800ddc8 <tcp_close_shutdown+0x184>)
 800dd88:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800dd8c:	4912      	ldr	r1, [pc, #72]	@ (800ddd8 <tcp_close_shutdown+0x194>)
 800dd8e:	4810      	ldr	r0, [pc, #64]	@ (800ddd0 <tcp_close_shutdown+0x18c>)
 800dd90:	f005 f8ae 	bl	8012ef0 <iprintf>
 800dd94:	e786      	b.n	800dca4 <tcp_close_shutdown+0x60>
        tcp_trigger_input_pcb_close();
 800dd96:	f001 fdb1 	bl	800f8fc <tcp_trigger_input_pcb_close>
 800dd9a:	e77a      	b.n	800dc92 <tcp_close_shutdown+0x4e>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ddc8 <tcp_close_shutdown+0x184>)
 800dd9e:	22df      	movs	r2, #223	@ 0xdf
 800dda0:	490e      	ldr	r1, [pc, #56]	@ (800dddc <tcp_close_shutdown+0x198>)
 800dda2:	480b      	ldr	r0, [pc, #44]	@ (800ddd0 <tcp_close_shutdown+0x18c>)
 800dda4:	f005 f8a4 	bl	8012ef0 <iprintf>
 800dda8:	e7ae      	b.n	800dd08 <tcp_close_shutdown+0xc4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ddaa:	68e3      	ldr	r3, [r4, #12]
 800ddac:	6013      	str	r3, [r2, #0]
 800ddae:	e7e4      	b.n	800dd7a <tcp_close_shutdown+0x136>
 800ddb0:	2400fcc4 	.word	0x2400fcc4
 800ddb4:	2400fcbf 	.word	0x2400fcbf
 800ddb8:	080160c0 	.word	0x080160c0
 800ddbc:	2400fcc8 	.word	0x2400fcc8
 800ddc0:	2400fccc 	.word	0x2400fccc
 800ddc4:	2400fcd4 	.word	0x2400fcd4
 800ddc8:	080159ec 	.word	0x080159ec
 800ddcc:	08015a28 	.word	0x08015a28
 800ddd0:	08014150 	.word	0x08014150
 800ddd4:	08015fac 	.word	0x08015fac
 800ddd8:	08015fcc 	.word	0x08015fcc
 800dddc:	08015fe8 	.word	0x08015fe8

0800dde0 <tcp_close>:
{
 800dde0:	b510      	push	{r4, lr}
 800dde2:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800dde4:	f7f9 faa2 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dde8:	b164      	cbz	r4, 800de04 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800ddea:	7d23      	ldrb	r3, [r4, #20]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d003      	beq.n	800ddf8 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ddf0:	8b63      	ldrh	r3, [r4, #26]
 800ddf2:	f043 0310 	orr.w	r3, r3, #16
 800ddf6:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	2101      	movs	r1, #1
}
 800ddfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800de00:	f7ff bf20 	b.w	800dc44 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800de04:	4b04      	ldr	r3, [pc, #16]	@ (800de18 <tcp_close+0x38>)
 800de06:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800de0a:	4904      	ldr	r1, [pc, #16]	@ (800de1c <tcp_close+0x3c>)
 800de0c:	4804      	ldr	r0, [pc, #16]	@ (800de20 <tcp_close+0x40>)
 800de0e:	f005 f86f 	bl	8012ef0 <iprintf>
}
 800de12:	f06f 000f 	mvn.w	r0, #15
 800de16:	bd10      	pop	{r4, pc}
 800de18:	080159ec 	.word	0x080159ec
 800de1c:	08016004 	.word	0x08016004
 800de20:	08014150 	.word	0x08014150

0800de24 <tcp_shutdown>:
{
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	4604      	mov	r4, r0
 800de28:	460e      	mov	r6, r1
 800de2a:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800de2c:	f7f9 fa7e 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800de30:	b334      	cbz	r4, 800de80 <tcp_shutdown+0x5c>
  if (pcb->state == LISTEN) {
 800de32:	7d23      	ldrb	r3, [r4, #20]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d012      	beq.n	800de5e <tcp_shutdown+0x3a>
  if (shut_rx) {
 800de38:	b15e      	cbz	r6, 800de52 <tcp_shutdown+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800de3a:	8b63      	ldrh	r3, [r4, #26]
 800de3c:	f043 0310 	orr.w	r3, r3, #16
 800de40:	8363      	strh	r3, [r4, #26]
    if (shut_tx) {
 800de42:	b9bd      	cbnz	r5, 800de74 <tcp_shutdown+0x50>
    if (pcb->refused_data != NULL) {
 800de44:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800de46:	b110      	cbz	r0, 800de4e <tcp_shutdown+0x2a>
      pbuf_free(pcb->refused_data);
 800de48:	f7fe faf6 	bl	800c438 <pbuf_free>
      pcb->refused_data = NULL;
 800de4c:	67a5      	str	r5, [r4, #120]	@ 0x78
  return ERR_OK;
 800de4e:	2000      	movs	r0, #0
}
 800de50:	bd70      	pop	{r4, r5, r6, pc}
  if (shut_tx) {
 800de52:	2d00      	cmp	r5, #0
 800de54:	d0fb      	beq.n	800de4e <tcp_shutdown+0x2a>
    switch (pcb->state) {
 800de56:	2b04      	cmp	r3, #4
 800de58:	d804      	bhi.n	800de64 <tcp_shutdown+0x40>
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	d804      	bhi.n	800de68 <tcp_shutdown+0x44>
 800de5e:	f06f 000a 	mvn.w	r0, #10
}
 800de62:	bd70      	pop	{r4, r5, r6, pc}
    switch (pcb->state) {
 800de64:	2b07      	cmp	r3, #7
 800de66:	d1fa      	bne.n	800de5e <tcp_shutdown+0x3a>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800de68:	4620      	mov	r0, r4
 800de6a:	2100      	movs	r1, #0
}
 800de6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800de70:	f7ff bee8 	b.w	800dc44 <tcp_close_shutdown>
      return tcp_close_shutdown(pcb, 1);
 800de74:	4620      	mov	r0, r4
 800de76:	2101      	movs	r1, #1
}
 800de78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return tcp_close_shutdown(pcb, 1);
 800de7c:	f7ff bee2 	b.w	800dc44 <tcp_close_shutdown>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800de80:	4b04      	ldr	r3, [pc, #16]	@ (800de94 <tcp_shutdown+0x70>)
 800de82:	f240 2207 	movw	r2, #519	@ 0x207
 800de86:	4904      	ldr	r1, [pc, #16]	@ (800de98 <tcp_shutdown+0x74>)
 800de88:	4804      	ldr	r0, [pc, #16]	@ (800de9c <tcp_shutdown+0x78>)
 800de8a:	f005 f831 	bl	8012ef0 <iprintf>
 800de8e:	f06f 000f 	mvn.w	r0, #15
}
 800de92:	bd70      	pop	{r4, r5, r6, pc}
 800de94:	080159ec 	.word	0x080159ec
 800de98:	0801601c 	.word	0x0801601c
 800de9c:	08014150 	.word	0x08014150

0800dea0 <tcp_recv_null>:
{
 800dea0:	b510      	push	{r4, lr}
 800dea2:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dea4:	b1f1      	cbz	r1, 800dee4 <tcp_recv_null+0x44>
  if (p != NULL) {
 800dea6:	4614      	mov	r4, r2
 800dea8:	4608      	mov	r0, r1
 800deaa:	b142      	cbz	r2, 800debe <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 800deac:	8911      	ldrh	r1, [r2, #8]
 800deae:	f7fe ffbd 	bl	800ce2c <tcp_recved>
    pbuf_free(p);
 800deb2:	4620      	mov	r0, r4
 800deb4:	f7fe fac0 	bl	800c438 <pbuf_free>
  return ERR_OK;
 800deb8:	2000      	movs	r0, #0
}
 800deba:	b002      	add	sp, #8
 800debc:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1fa      	bne.n	800deb8 <tcp_recv_null+0x18>
 800dec2:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800dec4:	f7f9 fa32 	bl	800732c <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800dec8:	9801      	ldr	r0, [sp, #4]
 800deca:	7d03      	ldrb	r3, [r0, #20]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d003      	beq.n	800ded8 <tcp_recv_null+0x38>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ded0:	8b43      	ldrh	r3, [r0, #26]
 800ded2:	f043 0310 	orr.w	r3, r3, #16
 800ded6:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800ded8:	2101      	movs	r1, #1
}
 800deda:	b002      	add	sp, #8
 800dedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800dee0:	f7ff beb0 	b.w	800dc44 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dee4:	4b04      	ldr	r3, [pc, #16]	@ (800def8 <tcp_recv_null+0x58>)
 800dee6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800deea:	4904      	ldr	r1, [pc, #16]	@ (800defc <tcp_recv_null+0x5c>)
 800deec:	4804      	ldr	r0, [pc, #16]	@ (800df00 <tcp_recv_null+0x60>)
 800deee:	f004 ffff 	bl	8012ef0 <iprintf>
 800def2:	f06f 000f 	mvn.w	r0, #15
 800def6:	e7e0      	b.n	800deba <tcp_recv_null+0x1a>
 800def8:	080159ec 	.word	0x080159ec
 800defc:	08016038 	.word	0x08016038
 800df00:	08014150 	.word	0x08014150

0800df04 <tcp_process_refused_data>:
{
 800df04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800df06:	b380      	cbz	r0, 800df6a <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800df08:	6f85      	ldr	r5, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 800df0a:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800df0c:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 800df10:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800df12:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800df14:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800df16:	b156      	cbz	r6, 800df2e <tcp_process_refused_data+0x2a>
 800df18:	4601      	mov	r1, r0
 800df1a:	462a      	mov	r2, r5
 800df1c:	6900      	ldr	r0, [r0, #16]
 800df1e:	47b0      	blx	r6
    if (err == ERR_OK) {
 800df20:	b158      	cbz	r0, 800df3a <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800df22:	300d      	adds	r0, #13
 800df24:	d01e      	beq.n	800df64 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800df26:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800df2a:	67a5      	str	r5, [r4, #120]	@ 0x78
}
 800df2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800df2e:	8929      	ldrh	r1, [r5, #8]
 800df30:	f7fe ff7c 	bl	800ce2c <tcp_recved>
    pbuf_free(p);
 800df34:	4628      	mov	r0, r5
 800df36:	f7fe fa7f 	bl	800c438 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800df3a:	06bb      	lsls	r3, r7, #26
 800df3c:	d510      	bpl.n	800df60 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800df3e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800df40:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800df44:	4293      	cmp	r3, r2
 800df46:	d001      	beq.n	800df4c <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800df48:	3301      	adds	r3, #1
 800df4a:	8523      	strh	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800df4c:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800df50:	b135      	cbz	r5, 800df60 <tcp_process_refused_data+0x5c>
 800df52:	2300      	movs	r3, #0
 800df54:	4621      	mov	r1, r4
 800df56:	6920      	ldr	r0, [r4, #16]
 800df58:	461a      	mov	r2, r3
 800df5a:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800df5c:	300d      	adds	r0, #13
 800df5e:	d001      	beq.n	800df64 <tcp_process_refused_data+0x60>
  return ERR_OK;
 800df60:	2000      	movs	r0, #0
}
 800df62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800df64:	f06f 000c 	mvn.w	r0, #12
}
 800df68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800df6a:	4b05      	ldr	r3, [pc, #20]	@ (800df80 <tcp_process_refused_data+0x7c>)
 800df6c:	f240 6209 	movw	r2, #1545	@ 0x609
 800df70:	4904      	ldr	r1, [pc, #16]	@ (800df84 <tcp_process_refused_data+0x80>)
 800df72:	4805      	ldr	r0, [pc, #20]	@ (800df88 <tcp_process_refused_data+0x84>)
 800df74:	f004 ffbc 	bl	8012ef0 <iprintf>
 800df78:	f06f 000f 	mvn.w	r0, #15
}
 800df7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df7e:	bf00      	nop
 800df80:	080159ec 	.word	0x080159ec
 800df84:	08016054 	.word	0x08016054
 800df88:	08014150 	.word	0x08014150

0800df8c <tcp_fasttmr>:
{
 800df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ++tcp_timer_ctr;
 800df90:	4d1c      	ldr	r5, [pc, #112]	@ (800e004 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800df92:	2700      	movs	r7, #0
 800df94:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800e00c <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800df98:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800df9a:	4e1b      	ldr	r6, [pc, #108]	@ (800e008 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800df9c:	3301      	adds	r3, #1
 800df9e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800dfa0:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800dfa4:	b1b4      	cbz	r4, 800dfd4 <tcp_fasttmr+0x48>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dfa6:	7fa3      	ldrb	r3, [r4, #30]
 800dfa8:	782a      	ldrb	r2, [r5, #0]
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d014      	beq.n	800dfd8 <tcp_fasttmr+0x4c>
      if (pcb->flags & TF_ACK_DELAY) {
 800dfae:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800dfb0:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800dfb2:	07d9      	lsls	r1, r3, #31
 800dfb4:	d419      	bmi.n	800dfea <tcp_fasttmr+0x5e>
      if (pcb->flags & TF_CLOSEPEND) {
 800dfb6:	071a      	lsls	r2, r3, #28
 800dfb8:	d410      	bmi.n	800dfdc <tcp_fasttmr+0x50>
      if (pcb->refused_data != NULL) {
 800dfba:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        tcp_process_refused_data(pcb);
 800dfbc:	4620      	mov	r0, r4
      next = pcb->next;
 800dfbe:	68e4      	ldr	r4, [r4, #12]
      if (pcb->refused_data != NULL) {
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d0ef      	beq.n	800dfa4 <tcp_fasttmr+0x18>
        tcp_active_pcbs_changed = 0;
 800dfc4:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800dfc6:	f7ff ff9d 	bl	800df04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dfca:	7833      	ldrb	r3, [r6, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d1e7      	bne.n	800dfa0 <tcp_fasttmr+0x14>
  while (pcb != NULL) {
 800dfd0:	2c00      	cmp	r4, #0
 800dfd2:	d1e8      	bne.n	800dfa6 <tcp_fasttmr+0x1a>
}
 800dfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pcb = pcb->next;
 800dfd8:	68e4      	ldr	r4, [r4, #12]
 800dfda:	e7e3      	b.n	800dfa4 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dfdc:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800dfe0:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dfe2:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800dfe4:	f7fe fd94 	bl	800cb10 <tcp_close_shutdown_fin>
 800dfe8:	e7e7      	b.n	800dfba <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800dfea:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800dfee:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800dff0:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800dff2:	f002 fbf9 	bl	80107e8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dff6:	8b63      	ldrh	r3, [r4, #26]
 800dff8:	f023 0303 	bic.w	r3, r3, #3
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	8363      	strh	r3, [r4, #26]
 800e000:	e7d9      	b.n	800dfb6 <tcp_fasttmr+0x2a>
 800e002:	bf00      	nop
 800e004:	2400fcbd 	.word	0x2400fcbd
 800e008:	2400fcbf 	.word	0x2400fcbf
 800e00c:	2400fcc4 	.word	0x2400fcc4

0800e010 <tcp_tmr>:
{
 800e010:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800e012:	f7ff ffbb 	bl	800df8c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800e016:	4a06      	ldr	r2, [pc, #24]	@ (800e030 <tcp_tmr+0x20>)
 800e018:	7813      	ldrb	r3, [r2, #0]
 800e01a:	3301      	adds	r3, #1
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	7013      	strb	r3, [r2, #0]
 800e020:	07db      	lsls	r3, r3, #31
 800e022:	d400      	bmi.n	800e026 <tcp_tmr+0x16>
}
 800e024:	bd08      	pop	{r3, pc}
 800e026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800e02a:	f7ff b913 	b.w	800d254 <tcp_slowtmr>
 800e02e:	bf00      	nop
 800e030:	2400fcbe 	.word	0x2400fcbe

0800e034 <tcp_next_iss>:
{
 800e034:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e036:	b130      	cbz	r0, 800e046 <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800e038:	4b07      	ldr	r3, [pc, #28]	@ (800e058 <tcp_next_iss+0x24>)
 800e03a:	4a08      	ldr	r2, [pc, #32]	@ (800e05c <tcp_next_iss+0x28>)
 800e03c:	6818      	ldr	r0, [r3, #0]
 800e03e:	6812      	ldr	r2, [r2, #0]
 800e040:	4410      	add	r0, r2
 800e042:	6018      	str	r0, [r3, #0]
}
 800e044:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e046:	4b06      	ldr	r3, [pc, #24]	@ (800e060 <tcp_next_iss+0x2c>)
 800e048:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e04c:	4905      	ldr	r1, [pc, #20]	@ (800e064 <tcp_next_iss+0x30>)
 800e04e:	4806      	ldr	r0, [pc, #24]	@ (800e068 <tcp_next_iss+0x34>)
 800e050:	f004 ff4e 	bl	8012ef0 <iprintf>
 800e054:	e7f0      	b.n	800e038 <tcp_next_iss+0x4>
 800e056:	bf00      	nop
 800e058:	24000030 	.word	0x24000030
 800e05c:	2400fcd0 	.word	0x2400fcd0
 800e060:	080159ec 	.word	0x080159ec
 800e064:	0801607c 	.word	0x0801607c
 800e068:	08014150 	.word	0x08014150

0800e06c <tcp_eff_send_mss_netif>:
{
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	4605      	mov	r5, r0
 800e070:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e072:	b162      	cbz	r2, 800e08e <tcp_eff_send_mss_netif+0x22>
    if (outif == NULL) {
 800e074:	b14c      	cbz	r4, 800e08a <tcp_eff_send_mss_netif+0x1e>
    mtu = outif->mtu;
 800e076:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
  if (mtu != 0) {
 800e078:	b13b      	cbz	r3, 800e08a <tcp_eff_send_mss_netif+0x1e>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e07a:	2b28      	cmp	r3, #40	@ 0x28
 800e07c:	bf38      	it	cc
 800e07e:	2328      	movcc	r3, #40	@ 0x28
 800e080:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e082:	b29b      	uxth	r3, r3
 800e084:	429d      	cmp	r5, r3
 800e086:	bf28      	it	cs
 800e088:	461d      	movcs	r5, r3
}
 800e08a:	4628      	mov	r0, r5
 800e08c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e08e:	4b04      	ldr	r3, [pc, #16]	@ (800e0a0 <tcp_eff_send_mss_netif+0x34>)
 800e090:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e094:	4903      	ldr	r1, [pc, #12]	@ (800e0a4 <tcp_eff_send_mss_netif+0x38>)
 800e096:	4804      	ldr	r0, [pc, #16]	@ (800e0a8 <tcp_eff_send_mss_netif+0x3c>)
 800e098:	f004 ff2a 	bl	8012ef0 <iprintf>
 800e09c:	e7ea      	b.n	800e074 <tcp_eff_send_mss_netif+0x8>
 800e09e:	bf00      	nop
 800e0a0:	080159ec 	.word	0x080159ec
 800e0a4:	08016098 	.word	0x08016098
 800e0a8:	08014150 	.word	0x08014150

0800e0ac <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800e0ac:	b308      	cbz	r0, 800e0f2 <tcp_netif_ip_addr_changed+0x46>
{
 800e0ae:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800e0b0:	6803      	ldr	r3, [r0, #0]
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	b903      	cbnz	r3, 800e0b8 <tcp_netif_ip_addr_changed+0xc>
}
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e0f4 <tcp_netif_ip_addr_changed+0x48>)
 800e0ba:	460d      	mov	r5, r1
 800e0bc:	6819      	ldr	r1, [r3, #0]
 800e0be:	f7ff fcd1 	bl	800da64 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f8 <tcp_netif_ip_addr_changed+0x4c>)
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	6819      	ldr	r1, [r3, #0]
 800e0c8:	f7ff fccc 	bl	800da64 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800e0cc:	2d00      	cmp	r5, #0
 800e0ce:	d0f2      	beq.n	800e0b6 <tcp_netif_ip_addr_changed+0xa>
 800e0d0:	682b      	ldr	r3, [r5, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0ef      	beq.n	800e0b6 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e0d6:	4b09      	ldr	r3, [pc, #36]	@ (800e0fc <tcp_netif_ip_addr_changed+0x50>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d0eb      	beq.n	800e0b6 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e0de:	6819      	ldr	r1, [r3, #0]
 800e0e0:	6822      	ldr	r2, [r4, #0]
 800e0e2:	4291      	cmp	r1, r2
 800e0e4:	d101      	bne.n	800e0ea <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e0e6:	682a      	ldr	r2, [r5, #0]
 800e0e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1f6      	bne.n	800e0de <tcp_netif_ip_addr_changed+0x32>
}
 800e0f0:	bd38      	pop	{r3, r4, r5, pc}
 800e0f2:	4770      	bx	lr
 800e0f4:	2400fcc4 	.word	0x2400fcc4
 800e0f8:	2400fccc 	.word	0x2400fccc
 800e0fc:	2400fcc8 	.word	0x2400fcc8

0800e100 <tcp_free_ooseq>:
{
 800e100:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800e102:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 800e104:	b16c      	cbz	r4, 800e122 <tcp_free_ooseq+0x22>
 800e106:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800e108:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800e10a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800e10c:	6868      	ldr	r0, [r5, #4]
 800e10e:	b108      	cbz	r0, 800e114 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800e110:	f7fe f992 	bl	800c438 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800e114:	4629      	mov	r1, r5
 800e116:	2003      	movs	r0, #3
 800e118:	f7fd fe82 	bl	800be20 <memp_free>
  while (seg != NULL) {
 800e11c:	2c00      	cmp	r4, #0
 800e11e:	d1f3      	bne.n	800e108 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800e120:	6774      	str	r4, [r6, #116]	@ 0x74
}
 800e122:	bd70      	pop	{r4, r5, r6, pc}

0800e124 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e126:	4605      	mov	r5, r0
{
 800e128:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d035      	beq.n	800e19a <tcp_oos_insert_segment+0x76>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e12e:	68eb      	ldr	r3, [r5, #12]
 800e130:	8998      	ldrh	r0, [r3, #12]
 800e132:	f7fd faad 	bl	800b690 <lwip_htons>
 800e136:	07c2      	lsls	r2, r0, #31
 800e138:	d429      	bmi.n	800e18e <tcp_oos_insert_segment+0x6a>
 800e13a:	4e1c      	ldr	r6, [pc, #112]	@ (800e1ac <tcp_oos_insert_segment+0x88>)
 800e13c:	e005      	b.n	800e14a <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800e13e:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800e140:	4620      	mov	r0, r4
 800e142:	f7fe ff77 	bl	800d034 <tcp_seg_free>
      next = next->next;
 800e146:	463c      	mov	r4, r7
    while (next &&
 800e148:	b327      	cbz	r7, 800e194 <tcp_oos_insert_segment+0x70>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e14a:	68e1      	ldr	r1, [r4, #12]
 800e14c:	892b      	ldrh	r3, [r5, #8]
 800e14e:	6837      	ldr	r7, [r6, #0]
 800e150:	6848      	ldr	r0, [r1, #4]
 800e152:	443b      	add	r3, r7
 800e154:	8922      	ldrh	r2, [r4, #8]
 800e156:	1a1b      	subs	r3, r3, r0
 800e158:	1a9a      	subs	r2, r3, r2
    while (next &&
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	db0d      	blt.n	800e17a <tcp_oos_insert_segment+0x56>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e15e:	8988      	ldrh	r0, [r1, #12]
 800e160:	f7fd fa96 	bl	800b690 <lwip_htons>
 800e164:	07c3      	lsls	r3, r0, #31
 800e166:	d5ea      	bpl.n	800e13e <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e168:	68eb      	ldr	r3, [r5, #12]
 800e16a:	2001      	movs	r0, #1
 800e16c:	899f      	ldrh	r7, [r3, #12]
 800e16e:	f7fd fa8f 	bl	800b690 <lwip_htons>
 800e172:	68eb      	ldr	r3, [r5, #12]
 800e174:	4307      	orrs	r7, r0
 800e176:	819f      	strh	r7, [r3, #12]
 800e178:	e7e1      	b.n	800e13e <tcp_oos_insert_segment+0x1a>
    }
    if (next &&
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	dd05      	ble.n	800e18a <tcp_oos_insert_segment+0x66>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e17e:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800e180:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e182:	b289      	uxth	r1, r1
 800e184:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e186:	f7fe fa69 	bl	800c65c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e18a:	602c      	str	r4, [r5, #0]
}
 800e18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800e18e:	4620      	mov	r0, r4
 800e190:	f7fe ff3e 	bl	800d010 <tcp_segs_free>
    next = NULL;
 800e194:	2400      	movs	r4, #0
  cseg->next = next;
 800e196:	602c      	str	r4, [r5, #0]
}
 800e198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e19a:	4b05      	ldr	r3, [pc, #20]	@ (800e1b0 <tcp_oos_insert_segment+0x8c>)
 800e19c:	f240 421f 	movw	r2, #1055	@ 0x41f
 800e1a0:	4904      	ldr	r1, [pc, #16]	@ (800e1b4 <tcp_oos_insert_segment+0x90>)
 800e1a2:	4805      	ldr	r0, [pc, #20]	@ (800e1b8 <tcp_oos_insert_segment+0x94>)
 800e1a4:	f004 fea4 	bl	8012ef0 <iprintf>
 800e1a8:	e7c1      	b.n	800e12e <tcp_oos_insert_segment+0xa>
 800e1aa:	bf00      	nop
 800e1ac:	2400fce8 	.word	0x2400fce8
 800e1b0:	080160e8 	.word	0x080160e8
 800e1b4:	0801611c 	.word	0x0801611c
 800e1b8:	08014150 	.word	0x08014150

0800e1bc <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800e1bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e1f4 <tcp_input_delayed_close+0x38>)
{
 800e1be:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800e1c0:	781b      	ldrb	r3, [r3, #0]
{
 800e1c2:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800e1c4:	f013 0010 	ands.w	r0, r3, #16
 800e1c8:	d100      	bne.n	800e1cc <tcp_input_delayed_close+0x10>
}
 800e1ca:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e1cc:	8b63      	ldrh	r3, [r4, #26]
 800e1ce:	06db      	lsls	r3, r3, #27
 800e1d0:	d406      	bmi.n	800e1e0 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e1d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800e1d6:	b11b      	cbz	r3, 800e1e0 <tcp_input_delayed_close+0x24>
 800e1d8:	f06f 010e 	mvn.w	r1, #14
 800e1dc:	6920      	ldr	r0, [r4, #16]
 800e1de:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e1e0:	4621      	mov	r1, r4
 800e1e2:	4805      	ldr	r0, [pc, #20]	@ (800e1f8 <tcp_input_delayed_close+0x3c>)
 800e1e4:	f7ff fad6 	bl	800d794 <tcp_pcb_remove>
    tcp_free(pcb);
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f7fe fccf 	bl	800cb8c <tcp_free>
 800e1ee:	2001      	movs	r0, #1
}
 800e1f0:	bd10      	pop	{r4, pc}
 800e1f2:	bf00      	nop
 800e1f4:	2400fcdc 	.word	0x2400fcdc
 800e1f8:	2400fcc4 	.word	0x2400fcc4

0800e1fc <tcp_free_acked_segments.constprop.0>:
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e1fc:	2900      	cmp	r1, #0
 800e1fe:	d054      	beq.n	800e2aa <tcp_free_acked_segments.constprop.0+0xae>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800e200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	4682      	mov	sl, r0
 800e206:	460d      	mov	r5, r1
 800e208:	4690      	mov	r8, r2
 800e20a:	4e29      	ldr	r6, [pc, #164]	@ (800e2b0 <tcp_free_acked_segments.constprop.0+0xb4>)
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e20c:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800e2bc <tcp_free_acked_segments.constprop.0+0xc0>
 800e210:	4f28      	ldr	r7, [pc, #160]	@ (800e2b4 <tcp_free_acked_segments.constprop.0+0xb8>)
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e212:	68eb      	ldr	r3, [r5, #12]
 800e214:	6858      	ldr	r0, [r3, #4]
 800e216:	f7fd fa3f 	bl	800b698 <lwip_htonl>
 800e21a:	68eb      	ldr	r3, [r5, #12]
 800e21c:	4604      	mov	r4, r0
 800e21e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800e222:	8998      	ldrh	r0, [r3, #12]
 800e224:	f7fd fa34 	bl	800b690 <lwip_htons>
 800e228:	6833      	ldr	r3, [r6, #0]
 800e22a:	f010 0003 	ands.w	r0, r0, #3
 800e22e:	eba4 0403 	sub.w	r4, r4, r3
 800e232:	bf18      	it	ne
 800e234:	2001      	movne	r0, #1
 800e236:	445c      	add	r4, fp
 800e238:	4404      	add	r4, r0
  while (seg_list != NULL &&
 800e23a:	2c00      	cmp	r4, #0
 800e23c:	dc32      	bgt.n	800e2a4 <tcp_free_acked_segments.constprop.0+0xa8>
    seg_list = seg_list->next;
 800e23e:	e9d5 b000 	ldrd	fp, r0, [r5]
    clen = pbuf_clen(next->p);
 800e242:	f7fe fa67 	bl	800c714 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e246:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 800e24a:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e24c:	4298      	cmp	r0, r3
 800e24e:	d81f      	bhi.n	800e290 <tcp_free_acked_segments.constprop.0+0x94>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e250:	4919      	ldr	r1, [pc, #100]	@ (800e2b8 <tcp_free_acked_segments.constprop.0+0xbc>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e252:	1b1b      	subs	r3, r3, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e254:	892a      	ldrh	r2, [r5, #8]
    tcp_seg_free(next);
 800e256:	4628      	mov	r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e258:	880c      	ldrh	r4, [r1, #0]
 800e25a:	465d      	mov	r5, fp
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e25c:	f8aa 3066 	strh.w	r3, [sl, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e260:	1913      	adds	r3, r2, r4
 800e262:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800e264:	f7fe fee6 	bl	800d034 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e268:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800e26c:	b113      	cbz	r3, 800e274 <tcp_free_acked_segments.constprop.0+0x78>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e26e:	ea58 030b 	orrs.w	r3, r8, fp
 800e272:	d003      	beq.n	800e27c <tcp_free_acked_segments.constprop.0+0x80>
  while (seg_list != NULL &&
 800e274:	f1bb 0f00 	cmp.w	fp, #0
 800e278:	d1cb      	bne.n	800e212 <tcp_free_acked_segments.constprop.0+0x16>
 800e27a:	e006      	b.n	800e28a <tcp_free_acked_segments.constprop.0+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e27c:	4b0f      	ldr	r3, [pc, #60]	@ (800e2bc <tcp_free_acked_segments.constprop.0+0xc0>)
 800e27e:	f240 4261 	movw	r2, #1121	@ 0x461
 800e282:	490f      	ldr	r1, [pc, #60]	@ (800e2c0 <tcp_free_acked_segments.constprop.0+0xc4>)
 800e284:	480b      	ldr	r0, [pc, #44]	@ (800e2b4 <tcp_free_acked_segments.constprop.0+0xb8>)
 800e286:	f004 fe33 	bl	8012ef0 <iprintf>
  while (seg_list != NULL &&
 800e28a:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800e28c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e290:	464b      	mov	r3, r9
 800e292:	f240 4257 	movw	r2, #1111	@ 0x457
 800e296:	490b      	ldr	r1, [pc, #44]	@ (800e2c4 <tcp_free_acked_segments.constprop.0+0xc8>)
 800e298:	4638      	mov	r0, r7
 800e29a:	f004 fe29 	bl	8012ef0 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e29e:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800e2a2:	e7d5      	b.n	800e250 <tcp_free_acked_segments.constprop.0+0x54>
 800e2a4:	4628      	mov	r0, r5
}
 800e2a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	4770      	bx	lr
 800e2ae:	bf00      	nop
 800e2b0:	2400fce4 	.word	0x2400fce4
 800e2b4:	08014150 	.word	0x08014150
 800e2b8:	2400fce0 	.word	0x2400fce0
 800e2bc:	080160e8 	.word	0x080160e8
 800e2c0:	0801616c 	.word	0x0801616c
 800e2c4:	08016144 	.word	0x08016144

0800e2c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e2c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e2cc:	7d03      	ldrb	r3, [r0, #20]
{
 800e2ce:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e2d0:	2b03      	cmp	r3, #3
 800e2d2:	f240 8124 	bls.w	800e51e <tcp_receive+0x256>

  if (flags & TCP_ACK) {
 800e2d6:	4bb6      	ldr	r3, [pc, #728]	@ (800e5b0 <tcp_receive+0x2e8>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e2d8:	4eb6      	ldr	r6, [pc, #728]	@ (800e5b4 <tcp_receive+0x2ec>)
  if (flags & TCP_ACK) {
 800e2da:	781a      	ldrb	r2, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e2dc:	6833      	ldr	r3, [r6, #0]
  if (flags & TCP_ACK) {
 800e2de:	06d0      	lsls	r0, r2, #27
 800e2e0:	f100 80a3 	bmi.w	800e42a <tcp_receive+0x162>
 800e2e4:	4fb4      	ldr	r7, [pc, #720]	@ (800e5b8 <tcp_receive+0x2f0>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e2e6:	8839      	ldrh	r1, [r7, #0]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e2e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e2ea:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e2ec:	2900      	cmp	r1, #0
 800e2ee:	f000 808c 	beq.w	800e40a <tcp_receive+0x142>
 800e2f2:	7d20      	ldrb	r0, [r4, #20]
 800e2f4:	2806      	cmp	r0, #6
 800e2f6:	f200 8088 	bhi.w	800e40a <tcp_receive+0x142>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e2fa:	eba2 0803 	sub.w	r8, r2, r3
 800e2fe:	f1b8 0f01 	cmp.w	r8, #1
 800e302:	d406      	bmi.n	800e312 <tcp_receive+0x4a>
 800e304:	f1c3 0001 	rsb	r0, r3, #1
 800e308:	1a41      	subs	r1, r0, r1
 800e30a:	4411      	add	r1, r2
 800e30c:	2900      	cmp	r1, #0
 800e30e:	f340 81d8 	ble.w	800e6c2 <tcp_receive+0x3fa>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e312:	1a99      	subs	r1, r3, r2
 800e314:	2900      	cmp	r1, #0
 800e316:	f2c0 81cf 	blt.w	800e6b8 <tcp_receive+0x3f0>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e31a:	f103 0e01 	add.w	lr, r3, #1
 800e31e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800e320:	ebae 0102 	sub.w	r1, lr, r2
 800e324:	1a09      	subs	r1, r1, r0
 800e326:	2900      	cmp	r1, #0
 800e328:	dc43      	bgt.n	800e3b2 <tcp_receive+0xea>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e32a:	429a      	cmp	r2, r3
 800e32c:	f000 8454 	beq.w	800ebd8 <tcp_receive+0x910>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e330:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800e332:	2d00      	cmp	r5, #0
 800e334:	f000 8375 	beq.w	800ea22 <tcp_receive+0x75a>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 800e338:	68e8      	ldr	r0, [r5, #12]
 800e33a:	6842      	ldr	r2, [r0, #4]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	f000 8350 	beq.w	800e9e2 <tcp_receive+0x71a>
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e342:	1a99      	subs	r1, r3, r2
 800e344:	2900      	cmp	r1, #0
 800e346:	f2c0 83b9 	blt.w	800eabc <tcp_receive+0x7f4>
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e34a:	f103 3cff 	add.w	ip, r3, #4294967295
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e34e:	46a8      	mov	r8, r5
 800e350:	682d      	ldr	r5, [r5, #0]
 800e352:	2d00      	cmp	r5, #0
 800e354:	f000 814d 	beq.w	800e5f2 <tcp_receive+0x32a>
            if (seqno == next->tcphdr->seqno) {
 800e358:	68e8      	ldr	r0, [r5, #12]
 800e35a:	6842      	ldr	r2, [r0, #4]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	f000 8342 	beq.w	800e9e6 <tcp_receive+0x71e>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e362:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800e366:	6849      	ldr	r1, [r1, #4]
 800e368:	ebac 0101 	sub.w	r1, ip, r1
 800e36c:	2900      	cmp	r1, #0
 800e36e:	dbee      	blt.n	800e34e <tcp_receive+0x86>
 800e370:	ebae 0102 	sub.w	r1, lr, r2
 800e374:	2900      	cmp	r1, #0
 800e376:	dcea      	bgt.n	800e34e <tcp_receive+0x86>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e378:	4890      	ldr	r0, [pc, #576]	@ (800e5bc <tcp_receive+0x2f4>)
 800e37a:	f7fe fe69 	bl	800d050 <tcp_seg_copy>
                  if (cseg != NULL) {
 800e37e:	4607      	mov	r7, r0
 800e380:	b1b8      	cbz	r0, 800e3b2 <tcp_receive+0xea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e382:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e386:	6832      	ldr	r2, [r6, #0]
 800e388:	6859      	ldr	r1, [r3, #4]
 800e38a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800e38e:	440b      	add	r3, r1
 800e390:	1a9b      	subs	r3, r3, r2
 800e392:	2b00      	cmp	r3, #0
 800e394:	dd07      	ble.n	800e3a6 <tcp_receive+0xde>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e396:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800e398:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e39c:	b291      	uxth	r1, r2
 800e39e:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e3a2:	f7fe f95b 	bl	800c65c <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	4638      	mov	r0, r7
                    prev->next = cseg;
 800e3aa:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800e3ae:	f7ff feb9 	bl	800e124 <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e3b2:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 800e3b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800e3b8:	f002 b9e4 	b.w	8010784 <tcp_send_empty_ack>
      if (tcplen == 0) {
 800e3bc:	4f7e      	ldr	r7, [pc, #504]	@ (800e5b8 <tcp_receive+0x2f0>)
 800e3be:	8839      	ldrh	r1, [r7, #0]
 800e3c0:	2900      	cmp	r1, #0
 800e3c2:	f040 810b 	bne.w	800e5dc <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e3c6:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e3c8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800e3ca:	f8b4 c060 	ldrh.w	ip, [r4, #96]	@ 0x60
 800e3ce:	4461      	add	r1, ip
 800e3d0:	4571      	cmp	r1, lr
 800e3d2:	f040 8103 	bne.w	800e5dc <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 800e3d6:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
            if (pcb->lastack == ackno) {
 800e3d8:	0409      	lsls	r1, r1, #16
 800e3da:	f100 80ff 	bmi.w	800e5dc <tcp_receive+0x314>
 800e3de:	4290      	cmp	r0, r2
 800e3e0:	f040 80fc 	bne.w	800e5dc <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e3e4:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 800e3e8:	29ff      	cmp	r1, #255	@ 0xff
 800e3ea:	f000 8372 	beq.w	800ead2 <tcp_receive+0x80a>
                ++pcb->dupacks;
 800e3ee:	3101      	adds	r1, #1
 800e3f0:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800e3f2:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800e3f4:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800e3f8:	f200 836b 	bhi.w	800ead2 <tcp_receive+0x80a>
              if (pcb->dupacks >= 3) {
 800e3fc:	f000 8374 	beq.w	800eae8 <tcp_receive+0x820>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e402:	2900      	cmp	r1, #0
 800e404:	f040 80ae 	bne.w	800e564 <tcp_receive+0x29c>
 800e408:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e40a:	1a99      	subs	r1, r3, r2
 800e40c:	2900      	cmp	r1, #0
 800e40e:	db06      	blt.n	800e41e <tcp_receive+0x156>
 800e410:	f1c2 0201 	rsb	r2, r2, #1
 800e414:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800e416:	1a52      	subs	r2, r2, r1
 800e418:	441a      	add	r2, r3
 800e41a:	2a00      	cmp	r2, #0
 800e41c:	dd03      	ble.n	800e426 <tcp_receive+0x15e>
      tcp_ack_now(pcb);
 800e41e:	8b63      	ldrh	r3, [r4, #26]
 800e420:	f043 0302 	orr.w	r3, r3, #2
 800e424:	8363      	strh	r3, [r4, #26]
}
 800e426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e42a:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	@ 0x54
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e42e:	4d64      	ldr	r5, [pc, #400]	@ (800e5c0 <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e430:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e432:	f8b4 e060 	ldrh.w	lr, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e436:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e438:	2800      	cmp	r0, #0
 800e43a:	db7c      	blt.n	800e536 <tcp_receive+0x26e>
 800e43c:	4299      	cmp	r1, r3
 800e43e:	d076      	beq.n	800e52e <tcp_receive+0x266>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e440:	4594      	cmp	ip, r2
 800e442:	f000 80cf 	beq.w	800e5e4 <tcp_receive+0x31c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e446:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800e448:	1a11      	subs	r1, r2, r0
 800e44a:	2900      	cmp	r1, #0
 800e44c:	ddb6      	ble.n	800e3bc <tcp_receive+0xf4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e44e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	dc7d      	bgt.n	800e552 <tcp_receive+0x28a>
      if (pcb->flags & TF_INFR) {
 800e456:	8b63      	ldrh	r3, [r4, #26]
 800e458:	0758      	lsls	r0, r3, #29
 800e45a:	d509      	bpl.n	800e470 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800e45c:	f023 0304 	bic.w	r3, r3, #4
 800e460:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800e462:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 800e466:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e470:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 800e474:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 800e476:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e478:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800e47c:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e47e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 800e482:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800e484:	f04f 0300 	mov.w	r3, #0
 800e488:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 800e48c:	d913      	bls.n	800e4b6 <tcp_receive+0x1ee>
        if (pcb->cwnd < pcb->ssthresh) {
 800e48e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e492:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800e494:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 800e498:	429a      	cmp	r2, r3
 800e49a:	f200 81af 	bhi.w	800e7fc <tcp_receive+0x534>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e49e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800e4a2:	4411      	add	r1, r2
 800e4a4:	b289      	uxth	r1, r1
 800e4a6:	428a      	cmp	r2, r1
 800e4a8:	f200 828b 	bhi.w	800e9c2 <tcp_receive+0x6fa>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e4ac:	428b      	cmp	r3, r1
 800e4ae:	f240 828a 	bls.w	800e9c6 <tcp_receive+0x6fe>
 800e4b2:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 800e4bc:	f7ff fe9e 	bl	800e1fc <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e4c0:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f7ff fe98 	bl	800e1fc <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800e4cc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e4ce:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 800e4d0:	fab2 f382 	clz	r3, r2
 800e4d4:	095b      	lsrs	r3, r3, #5
 800e4d6:	425b      	negs	r3, r3
 800e4d8:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	f000 8189 	beq.w	800e7f6 <tcp_receive+0x52e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e4e4:	4b37      	ldr	r3, [pc, #220]	@ (800e5c4 <tcp_receive+0x2fc>)
 800e4e6:	8819      	ldrh	r1, [r3, #0]
 800e4e8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800e4ec:	440b      	add	r3, r1
 800e4ee:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 800e4f2:	8b63      	ldrh	r3, [r4, #26]
 800e4f4:	0519      	lsls	r1, r3, #20
 800e4f6:	f140 80dd 	bpl.w	800e6b4 <tcp_receive+0x3ec>
        if (pcb->unacked == NULL) {
 800e4fa:	2a00      	cmp	r2, #0
 800e4fc:	f000 8195 	beq.w	800e82a <tcp_receive+0x562>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e500:	68d3      	ldr	r3, [r2, #12]
 800e502:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800e504:	6858      	ldr	r0, [r3, #4]
 800e506:	f7fd f8c7 	bl	800b698 <lwip_htonl>
 800e50a:	1a3f      	subs	r7, r7, r0
 800e50c:	2f00      	cmp	r7, #0
 800e50e:	f300 80d1 	bgt.w	800e6b4 <tcp_receive+0x3ec>
          tcp_clear_flags(pcb, TF_RTO);
 800e512:	8b63      	ldrh	r3, [r4, #26]
 800e514:	4f28      	ldr	r7, [pc, #160]	@ (800e5b8 <tcp_receive+0x2f0>)
 800e516:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e51a:	8363      	strh	r3, [r4, #26]
 800e51c:	e01d      	b.n	800e55a <tcp_receive+0x292>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e51e:	4b2a      	ldr	r3, [pc, #168]	@ (800e5c8 <tcp_receive+0x300>)
 800e520:	f240 427c 	movw	r2, #1148	@ 0x47c
 800e524:	4929      	ldr	r1, [pc, #164]	@ (800e5cc <tcp_receive+0x304>)
 800e526:	482a      	ldr	r0, [pc, #168]	@ (800e5d0 <tcp_receive+0x308>)
 800e528:	f004 fce2 	bl	8012ef0 <iprintf>
 800e52c:	e6d3      	b.n	800e2d6 <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e52e:	ebac 0102 	sub.w	r1, ip, r2
 800e532:	2900      	cmp	r1, #0
 800e534:	da84      	bge.n	800e440 <tcp_receive+0x178>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e536:	4927      	ldr	r1, [pc, #156]	@ (800e5d4 <tcp_receive+0x30c>)
 800e538:	6809      	ldr	r1, [r1, #0]
 800e53a:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e53c:	f8b4 0062 	ldrh.w	r0, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e540:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e544:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 800e546:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e54a:	bf38      	it	cc
 800e54c:	f8a4 1062 	strhcc.w	r1, [r4, #98]	@ 0x62
      pcb->snd_wl1 = seqno;
 800e550:	e779      	b.n	800e446 <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 800e552:	4620      	mov	r0, r4
 800e554:	4f18      	ldr	r7, [pc, #96]	@ (800e5b8 <tcp_receive+0x2f0>)
 800e556:	f002 f915 	bl	8010784 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e55a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e55c:	2900      	cmp	r1, #0
 800e55e:	f43f aec2 	beq.w	800e2e6 <tcp_receive+0x1e>
 800e562:	682a      	ldr	r2, [r5, #0]
 800e564:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e566:	1a9b      	subs	r3, r3, r2
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f6bf aebc 	bge.w	800e2e6 <tcp_receive+0x1e>
      m = (s16_t)(m - (pcb->sa >> 3));
 800e56e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e572:	b289      	uxth	r1, r1
 800e574:	4b18      	ldr	r3, [pc, #96]	@ (800e5d8 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800e576:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e57a:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800e57c:	1a2b      	subs	r3, r5, r0
 800e57e:	1a5b      	subs	r3, r3, r1
 800e580:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800e582:	441a      	add	r2, r3
      if (m < 0) {
 800e584:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800e588:	b212      	sxth	r2, r2
 800e58a:	87a2      	strh	r2, [r4, #60]	@ 0x3c
      if (m < 0) {
 800e58c:	d002      	beq.n	800e594 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 800e58e:	1b40      	subs	r0, r0, r5
 800e590:	4401      	add	r1, r0
 800e592:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800e594:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	@ 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e598:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800e59c:	440b      	add	r3, r1
 800e59e:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e5a0:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800e5a4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rttest = 0;
 800e5a6:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e5a8:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 800e5ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5ae:	e69a      	b.n	800e2e6 <tcp_receive+0x1e>
 800e5b0:	2400fcdd 	.word	0x2400fcdd
 800e5b4:	2400fce8 	.word	0x2400fce8
 800e5b8:	2400fcde 	.word	0x2400fcde
 800e5bc:	2400fcfc 	.word	0x2400fcfc
 800e5c0:	2400fce4 	.word	0x2400fce4
 800e5c4:	2400fce0 	.word	0x2400fce0
 800e5c8:	080160e8 	.word	0x080160e8
 800e5cc:	0801618c 	.word	0x0801618c
 800e5d0:	08014150 	.word	0x08014150
 800e5d4:	2400fcf8 	.word	0x2400fcf8
 800e5d8:	2400fcd0 	.word	0x2400fcd0
        pcb->dupacks = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5e2:	e7ba      	b.n	800e55a <tcp_receive+0x292>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e5e4:	49a2      	ldr	r1, [pc, #648]	@ (800e870 <tcp_receive+0x5a8>)
 800e5e6:	6809      	ldr	r1, [r1, #0]
 800e5e8:	89c9      	ldrh	r1, [r1, #14]
 800e5ea:	458e      	cmp	lr, r1
 800e5ec:	f4bf af2b 	bcs.w	800e446 <tcp_receive+0x17e>
 800e5f0:	e7a4      	b.n	800e53c <tcp_receive+0x274>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e5f2:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	f77f aedc 	ble.w	800e3b2 <tcp_receive+0xea>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e5fa:	8980      	ldrh	r0, [r0, #12]
 800e5fc:	f7fd f848 	bl	800b690 <lwip_htons>
 800e600:	07c1      	lsls	r1, r0, #31
 800e602:	f53f aed6 	bmi.w	800e3b2 <tcp_receive+0xea>
                next->next = tcp_seg_copy(&inseg);
 800e606:	489b      	ldr	r0, [pc, #620]	@ (800e874 <tcp_receive+0x5ac>)
 800e608:	f7fe fd22 	bl	800d050 <tcp_seg_copy>
 800e60c:	f8c8 0000 	str.w	r0, [r8]
                if (next->next != NULL) {
 800e610:	2800      	cmp	r0, #0
 800e612:	f43f aece 	beq.w	800e3b2 <tcp_receive+0xea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e616:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e61a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800e61e:	6859      	ldr	r1, [r3, #4]
 800e620:	6833      	ldr	r3, [r6, #0]
 800e622:	440a      	add	r2, r1
 800e624:	1ad2      	subs	r2, r2, r3
 800e626:	2a00      	cmp	r2, #0
 800e628:	dd07      	ble.n	800e63a <tcp_receive+0x372>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e62a:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800e62c:	f8d8 0004 	ldr.w	r0, [r8, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e630:	b299      	uxth	r1, r3
 800e632:	f8a8 1008 	strh.w	r1, [r8, #8]
                    pbuf_realloc(next->p, next->len);
 800e636:	f7fe f811 	bl	800c65c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e63a:	6832      	ldr	r2, [r6, #0]
 800e63c:	883b      	ldrh	r3, [r7, #0]
 800e63e:	4413      	add	r3, r2
 800e640:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e642:	1a9b      	subs	r3, r3, r2
 800e644:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800e646:	1a9b      	subs	r3, r3, r2
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f77f aeb2 	ble.w	800e3b2 <tcp_receive+0xea>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e64e:	f8d8 3000 	ldr.w	r3, [r8]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	8998      	ldrh	r0, [r3, #12]
 800e656:	f7fd f81b 	bl	800b690 <lwip_htons>
 800e65a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e65c:	f8d8 3000 	ldr.w	r3, [r8]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e660:	f100 82a8 	bmi.w	800ebb4 <tcp_receive+0x8ec>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e664:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800e666:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800e668:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e66a:	1a89      	subs	r1, r1, r2
 800e66c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e66e:	4411      	add	r1, r2
 800e670:	b289      	uxth	r1, r1
 800e672:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e674:	f7fd fff2 	bl	800c65c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e678:	f8d8 3000 	ldr.w	r3, [r8]
 800e67c:	891d      	ldrh	r5, [r3, #8]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	8998      	ldrh	r0, [r3, #12]
 800e682:	f7fd f805 	bl	800b690 <lwip_htons>
 800e686:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e68a:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800e68c:	bf18      	it	ne
 800e68e:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e690:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800e692:	442b      	add	r3, r5
 800e694:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e696:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800e698:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e69a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e69c:	4413      	add	r3, r2
 800e69e:	4299      	cmp	r1, r3
 800e6a0:	f43f ae87 	beq.w	800e3b2 <tcp_receive+0xea>
 800e6a4:	4b74      	ldr	r3, [pc, #464]	@ (800e878 <tcp_receive+0x5b0>)
 800e6a6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800e6aa:	4974      	ldr	r1, [pc, #464]	@ (800e87c <tcp_receive+0x5b4>)
 800e6ac:	4874      	ldr	r0, [pc, #464]	@ (800e880 <tcp_receive+0x5b8>)
 800e6ae:	f004 fc1f 	bl	8012ef0 <iprintf>
 800e6b2:	e67e      	b.n	800e3b2 <tcp_receive+0xea>
 800e6b4:	4f73      	ldr	r7, [pc, #460]	@ (800e884 <tcp_receive+0x5bc>)
 800e6b6:	e750      	b.n	800e55a <tcp_receive+0x292>
        tcp_ack_now(pcb);
 800e6b8:	8b63      	ldrh	r3, [r4, #26]
 800e6ba:	f043 0302 	orr.w	r3, r3, #2
 800e6be:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e6c0:	e677      	b.n	800e3b2 <tcp_receive+0xea>
      struct pbuf *p = inseg.p;
 800e6c2:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 800e874 <tcp_receive+0x5ac>
 800e6c6:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e6ca:	2d00      	cmp	r5, #0
 800e6cc:	f000 8171 	beq.w	800e9b2 <tcp_receive+0x6ea>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e6d0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800e6d4:	4598      	cmp	r8, r3
 800e6d6:	f200 80c3 	bhi.w	800e860 <tcp_receive+0x598>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e6da:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800e6de:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e6e2:	891a      	ldrh	r2, [r3, #8]
 800e6e4:	4542      	cmp	r2, r8
 800e6e6:	f0c0 80b0 	bcc.w	800e84a <tcp_receive+0x582>
      inseg.len -= off;
 800e6ea:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e6ee:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800e6f2:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e6f6:	b292      	uxth	r2, r2
      inseg.len -= off;
 800e6f8:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800e6fc:	896b      	ldrh	r3, [r5, #10]
 800e6fe:	4598      	cmp	r8, r3
 800e700:	d90a      	bls.n	800e718 <tcp_receive+0x450>
        p->len = 0;
 800e702:	2100      	movs	r1, #0
        off -= p->len;
 800e704:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800e708:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800e70a:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800e70c:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800e70e:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800e712:	896b      	ldrh	r3, [r5, #10]
 800e714:	4543      	cmp	r3, r8
 800e716:	d3f5      	bcc.n	800e704 <tcp_receive+0x43c>
      pbuf_remove_header(p, off);
 800e718:	4641      	mov	r1, r8
 800e71a:	4628      	mov	r0, r5
 800e71c:	f7fd fe2a 	bl	800c374 <pbuf_remove_header>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e720:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e722:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e724:	f1c3 0301 	rsb	r3, r3, #1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e728:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800e72c:	6032      	str	r2, [r6, #0]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e72e:	2b00      	cmp	r3, #0
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e730:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e732:	f73f ae3e 	bgt.w	800e3b2 <tcp_receive+0xea>
        tcplen = TCP_TCPLEN(&inseg);
 800e736:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e73a:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800e73e:	8998      	ldrh	r0, [r3, #12]
 800e740:	f7fc ffa6 	bl	800b690 <lwip_htons>
 800e744:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800e748:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800e74a:	bf18      	it	ne
 800e74c:	2301      	movne	r3, #1
 800e74e:	442b      	add	r3, r5
 800e750:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800e752:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800e754:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800e756:	f0c0 816d 	bcc.w	800ea34 <tcp_receive+0x76c>
        if (pcb->ooseq != NULL) {
 800e75a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	f000 809e 	beq.w	800e89e <tcp_receive+0x5d6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e762:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e766:	8998      	ldrh	r0, [r3, #12]
 800e768:	f7fc ff92 	bl	800b690 <lwip_htons>
 800e76c:	07c2      	lsls	r2, r0, #31
 800e76e:	f100 8093 	bmi.w	800e898 <tcp_receive+0x5d0>
            struct tcp_seg *next = pcb->ooseq;
 800e772:	6f65      	ldr	r5, [r4, #116]	@ 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800e774:	883a      	ldrh	r2, [r7, #0]
 800e776:	6831      	ldr	r1, [r6, #0]
            while (next &&
 800e778:	b955      	cbnz	r5, 800e790 <tcp_receive+0x4c8>
 800e77a:	e1f3      	b.n	800eb64 <tcp_receive+0x89c>
              next = next->next;
 800e77c:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800e780:	4628      	mov	r0, r5
 800e782:	f7fe fc57 	bl	800d034 <tcp_seg_free>
              next = next->next;
 800e786:	4645      	mov	r5, r8
            while (next &&
 800e788:	f1b8 0f00 	cmp.w	r8, #0
 800e78c:	f000 81e8 	beq.w	800eb60 <tcp_receive+0x898>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e790:	68e8      	ldr	r0, [r5, #12]
 800e792:	883a      	ldrh	r2, [r7, #0]
 800e794:	f8d6 e000 	ldr.w	lr, [r6]
 800e798:	892b      	ldrh	r3, [r5, #8]
 800e79a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800e79e:	eb02 010e 	add.w	r1, r2, lr
 800e7a2:	4463      	add	r3, ip
 800e7a4:	1acb      	subs	r3, r1, r3
            while (next &&
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	f2c0 81a2 	blt.w	800eaf0 <tcp_receive+0x828>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e7ac:	8980      	ldrh	r0, [r0, #12]
 800e7ae:	f7fc ff6f 	bl	800b690 <lwip_htons>
 800e7b2:	07c3      	lsls	r3, r0, #31
 800e7b4:	d5e2      	bpl.n	800e77c <tcp_receive+0x4b4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e7b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e7ba:	8998      	ldrh	r0, [r3, #12]
 800e7bc:	f7fc ff68 	bl	800b690 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e7c0:	0780      	lsls	r0, r0, #30
 800e7c2:	d4db      	bmi.n	800e77c <tcp_receive+0x4b4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e7c4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e7c8:	2001      	movs	r0, #1
 800e7ca:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800e7ce:	f7fc ff5f 	bl	800b690 <lwip_htons>
 800e7d2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e7d6:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800e7da:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e7de:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e7e0:	b280      	uxth	r0, r0
 800e7e2:	f7fc ff55 	bl	800b690 <lwip_htons>
 800e7e6:	f010 0303 	ands.w	r3, r0, #3
 800e7ea:	bf18      	it	ne
 800e7ec:	2301      	movne	r3, #1
 800e7ee:	4498      	add	r8, r3
 800e7f0:	f8a7 8000 	strh.w	r8, [r7]
 800e7f4:	e7c2      	b.n	800e77c <tcp_receive+0x4b4>
        pcb->unsent_oversize = 0;
 800e7f6:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 800e7fa:	e673      	b.n	800e4e4 <tcp_receive+0x21c>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e7fc:	8b62      	ldrh	r2, [r4, #26]
 800e7fe:	f412 6f00 	tst.w	r2, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e802:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e804:	bf0c      	ite	eq
 800e806:	2002      	moveq	r0, #2
 800e808:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e80a:	fb12 f200 	smulbb	r2, r2, r0
 800e80e:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800e810:	428a      	cmp	r2, r1
 800e812:	bf94      	ite	ls
 800e814:	1898      	addls	r0, r3, r2
 800e816:	1858      	addhi	r0, r3, r1
 800e818:	b282      	uxth	r2, r0
 800e81a:	4293      	cmp	r3, r2
 800e81c:	f240 80dc 	bls.w	800e9d8 <tcp_receive+0x710>
 800e820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e824:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800e828:	e645      	b.n	800e4b6 <tcp_receive+0x1ee>
          if ((pcb->unsent == NULL) ||
 800e82a:	b148      	cbz	r0, 800e840 <tcp_receive+0x578>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e82c:	68c3      	ldr	r3, [r0, #12]
 800e82e:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800e830:	6858      	ldr	r0, [r3, #4]
 800e832:	f7fc ff31 	bl	800b698 <lwip_htonl>
 800e836:	1a3f      	subs	r7, r7, r0
          if ((pcb->unsent == NULL) ||
 800e838:	2f00      	cmp	r7, #0
 800e83a:	f73f af3b 	bgt.w	800e6b4 <tcp_receive+0x3ec>
            tcp_clear_flags(pcb, TF_RTO);
 800e83e:	8b63      	ldrh	r3, [r4, #26]
 800e840:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e844:	4f0f      	ldr	r7, [pc, #60]	@ (800e884 <tcp_receive+0x5bc>)
 800e846:	8363      	strh	r3, [r4, #26]
 800e848:	e687      	b.n	800e55a <tcp_receive+0x292>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e84a:	4b0b      	ldr	r3, [pc, #44]	@ (800e878 <tcp_receive+0x5b0>)
 800e84c:	f240 5297 	movw	r2, #1431	@ 0x597
 800e850:	490d      	ldr	r1, [pc, #52]	@ (800e888 <tcp_receive+0x5c0>)
 800e852:	480b      	ldr	r0, [pc, #44]	@ (800e880 <tcp_receive+0x5b8>)
 800e854:	f004 fb4c 	bl	8012ef0 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e858:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e85c:	891a      	ldrh	r2, [r3, #8]
 800e85e:	e744      	b.n	800e6ea <tcp_receive+0x422>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e860:	4b05      	ldr	r3, [pc, #20]	@ (800e878 <tcp_receive+0x5b0>)
 800e862:	f240 5295 	movw	r2, #1429	@ 0x595
 800e866:	4909      	ldr	r1, [pc, #36]	@ (800e88c <tcp_receive+0x5c4>)
 800e868:	4805      	ldr	r0, [pc, #20]	@ (800e880 <tcp_receive+0x5b8>)
 800e86a:	f004 fb41 	bl	8012ef0 <iprintf>
 800e86e:	e734      	b.n	800e6da <tcp_receive+0x412>
 800e870:	2400fcf8 	.word	0x2400fcf8
 800e874:	2400fcfc 	.word	0x2400fcfc
 800e878:	080160e8 	.word	0x080160e8
 800e87c:	080161d8 	.word	0x080161d8
 800e880:	08014150 	.word	0x08014150
 800e884:	2400fcde 	.word	0x2400fcde
 800e888:	080161c8 	.word	0x080161c8
 800e88c:	080161b8 	.word	0x080161b8
              pcb->ooseq = pcb->ooseq->next;
 800e890:	6803      	ldr	r3, [r0, #0]
 800e892:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800e894:	f7fe fbce 	bl	800d034 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e898:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d1f8      	bne.n	800e890 <tcp_receive+0x5c8>
        pcb->rcv_nxt = seqno + tcplen;
 800e89e:	883a      	ldrh	r2, [r7, #0]
 800e8a0:	6831      	ldr	r1, [r6, #0]
 800e8a2:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e8a4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800e8a6:	6261      	str	r1, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	f0c0 80fd 	bcc.w	800eaa8 <tcp_receive+0x7e0>
        pcb->rcv_wnd -= tcplen;
 800e8ae:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800e8b0:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800e8b2:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800e8b4:	f7fe fa7c 	bl	800cdb0 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800e8b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e8bc:	891a      	ldrh	r2, [r3, #8]
 800e8be:	b122      	cbz	r2, 800e8ca <tcp_receive+0x602>
          recv_data = inseg.p;
 800e8c0:	4ab2      	ldr	r2, [pc, #712]	@ (800eb8c <tcp_receive+0x8c4>)
 800e8c2:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e8ca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e8ce:	8998      	ldrh	r0, [r3, #12]
 800e8d0:	f7fc fede 	bl	800b690 <lwip_htons>
 800e8d4:	07c2      	lsls	r2, r0, #31
 800e8d6:	d504      	bpl.n	800e8e2 <tcp_receive+0x61a>
          recv_flags |= TF_GOT_FIN;
 800e8d8:	4aad      	ldr	r2, [pc, #692]	@ (800eb90 <tcp_receive+0x8c8>)
 800e8da:	7813      	ldrb	r3, [r2, #0]
 800e8dc:	f043 0320 	orr.w	r3, r3, #32
 800e8e0:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800e8e2:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800e8e4:	2d00      	cmp	r5, #0
 800e8e6:	f000 8093 	beq.w	800ea10 <tcp_receive+0x748>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e8ea:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 800eb98 <tcp_receive+0x8d0>
 800e8ee:	f8df 82c0 	ldr.w	r8, [pc, #704]	@ 800ebb0 <tcp_receive+0x8e8>
 800e8f2:	4fa8      	ldr	r7, [pc, #672]	@ (800eb94 <tcp_receive+0x8cc>)
 800e8f4:	e033      	b.n	800e95e <tcp_receive+0x696>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e8f6:	68eb      	ldr	r3, [r5, #12]
 800e8f8:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800e8fc:	8998      	ldrh	r0, [r3, #12]
 800e8fe:	f7fc fec7 	bl	800b690 <lwip_htons>
 800e902:	f010 0003 	ands.w	r0, r0, #3
 800e906:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800e908:	bf18      	it	ne
 800e90a:	2001      	movne	r0, #1
 800e90c:	4450      	add	r0, sl
 800e90e:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800e910:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e912:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800e914:	f7fe fa4c 	bl	800cdb0 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800e918:	6869      	ldr	r1, [r5, #4]
 800e91a:	890b      	ldrh	r3, [r1, #8]
 800e91c:	b13b      	cbz	r3, 800e92e <tcp_receive+0x666>
            if (recv_data) {
 800e91e:	4b9b      	ldr	r3, [pc, #620]	@ (800eb8c <tcp_receive+0x8c4>)
 800e920:	6818      	ldr	r0, [r3, #0]
 800e922:	2800      	cmp	r0, #0
 800e924:	d05b      	beq.n	800e9de <tcp_receive+0x716>
              pbuf_cat(recv_data, cseg->p);
 800e926:	f7fd ff1d 	bl	800c764 <pbuf_cat>
            cseg->p = NULL;
 800e92a:	2300      	movs	r3, #0
 800e92c:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e92e:	68eb      	ldr	r3, [r5, #12]
 800e930:	8998      	ldrh	r0, [r3, #12]
 800e932:	f7fc fead 	bl	800b690 <lwip_htons>
 800e936:	07c3      	lsls	r3, r0, #31
 800e938:	d509      	bpl.n	800e94e <tcp_receive+0x686>
            recv_flags |= TF_GOT_FIN;
 800e93a:	4a95      	ldr	r2, [pc, #596]	@ (800eb90 <tcp_receive+0x8c8>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e93c:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800e93e:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e940:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800e942:	f043 0320 	orr.w	r3, r3, #32
 800e946:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e948:	d101      	bne.n	800e94e <tcp_receive+0x686>
              pcb->state = CLOSE_WAIT;
 800e94a:	2307      	movs	r3, #7
 800e94c:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800e94e:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800e950:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800e952:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 800e954:	f7fe fb6e 	bl	800d034 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e958:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800e95a:	2d00      	cmp	r5, #0
 800e95c:	d058      	beq.n	800ea10 <tcp_receive+0x748>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e95e:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800e960:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e962:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800e964:	428b      	cmp	r3, r1
 800e966:	d153      	bne.n	800ea10 <tcp_receive+0x748>
          seqno = pcb->ooseq->tcphdr->seqno;
 800e968:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e96a:	8990      	ldrh	r0, [r2, #12]
 800e96c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800e970:	f7fc fe8e 	bl	800b690 <lwip_htons>
 800e974:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e976:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e97a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e97e:	bf18      	it	ne
 800e980:	2001      	movne	r0, #1
 800e982:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e984:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e986:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e988:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e98c:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e98e:	8998      	ldrh	r0, [r3, #12]
 800e990:	f7fc fe7e 	bl	800b690 <lwip_htons>
 800e994:	f010 0003 	ands.w	r0, r0, #3
 800e998:	bf18      	it	ne
 800e99a:	2001      	movne	r0, #1
 800e99c:	4458      	add	r0, fp
 800e99e:	4582      	cmp	sl, r0
 800e9a0:	d2a9      	bcs.n	800e8f6 <tcp_receive+0x62e>
 800e9a2:	464b      	mov	r3, r9
 800e9a4:	f240 622b 	movw	r2, #1579	@ 0x62b
 800e9a8:	4641      	mov	r1, r8
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	f004 faa0 	bl	8012ef0 <iprintf>
 800e9b0:	e7a1      	b.n	800e8f6 <tcp_receive+0x62e>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e9b2:	4b79      	ldr	r3, [pc, #484]	@ (800eb98 <tcp_receive+0x8d0>)
 800e9b4:	f240 5294 	movw	r2, #1428	@ 0x594
 800e9b8:	4978      	ldr	r1, [pc, #480]	@ (800eb9c <tcp_receive+0x8d4>)
 800e9ba:	4876      	ldr	r0, [pc, #472]	@ (800eb94 <tcp_receive+0x8cc>)
 800e9bc:	f004 fa98 	bl	8012ef0 <iprintf>
 800e9c0:	e686      	b.n	800e6d0 <tcp_receive+0x408>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e9c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e9c6:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e9c8:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e9ca:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e9cc:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e9d0:	b292      	uxth	r2, r2
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	f63f af24 	bhi.w	800e820 <tcp_receive+0x558>
 800e9d8:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 800e9dc:	e56b      	b.n	800e4b6 <tcp_receive+0x1ee>
              recv_data = cseg->p;
 800e9de:	6019      	str	r1, [r3, #0]
 800e9e0:	e7a3      	b.n	800e92a <tcp_receive+0x662>
          struct tcp_seg *next, *prev = NULL;
 800e9e2:	f04f 0800 	mov.w	r8, #0
              if (inseg.len > next->len) {
 800e9e6:	486e      	ldr	r0, [pc, #440]	@ (800eba0 <tcp_receive+0x8d8>)
 800e9e8:	892b      	ldrh	r3, [r5, #8]
 800e9ea:	8902      	ldrh	r2, [r0, #8]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	f67f ace0 	bls.w	800e3b2 <tcp_receive+0xea>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e9f2:	f7fe fb2d 	bl	800d050 <tcp_seg_copy>
                if (cseg != NULL) {
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	f43f acdb 	beq.w	800e3b2 <tcp_receive+0xea>
                  if (prev != NULL) {
 800e9fc:	f1b8 0f00 	cmp.w	r8, #0
 800ea00:	f000 80c2 	beq.w	800eb88 <tcp_receive+0x8c0>
                    prev->next = cseg;
 800ea04:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800ea08:	4629      	mov	r1, r5
 800ea0a:	f7ff fb8b 	bl	800e124 <tcp_oos_insert_segment>
 800ea0e:	e4d0      	b.n	800e3b2 <tcp_receive+0xea>
        tcp_ack(pcb);
 800ea10:	8b63      	ldrh	r3, [r4, #26]
 800ea12:	07d8      	lsls	r0, r3, #31
 800ea14:	d50a      	bpl.n	800ea2c <tcp_receive+0x764>
 800ea16:	f023 0301 	bic.w	r3, r3, #1
 800ea1a:	f043 0302 	orr.w	r3, r3, #2
 800ea1e:	8363      	strh	r3, [r4, #26]
 800ea20:	e501      	b.n	800e426 <tcp_receive+0x15e>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ea22:	485f      	ldr	r0, [pc, #380]	@ (800eba0 <tcp_receive+0x8d8>)
 800ea24:	f7fe fb14 	bl	800d050 <tcp_seg_copy>
 800ea28:	6760      	str	r0, [r4, #116]	@ 0x74
 800ea2a:	e4c2      	b.n	800e3b2 <tcp_receive+0xea>
        tcp_ack(pcb);
 800ea2c:	f043 0301 	orr.w	r3, r3, #1
 800ea30:	8363      	strh	r3, [r4, #26]
 800ea32:	e4f8      	b.n	800e426 <tcp_receive+0x15e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ea34:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ea38:	8998      	ldrh	r0, [r3, #12]
 800ea3a:	f7fc fe29 	bl	800b690 <lwip_htons>
 800ea3e:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ea40:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ea44:	f100 8090 	bmi.w	800eb68 <tcp_receive+0x8a0>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ea48:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ea4a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800ea4c:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea50:	f7fc fe1e 	bl	800b690 <lwip_htons>
 800ea54:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800ea56:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea5a:	d503      	bpl.n	800ea64 <tcp_receive+0x79c>
            inseg.len -= 1;
 800ea5c:	3901      	subs	r1, #1
 800ea5e:	b289      	uxth	r1, r1
 800ea60:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800ea64:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ea68:	f7fd fdf8 	bl	800c65c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ea6c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ea70:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800ea74:	8998      	ldrh	r0, [r3, #12]
 800ea76:	f7fc fe0b 	bl	800b690 <lwip_htons>
 800ea7a:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea7e:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800ea80:	bf18      	it	ne
 800ea82:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea84:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800ea86:	442b      	add	r3, r5
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea8c:	4413      	add	r3, r2
 800ea8e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800ea90:	440a      	add	r2, r1
 800ea92:	4293      	cmp	r3, r2
 800ea94:	f43f ae61 	beq.w	800e75a <tcp_receive+0x492>
 800ea98:	4b3f      	ldr	r3, [pc, #252]	@ (800eb98 <tcp_receive+0x8d0>)
 800ea9a:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800ea9e:	4941      	ldr	r1, [pc, #260]	@ (800eba4 <tcp_receive+0x8dc>)
 800eaa0:	483c      	ldr	r0, [pc, #240]	@ (800eb94 <tcp_receive+0x8cc>)
 800eaa2:	f004 fa25 	bl	8012ef0 <iprintf>
 800eaa6:	e658      	b.n	800e75a <tcp_receive+0x492>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800eaa8:	4b3b      	ldr	r3, [pc, #236]	@ (800eb98 <tcp_receive+0x8d0>)
 800eaaa:	f240 6207 	movw	r2, #1543	@ 0x607
 800eaae:	493e      	ldr	r1, [pc, #248]	@ (800eba8 <tcp_receive+0x8e0>)
 800eab0:	4838      	ldr	r0, [pc, #224]	@ (800eb94 <tcp_receive+0x8cc>)
 800eab2:	f004 fa1d 	bl	8012ef0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800eab6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800eab8:	883a      	ldrh	r2, [r7, #0]
 800eaba:	e6f8      	b.n	800e8ae <tcp_receive+0x5e6>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800eabc:	4838      	ldr	r0, [pc, #224]	@ (800eba0 <tcp_receive+0x8d8>)
 800eabe:	f7fe fac7 	bl	800d050 <tcp_seg_copy>
                  if (cseg != NULL) {
 800eac2:	2800      	cmp	r0, #0
 800eac4:	f43f ac75 	beq.w	800e3b2 <tcp_receive+0xea>
                    tcp_oos_insert_segment(cseg, next);
 800eac8:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800eaca:	6760      	str	r0, [r4, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800eacc:	f7ff fb2a 	bl	800e124 <tcp_oos_insert_segment>
 800ead0:	e46f      	b.n	800e3b2 <tcp_receive+0xea>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ead2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800ead6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ead8:	4413      	add	r3, r2
 800eada:	b29b      	uxth	r3, r3
 800eadc:	429a      	cmp	r2, r3
 800eade:	d901      	bls.n	800eae4 <tcp_receive+0x81c>
 800eae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eae4:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800eae8:	4620      	mov	r0, r4
 800eaea:	f001 fdc9 	bl	8010680 <tcp_rexmit_fast>
      if (!found_dupack) {
 800eaee:	e534      	b.n	800e55a <tcp_receive+0x292>
                TCP_SEQ_GT(seqno + tcplen,
 800eaf0:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	dc01      	bgt.n	800eafc <tcp_receive+0x834>
            pcb->ooseq = next;
 800eaf8:	6765      	str	r5, [r4, #116]	@ 0x74
 800eafa:	e6d3      	b.n	800e8a4 <tcp_receive+0x5dc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800eafc:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eb00:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800eb04:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eb08:	8998      	ldrh	r0, [r3, #12]
 800eb0a:	f7fc fdc1 	bl	800b690 <lwip_htons>
 800eb0e:	0781      	lsls	r1, r0, #30
 800eb10:	d504      	bpl.n	800eb1c <tcp_receive+0x854>
                inseg.len -= 1;
 800eb12:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800eb16:	3b01      	subs	r3, #1
 800eb18:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800eb1c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800eb20:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800eb24:	f7fd fd9a 	bl	800c65c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800eb28:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eb2c:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800eb30:	8998      	ldrh	r0, [r3, #12]
 800eb32:	f7fc fdad 	bl	800b690 <lwip_htons>
 800eb36:	f010 0303 	ands.w	r3, r0, #3
 800eb3a:	bf18      	it	ne
 800eb3c:	2301      	movne	r3, #1
 800eb3e:	eb08 0203 	add.w	r2, r8, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800eb42:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800eb44:	b292      	uxth	r2, r2
 800eb46:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800eb48:	6859      	ldr	r1, [r3, #4]
 800eb4a:	6833      	ldr	r3, [r6, #0]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	428b      	cmp	r3, r1
 800eb50:	d0d2      	beq.n	800eaf8 <tcp_receive+0x830>
 800eb52:	4b11      	ldr	r3, [pc, #68]	@ (800eb98 <tcp_receive+0x8d0>)
 800eb54:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800eb58:	4914      	ldr	r1, [pc, #80]	@ (800ebac <tcp_receive+0x8e4>)
 800eb5a:	480e      	ldr	r0, [pc, #56]	@ (800eb94 <tcp_receive+0x8cc>)
 800eb5c:	f004 f9c8 	bl	8012ef0 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800eb60:	883a      	ldrh	r2, [r7, #0]
 800eb62:	6831      	ldr	r1, [r6, #0]
 800eb64:	4411      	add	r1, r2
 800eb66:	e7c7      	b.n	800eaf8 <tcp_receive+0x830>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800eb68:	899d      	ldrh	r5, [r3, #12]
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800eb70:	f7fc fd8e 	bl	800b690 <lwip_htons>
 800eb74:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800eb78:	f7fc fd8a 	bl	800b690 <lwip_htons>
 800eb7c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eb80:	4328      	orrs	r0, r5
 800eb82:	8198      	strh	r0, [r3, #12]
 800eb84:	b280      	uxth	r0, r0
 800eb86:	e760      	b.n	800ea4a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800eb88:	6760      	str	r0, [r4, #116]	@ 0x74
 800eb8a:	e73d      	b.n	800ea08 <tcp_receive+0x740>
 800eb8c:	2400fcd8 	.word	0x2400fcd8
 800eb90:	2400fcdc 	.word	0x2400fcdc
 800eb94:	08014150 	.word	0x08014150
 800eb98:	080160e8 	.word	0x080160e8
 800eb9c:	080161a8 	.word	0x080161a8
 800eba0:	2400fcfc 	.word	0x2400fcfc
 800eba4:	080161d8 	.word	0x080161d8
 800eba8:	0801624c 	.word	0x0801624c
 800ebac:	08016210 	.word	0x08016210
 800ebb0:	0801626c 	.word	0x0801626c
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	899d      	ldrh	r5, [r3, #12]
 800ebb8:	4628      	mov	r0, r5
 800ebba:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800ebbe:	f7fc fd67 	bl	800b690 <lwip_htons>
 800ebc2:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800ebc6:	f7fc fd63 	bl	800b690 <lwip_htons>
 800ebca:	f8d8 3000 	ldr.w	r3, [r8]
 800ebce:	ea40 0205 	orr.w	r2, r0, r5
 800ebd2:	68d9      	ldr	r1, [r3, #12]
 800ebd4:	818a      	strh	r2, [r1, #12]
 800ebd6:	e545      	b.n	800e664 <tcp_receive+0x39c>
 800ebd8:	f8df 9004 	ldr.w	r9, [pc, #4]	@ 800ebe0 <tcp_receive+0x918>
 800ebdc:	e5ab      	b.n	800e736 <tcp_receive+0x46e>
 800ebde:	bf00      	nop
 800ebe0:	2400fcfc 	.word	0x2400fcfc

0800ebe4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ebe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ebe8:	4604      	mov	r4, r0
 800ebea:	2800      	cmp	r0, #0
 800ebec:	f000 808b 	beq.w	800ed06 <tcp_parseopt+0x122>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ebf0:	4b52      	ldr	r3, [pc, #328]	@ (800ed3c <tcp_parseopt+0x158>)
 800ebf2:	881d      	ldrh	r5, [r3, #0]
 800ebf4:	2d00      	cmp	r5, #0
 800ebf6:	d036      	beq.n	800ec66 <tcp_parseopt+0x82>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ebf8:	4a51      	ldr	r2, [pc, #324]	@ (800ed40 <tcp_parseopt+0x15c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	4e51      	ldr	r6, [pc, #324]	@ (800ed44 <tcp_parseopt+0x160>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ebfe:	6810      	ldr	r0, [r2, #0]
 800ec00:	4619      	mov	r1, r3
 800ec02:	4a51      	ldr	r2, [pc, #324]	@ (800ed48 <tcp_parseopt+0x164>)
    return opts[optidx];
 800ec04:	4f51      	ldr	r7, [pc, #324]	@ (800ed4c <tcp_parseopt+0x168>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec06:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ec0a:	8033      	strh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 800ec0c:	468e      	mov	lr, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ec0e:	428d      	cmp	r5, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec10:	fa1f f88e 	uxth.w	r8, lr
  u16_t optidx = tcp_optidx++;
 800ec14:	f101 0201 	add.w	r2, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ec18:	f240 8087 	bls.w	800ed2a <tcp_parseopt+0x146>
  u16_t optidx = tcp_optidx++;
 800ec1c:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec1e:	b1c0      	cbz	r0, 800ec52 <tcp_parseopt+0x6e>
 800ec20:	45c4      	cmp	ip, r8
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ec22:	eba2 030c 	sub.w	r3, r2, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec26:	d814      	bhi.n	800ec52 <tcp_parseopt+0x6e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ec28:	3b01      	subs	r3, #1
    return tcphdr_opt2[idx];
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	5cc3      	ldrb	r3, [r0, r3]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d014      	beq.n	800ec5c <tcp_parseopt+0x78>
 800ec32:	2b02      	cmp	r3, #2
 800ec34:	d019      	beq.n	800ec6a <tcp_parseopt+0x86>
 800ec36:	b1ab      	cbz	r3, 800ec64 <tcp_parseopt+0x80>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec38:	b108      	cbz	r0, 800ec3e <tcp_parseopt+0x5a>
 800ec3a:	4562      	cmp	r2, ip
 800ec3c:	d24e      	bcs.n	800ecdc <tcp_parseopt+0xf8>
    return opts[optidx];
 800ec3e:	4b43      	ldr	r3, [pc, #268]	@ (800ed4c <tcp_parseopt+0x168>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4413      	add	r3, r2
 800ec44:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d975      	bls.n	800ed36 <tcp_parseopt+0x152>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ec4a:	440b      	add	r3, r1
 800ec4c:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e7dc      	b.n	800ec0c <tcp_parseopt+0x28>
    return opts[optidx];
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	4473      	add	r3, lr
 800ec56:	7d1b      	ldrb	r3, [r3, #20]
      switch (opt) {
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d1ea      	bne.n	800ec32 <tcp_parseopt+0x4e>
 800ec5c:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 800ec60:	4611      	mov	r1, r2
 800ec62:	e7d4      	b.n	800ec0e <tcp_parseopt+0x2a>
 800ec64:	8032      	strh	r2, [r6, #0]
      }
    }
  }
}
 800ec66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t optidx = tcp_optidx++;
 800ec6a:	1c8b      	adds	r3, r1, #2
 800ec6c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec6e:	b108      	cbz	r0, 800ec74 <tcp_parseopt+0x90>
 800ec70:	4562      	cmp	r2, ip
 800ec72:	d22e      	bcs.n	800ecd2 <tcp_parseopt+0xee>
    return opts[optidx];
 800ec74:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 800ed4c <tcp_parseopt+0x168>
 800ec78:	f8de e000 	ldr.w	lr, [lr]
 800ec7c:	4472      	add	r2, lr
 800ec7e:	7d12      	ldrb	r2, [r2, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ec80:	2a04      	cmp	r2, #4
 800ec82:	d156      	bne.n	800ed32 <tcp_parseopt+0x14e>
 800ec84:	1c5a      	adds	r2, r3, #1
 800ec86:	42aa      	cmp	r2, r5
 800ec88:	da53      	bge.n	800ed32 <tcp_parseopt+0x14e>
  u16_t optidx = tcp_optidx++;
 800ec8a:	1cca      	adds	r2, r1, #3
 800ec8c:	3104      	adds	r1, #4
 800ec8e:	b292      	uxth	r2, r2
 800ec90:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec92:	2800      	cmp	r0, #0
 800ec94:	d03f      	beq.n	800ed16 <tcp_parseopt+0x132>
 800ec96:	459c      	cmp	ip, r3
 800ec98:	d825      	bhi.n	800ece6 <tcp_parseopt+0x102>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ec9a:	eba3 030c 	sub.w	r3, r3, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec9e:	4594      	cmp	ip, r2
    return tcphdr_opt2[idx];
 800eca0:	b2db      	uxtb	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800eca2:	f810 e003 	ldrb.w	lr, [r0, r3]
 800eca6:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ecaa:	d927      	bls.n	800ecfc <tcp_parseopt+0x118>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ecac:	4b27      	ldr	r3, [pc, #156]	@ (800ed4c <tcp_parseopt+0x168>)
 800ecae:	f8d3 8000 	ldr.w	r8, [r3]
    return opts[optidx];
 800ecb2:	4490      	add	r8, r2
 800ecb4:	f898 3014 	ldrb.w	r3, [r8, #20]
          mss |= tcp_get_next_optbyte();
 800ecb8:	ea43 030e 	orr.w	r3, r3, lr
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ecbc:	f240 58b3 	movw	r8, #1459	@ 0x5b3
 800ecc0:	f240 5eb4 	movw	lr, #1460	@ 0x5b4
 800ecc4:	1e5a      	subs	r2, r3, #1
 800ecc6:	b292      	uxth	r2, r2
 800ecc8:	4542      	cmp	r2, r8
 800ecca:	bf88      	it	hi
 800eccc:	4673      	movhi	r3, lr
 800ecce:	8663      	strh	r3, [r4, #50]	@ 0x32
          break;
 800ecd0:	e7bd      	b.n	800ec4e <tcp_parseopt+0x6a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ecd2:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800ecd6:	b2d2      	uxtb	r2, r2
 800ecd8:	5c82      	ldrb	r2, [r0, r2]
 800ecda:	e7d1      	b.n	800ec80 <tcp_parseopt+0x9c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ecdc:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800ece0:	b2d2      	uxtb	r2, r2
 800ece2:	5c83      	ldrb	r3, [r0, r2]
 800ece4:	e7af      	b.n	800ec46 <tcp_parseopt+0x62>
    return opts[optidx];
 800ece6:	f8df e064 	ldr.w	lr, [pc, #100]	@ 800ed4c <tcp_parseopt+0x168>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ecea:	4594      	cmp	ip, r2
    return opts[optidx];
 800ecec:	f8de e000 	ldr.w	lr, [lr]
 800ecf0:	4473      	add	r3, lr
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ecf2:	f893 e014 	ldrb.w	lr, [r3, #20]
 800ecf6:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ecfa:	d8d7      	bhi.n	800ecac <tcp_parseopt+0xc8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ecfc:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800ed00:	b2d2      	uxtb	r2, r2
 800ed02:	5c83      	ldrb	r3, [r0, r2]
 800ed04:	e7d8      	b.n	800ecb8 <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ed06:	4b12      	ldr	r3, [pc, #72]	@ (800ed50 <tcp_parseopt+0x16c>)
 800ed08:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ed0c:	4911      	ldr	r1, [pc, #68]	@ (800ed54 <tcp_parseopt+0x170>)
 800ed0e:	4812      	ldr	r0, [pc, #72]	@ (800ed58 <tcp_parseopt+0x174>)
 800ed10:	f004 f8ee 	bl	8012ef0 <iprintf>
 800ed14:	e76c      	b.n	800ebf0 <tcp_parseopt+0xc>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ed16:	f8df e034 	ldr.w	lr, [pc, #52]	@ 800ed4c <tcp_parseopt+0x168>
 800ed1a:	f8de 8000 	ldr.w	r8, [lr]
    return opts[optidx];
 800ed1e:	4443      	add	r3, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ed20:	f893 e014 	ldrb.w	lr, [r3, #20]
 800ed24:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ed28:	e7c3      	b.n	800ecb2 <tcp_parseopt+0xce>
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d09b      	beq.n	800ec66 <tcp_parseopt+0x82>
 800ed2e:	8031      	strh	r1, [r6, #0]
 800ed30:	e799      	b.n	800ec66 <tcp_parseopt+0x82>
 800ed32:	8033      	strh	r3, [r6, #0]
 800ed34:	e797      	b.n	800ec66 <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 800ed36:	3102      	adds	r1, #2
 800ed38:	8031      	strh	r1, [r6, #0]
 800ed3a:	e794      	b.n	800ec66 <tcp_parseopt+0x82>
 800ed3c:	2400fcf6 	.word	0x2400fcf6
 800ed40:	2400fcf0 	.word	0x2400fcf0
 800ed44:	2400fcec 	.word	0x2400fcec
 800ed48:	2400fcf4 	.word	0x2400fcf4
 800ed4c:	2400fcf8 	.word	0x2400fcf8
 800ed50:	080160e8 	.word	0x080160e8
 800ed54:	08016294 	.word	0x08016294
 800ed58:	08014150 	.word	0x08014150

0800ed5c <tcp_input>:
{
 800ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed60:	4604      	mov	r4, r0
 800ed62:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800ed64:	f7f8 fae2 	bl	800732c <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ed68:	2c00      	cmp	r4, #0
 800ed6a:	f000 80d5 	beq.w	800ef18 <tcp_input+0x1bc>
  if (p->len < TCP_HLEN) {
 800ed6e:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800ed70:	4e6d      	ldr	r6, [pc, #436]	@ (800ef28 <tcp_input+0x1cc>)
 800ed72:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800ed74:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800ed76:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800ed78:	d805      	bhi.n	800ed86 <tcp_input+0x2a>
  pbuf_free(p);
 800ed7a:	4620      	mov	r0, r4
}
 800ed7c:	b007      	add	sp, #28
 800ed7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800ed82:	f7fd bb59 	b.w	800c438 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ed86:	4f69      	ldr	r7, [pc, #420]	@ (800ef2c <tcp_input+0x1d0>)
 800ed88:	6839      	ldr	r1, [r7, #0]
 800ed8a:	6978      	ldr	r0, [r7, #20]
 800ed8c:	f003 f99e 	bl	80120cc <ip4_addr_isbroadcast_u32>
 800ed90:	4605      	mov	r5, r0
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d1f1      	bne.n	800ed7a <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ed9c:	2be0      	cmp	r3, #224	@ 0xe0
 800ed9e:	d0ec      	beq.n	800ed7a <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800eda0:	6833      	ldr	r3, [r6, #0]
 800eda2:	8998      	ldrh	r0, [r3, #12]
 800eda4:	f7fc fc74 	bl	800b690 <lwip_htons>
 800eda8:	0a81      	lsrs	r1, r0, #10
 800edaa:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800edae:	2913      	cmp	r1, #19
 800edb0:	d9e3      	bls.n	800ed7a <tcp_input+0x1e>
 800edb2:	8923      	ldrh	r3, [r4, #8]
 800edb4:	428b      	cmp	r3, r1
 800edb6:	d3e0      	bcc.n	800ed7a <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800edb8:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800edbc:	8962      	ldrh	r2, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800edbe:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 800ef60 <tcp_input+0x204>
 800edc2:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800edc4:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ef64 <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800edc8:	428a      	cmp	r2, r1
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800edca:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800edce:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800edd2:	f080 819d 	bcs.w	800f110 <tcp_input+0x3b4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 8379 	beq.w	800f4d0 <tcp_input+0x774>
    pbuf_remove_header(p, TCP_HLEN);
 800edde:	2114      	movs	r1, #20
 800ede0:	4620      	mov	r0, r4
 800ede2:	f7fd fac7 	bl	800c374 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800ede6:	8965      	ldrh	r5, [r4, #10]
 800ede8:	4b51      	ldr	r3, [pc, #324]	@ (800ef30 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800edea:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800edec:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800edf0:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800edf2:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800edf4:	f7fd fabe 	bl	800c374 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800edf8:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800edfc:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800edfe:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800ee02:	8943      	ldrh	r3, [r0, #10]
 800ee04:	454b      	cmp	r3, r9
 800ee06:	d3b8      	bcc.n	800ed7a <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ee08:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800ee0a:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ee0c:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800ee10:	f7fd fab0 	bl	800c374 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ee14:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ee16:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ee18:	442b      	add	r3, r5
 800ee1a:	eba3 030a 	sub.w	r3, r3, sl
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ee22:	2a00      	cmp	r2, #0
 800ee24:	f040 835b 	bne.w	800f4de <tcp_input+0x782>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ee28:	6822      	ldr	r2, [r4, #0]
 800ee2a:	8912      	ldrh	r2, [r2, #8]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d005      	beq.n	800ee3c <tcp_input+0xe0>
 800ee30:	4b40      	ldr	r3, [pc, #256]	@ (800ef34 <tcp_input+0x1d8>)
 800ee32:	22e0      	movs	r2, #224	@ 0xe0
 800ee34:	4940      	ldr	r1, [pc, #256]	@ (800ef38 <tcp_input+0x1dc>)
 800ee36:	4841      	ldr	r0, [pc, #260]	@ (800ef3c <tcp_input+0x1e0>)
 800ee38:	f004 f85a 	bl	8012ef0 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ee3c:	6835      	ldr	r5, [r6, #0]
 800ee3e:	8828      	ldrh	r0, [r5, #0]
 800ee40:	f7fc fc26 	bl	800b690 <lwip_htons>
 800ee44:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ee46:	6835      	ldr	r5, [r6, #0]
 800ee48:	8868      	ldrh	r0, [r5, #2]
 800ee4a:	f7fc fc21 	bl	800b690 <lwip_htons>
 800ee4e:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ee50:	6835      	ldr	r5, [r6, #0]
 800ee52:	6868      	ldr	r0, [r5, #4]
 800ee54:	f7fc fc20 	bl	800b698 <lwip_htonl>
 800ee58:	4b39      	ldr	r3, [pc, #228]	@ (800ef40 <tcp_input+0x1e4>)
 800ee5a:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ee5c:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ee5e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ee60:	68a8      	ldr	r0, [r5, #8]
 800ee62:	f7fc fc19 	bl	800b698 <lwip_htonl>
 800ee66:	4b37      	ldr	r3, [pc, #220]	@ (800ef44 <tcp_input+0x1e8>)
 800ee68:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ee6a:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ee6c:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ee6e:	89e8      	ldrh	r0, [r5, #14]
 800ee70:	f7fc fc0e 	bl	800b690 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800ee74:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ee76:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800ee78:	8998      	ldrh	r0, [r3, #12]
 800ee7a:	f7fc fc09 	bl	800b690 <lwip_htons>
 800ee7e:	4932      	ldr	r1, [pc, #200]	@ (800ef48 <tcp_input+0x1ec>)
 800ee80:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  tcplen = p->tot_len;
 800ee84:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800ee86:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ee88:	0781      	lsls	r1, r0, #30
 800ee8a:	f040 8147 	bne.w	800f11c <tcp_input+0x3c0>
  tcplen = p->tot_len;
 800ee8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ef4c <tcp_input+0x1f0>)
 800ee90:	9305      	str	r3, [sp, #20]
 800ee92:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee94:	4b2e      	ldr	r3, [pc, #184]	@ (800ef50 <tcp_input+0x1f4>)
 800ee96:	681d      	ldr	r5, [r3, #0]
 800ee98:	2d00      	cmp	r5, #0
 800ee9a:	f000 80e8 	beq.w	800f06e <tcp_input+0x312>
  prev = NULL;
 800ee9e:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eea2:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800ef34 <tcp_input+0x1d8>
 800eea6:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800ef68 <tcp_input+0x20c>
 800eeaa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ef3c <tcp_input+0x1e0>
 800eeae:	e017      	b.n	800eee0 <tcp_input+0x184>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800eeb0:	2b0a      	cmp	r3, #10
 800eeb2:	d021      	beq.n	800eef8 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d028      	beq.n	800ef0a <tcp_input+0x1ae>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eeb8:	7a2a      	ldrb	r2, [r5, #8]
 800eeba:	b132      	cbz	r2, 800eeca <tcp_input+0x16e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eec2:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d104      	bne.n	800eed4 <tcp_input+0x178>
    if (pcb->remote_port == tcphdr->src &&
 800eeca:	6833      	ldr	r3, [r6, #0]
 800eecc:	8b29      	ldrh	r1, [r5, #24]
 800eece:	881a      	ldrh	r2, [r3, #0]
 800eed0:	4291      	cmp	r1, r2
 800eed2:	d04b      	beq.n	800ef6c <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eed4:	68eb      	ldr	r3, [r5, #12]
 800eed6:	46a8      	mov	r8, r5
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f000 80c8 	beq.w	800f06e <tcp_input+0x312>
 800eede:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eee0:	7d2b      	ldrb	r3, [r5, #20]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1e4      	bne.n	800eeb0 <tcp_input+0x154>
 800eee6:	4653      	mov	r3, sl
 800eee8:	22fb      	movs	r2, #251	@ 0xfb
 800eeea:	4659      	mov	r1, fp
 800eeec:	4648      	mov	r0, r9
 800eeee:	f003 ffff 	bl	8012ef0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800eef2:	7d2b      	ldrb	r3, [r5, #20]
 800eef4:	2b0a      	cmp	r3, #10
 800eef6:	d1dd      	bne.n	800eeb4 <tcp_input+0x158>
 800eef8:	4653      	mov	r3, sl
 800eefa:	22fc      	movs	r2, #252	@ 0xfc
 800eefc:	4915      	ldr	r1, [pc, #84]	@ (800ef54 <tcp_input+0x1f8>)
 800eefe:	4648      	mov	r0, r9
 800ef00:	f003 fff6 	bl	8012ef0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ef04:	7d2b      	ldrb	r3, [r5, #20]
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d1d6      	bne.n	800eeb8 <tcp_input+0x15c>
 800ef0a:	4653      	mov	r3, sl
 800ef0c:	22fd      	movs	r2, #253	@ 0xfd
 800ef0e:	4912      	ldr	r1, [pc, #72]	@ (800ef58 <tcp_input+0x1fc>)
 800ef10:	4648      	mov	r0, r9
 800ef12:	f003 ffed 	bl	8012ef0 <iprintf>
 800ef16:	e7cf      	b.n	800eeb8 <tcp_input+0x15c>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ef18:	4b06      	ldr	r3, [pc, #24]	@ (800ef34 <tcp_input+0x1d8>)
 800ef1a:	2283      	movs	r2, #131	@ 0x83
 800ef1c:	490f      	ldr	r1, [pc, #60]	@ (800ef5c <tcp_input+0x200>)
 800ef1e:	4807      	ldr	r0, [pc, #28]	@ (800ef3c <tcp_input+0x1e0>)
 800ef20:	f003 ffe6 	bl	8012ef0 <iprintf>
 800ef24:	e723      	b.n	800ed6e <tcp_input+0x12>
 800ef26:	bf00      	nop
 800ef28:	2400fcf8 	.word	0x2400fcf8
 800ef2c:	24009200 	.word	0x24009200
 800ef30:	2400fcf4 	.word	0x2400fcf4
 800ef34:	080160e8 	.word	0x080160e8
 800ef38:	080162e4 	.word	0x080162e4
 800ef3c:	08014150 	.word	0x08014150
 800ef40:	2400fce8 	.word	0x2400fce8
 800ef44:	2400fce4 	.word	0x2400fce4
 800ef48:	2400fcdd 	.word	0x2400fcdd
 800ef4c:	2400fcde 	.word	0x2400fcde
 800ef50:	2400fcc4 	.word	0x2400fcc4
 800ef54:	0801632c 	.word	0x0801632c
 800ef58:	08016358 	.word	0x08016358
 800ef5c:	080162b0 	.word	0x080162b0
 800ef60:	2400fcf6 	.word	0x2400fcf6
 800ef64:	2400fcf0 	.word	0x2400fcf0
 800ef68:	08016304 	.word	0x08016304
    if (pcb->remote_port == tcphdr->src &&
 800ef6c:	885b      	ldrh	r3, [r3, #2]
 800ef6e:	8aea      	ldrh	r2, [r5, #22]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d1af      	bne.n	800eed4 <tcp_input+0x178>
        pcb->local_port == tcphdr->dest &&
 800ef74:	686a      	ldr	r2, [r5, #4]
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d1ab      	bne.n	800eed4 <tcp_input+0x178>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef7c:	682a      	ldr	r2, [r5, #0]
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d1a7      	bne.n	800eed4 <tcp_input+0x178>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ef84:	68eb      	ldr	r3, [r5, #12]
 800ef86:	42ab      	cmp	r3, r5
 800ef88:	f000 843d 	beq.w	800f806 <tcp_input+0xaaa>
      if (prev != NULL) {
 800ef8c:	f1b8 0f00 	cmp.w	r8, #0
 800ef90:	d009      	beq.n	800efa6 <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800ef92:	4a6f      	ldr	r2, [pc, #444]	@ (800f150 <tcp_input+0x3f4>)
        prev->next = pcb->next;
 800ef94:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800ef98:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800ef9a:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800ef9c:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ef9e:	68eb      	ldr	r3, [r5, #12]
 800efa0:	42ab      	cmp	r3, r5
 800efa2:	f000 843e 	beq.w	800f822 <tcp_input+0xac6>
    inseg.next = NULL;
 800efa6:	2300      	movs	r3, #0
 800efa8:	4f6a      	ldr	r7, [pc, #424]	@ (800f154 <tcp_input+0x3f8>)
    recv_data = NULL;
 800efaa:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800f170 <tcp_input+0x414>
    recv_flags = 0;
 800efae:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800f174 <tcp_input+0x418>
    recv_acked = 0;
 800efb2:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 800f178 <tcp_input+0x41c>
    inseg.next = NULL;
 800efb6:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800efb8:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800efbc:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800efc0:	f8aa 3000 	strh.w	r3, [sl]
    if (flags & TCP_PSH) {
 800efc4:	4b64      	ldr	r3, [pc, #400]	@ (800f158 <tcp_input+0x3fc>)
    inseg.len = p->tot_len;
 800efc6:	8922      	ldrh	r2, [r4, #8]
    if (flags & TCP_PSH) {
 800efc8:	781b      	ldrb	r3, [r3, #0]
    inseg.len = p->tot_len;
 800efca:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800efcc:	0719      	lsls	r1, r3, #28
    inseg.tcphdr = tcphdr;
 800efce:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800efd0:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800efd2:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800efd4:	d503      	bpl.n	800efde <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800efd6:	7b62      	ldrb	r2, [r4, #13]
 800efd8:	f042 0201 	orr.w	r2, r2, #1
 800efdc:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800efde:	6faa      	ldr	r2, [r5, #120]	@ 0x78
 800efe0:	2a00      	cmp	r2, #0
 800efe2:	f000 826c 	beq.w	800f4be <tcp_input+0x762>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800efe6:	4628      	mov	r0, r5
 800efe8:	f7fe ff8c 	bl	800df04 <tcp_process_refused_data>
 800efec:	300d      	adds	r0, #13
 800efee:	f000 8269 	beq.w	800f4c4 <tcp_input+0x768>
 800eff2:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800eff4:	b123      	cbz	r3, 800f000 <tcp_input+0x2a4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eff6:	9b05      	ldr	r3, [sp, #20]
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	f040 8262 	bne.w	800f4c4 <tcp_input+0x768>
  if (flags & TCP_RST) {
 800f000:	4b55      	ldr	r3, [pc, #340]	@ (800f158 <tcp_input+0x3fc>)
    tcp_input_pcb = pcb;
 800f002:	4c56      	ldr	r4, [pc, #344]	@ (800f15c <tcp_input+0x400>)
  if (flags & TCP_RST) {
 800f004:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800f006:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800f008:	075a      	lsls	r2, r3, #29
 800f00a:	f140 814d 	bpl.w	800f2a8 <tcp_input+0x54c>
    if (pcb->state == SYN_SENT) {
 800f00e:	7d29      	ldrb	r1, [r5, #20]
 800f010:	2902      	cmp	r1, #2
 800f012:	f000 82d7 	beq.w	800f5c4 <tcp_input+0x868>
      if (seqno == pcb->rcv_nxt) {
 800f016:	4b52      	ldr	r3, [pc, #328]	@ (800f160 <tcp_input+0x404>)
 800f018:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	f000 8409 	beq.w	800f834 <tcp_input+0xad8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f022:	1a9b      	subs	r3, r3, r2
 800f024:	d404      	bmi.n	800f030 <tcp_input+0x2d4>
 800f026:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800f028:	1a9b      	subs	r3, r3, r2
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	f340 833e 	ble.w	800f6ac <tcp_input+0x950>
      if (recv_flags & TF_RESET) {
 800f030:	f899 3000 	ldrb.w	r3, [r9]
 800f034:	071a      	lsls	r2, r3, #28
 800f036:	f140 825a 	bpl.w	800f4ee <tcp_input+0x792>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f03a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800f03e:	b11b      	cbz	r3, 800f048 <tcp_input+0x2ec>
 800f040:	f06f 010d 	mvn.w	r1, #13
 800f044:	6928      	ldr	r0, [r5, #16]
 800f046:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f048:	4841      	ldr	r0, [pc, #260]	@ (800f150 <tcp_input+0x3f4>)
 800f04a:	4629      	mov	r1, r5
 800f04c:	f7fe fba2 	bl	800d794 <tcp_pcb_remove>
        tcp_free(pcb);
 800f050:	4628      	mov	r0, r5
 800f052:	f7fd fd9b 	bl	800cb8c <tcp_free>
    tcp_input_pcb = NULL;
 800f056:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800f058:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800f05a:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800f05c:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800f060:	b110      	cbz	r0, 800f068 <tcp_input+0x30c>
      pbuf_free(inseg.p);
 800f062:	f7fd f9e9 	bl	800c438 <pbuf_free>
      inseg.p = NULL;
 800f066:	607d      	str	r5, [r7, #4]
}
 800f068:	b007      	add	sp, #28
 800f06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f06e:	4b3d      	ldr	r3, [pc, #244]	@ (800f164 <tcp_input+0x408>)
 800f070:	681d      	ldr	r5, [r3, #0]
 800f072:	2d00      	cmp	r5, #0
 800f074:	d05b      	beq.n	800f12e <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f076:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800f17c <tcp_input+0x420>
 800f07a:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800f180 <tcp_input+0x424>
 800f07e:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800f184 <tcp_input+0x428>
 800f082:	e002      	b.n	800f08a <tcp_input+0x32e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f084:	68ed      	ldr	r5, [r5, #12]
 800f086:	2d00      	cmp	r5, #0
 800f088:	d051      	beq.n	800f12e <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f08a:	7d2b      	ldrb	r3, [r5, #20]
 800f08c:	2b0a      	cmp	r3, #10
 800f08e:	4643      	mov	r3, r8
 800f090:	d005      	beq.n	800f09e <tcp_input+0x342>
 800f092:	f240 121f 	movw	r2, #287	@ 0x11f
 800f096:	4651      	mov	r1, sl
 800f098:	4648      	mov	r0, r9
 800f09a:	f003 ff29 	bl	8012ef0 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f09e:	7a2a      	ldrb	r2, [r5, #8]
 800f0a0:	b132      	cbz	r2, 800f0b0 <tcp_input+0x354>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f0a8:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d1e9      	bne.n	800f084 <tcp_input+0x328>
      if (pcb->remote_port == tcphdr->src &&
 800f0b0:	6833      	ldr	r3, [r6, #0]
 800f0b2:	8b29      	ldrh	r1, [r5, #24]
 800f0b4:	881a      	ldrh	r2, [r3, #0]
 800f0b6:	4291      	cmp	r1, r2
 800f0b8:	d1e4      	bne.n	800f084 <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800f0ba:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800f0bc:	8aeb      	ldrh	r3, [r5, #22]
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d1e0      	bne.n	800f084 <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800f0c2:	6868      	ldr	r0, [r5, #4]
 800f0c4:	693a      	ldr	r2, [r7, #16]
 800f0c6:	4290      	cmp	r0, r2
 800f0c8:	d1dc      	bne.n	800f084 <tcp_input+0x328>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f0ca:	6828      	ldr	r0, [r5, #0]
 800f0cc:	697a      	ldr	r2, [r7, #20]
 800f0ce:	4290      	cmp	r0, r2
 800f0d0:	d1d8      	bne.n	800f084 <tcp_input+0x328>
  if (flags & TCP_RST) {
 800f0d2:	4a21      	ldr	r2, [pc, #132]	@ (800f158 <tcp_input+0x3fc>)
 800f0d4:	7810      	ldrb	r0, [r2, #0]
 800f0d6:	0742      	lsls	r2, r0, #29
 800f0d8:	f53f ae4f 	bmi.w	800ed7a <tcp_input+0x1e>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0dc:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 800f0de:	0787      	lsls	r7, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0e0:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 800f0e2:	f140 83b2 	bpl.w	800f84a <tcp_input+0xaee>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f0e6:	4a1e      	ldr	r2, [pc, #120]	@ (800f160 <tcp_input+0x404>)
 800f0e8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800f0ea:	6812      	ldr	r2, [r2, #0]
 800f0ec:	1a10      	subs	r0, r2, r0
 800f0ee:	d404      	bmi.n	800f0fa <tcp_input+0x39e>
 800f0f0:	8d2f      	ldrh	r7, [r5, #40]	@ 0x28
 800f0f2:	1bc0      	subs	r0, r0, r7
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	f340 83c7 	ble.w	800f888 <tcp_input+0xb2c>
  if ((tcplen > 0)) {
 800f0fa:	2e00      	cmp	r6, #0
 800f0fc:	f43f ae3d 	beq.w	800ed7a <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800f100:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800f102:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800f104:	f043 0302 	orr.w	r3, r3, #2
 800f108:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800f10a:	f001 fb6d 	bl	80107e8 <tcp_output>
        pbuf_free(p);
 800f10e:	e634      	b.n	800ed7a <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800f110:	4a15      	ldr	r2, [pc, #84]	@ (800f168 <tcp_input+0x40c>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f112:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800f114:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f116:	f7fd f92d 	bl	800c374 <pbuf_remove_header>
 800f11a:	e68f      	b.n	800ee3c <tcp_input+0xe0>
    tcplen++;
 800f11c:	1c53      	adds	r3, r2, #1
 800f11e:	4913      	ldr	r1, [pc, #76]	@ (800f16c <tcp_input+0x410>)
 800f120:	b29b      	uxth	r3, r3
 800f122:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800f124:	429a      	cmp	r2, r3
    tcplen++;
 800f126:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800f128:	f67f aeb4 	bls.w	800ee94 <tcp_input+0x138>
 800f12c:	e625      	b.n	800ed7a <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f12e:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800f188 <tcp_input+0x42c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f132:	f8d6 c000 	ldr.w	ip, [r6]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f136:	f8d8 2000 	ldr.w	r2, [r8]
 800f13a:	2a00      	cmp	r2, #0
 800f13c:	f000 8227 	beq.w	800f58e <tcp_input+0x832>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f140:	6878      	ldr	r0, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f142:	4615      	mov	r5, r2
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f144:	f8d7 e014 	ldr.w	lr, [r7, #20]
    prev = NULL;
 800f148:	2100      	movs	r1, #0
 800f14a:	4692      	mov	sl, r2
 800f14c:	e024      	b.n	800f198 <tcp_input+0x43c>
 800f14e:	bf00      	nop
 800f150:	2400fcc4 	.word	0x2400fcc4
 800f154:	2400fcfc 	.word	0x2400fcfc
 800f158:	2400fcdd 	.word	0x2400fcdd
 800f15c:	2400fcd4 	.word	0x2400fcd4
 800f160:	2400fce8 	.word	0x2400fce8
 800f164:	2400fcc0 	.word	0x2400fcc0
 800f168:	2400fcf4 	.word	0x2400fcf4
 800f16c:	2400fcde 	.word	0x2400fcde
 800f170:	2400fcd8 	.word	0x2400fcd8
 800f174:	2400fcdc 	.word	0x2400fcdc
 800f178:	2400fce0 	.word	0x2400fce0
 800f17c:	080160e8 	.word	0x080160e8
 800f180:	080163d8 	.word	0x080163d8
 800f184:	08014150 	.word	0x08014150
 800f188:	2400fcc8 	.word	0x2400fcc8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f18c:	68eb      	ldr	r3, [r5, #12]
 800f18e:	4629      	mov	r1, r5
 800f190:	461d      	mov	r5, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	f000 81fb 	beq.w	800f58e <tcp_input+0x832>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f198:	7a2a      	ldrb	r2, [r5, #8]
 800f19a:	b12a      	cbz	r2, 800f1a8 <tcp_input+0x44c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f19c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800f1a0:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d1f1      	bne.n	800f18c <tcp_input+0x430>
      if (lpcb->local_port == tcphdr->dest) {
 800f1a8:	f8b5 9016 	ldrh.w	r9, [r5, #22]
 800f1ac:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800f1b0:	4599      	cmp	r9, r3
 800f1b2:	d1eb      	bne.n	800f18c <tcp_input+0x430>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f1b4:	682b      	ldr	r3, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f1b6:	b10b      	cbz	r3, 800f1bc <tcp_input+0x460>
 800f1b8:	4573      	cmp	r3, lr
 800f1ba:	d1e7      	bne.n	800f18c <tcp_input+0x430>
      if (prev != NULL) {
 800f1bc:	4652      	mov	r2, sl
 800f1be:	b121      	cbz	r1, 800f1ca <tcp_input+0x46e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f1c0:	68eb      	ldr	r3, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f1c2:	f8c8 5000 	str.w	r5, [r8]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f1c6:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f1c8:	60ea      	str	r2, [r5, #12]
  if (flags & TCP_RST) {
 800f1ca:	4ba8      	ldr	r3, [pc, #672]	@ (800f46c <tcp_input+0x710>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	075a      	lsls	r2, r3, #29
 800f1d0:	f53f add3 	bmi.w	800ed7a <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800f1d4:	f013 0810 	ands.w	r8, r3, #16
 800f1d8:	f040 826d 	bne.w	800f6b6 <tcp_input+0x95a>
  } else if (flags & TCP_SYN) {
 800f1dc:	0798      	lsls	r0, r3, #30
 800f1de:	f57f adcc 	bpl.w	800ed7a <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800f1e2:	7d68      	ldrb	r0, [r5, #21]
 800f1e4:	f7fe fc84 	bl	800daf0 <tcp_alloc>
    if (npcb == NULL) {
 800f1e8:	4681      	mov	r9, r0
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	f000 82ca 	beq.w	800f784 <tcp_input+0xa28>
    npcb->remote_port = tcphdr->src;
 800f1f0:	6831      	ldr	r1, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f1f2:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
    npcb->rcv_nxt = seqno + 1;
 800f1f6:	4f9e      	ldr	r7, [pc, #632]	@ (800f470 <tcp_input+0x714>)
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f1f8:	e9c0 2300 	strd	r2, r3, [r0]
    npcb->rcv_nxt = seqno + 1;
 800f1fc:	683b      	ldr	r3, [r7, #0]
    npcb->remote_port = tcphdr->src;
 800f1fe:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800f200:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800f202:	7849      	ldrb	r1, [r1, #1]
 800f204:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800f208:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800f20a:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f20c:	62c3      	str	r3, [r0, #44]	@ 0x2c
    npcb->state = SYN_RCVD;
 800f20e:	2303      	movs	r3, #3
    npcb->local_port = pcb->local_port;
 800f210:	82c1      	strh	r1, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800f212:	8302      	strh	r2, [r0, #24]
    npcb->state = SYN_RCVD;
 800f214:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800f216:	f7fe ff0d 	bl	800e034 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f21a:	683a      	ldr	r2, [r7, #0]
    npcb->callback_arg = pcb->callback_arg;
 800f21c:	692b      	ldr	r3, [r5, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f21e:	3a01      	subs	r2, #1
    npcb->snd_nxt = iss;
 800f220:	f8c9 0050 	str.w	r0, [r9, #80]	@ 0x50
    npcb->lastack = iss;
 800f224:	f8c9 0044 	str.w	r0, [r9, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f228:	f8c9 005c 	str.w	r0, [r9, #92]	@ 0x5c
    npcb->listener = pcb;
 800f22c:	f8c9 507c 	str.w	r5, [r9, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800f230:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->snd_wl2 = iss;
 800f234:	e9c9 2015 	strd	r2, r0, [r9, #84]	@ 0x54
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f238:	7a6b      	ldrb	r3, [r5, #9]
    TCP_REG_ACTIVE(npcb);
 800f23a:	4a8e      	ldr	r2, [pc, #568]	@ (800f474 <tcp_input+0x718>)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f23c:	f003 030c 	and.w	r3, r3, #12
 800f240:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f244:	7a2b      	ldrb	r3, [r5, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f246:	f109 0504 	add.w	r5, r9, #4
    npcb->netif_idx = pcb->netif_idx;
 800f24a:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800f24e:	6813      	ldr	r3, [r2, #0]
 800f250:	f8c2 9000 	str.w	r9, [r2]
 800f254:	f8c9 300c 	str.w	r3, [r9, #12]
 800f258:	f001 fde4 	bl	8010e24 <tcp_timer_needed>
 800f25c:	4b86      	ldr	r3, [pc, #536]	@ (800f478 <tcp_input+0x71c>)
 800f25e:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800f260:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800f262:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f264:	f7ff fcbe 	bl	800ebe4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f268:	6832      	ldr	r2, [r6, #0]
 800f26a:	4643      	mov	r3, r8
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f26c:	f8b9 6032 	ldrh.w	r6, [r9, #50]	@ 0x32
 800f270:	4628      	mov	r0, r5
    npcb->snd_wnd = tcphdr->wnd;
 800f272:	89d2      	ldrh	r2, [r2, #14]
 800f274:	f362 030f 	bfi	r3, r2, #0, #16
 800f278:	f362 431f 	bfi	r3, r2, #16, #16
 800f27c:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f280:	f002 fd78 	bl	8011d74 <ip4_route>
 800f284:	462a      	mov	r2, r5
 800f286:	4601      	mov	r1, r0
 800f288:	4630      	mov	r0, r6
 800f28a:	f7fe feef 	bl	800e06c <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f28e:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f290:	f8a9 0032 	strh.w	r0, [r9, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f294:	4648      	mov	r0, r9
 800f296:	f001 f899 	bl	80103cc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800f29a:	2800      	cmp	r0, #0
 800f29c:	f040 827d 	bne.w	800f79a <tcp_input+0xa3e>
    tcp_output(npcb);
 800f2a0:	4648      	mov	r0, r9
 800f2a2:	f001 faa1 	bl	80107e8 <tcp_output>
 800f2a6:	e568      	b.n	800ed7a <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f2a8:	079b      	lsls	r3, r3, #30
        tcp_ack_now(pcb);
 800f2aa:	8b6a      	ldrh	r2, [r5, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f2ac:	d504      	bpl.n	800f2b8 <tcp_input+0x55c>
 800f2ae:	7d2b      	ldrb	r3, [r5, #20]
 800f2b0:	3b02      	subs	r3, #2
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	f200 819c 	bhi.w	800f5f0 <tcp_input+0x894>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f2b8:	06d0      	lsls	r0, r2, #27
 800f2ba:	d402      	bmi.n	800f2c2 <tcp_input+0x566>
    pcb->tmr = tcp_ticks;
 800f2bc:	4b6f      	ldr	r3, [pc, #444]	@ (800f47c <tcp_input+0x720>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800f2c2:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800f2c4:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800f2c6:	f8a5 309a 	strh.w	r3, [r5, #154]	@ 0x9a
  tcp_parseopt(pcb);
 800f2ca:	f7ff fc8b 	bl	800ebe4 <tcp_parseopt>
  switch (pcb->state) {
 800f2ce:	7d2b      	ldrb	r3, [r5, #20]
 800f2d0:	3b02      	subs	r3, #2
 800f2d2:	2b07      	cmp	r3, #7
 800f2d4:	f63f aeac 	bhi.w	800f030 <tcp_input+0x2d4>
 800f2d8:	e8df f003 	tbb	[pc, r3]
 800f2dc:	8f041334 	.word	0x8f041334
 800f2e0:	5ba80474 	.word	0x5ba80474
      tcp_receive(pcb);
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f7fe ffef 	bl	800e2c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f2ea:	f899 3000 	ldrb.w	r3, [r9]
 800f2ee:	0699      	lsls	r1, r3, #26
 800f2f0:	f57f ae9e 	bpl.w	800f030 <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800f2f4:	8b6b      	ldrh	r3, [r5, #26]
 800f2f6:	f043 0302 	orr.w	r3, r3, #2
 800f2fa:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800f2fc:	2307      	movs	r3, #7
 800f2fe:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800f300:	e696      	b.n	800f030 <tcp_input+0x2d4>
      if (flags & TCP_ACK) {
 800f302:	4b5a      	ldr	r3, [pc, #360]	@ (800f46c <tcp_input+0x710>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	06da      	lsls	r2, r3, #27
 800f308:	f140 8210 	bpl.w	800f72c <tcp_input+0x9d0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f30c:	4b5c      	ldr	r3, [pc, #368]	@ (800f480 <tcp_input+0x724>)
 800f30e:	6819      	ldr	r1, [r3, #0]
 800f310:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800f312:	43db      	mvns	r3, r3
 800f314:	42cb      	cmn	r3, r1
 800f316:	d404      	bmi.n	800f322 <tcp_input+0x5c6>
 800f318:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800f31a:	1acb      	subs	r3, r1, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f340 8242 	ble.w	800f7a6 <tcp_input+0xa4a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f322:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f324:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f326:	8810      	ldrh	r0, [r2, #0]
 800f328:	4a51      	ldr	r2, [pc, #324]	@ (800f470 <tcp_input+0x714>)
 800f32a:	6812      	ldr	r2, [r2, #0]
 800f32c:	4402      	add	r2, r0
 800f32e:	8818      	ldrh	r0, [r3, #0]
 800f330:	9002      	str	r0, [sp, #8]
 800f332:	4628      	mov	r0, r5
 800f334:	885b      	ldrh	r3, [r3, #2]
 800f336:	9301      	str	r3, [sp, #4]
 800f338:	4b52      	ldr	r3, [pc, #328]	@ (800f484 <tcp_input+0x728>)
 800f33a:	9300      	str	r3, [sp, #0]
 800f33c:	3304      	adds	r3, #4
 800f33e:	f001 f9d9 	bl	80106f4 <tcp_rst>
    if (err != ERR_ABRT) {
 800f342:	e675      	b.n	800f030 <tcp_input+0x2d4>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f344:	4b49      	ldr	r3, [pc, #292]	@ (800f46c <tcp_input+0x710>)
 800f346:	781a      	ldrb	r2, [r3, #0]
 800f348:	f002 0312 	and.w	r3, r2, #18
 800f34c:	2b12      	cmp	r3, #18
 800f34e:	f000 8153 	beq.w	800f5f8 <tcp_input+0x89c>
      else if (flags & TCP_ACK) {
 800f352:	06d1      	lsls	r1, r2, #27
 800f354:	f57f ae6c 	bpl.w	800f030 <tcp_input+0x2d4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f358:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f35a:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f35c:	8811      	ldrh	r1, [r2, #0]
 800f35e:	4a44      	ldr	r2, [pc, #272]	@ (800f470 <tcp_input+0x714>)
 800f360:	8818      	ldrh	r0, [r3, #0]
 800f362:	6812      	ldr	r2, [r2, #0]
 800f364:	440a      	add	r2, r1
 800f366:	4946      	ldr	r1, [pc, #280]	@ (800f480 <tcp_input+0x724>)
 800f368:	6809      	ldr	r1, [r1, #0]
 800f36a:	9002      	str	r0, [sp, #8]
 800f36c:	4628      	mov	r0, r5
 800f36e:	885b      	ldrh	r3, [r3, #2]
 800f370:	9301      	str	r3, [sp, #4]
 800f372:	4b44      	ldr	r3, [pc, #272]	@ (800f484 <tcp_input+0x728>)
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	3304      	adds	r3, #4
 800f378:	f001 f9bc 	bl	80106f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f37c:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800f380:	2b05      	cmp	r3, #5
 800f382:	f63f ae55 	bhi.w	800f030 <tcp_input+0x2d4>
          pcb->rtime = 0;
 800f386:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800f388:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800f38a:	862b      	strh	r3, [r5, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f38c:	f001 fc1e 	bl	8010bcc <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800f390:	e64e      	b.n	800f030 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800f392:	4628      	mov	r0, r5
 800f394:	f7fe ff98 	bl	800e2c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f398:	4b34      	ldr	r3, [pc, #208]	@ (800f46c <tcp_input+0x710>)
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	06d9      	lsls	r1, r3, #27
 800f39e:	f57f ae47 	bpl.w	800f030 <tcp_input+0x2d4>
 800f3a2:	4b37      	ldr	r3, [pc, #220]	@ (800f480 <tcp_input+0x724>)
 800f3a4:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800f3a6:	681a      	ldr	r2, [r3, #0]
        recv_flags |= TF_CLOSED;
 800f3a8:	f899 3000 	ldrb.w	r3, [r9]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f3ac:	4291      	cmp	r1, r2
 800f3ae:	f47f ae3f 	bne.w	800f030 <tcp_input+0x2d4>
 800f3b2:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800f3b4:	2a00      	cmp	r2, #0
 800f3b6:	f47f ae3b 	bne.w	800f030 <tcp_input+0x2d4>
        recv_flags |= TF_CLOSED;
 800f3ba:	f043 0310 	orr.w	r3, r3, #16
 800f3be:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800f3c2:	e635      	b.n	800f030 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	f7fe ff7f 	bl	800e2c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f3ca:	f899 3000 	ldrb.w	r3, [r9]
 800f3ce:	069e      	lsls	r6, r3, #26
 800f3d0:	f57f ae2e 	bpl.w	800f030 <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800f3d4:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800f3d6:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800f3d8:	f043 0302 	orr.w	r3, r3, #2
 800f3dc:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800f3de:	f7fd fee7 	bl	800d1b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f3e2:	4b24      	ldr	r3, [pc, #144]	@ (800f474 <tcp_input+0x718>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	42ab      	cmp	r3, r5
 800f3e8:	d05a      	beq.n	800f4a0 <tcp_input+0x744>
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d05b      	beq.n	800f4a6 <tcp_input+0x74a>
 800f3ee:	68da      	ldr	r2, [r3, #12]
 800f3f0:	42aa      	cmp	r2, r5
 800f3f2:	f000 8205 	beq.w	800f800 <tcp_input+0xaa4>
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	e7f7      	b.n	800f3ea <tcp_input+0x68e>
      tcp_receive(pcb);
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	f7fe ff64 	bl	800e2c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f400:	f899 3000 	ldrb.w	r3, [r9]
 800f404:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f408:	4b18      	ldr	r3, [pc, #96]	@ (800f46c <tcp_input+0x710>)
      if (recv_flags & TF_GOT_FIN) {
 800f40a:	f000 817e 	beq.w	800f70a <tcp_input+0x9ae>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f40e:	781a      	ldrb	r2, [r3, #0]
          tcp_ack_now(pcb);
 800f410:	8b6b      	ldrh	r3, [r5, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f412:	06d2      	lsls	r2, r2, #27
          tcp_ack_now(pcb);
 800f414:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f418:	d504      	bpl.n	800f424 <tcp_input+0x6c8>
 800f41a:	4a19      	ldr	r2, [pc, #100]	@ (800f480 <tcp_input+0x724>)
 800f41c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800f41e:	6812      	ldr	r2, [r2, #0]
 800f420:	4291      	cmp	r1, r2
 800f422:	d031      	beq.n	800f488 <tcp_input+0x72c>
          tcp_ack_now(pcb);
 800f424:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800f426:	2308      	movs	r3, #8
 800f428:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800f42a:	e601      	b.n	800f030 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800f42c:	4628      	mov	r0, r5
 800f42e:	f7fe ff4b 	bl	800e2c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f432:	4b0e      	ldr	r3, [pc, #56]	@ (800f46c <tcp_input+0x710>)
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	06d8      	lsls	r0, r3, #27
 800f438:	f57f adfa 	bpl.w	800f030 <tcp_input+0x2d4>
 800f43c:	4b10      	ldr	r3, [pc, #64]	@ (800f480 <tcp_input+0x724>)
 800f43e:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	429a      	cmp	r2, r3
 800f444:	f47f adf4 	bne.w	800f030 <tcp_input+0x2d4>
 800f448:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f47f adf0 	bne.w	800f030 <tcp_input+0x2d4>
        tcp_pcb_purge(pcb);
 800f450:	4628      	mov	r0, r5
 800f452:	f7fd fead 	bl	800d1b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f456:	4b07      	ldr	r3, [pc, #28]	@ (800f474 <tcp_input+0x718>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	42ab      	cmp	r3, r5
 800f45c:	d020      	beq.n	800f4a0 <tcp_input+0x744>
 800f45e:	b313      	cbz	r3, 800f4a6 <tcp_input+0x74a>
 800f460:	68da      	ldr	r2, [r3, #12]
 800f462:	42aa      	cmp	r2, r5
 800f464:	f000 81cc 	beq.w	800f800 <tcp_input+0xaa4>
 800f468:	4613      	mov	r3, r2
 800f46a:	e7f8      	b.n	800f45e <tcp_input+0x702>
 800f46c:	2400fcdd 	.word	0x2400fcdd
 800f470:	2400fce8 	.word	0x2400fce8
 800f474:	2400fcc4 	.word	0x2400fcc4
 800f478:	2400fcbf 	.word	0x2400fcbf
 800f47c:	2400fcd0 	.word	0x2400fcd0
 800f480:	2400fce4 	.word	0x2400fce4
 800f484:	24009210 	.word	0x24009210
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f488:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800f48a:	2a00      	cmp	r2, #0
 800f48c:	d1ca      	bne.n	800f424 <tcp_input+0x6c8>
          tcp_ack_now(pcb);
 800f48e:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800f490:	4628      	mov	r0, r5
 800f492:	f7fd fe8d 	bl	800d1b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f496:	4bac      	ldr	r3, [pc, #688]	@ (800f748 <tcp_input+0x9ec>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	42ab      	cmp	r3, r5
 800f49c:	f040 81e0 	bne.w	800f860 <tcp_input+0xb04>
        TCP_RMV_ACTIVE(pcb);
 800f4a0:	68eb      	ldr	r3, [r5, #12]
 800f4a2:	4aa9      	ldr	r2, [pc, #676]	@ (800f748 <tcp_input+0x9ec>)
 800f4a4:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f4a6:	4ba9      	ldr	r3, [pc, #676]	@ (800f74c <tcp_input+0x9f0>)
        pcb->state = TIME_WAIT;
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	601d      	str	r5, [r3, #0]
 800f4b0:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	4ba6      	ldr	r3, [pc, #664]	@ (800f750 <tcp_input+0x9f4>)
 800f4b6:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f4b8:	f001 fcb4 	bl	8010e24 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800f4bc:	e5b8      	b.n	800f030 <tcp_input+0x2d4>
    tcp_input_pcb = pcb;
 800f4be:	4ca5      	ldr	r4, [pc, #660]	@ (800f754 <tcp_input+0x9f8>)
 800f4c0:	6025      	str	r5, [r4, #0]
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f4c2:	e5a1      	b.n	800f008 <tcp_input+0x2ac>
        if (pcb->rcv_ann_wnd == 0) {
 800f4c4:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	f000 808d 	beq.w	800f5e6 <tcp_input+0x88a>
 800f4cc:	4ca1      	ldr	r4, [pc, #644]	@ (800f754 <tcp_input+0x9f8>)
 800f4ce:	e5c2      	b.n	800f056 <tcp_input+0x2fa>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f4d0:	4ba1      	ldr	r3, [pc, #644]	@ (800f758 <tcp_input+0x9fc>)
 800f4d2:	22c2      	movs	r2, #194	@ 0xc2
 800f4d4:	49a1      	ldr	r1, [pc, #644]	@ (800f75c <tcp_input+0xa00>)
 800f4d6:	48a2      	ldr	r0, [pc, #648]	@ (800f760 <tcp_input+0xa04>)
 800f4d8:	f003 fd0a 	bl	8012ef0 <iprintf>
 800f4dc:	e47f      	b.n	800edde <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f4de:	4b9e      	ldr	r3, [pc, #632]	@ (800f758 <tcp_input+0x9fc>)
 800f4e0:	22df      	movs	r2, #223	@ 0xdf
 800f4e2:	49a0      	ldr	r1, [pc, #640]	@ (800f764 <tcp_input+0xa08>)
 800f4e4:	489e      	ldr	r0, [pc, #632]	@ (800f760 <tcp_input+0xa04>)
 800f4e6:	f003 fd03 	bl	8012ef0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f4ea:	8923      	ldrh	r3, [r4, #8]
 800f4ec:	e49c      	b.n	800ee28 <tcp_input+0xcc>
        if (recv_acked > 0) {
 800f4ee:	f8ba 2000 	ldrh.w	r2, [sl]
 800f4f2:	b15a      	cbz	r2, 800f50c <tcp_input+0x7b0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f4f4:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800f4f8:	b12b      	cbz	r3, 800f506 <tcp_input+0x7aa>
 800f4fa:	4629      	mov	r1, r5
 800f4fc:	6928      	ldr	r0, [r5, #16]
 800f4fe:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800f500:	300d      	adds	r0, #13
 800f502:	f43f ada8 	beq.w	800f056 <tcp_input+0x2fa>
          recv_acked = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	f8aa 3000 	strh.w	r3, [sl]
        if (tcp_input_delayed_close(pcb)) {
 800f50c:	4628      	mov	r0, r5
 800f50e:	f7fe fe55 	bl	800e1bc <tcp_input_delayed_close>
 800f512:	2800      	cmp	r0, #0
 800f514:	f47f ad9f 	bne.w	800f056 <tcp_input+0x2fa>
        if (recv_data != NULL) {
 800f518:	f8d8 2000 	ldr.w	r2, [r8]
 800f51c:	b1fa      	cbz	r2, 800f55e <tcp_input+0x802>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f51e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800f520:	b143      	cbz	r3, 800f534 <tcp_input+0x7d8>
 800f522:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f526:	4b8c      	ldr	r3, [pc, #560]	@ (800f758 <tcp_input+0x9fc>)
 800f528:	498f      	ldr	r1, [pc, #572]	@ (800f768 <tcp_input+0xa0c>)
 800f52a:	488d      	ldr	r0, [pc, #564]	@ (800f760 <tcp_input+0xa04>)
 800f52c:	f003 fce0 	bl	8012ef0 <iprintf>
            pbuf_free(recv_data);
 800f530:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800f534:	8b6b      	ldrh	r3, [r5, #26]
 800f536:	f013 0310 	ands.w	r3, r3, #16
 800f53a:	f040 80df 	bne.w	800f6fc <tcp_input+0x9a0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f53e:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800f542:	2e00      	cmp	r6, #0
 800f544:	f000 8118 	beq.w	800f778 <tcp_input+0xa1c>
 800f548:	4629      	mov	r1, r5
 800f54a:	6928      	ldr	r0, [r5, #16]
 800f54c:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800f54e:	f110 0f0d 	cmn.w	r0, #13
 800f552:	f43f ad80 	beq.w	800f056 <tcp_input+0x2fa>
          if (err != ERR_OK) {
 800f556:	b110      	cbz	r0, 800f55e <tcp_input+0x802>
            pcb->refused_data = recv_data;
 800f558:	f8d8 3000 	ldr.w	r3, [r8]
 800f55c:	67ab      	str	r3, [r5, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 800f55e:	f899 3000 	ldrb.w	r3, [r9]
 800f562:	069b      	lsls	r3, r3, #26
 800f564:	d507      	bpl.n	800f576 <tcp_input+0x81a>
          if (pcb->refused_data != NULL) {
 800f566:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f000 80b2 	beq.w	800f6d2 <tcp_input+0x976>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f56e:	7b5a      	ldrb	r2, [r3, #13]
 800f570:	f042 0220 	orr.w	r2, r2, #32
 800f574:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800f576:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800f578:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800f57a:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f57c:	f7fe fe1e 	bl	800e1bc <tcp_input_delayed_close>
 800f580:	2800      	cmp	r0, #0
 800f582:	f47f ad68 	bne.w	800f056 <tcp_input+0x2fa>
        tcp_output(pcb);
 800f586:	4628      	mov	r0, r5
 800f588:	f001 f92e 	bl	80107e8 <tcp_output>
 800f58c:	e563      	b.n	800f056 <tcp_input+0x2fa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f58e:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800f592:	f7fc f87d 	bl	800b690 <lwip_htons>
 800f596:	f010 0004 	ands.w	r0, r0, #4
 800f59a:	f47f abee 	bne.w	800ed7a <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f59e:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5a0:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5a2:	8811      	ldrh	r1, [r2, #0]
 800f5a4:	4a71      	ldr	r2, [pc, #452]	@ (800f76c <tcp_input+0xa10>)
 800f5a6:	881d      	ldrh	r5, [r3, #0]
 800f5a8:	6812      	ldr	r2, [r2, #0]
 800f5aa:	440a      	add	r2, r1
 800f5ac:	4970      	ldr	r1, [pc, #448]	@ (800f770 <tcp_input+0xa14>)
 800f5ae:	6809      	ldr	r1, [r1, #0]
 800f5b0:	9502      	str	r5, [sp, #8]
 800f5b2:	885b      	ldrh	r3, [r3, #2]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5b4:	9301      	str	r3, [sp, #4]
 800f5b6:	4b6f      	ldr	r3, [pc, #444]	@ (800f774 <tcp_input+0xa18>)
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	3304      	adds	r3, #4
 800f5bc:	f001 f89a 	bl	80106f4 <tcp_rst>
 800f5c0:	f7ff bbdb 	b.w	800ed7a <tcp_input+0x1e>
      if (ackno == pcb->snd_nxt) {
 800f5c4:	4b6a      	ldr	r3, [pc, #424]	@ (800f770 <tcp_input+0xa14>)
 800f5c6:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	f47f ad30 	bne.w	800f030 <tcp_input+0x2d4>
      recv_flags |= TF_RESET;
 800f5d0:	f899 3000 	ldrb.w	r3, [r9]
 800f5d4:	f043 0308 	orr.w	r3, r3, #8
 800f5d8:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f5dc:	8b6b      	ldrh	r3, [r5, #26]
 800f5de:	f023 0301 	bic.w	r3, r3, #1
 800f5e2:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800f5e4:	e524      	b.n	800f030 <tcp_input+0x2d4>
          tcp_send_empty_ack(pcb);
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	4c5a      	ldr	r4, [pc, #360]	@ (800f754 <tcp_input+0x9f8>)
 800f5ea:	f001 f8cb 	bl	8010784 <tcp_send_empty_ack>
 800f5ee:	e532      	b.n	800f056 <tcp_input+0x2fa>
    tcp_ack_now(pcb);
 800f5f0:	f042 0202 	orr.w	r2, r2, #2
 800f5f4:	836a      	strh	r2, [r5, #26]
    if (err != ERR_ABRT) {
 800f5f6:	e51b      	b.n	800f030 <tcp_input+0x2d4>
          && (ackno == pcb->lastack + 1)) {
 800f5f8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800f5fa:	495d      	ldr	r1, [pc, #372]	@ (800f770 <tcp_input+0xa14>)
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	6809      	ldr	r1, [r1, #0]
 800f600:	428b      	cmp	r3, r1
 800f602:	f47f aea6 	bne.w	800f352 <tcp_input+0x5f6>
        pcb->lastack = ackno;
 800f606:	646b      	str	r3, [r5, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f608:	2200      	movs	r2, #0
        pcb->rcv_nxt = seqno + 1;
 800f60a:	4b58      	ldr	r3, [pc, #352]	@ (800f76c <tcp_input+0xa10>)
        pcb->snd_wnd = tcphdr->wnd;
 800f60c:	6830      	ldr	r0, [r6, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f60e:	1d2e      	adds	r6, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800f610:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f612:	f8b5 b032 	ldrh.w	fp, [r5, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800f616:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f618:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800f61a:	6269      	str	r1, [r5, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f61c:	62e9      	str	r1, [r5, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800f61e:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f620:	4630      	mov	r0, r6
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f622:	656b      	str	r3, [r5, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f624:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800f626:	f361 020f 	bfi	r2, r1, #0, #16
        pcb->state = ESTABLISHED;
 800f62a:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd = tcphdr->wnd;
 800f62c:	f361 421f 	bfi	r2, r1, #16, #16
 800f630:	662a      	str	r2, [r5, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f632:	f002 fb9f 	bl	8011d74 <ip4_route>
 800f636:	4632      	mov	r2, r6
 800f638:	4601      	mov	r1, r0
 800f63a:	4658      	mov	r0, fp
 800f63c:	f7fe fd16 	bl	800e06c <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f640:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f644:	0041      	lsls	r1, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f646:	4602      	mov	r2, r0
 800f648:	8668      	strh	r0, [r5, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f64a:	0080      	lsls	r0, r0, #2
 800f64c:	4299      	cmp	r1, r3
 800f64e:	460e      	mov	r6, r1
 800f650:	bf38      	it	cc
 800f652:	461e      	movcc	r6, r3
 800f654:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 800f658:	f240 8130 	bls.w	800f8bc <tcp_input+0xb60>
 800f65c:	b283      	uxth	r3, r0
 800f65e:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f662:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
 800f666:	2b00      	cmp	r3, #0
 800f668:	f000 8120 	beq.w	800f8ac <tcp_input+0xb50>
        --pcb->snd_queuelen;
 800f66c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
        rseg = pcb->unacked;
 800f670:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
        --pcb->snd_queuelen;
 800f672:	3b01      	subs	r3, #1
 800f674:	f8a5 3066 	strh.w	r3, [r5, #102]	@ 0x66
        if (rseg == NULL) {
 800f678:	2e00      	cmp	r6, #0
 800f67a:	f000 8112 	beq.w	800f8a2 <tcp_input+0xb46>
          pcb->unacked = rseg->next;
 800f67e:	6833      	ldr	r3, [r6, #0]
 800f680:	672b      	str	r3, [r5, #112]	@ 0x70
        tcp_seg_free(rseg);
 800f682:	4630      	mov	r0, r6
 800f684:	f7fd fcd6 	bl	800d034 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800f688:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 8106 	beq.w	800f89c <tcp_input+0xb40>
          pcb->nrtx = 0;
 800f690:	2300      	movs	r3, #0
 800f692:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800f696:	862b      	strh	r3, [r5, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f698:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800f69c:	b133      	cbz	r3, 800f6ac <tcp_input+0x950>
 800f69e:	2200      	movs	r2, #0
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	6928      	ldr	r0, [r5, #16]
 800f6a4:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800f6a6:	300d      	adds	r0, #13
 800f6a8:	f43f acd5 	beq.w	800f056 <tcp_input+0x2fa>
        tcp_ack_now(pcb);
 800f6ac:	8b6b      	ldrh	r3, [r5, #26]
 800f6ae:	f043 0302 	orr.w	r3, r3, #2
 800f6b2:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800f6b4:	e4bc      	b.n	800f030 <tcp_input+0x2d4>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6b6:	9b05      	ldr	r3, [sp, #20]
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	881a      	ldrh	r2, [r3, #0]
 800f6bc:	4b2b      	ldr	r3, [pc, #172]	@ (800f76c <tcp_input+0xa10>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	441a      	add	r2, r3
 800f6c2:	4b2b      	ldr	r3, [pc, #172]	@ (800f770 <tcp_input+0xa14>)
 800f6c4:	6819      	ldr	r1, [r3, #0]
 800f6c6:	f8bc 3000 	ldrh.w	r3, [ip]
 800f6ca:	9302      	str	r3, [sp, #8]
 800f6cc:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800f6d0:	e770      	b.n	800f5b4 <tcp_input+0x858>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f6d2:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800f6d4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d001      	beq.n	800f6e0 <tcp_input+0x984>
              pcb->rcv_wnd++;
 800f6dc:	3301      	adds	r3, #1
 800f6de:	852b      	strh	r3, [r5, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800f6e0:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800f6e4:	2e00      	cmp	r6, #0
 800f6e6:	f43f af46 	beq.w	800f576 <tcp_input+0x81a>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	4629      	mov	r1, r5
 800f6ee:	6928      	ldr	r0, [r5, #16]
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800f6f4:	300d      	adds	r0, #13
 800f6f6:	f47f af3e 	bne.w	800f576 <tcp_input+0x81a>
 800f6fa:	e4ac      	b.n	800f056 <tcp_input+0x2fa>
            pbuf_free(recv_data);
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	f7fc fe9b 	bl	800c438 <pbuf_free>
            tcp_abort(pcb);
 800f702:	4628      	mov	r0, r5
 800f704:	f7fe f98c 	bl	800da20 <tcp_abort>
            goto aborted;
 800f708:	e4a5      	b.n	800f056 <tcp_input+0x2fa>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	06db      	lsls	r3, r3, #27
 800f70e:	f57f ac8f 	bpl.w	800f030 <tcp_input+0x2d4>
 800f712:	4b17      	ldr	r3, [pc, #92]	@ (800f770 <tcp_input+0xa14>)
 800f714:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	429a      	cmp	r2, r3
 800f71a:	f47f ac89 	bne.w	800f030 <tcp_input+0x2d4>
 800f71e:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800f720:	2b00      	cmp	r3, #0
 800f722:	f47f ac85 	bne.w	800f030 <tcp_input+0x2d4>
        pcb->state = FIN_WAIT_2;
 800f726:	2306      	movs	r3, #6
 800f728:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800f72a:	e481      	b.n	800f030 <tcp_input+0x2d4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f72c:	0798      	lsls	r0, r3, #30
 800f72e:	f57f ac7f 	bpl.w	800f030 <tcp_input+0x2d4>
 800f732:	4b0e      	ldr	r3, [pc, #56]	@ (800f76c <tcp_input+0xa10>)
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800f738:	3b01      	subs	r3, #1
 800f73a:	4293      	cmp	r3, r2
 800f73c:	f47f ac78 	bne.w	800f030 <tcp_input+0x2d4>
        tcp_rexmit(pcb);
 800f740:	4628      	mov	r0, r5
 800f742:	f000 ff59 	bl	80105f8 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800f746:	e473      	b.n	800f030 <tcp_input+0x2d4>
 800f748:	2400fcc4 	.word	0x2400fcc4
 800f74c:	2400fcc0 	.word	0x2400fcc0
 800f750:	2400fcbf 	.word	0x2400fcbf
 800f754:	2400fcd4 	.word	0x2400fcd4
 800f758:	080160e8 	.word	0x080160e8
 800f75c:	080162c8 	.word	0x080162c8
 800f760:	08014150 	.word	0x08014150
 800f764:	080162d8 	.word	0x080162d8
 800f768:	08016474 	.word	0x08016474
 800f76c:	2400fce8 	.word	0x2400fce8
 800f770:	2400fce4 	.word	0x2400fce4
 800f774:	24009210 	.word	0x24009210
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f778:	4633      	mov	r3, r6
 800f77a:	4630      	mov	r0, r6
 800f77c:	4629      	mov	r1, r5
 800f77e:	f7fe fb8f 	bl	800dea0 <tcp_recv_null>
 800f782:	e6e4      	b.n	800f54e <tcp_input+0x7f2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f784:	69ab      	ldr	r3, [r5, #24]
 800f786:	2b00      	cmp	r3, #0
 800f788:	f43f aaf7 	beq.w	800ed7a <tcp_input+0x1e>
 800f78c:	4601      	mov	r1, r0
 800f78e:	f04f 32ff 	mov.w	r2, #4294967295
 800f792:	6928      	ldr	r0, [r5, #16]
 800f794:	4798      	blx	r3
 800f796:	f7ff baf0 	b.w	800ed7a <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800f79a:	4641      	mov	r1, r8
 800f79c:	4648      	mov	r0, r9
 800f79e:	f7fe f869 	bl	800d874 <tcp_abandon>
      return;
 800f7a2:	f7ff baea 	b.w	800ed7a <tcp_input+0x1e>
          pcb->state = ESTABLISHED;
 800f7a6:	2304      	movs	r3, #4
 800f7a8:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800f7aa:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d0a8      	beq.n	800f702 <tcp_input+0x9a6>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f7b0:	699b      	ldr	r3, [r3, #24]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d05c      	beq.n	800f870 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	6928      	ldr	r0, [r5, #16]
 800f7bc:	4798      	blx	r3
          if (err != ERR_OK) {
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d167      	bne.n	800f894 <tcp_input+0xb38>
          tcp_receive(pcb);
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	f7fe fd7f 	bl	800e2c8 <tcp_receive>
          if (recv_acked != 0) {
 800f7ca:	f8ba 3000 	ldrh.w	r3, [sl]
 800f7ce:	b113      	cbz	r3, 800f7d6 <tcp_input+0xa7a>
            recv_acked--;
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	f8aa 3000 	strh.w	r3, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f7d6:	8e69      	ldrh	r1, [r5, #50]	@ 0x32
 800f7d8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f7dc:	004a      	lsls	r2, r1, #1
 800f7de:	0088      	lsls	r0, r1, #2
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	4616      	mov	r6, r2
 800f7e4:	bf38      	it	cc
 800f7e6:	461e      	movcc	r6, r3
 800f7e8:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800f7ec:	d934      	bls.n	800f858 <tcp_input+0xafc>
 800f7ee:	b283      	uxth	r3, r0
 800f7f0:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 800f7f4:	f899 3000 	ldrb.w	r3, [r9]
 800f7f8:	069e      	lsls	r6, r3, #26
 800f7fa:	f57f ac19 	bpl.w	800f030 <tcp_input+0x2d4>
 800f7fe:	e579      	b.n	800f2f4 <tcp_input+0x598>
        TCP_RMV_ACTIVE(pcb);
 800f800:	68ea      	ldr	r2, [r5, #12]
 800f802:	60da      	str	r2, [r3, #12]
 800f804:	e64f      	b.n	800f4a6 <tcp_input+0x74a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f806:	4b33      	ldr	r3, [pc, #204]	@ (800f8d4 <tcp_input+0xb78>)
 800f808:	f240 120d 	movw	r2, #269	@ 0x10d
 800f80c:	4932      	ldr	r1, [pc, #200]	@ (800f8d8 <tcp_input+0xb7c>)
 800f80e:	4833      	ldr	r0, [pc, #204]	@ (800f8dc <tcp_input+0xb80>)
 800f810:	f003 fb6e 	bl	8012ef0 <iprintf>
      if (prev != NULL) {
 800f814:	f1b8 0f00 	cmp.w	r8, #0
 800f818:	f43f abc1 	beq.w	800ef9e <tcp_input+0x242>
 800f81c:	68eb      	ldr	r3, [r5, #12]
 800f81e:	f7ff bbb8 	b.w	800ef92 <tcp_input+0x236>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f822:	4b2c      	ldr	r3, [pc, #176]	@ (800f8d4 <tcp_input+0xb78>)
 800f824:	f240 1215 	movw	r2, #277	@ 0x115
 800f828:	492d      	ldr	r1, [pc, #180]	@ (800f8e0 <tcp_input+0xb84>)
 800f82a:	482c      	ldr	r0, [pc, #176]	@ (800f8dc <tcp_input+0xb80>)
 800f82c:	f003 fb60 	bl	8012ef0 <iprintf>
  if (pcb == NULL) {
 800f830:	f7ff bbb9 	b.w	800efa6 <tcp_input+0x24a>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f834:	2900      	cmp	r1, #0
 800f836:	f47f aecb 	bne.w	800f5d0 <tcp_input+0x874>
 800f83a:	4b26      	ldr	r3, [pc, #152]	@ (800f8d4 <tcp_input+0xb78>)
 800f83c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f840:	4928      	ldr	r1, [pc, #160]	@ (800f8e4 <tcp_input+0xb88>)
 800f842:	4826      	ldr	r0, [pc, #152]	@ (800f8dc <tcp_input+0xb80>)
 800f844:	f003 fb54 	bl	8012ef0 <iprintf>
 800f848:	e6c2      	b.n	800f5d0 <tcp_input+0x874>
  } else if (flags & TCP_FIN) {
 800f84a:	07c1      	lsls	r1, r0, #31
 800f84c:	f57f ac55 	bpl.w	800f0fa <tcp_input+0x39e>
    pcb->tmr = tcp_ticks;
 800f850:	4b25      	ldr	r3, [pc, #148]	@ (800f8e8 <tcp_input+0xb8c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	622b      	str	r3, [r5, #32]
 800f856:	e450      	b.n	800f0fa <tcp_input+0x39e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f858:	429a      	cmp	r2, r3
 800f85a:	bf88      	it	hi
 800f85c:	b293      	uxthhi	r3, r2
 800f85e:	e7c7      	b.n	800f7f0 <tcp_input+0xa94>
          TCP_RMV_ACTIVE(pcb);
 800f860:	2b00      	cmp	r3, #0
 800f862:	f43f ae20 	beq.w	800f4a6 <tcp_input+0x74a>
 800f866:	68da      	ldr	r2, [r3, #12]
 800f868:	42aa      	cmp	r2, r5
 800f86a:	d0c9      	beq.n	800f800 <tcp_input+0xaa4>
 800f86c:	4613      	mov	r3, r2
 800f86e:	e7f7      	b.n	800f860 <tcp_input+0xb04>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f870:	4b18      	ldr	r3, [pc, #96]	@ (800f8d4 <tcp_input+0xb78>)
 800f872:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f876:	491d      	ldr	r1, [pc, #116]	@ (800f8ec <tcp_input+0xb90>)
 800f878:	4818      	ldr	r0, [pc, #96]	@ (800f8dc <tcp_input+0xb80>)
 800f87a:	f003 fb39 	bl	8012ef0 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f87e:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800f880:	699b      	ldr	r3, [r3, #24]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d197      	bne.n	800f7b6 <tcp_input+0xa5a>
 800f886:	e73c      	b.n	800f702 <tcp_input+0x9a6>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f888:	9102      	str	r1, [sp, #8]
 800f88a:	4432      	add	r2, r6
 800f88c:	4918      	ldr	r1, [pc, #96]	@ (800f8f0 <tcp_input+0xb94>)
 800f88e:	4628      	mov	r0, r5
 800f890:	6809      	ldr	r1, [r1, #0]
 800f892:	e68f      	b.n	800f5b4 <tcp_input+0x858>
            if (err != ERR_ABRT) {
 800f894:	330d      	adds	r3, #13
 800f896:	f43f abde 	beq.w	800f056 <tcp_input+0x2fa>
 800f89a:	e732      	b.n	800f702 <tcp_input+0x9a6>
          pcb->rtime = -1;
 800f89c:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a0:	e6f9      	b.n	800f696 <tcp_input+0x93a>
          rseg = pcb->unsent;
 800f8a2:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f8a4:	b176      	cbz	r6, 800f8c4 <tcp_input+0xb68>
          pcb->unsent = rseg->next;
 800f8a6:	6833      	ldr	r3, [r6, #0]
 800f8a8:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800f8aa:	e6ea      	b.n	800f682 <tcp_input+0x926>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f8ac:	4b09      	ldr	r3, [pc, #36]	@ (800f8d4 <tcp_input+0xb78>)
 800f8ae:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f8b2:	4910      	ldr	r1, [pc, #64]	@ (800f8f4 <tcp_input+0xb98>)
 800f8b4:	4809      	ldr	r0, [pc, #36]	@ (800f8dc <tcp_input+0xb80>)
 800f8b6:	f003 fb1b 	bl	8012ef0 <iprintf>
 800f8ba:	e6d7      	b.n	800f66c <tcp_input+0x910>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f8bc:	4299      	cmp	r1, r3
 800f8be:	bf88      	it	hi
 800f8c0:	b28b      	uxthhi	r3, r1
 800f8c2:	e6cc      	b.n	800f65e <tcp_input+0x902>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f8c4:	4b03      	ldr	r3, [pc, #12]	@ (800f8d4 <tcp_input+0xb78>)
 800f8c6:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f8ca:	490b      	ldr	r1, [pc, #44]	@ (800f8f8 <tcp_input+0xb9c>)
 800f8cc:	4803      	ldr	r0, [pc, #12]	@ (800f8dc <tcp_input+0xb80>)
 800f8ce:	f003 fb0f 	bl	8012ef0 <iprintf>
 800f8d2:	e7e8      	b.n	800f8a6 <tcp_input+0xb4a>
 800f8d4:	080160e8 	.word	0x080160e8
 800f8d8:	08016380 	.word	0x08016380
 800f8dc:	08014150 	.word	0x08014150
 800f8e0:	080163ac 	.word	0x080163ac
 800f8e4:	08016408 	.word	0x08016408
 800f8e8:	2400fcd0 	.word	0x2400fcd0
 800f8ec:	08016454 	.word	0x08016454
 800f8f0:	2400fce4 	.word	0x2400fce4
 800f8f4:	08016428 	.word	0x08016428
 800f8f8:	08016440 	.word	0x08016440

0800f8fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800f8fc:	4a02      	ldr	r2, [pc, #8]	@ (800f908 <tcp_trigger_input_pcb_close+0xc>)
 800f8fe:	7813      	ldrb	r3, [r2, #0]
 800f900:	f043 0310 	orr.w	r3, r3, #16
 800f904:	7013      	strb	r3, [r2, #0]
}
 800f906:	4770      	bx	lr
 800f908:	2400fcdc 	.word	0x2400fcdc

0800f90c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f90c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f910:	2600      	movs	r6, #0
 800f912:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800f914:	460c      	mov	r4, r1
 800f916:	4681      	mov	r9, r0
 800f918:	f361 060f 	bfi	r6, r1, #0, #16
 800f91c:	4615      	mov	r5, r2
 800f91e:	4698      	mov	r8, r3
 800f920:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 800f924:	f361 461f 	bfi	r6, r1, #16, #16
 800f928:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f92c:	2f00      	cmp	r7, #0
 800f92e:	d033      	beq.n	800f998 <tcp_pbuf_prealloc+0x8c>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f930:	42ac      	cmp	r4, r5
 800f932:	d20e      	bcs.n	800f952 <tcp_pbuf_prealloc+0x46>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f934:	f01a 0f02 	tst.w	sl, #2
 800f938:	d008      	beq.n	800f94c <tcp_pbuf_prealloc+0x40>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f93a:	f204 51b7 	addw	r1, r4, #1463	@ 0x5b7
 800f93e:	f021 0103 	bic.w	r1, r1, #3
 800f942:	42a9      	cmp	r1, r5
 800f944:	bf28      	it	cs
 800f946:	4629      	movcs	r1, r5
 800f948:	b289      	uxth	r1, r1
 800f94a:	e003      	b.n	800f954 <tcp_pbuf_prealloc+0x48>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f94c:	8b7b      	ldrh	r3, [r7, #26]
 800f94e:	065b      	lsls	r3, r3, #25
 800f950:	d518      	bpl.n	800f984 <tcp_pbuf_prealloc+0x78>
 800f952:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f954:	4648      	mov	r0, r9
 800f956:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f95a:	f7fc fddd 	bl	800c518 <pbuf_alloc>
  if (p == NULL) {
 800f95e:	4605      	mov	r5, r0
 800f960:	b168      	cbz	r0, 800f97e <tcp_pbuf_prealloc+0x72>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f962:	6803      	ldr	r3, [r0, #0]
 800f964:	b133      	cbz	r3, 800f974 <tcp_pbuf_prealloc+0x68>
 800f966:	4b10      	ldr	r3, [pc, #64]	@ (800f9a8 <tcp_pbuf_prealloc+0x9c>)
 800f968:	f240 120b 	movw	r2, #267	@ 0x10b
 800f96c:	490f      	ldr	r1, [pc, #60]	@ (800f9ac <tcp_pbuf_prealloc+0xa0>)
 800f96e:	4810      	ldr	r0, [pc, #64]	@ (800f9b0 <tcp_pbuf_prealloc+0xa4>)
 800f970:	f003 fabe 	bl	8012ef0 <iprintf>
  *oversize = p->len - length;
 800f974:	896b      	ldrh	r3, [r5, #10]
 800f976:	1b1b      	subs	r3, r3, r4
 800f978:	f8a8 3000 	strh.w	r3, [r8]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f97c:	60ae      	str	r6, [r5, #8]
  return p;
}
 800f97e:	4628      	mov	r0, r5
 800f980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800f984:	f1bb 0f00 	cmp.w	fp, #0
 800f988:	d0d7      	beq.n	800f93a <tcp_pbuf_prealloc+0x2e>
         (!first_seg ||
 800f98a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1d4      	bne.n	800f93a <tcp_pbuf_prealloc+0x2e>
          pcb->unsent != NULL ||
 800f990:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f992:	2b00      	cmp	r3, #0
 800f994:	d1d1      	bne.n	800f93a <tcp_pbuf_prealloc+0x2e>
 800f996:	e7dc      	b.n	800f952 <tcp_pbuf_prealloc+0x46>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f998:	4b03      	ldr	r3, [pc, #12]	@ (800f9a8 <tcp_pbuf_prealloc+0x9c>)
 800f99a:	22e9      	movs	r2, #233	@ 0xe9
 800f99c:	4905      	ldr	r1, [pc, #20]	@ (800f9b4 <tcp_pbuf_prealloc+0xa8>)
 800f99e:	4804      	ldr	r0, [pc, #16]	@ (800f9b0 <tcp_pbuf_prealloc+0xa4>)
 800f9a0:	f003 faa6 	bl	8012ef0 <iprintf>
 800f9a4:	e7c4      	b.n	800f930 <tcp_pbuf_prealloc+0x24>
 800f9a6:	bf00      	nop
 800f9a8:	08016490 	.word	0x08016490
 800f9ac:	080164e4 	.word	0x080164e4
 800f9b0:	08014150 	.word	0x08014150
 800f9b4:	080164c4 	.word	0x080164c4

0800f9b8 <tcp_create_segment>:
{
 800f9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9bc:	460e      	mov	r6, r1
 800f9be:	f89d a020 	ldrb.w	sl, [sp, #32]
 800f9c2:	4690      	mov	r8, r2
 800f9c4:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f9c6:	4607      	mov	r7, r0
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d047      	beq.n	800fa5c <tcp_create_segment+0xa4>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f9cc:	2e00      	cmp	r6, #0
 800f9ce:	d04d      	beq.n	800fa6c <tcp_create_segment+0xb4>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f9d0:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f9d4:	2003      	movs	r0, #3
 800f9d6:	f7fc f9dd 	bl	800bd94 <memp_malloc>
 800f9da:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f9dc:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d051      	beq.n	800fa88 <tcp_create_segment+0xd0>
  seg->flags = optflags;
 800f9e4:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800f9e8:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f9ea:	8932      	ldrh	r2, [r6, #8]
  seg->p = p;
 800f9ec:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f9ee:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800f9f0:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f9f2:	d32b      	bcc.n	800fa4c <tcp_create_segment+0x94>
  seg->len = p->tot_len - optlen;
 800f9f4:	1b52      	subs	r2, r2, r5
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800f9fa:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f9fc:	f7fc fc8a 	bl	800c314 <pbuf_add_header>
 800fa00:	4606      	mov	r6, r0
 800fa02:	2800      	cmp	r0, #0
 800fa04:	d139      	bne.n	800fa7a <tcp_create_segment+0xc2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fa06:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fa08:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fa0a:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fa0c:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fa10:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fa14:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fa18:	f7fb fe3a 	bl	800b690 <lwip_htons>
 800fa1c:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fa20:	8b38      	ldrh	r0, [r7, #24]
 800fa22:	68e7      	ldr	r7, [r4, #12]
 800fa24:	f7fb fe34 	bl	800b690 <lwip_htons>
 800fa28:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fa2a:	4648      	mov	r0, r9
 800fa2c:	68e7      	ldr	r7, [r4, #12]
 800fa2e:	f7fb fe33 	bl	800b698 <lwip_htonl>
 800fa32:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fa34:	ea48 0005 	orr.w	r0, r8, r5
 800fa38:	68e7      	ldr	r7, [r4, #12]
 800fa3a:	f7fb fe29 	bl	800b690 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800fa3e:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fa40:	81b8      	strh	r0, [r7, #12]
}
 800fa42:	4620      	mov	r0, r4
  seg->tcphdr->urgp = 0;
 800fa44:	749e      	strb	r6, [r3, #18]
 800fa46:	74de      	strb	r6, [r3, #19]
}
 800fa48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fa4c:	22b0      	movs	r2, #176	@ 0xb0
 800fa4e:	4b10      	ldr	r3, [pc, #64]	@ (800fa90 <tcp_create_segment+0xd8>)
 800fa50:	4910      	ldr	r1, [pc, #64]	@ (800fa94 <tcp_create_segment+0xdc>)
 800fa52:	4811      	ldr	r0, [pc, #68]	@ (800fa98 <tcp_create_segment+0xe0>)
 800fa54:	f003 fa4c 	bl	8012ef0 <iprintf>
  seg->len = p->tot_len - optlen;
 800fa58:	8932      	ldrh	r2, [r6, #8]
 800fa5a:	e7cb      	b.n	800f9f4 <tcp_create_segment+0x3c>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fa5c:	4b0c      	ldr	r3, [pc, #48]	@ (800fa90 <tcp_create_segment+0xd8>)
 800fa5e:	22a3      	movs	r2, #163	@ 0xa3
 800fa60:	490e      	ldr	r1, [pc, #56]	@ (800fa9c <tcp_create_segment+0xe4>)
 800fa62:	480d      	ldr	r0, [pc, #52]	@ (800fa98 <tcp_create_segment+0xe0>)
 800fa64:	f003 fa44 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fa68:	2e00      	cmp	r6, #0
 800fa6a:	d1b1      	bne.n	800f9d0 <tcp_create_segment+0x18>
 800fa6c:	4b08      	ldr	r3, [pc, #32]	@ (800fa90 <tcp_create_segment+0xd8>)
 800fa6e:	22a4      	movs	r2, #164	@ 0xa4
 800fa70:	490b      	ldr	r1, [pc, #44]	@ (800faa0 <tcp_create_segment+0xe8>)
 800fa72:	4809      	ldr	r0, [pc, #36]	@ (800fa98 <tcp_create_segment+0xe0>)
 800fa74:	f003 fa3c 	bl	8012ef0 <iprintf>
 800fa78:	e7aa      	b.n	800f9d0 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f7fd fada 	bl	800d034 <tcp_seg_free>
    return NULL;
 800fa80:	2400      	movs	r4, #0
}
 800fa82:	4620      	mov	r0, r4
 800fa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7fc fcd5 	bl	800c438 <pbuf_free>
    return NULL;
 800fa8e:	e7f7      	b.n	800fa80 <tcp_create_segment+0xc8>
 800fa90:	08016490 	.word	0x08016490
 800fa94:	0801653c 	.word	0x0801653c
 800fa98:	08014150 	.word	0x08014150
 800fa9c:	080164f8 	.word	0x080164f8
 800faa0:	08016518 	.word	0x08016518

0800faa4 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800faa4:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800faa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800faaa:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800faac:	4606      	mov	r6, r0
 800faae:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fab0:	2022      	movs	r0, #34	@ 0x22
 800fab2:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800fab6:	461c      	mov	r4, r3
 800fab8:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800fabc:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800fac0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fac4:	f7fc fd28 	bl	800c518 <pbuf_alloc>
  if (p != NULL) {
 800fac8:	4605      	mov	r5, r0
 800faca:	b300      	cbz	r0, 800fb0e <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800facc:	8943      	ldrh	r3, [r0, #10]
 800face:	2b13      	cmp	r3, #19
 800fad0:	d920      	bls.n	800fb14 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800fad2:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800fad4:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800fad6:	f7fb fddb 	bl	800b690 <lwip_htons>
 800fada:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fadc:	4650      	mov	r0, sl
 800fade:	f7fb fdd7 	bl	800b690 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800fae2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800fae4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800fae6:	4630      	mov	r0, r6
 800fae8:	f7fb fdd6 	bl	800b698 <lwip_htonl>
 800faec:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800faee:	f449 40a0 	orr.w	r0, r9, #20480	@ 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800faf2:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800faf4:	f7fb fdcc 	bl	800b690 <lwip_htons>
 800faf8:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800fafa:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fafc:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fafe:	f7fb fdc7 	bl	800b690 <lwip_htons>
    tcphdr->chksum = 0;
 800fb02:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800fb04:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800fb06:	7423      	strb	r3, [r4, #16]
 800fb08:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800fb0a:	74a3      	strb	r3, [r4, #18]
 800fb0c:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800fb0e:	4628      	mov	r0, r5
 800fb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fb14:	4b03      	ldr	r3, [pc, #12]	@ (800fb24 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800fb16:	f240 7223 	movw	r2, #1827	@ 0x723
 800fb1a:	4903      	ldr	r1, [pc, #12]	@ (800fb28 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800fb1c:	4803      	ldr	r0, [pc, #12]	@ (800fb2c <tcp_output_alloc_header_common.constprop.0+0x88>)
 800fb1e:	f003 f9e7 	bl	8012ef0 <iprintf>
 800fb22:	e7d6      	b.n	800fad2 <tcp_output_alloc_header_common.constprop.0+0x2e>
 800fb24:	08016490 	.word	0x08016490
 800fb28:	08016554 	.word	0x08016554
 800fb2c:	08014150 	.word	0x08014150

0800fb30 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	460d      	mov	r5, r1
 800fb34:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fb36:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800fb38:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fb3a:	b190      	cbz	r0, 800fb62 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fb3c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800fb3e:	2210      	movs	r2, #16
 800fb40:	8b21      	ldrh	r1, [r4, #24]
 800fb42:	9302      	str	r3, [sp, #8]
 800fb44:	e9cd 1200 	strd	r1, r2, [sp]
 800fb48:	4632      	mov	r2, r6
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	8ae3      	ldrh	r3, [r4, #22]
 800fb4e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fb50:	f7ff ffa8 	bl	800faa4 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fb54:	b118      	cbz	r0, 800fb5e <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fb56:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800fb58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fb5a:	4413      	add	r3, r2
 800fb5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 800fb5e:	b004      	add	sp, #16
 800fb60:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fb62:	4b04      	ldr	r3, [pc, #16]	@ (800fb74 <tcp_output_alloc_header.constprop.0+0x44>)
 800fb64:	f240 7242 	movw	r2, #1858	@ 0x742
 800fb68:	4903      	ldr	r1, [pc, #12]	@ (800fb78 <tcp_output_alloc_header.constprop.0+0x48>)
 800fb6a:	4804      	ldr	r0, [pc, #16]	@ (800fb7c <tcp_output_alloc_header.constprop.0+0x4c>)
 800fb6c:	f003 f9c0 	bl	8012ef0 <iprintf>
 800fb70:	e7e4      	b.n	800fb3c <tcp_output_alloc_header.constprop.0+0xc>
 800fb72:	bf00      	nop
 800fb74:	08016490 	.word	0x08016490
 800fb78:	08016584 	.word	0x08016584
 800fb7c:	08014150 	.word	0x08014150

0800fb80 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb82:	4604      	mov	r4, r0
 800fb84:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fb86:	460d      	mov	r5, r1
{
 800fb88:	4617      	mov	r7, r2
 800fb8a:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fb8c:	b1f9      	cbz	r1, 800fbce <tcp_output_control_segment+0x4e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fb8e:	b334      	cbz	r4, 800fbde <tcp_output_control_segment+0x5e>
 800fb90:	7a20      	ldrb	r0, [r4, #8]
 800fb92:	b9a8      	cbnz	r0, 800fbc0 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800fb94:	4630      	mov	r0, r6
 800fb96:	f002 f8ed 	bl	8011d74 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800fb9a:	b1a8      	cbz	r0, 800fbc8 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fb9c:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800fb9e:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fba0:	9400      	str	r4, [sp, #0]
 800fba2:	2406      	movs	r4, #6
 800fba4:	9002      	str	r0, [sp, #8]
 800fba6:	4632      	mov	r2, r6
 800fba8:	9401      	str	r4, [sp, #4]
 800fbaa:	4639      	mov	r1, r7
 800fbac:	4628      	mov	r0, r5
 800fbae:	f002 fa7b 	bl	80120a8 <ip4_output_if>
 800fbb2:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	f7fc fc3f 	bl	800c438 <pbuf_free>
  return err;
}
 800fbba:	4620      	mov	r0, r4
 800fbbc:	b005      	add	sp, #20
 800fbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800fbc0:	f7fc fb30 	bl	800c224 <netif_get_by_index>
  if (netif == NULL) {
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d1e9      	bne.n	800fb9c <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800fbc8:	f06f 0403 	mvn.w	r4, #3
 800fbcc:	e7f2      	b.n	800fbb4 <tcp_output_control_segment+0x34>
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fbce:	4b07      	ldr	r3, [pc, #28]	@ (800fbec <tcp_output_control_segment+0x6c>)
 800fbd0:	f240 7287 	movw	r2, #1927	@ 0x787
 800fbd4:	4906      	ldr	r1, [pc, #24]	@ (800fbf0 <tcp_output_control_segment+0x70>)
 800fbd6:	4807      	ldr	r0, [pc, #28]	@ (800fbf4 <tcp_output_control_segment+0x74>)
 800fbd8:	f003 f98a 	bl	8012ef0 <iprintf>
 800fbdc:	e7d7      	b.n	800fb8e <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800fbde:	4630      	mov	r0, r6
 800fbe0:	f002 f8c8 	bl	8011d74 <ip4_route>
  if (netif == NULL) {
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d0ef      	beq.n	800fbc8 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800fbe8:	23ff      	movs	r3, #255	@ 0xff
 800fbea:	e7d9      	b.n	800fba0 <tcp_output_control_segment+0x20>
 800fbec:	08016490 	.word	0x08016490
 800fbf0:	080165ac 	.word	0x080165ac
 800fbf4:	08014150 	.word	0x08014150

0800fbf8 <tcp_write>:
{
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800fbfc:	2400      	movs	r4, #0
{
 800fbfe:	b091      	sub	sp, #68	@ 0x44
 800fc00:	9107      	str	r1, [sp, #28]
 800fc02:	9309      	str	r3, [sp, #36]	@ 0x24
  u16_t oversize = 0;
 800fc04:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	f000 82dc 	beq.w	80101c6 <tcp_write+0x5ce>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800fc0e:	f8b0 a062 	ldrh.w	sl, [r0, #98]	@ 0x62
 800fc12:	4691      	mov	r9, r2
 800fc14:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800fc16:	4680      	mov	r8, r0
 800fc18:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800fc1c:	459a      	cmp	sl, r3
 800fc1e:	4652      	mov	r2, sl
 800fc20:	bf28      	it	cs
 800fc22:	461a      	movcs	r2, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800fc24:	2a00      	cmp	r2, #0
 800fc26:	bf08      	it	eq
 800fc28:	461a      	moveq	r2, r3
 800fc2a:	9205      	str	r2, [sp, #20]
  LWIP_ASSERT_CORE_LOCKED();
 800fc2c:	f7f7 fb7e 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800fc30:	9b07      	ldr	r3, [sp, #28]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 82bd 	beq.w	80101b2 <tcp_write+0x5ba>
  if ((pcb->state != ESTABLISHED) &&
 800fc38:	f898 3014 	ldrb.w	r3, [r8, #20]
      (pcb->state != CLOSE_WAIT) &&
 800fc3c:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800fc3e:	2a02      	cmp	r2, #2
 800fc40:	d902      	bls.n	800fc48 <tcp_write+0x50>
 800fc42:	2b07      	cmp	r3, #7
 800fc44:	f040 824d 	bne.w	80100e2 <tcp_write+0x4ea>
  } else if (len == 0) {
 800fc48:	f1b9 0f00 	cmp.w	r9, #0
 800fc4c:	d05b      	beq.n	800fd06 <tcp_write+0x10e>
  if (len > pcb->snd_buf) {
 800fc4e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800fc52:	454b      	cmp	r3, r9
 800fc54:	f0c0 8290 	bcc.w	8010178 <tcp_write+0x580>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800fc58:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
 800fc5c:	2d0f      	cmp	r5, #15
 800fc5e:	f200 828b 	bhi.w	8010178 <tcp_write+0x580>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fc62:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800fc66:	2d00      	cmp	r5, #0
 800fc68:	d043      	beq.n	800fcf2 <tcp_write+0xfa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fc6a:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f000 81db 	beq.w	801002a <tcp_write+0x432>
  if (pcb->unsent != NULL) {
 800fc74:	2f00      	cmp	r7, #0
 800fc76:	f000 81c6 	beq.w	8010006 <tcp_write+0x40e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fc7a:	463b      	mov	r3, r7
 800fc7c:	683f      	ldr	r7, [r7, #0]
 800fc7e:	2f00      	cmp	r7, #0
 800fc80:	d1fb      	bne.n	800fc7a <tcp_write+0x82>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800fc82:	7a9c      	ldrb	r4, [r3, #10]
 800fc84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc86:	00a4      	lsls	r4, r4, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800fc88:	891b      	ldrh	r3, [r3, #8]
 800fc8a:	9905      	ldr	r1, [sp, #20]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800fc8c:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800fc90:	191a      	adds	r2, r3, r4
 800fc92:	4291      	cmp	r1, r2
 800fc94:	f2c0 81eb 	blt.w	801006e <tcp_write+0x476>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800fc98:	9a05      	ldr	r2, [sp, #20]
 800fc9a:	eba2 0b04 	sub.w	fp, r2, r4
 800fc9e:	ebab 0b03 	sub.w	fp, fp, r3
    oversize = pcb->unsent_oversize;
 800fca2:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800fca6:	fa1f fb8b 	uxth.w	fp, fp
    oversize = pcb->unsent_oversize;
 800fcaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcac:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    if (oversize > 0) {
 800fcb0:	b383      	cbz	r3, 800fd14 <tcp_write+0x11c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800fcb2:	455b      	cmp	r3, fp
 800fcb4:	f200 81cb 	bhi.w	801004e <tcp_write+0x456>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800fcb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcba:	454b      	cmp	r3, r9
 800fcbc:	461c      	mov	r4, r3
 800fcbe:	bf28      	it	cs
 800fcc0:	464c      	movcs	r4, r9
 800fcc2:	455c      	cmp	r4, fp
 800fcc4:	bf28      	it	cs
 800fcc6:	465c      	movcs	r4, fp
      oversize -= oversize_used;
 800fcc8:	1b1b      	subs	r3, r3, r4
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800fcd0:	b143      	cbz	r3, 800fce4 <tcp_write+0xec>
 800fcd2:	45a1      	cmp	r9, r4
 800fcd4:	d006      	beq.n	800fce4 <tcp_write+0xec>
 800fcd6:	4bae      	ldr	r3, [pc, #696]	@ (800ff90 <tcp_write+0x398>)
 800fcd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcdc:	49ad      	ldr	r1, [pc, #692]	@ (800ff94 <tcp_write+0x39c>)
 800fcde:	48ae      	ldr	r0, [pc, #696]	@ (800ff98 <tcp_write+0x3a0>)
 800fce0:	f003 f906 	bl	8012ef0 <iprintf>
      space -= oversize_used;
 800fce4:	ebab 0b04 	sub.w	fp, fp, r4
 800fce8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
      pos += oversize_used;
 800fcea:	940a      	str	r4, [sp, #40]	@ 0x28
      space -= oversize_used;
 800fcec:	fa1f fb8b 	uxth.w	fp, fp
 800fcf0:	e011      	b.n	800fd16 <tcp_write+0x11e>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	f000 8182 	beq.w	800fffc <tcp_write+0x404>
 800fcf8:	4ba5      	ldr	r3, [pc, #660]	@ (800ff90 <tcp_write+0x398>)
 800fcfa:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800fcfe:	49a7      	ldr	r1, [pc, #668]	@ (800ff9c <tcp_write+0x3a4>)
 800fd00:	48a5      	ldr	r0, [pc, #660]	@ (800ff98 <tcp_write+0x3a0>)
 800fd02:	f003 f8f5 	bl	8012ef0 <iprintf>
  if (pcb->unsent != NULL) {
 800fd06:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800fd0a:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800fd0e:	2f00      	cmp	r7, #0
 800fd10:	d1b3      	bne.n	800fc7a <tcp_write+0x82>
 800fd12:	e178      	b.n	8010006 <tcp_write+0x40e>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800fd14:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800fd16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd18:	454b      	cmp	r3, r9
 800fd1a:	d23b      	bcs.n	800fd94 <tcp_write+0x19c>
 800fd1c:	f1bb 0f00 	cmp.w	fp, #0
 800fd20:	d038      	beq.n	800fd94 <tcp_write+0x19c>
 800fd22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fd24:	8912      	ldrh	r2, [r2, #8]
 800fd26:	920d      	str	r2, [sp, #52]	@ 0x34
 800fd28:	2a00      	cmp	r2, #0
 800fd2a:	f000 817a 	beq.w	8010022 <tcp_write+0x42a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800fd2e:	eba9 0603 	sub.w	r6, r9, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800fd34:	455e      	cmp	r6, fp
 800fd36:	bfa8      	it	ge
 800fd38:	465e      	movge	r6, fp
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fd3a:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800fd3c:	b2b4      	uxth	r4, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fd3e:	f100 81d3 	bmi.w	80100e8 <tcp_write+0x4f0>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800fd42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd44:	685a      	ldr	r2, [r3, #4]
 800fd46:	4613      	mov	r3, r2
 800fd48:	6812      	ldr	r2, [r2, #0]
 800fd4a:	2a00      	cmp	r2, #0
 800fd4c:	d1fb      	bne.n	800fd46 <tcp_write+0x14e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fd4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fd50:	7b1a      	ldrb	r2, [r3, #12]
 800fd52:	2a3f      	cmp	r2, #63	@ 0x3f
 800fd54:	d806      	bhi.n	800fd64 <tcp_write+0x16c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800fd56:	895a      	ldrh	r2, [r3, #10]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fd5c:	9a07      	ldr	r2, [sp, #28]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	f000 81ba 	beq.w	80100d8 <tcp_write+0x4e0>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800fd64:	2201      	movs	r2, #1
 800fd66:	4621      	mov	r1, r4
 800fd68:	2000      	movs	r0, #0
 800fd6a:	f7fc fbd5 	bl	800c518 <pbuf_alloc>
 800fd6e:	900c      	str	r0, [sp, #48]	@ 0x30
 800fd70:	2800      	cmp	r0, #0
 800fd72:	f000 8232 	beq.w	80101da <tcp_write+0x5e2>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800fd76:	9b07      	ldr	r3, [sp, #28]
 800fd78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd7a:	440b      	add	r3, r1
 800fd7c:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800fd7e:	f7fc fcc9 	bl	800c714 <pbuf_clen>
 800fd82:	1943      	adds	r3, r0, r5
 800fd84:	b29d      	uxth	r5, r3
  u16_t extendlen = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	930d      	str	r3, [sp, #52]	@ 0x34
      pos += seglen;
 800fd8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd8c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fd8e:	1919      	adds	r1, r3, r4
 800fd90:	b28c      	uxth	r4, r1
 800fd92:	e003      	b.n	800fd9c <tcp_write+0x1a4>
  struct pbuf *concat_p = NULL;
 800fd94:	2300      	movs	r3, #0
 800fd96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fd98:	930c      	str	r3, [sp, #48]	@ 0x30
  u16_t extendlen = 0;
 800fd9a:	930d      	str	r3, [sp, #52]	@ 0x34
  while (pos < len) {
 800fd9c:	45a1      	cmp	r9, r4
 800fd9e:	f240 8083 	bls.w	800fea8 <tcp_write+0x2b0>
 800fda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fda4:	2700      	movs	r7, #0
 800fda6:	f003 0301 	and.w	r3, r3, #1
 800fdaa:	46bb      	mov	fp, r7
 800fdac:	9308      	str	r3, [sp, #32]
 800fdae:	e03f      	b.n	800fe30 <tcp_write+0x238>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fdb0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	f040 80d2 	bne.w	800ff5e <tcp_write+0x366>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800fdba:	2201      	movs	r2, #1
 800fdbc:	4651      	mov	r1, sl
 800fdbe:	2036      	movs	r0, #54	@ 0x36
 800fdc0:	f7fc fbaa 	bl	800c518 <pbuf_alloc>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	f000 80f1 	beq.w	800ffac <tcp_write+0x3b4>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800fdca:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fdcc:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800fdce:	9006      	str	r0, [sp, #24]
 800fdd0:	4422      	add	r2, r4
 800fdd2:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fdd4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fdd8:	2036      	movs	r0, #54	@ 0x36
 800fdda:	f7fc fb9d 	bl	800c518 <pbuf_alloc>
 800fdde:	9b06      	ldr	r3, [sp, #24]
 800fde0:	4606      	mov	r6, r0
 800fde2:	2800      	cmp	r0, #0
 800fde4:	f000 814d 	beq.w	8010082 <tcp_write+0x48a>
      pbuf_cat(p/*header*/, p2/*data*/);
 800fde8:	4619      	mov	r1, r3
 800fdea:	f7fc fcbb 	bl	800c764 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800fdee:	4630      	mov	r0, r6
 800fdf0:	f7fc fc90 	bl	800c714 <pbuf_clen>
 800fdf4:	4428      	add	r0, r5
 800fdf6:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fdf8:	2d10      	cmp	r5, #16
 800fdfa:	d849      	bhi.n	800fe90 <tcp_write+0x298>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fdfc:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 800fe00:	2200      	movs	r2, #0
 800fe02:	4631      	mov	r1, r6
 800fe04:	4640      	mov	r0, r8
 800fe06:	4423      	add	r3, r4
 800fe08:	9200      	str	r2, [sp, #0]
 800fe0a:	f7ff fdd5 	bl	800f9b8 <tcp_create_segment>
 800fe0e:	4606      	mov	r6, r0
 800fe10:	2800      	cmp	r0, #0
 800fe12:	f000 80cb 	beq.w	800ffac <tcp_write+0x3b4>
    if (queue == NULL) {
 800fe16:	f1bb 0f00 	cmp.w	fp, #0
 800fe1a:	d03e      	beq.n	800fe9a <tcp_write+0x2a2>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fe1c:	2f00      	cmp	r7, #0
 800fe1e:	f000 80a6 	beq.w	800ff6e <tcp_write+0x376>
    pos += seglen;
 800fe22:	44a2      	add	sl, r4
      prev_seg->next = seg;
 800fe24:	603e      	str	r6, [r7, #0]
    pos += seglen;
 800fe26:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800fe2a:	45a1      	cmp	r9, r4
 800fe2c:	d93b      	bls.n	800fea6 <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fe2e:	4637      	mov	r7, r6
    u16_t left = len - pos;
 800fe30:	eba9 0a04 	sub.w	sl, r9, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800fe34:	9b05      	ldr	r3, [sp, #20]
 800fe36:	fa1f fa8a 	uxth.w	sl, sl
 800fe3a:	459a      	cmp	sl, r3
 800fe3c:	bf28      	it	cs
 800fe3e:	469a      	movcs	sl, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fe40:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800fe42:	fa1f fa8a 	uxth.w	sl, sl
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d0b2      	beq.n	800fdb0 <tcp_write+0x1b8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800fe4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe4c:	4651      	mov	r1, sl
 800fe4e:	9a05      	ldr	r2, [sp, #20]
 800fe50:	2036      	movs	r0, #54	@ 0x36
 800fe52:	e9cd 8300 	strd	r8, r3, [sp]
 800fe56:	fabb f38b 	clz	r3, fp
 800fe5a:	095b      	lsrs	r3, r3, #5
 800fe5c:	9302      	str	r3, [sp, #8]
 800fe5e:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800fe62:	f7ff fd53 	bl	800f90c <tcp_pbuf_prealloc>
 800fe66:	4606      	mov	r6, r0
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	f000 809f 	beq.w	800ffac <tcp_write+0x3b4>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fe6e:	8943      	ldrh	r3, [r0, #10]
 800fe70:	4553      	cmp	r3, sl
 800fe72:	f0c0 8084 	bcc.w	800ff7e <tcp_write+0x386>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800fe76:	9b07      	ldr	r3, [sp, #28]
 800fe78:	4652      	mov	r2, sl
 800fe7a:	6870      	ldr	r0, [r6, #4]
 800fe7c:	1919      	adds	r1, r3, r4
 800fe7e:	f003 f9bc 	bl	80131fa <memcpy>
    queuelen += pbuf_clen(p);
 800fe82:	4630      	mov	r0, r6
 800fe84:	f7fc fc46 	bl	800c714 <pbuf_clen>
 800fe88:	4428      	add	r0, r5
 800fe8a:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fe8c:	2d10      	cmp	r5, #16
 800fe8e:	d9b5      	bls.n	800fdfc <tcp_write+0x204>
      pbuf_free(p);
 800fe90:	4630      	mov	r0, r6
 800fe92:	465f      	mov	r7, fp
 800fe94:	f7fc fad0 	bl	800c438 <pbuf_free>
      goto memerr;
 800fe98:	e089      	b.n	800ffae <tcp_write+0x3b6>
    pos += seglen;
 800fe9a:	44a2      	add	sl, r4
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fe9c:	4683      	mov	fp, r0
    pos += seglen;
 800fe9e:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800fea2:	45a1      	cmp	r9, r4
 800fea4:	d8c3      	bhi.n	800fe2e <tcp_write+0x236>
 800fea6:	465f      	mov	r7, fp
  if (oversize_used > 0) {
 800fea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  pcb->unsent_oversize = oversize;
 800feaa:	f8bd a03e 	ldrh.w	sl, [sp, #62]	@ 0x3e
  if (oversize_used > 0) {
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 80ec 	beq.w	801008c <tcp_write+0x494>
    for (p = last_unsent->p; p; p = p->next) {
 800feb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800feb6:	685c      	ldr	r4, [r3, #4]
 800feb8:	b1d4      	cbz	r4, 800fef0 <tcp_write+0x2f8>
      p->tot_len += oversize_used;
 800feba:	8923      	ldrh	r3, [r4, #8]
 800febc:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
      if (p->next == NULL) {
 800fec0:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800fec2:	445b      	add	r3, fp
 800fec4:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800fec6:	b131      	cbz	r1, 800fed6 <tcp_write+0x2de>
      pos += seglen;
 800fec8:	460c      	mov	r4, r1
      p->tot_len += oversize_used;
 800feca:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800fecc:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800fece:	445b      	add	r3, fp
 800fed0:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800fed2:	2900      	cmp	r1, #0
 800fed4:	d1f8      	bne.n	800fec8 <tcp_write+0x2d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800fed6:	8963      	ldrh	r3, [r4, #10]
 800fed8:	465a      	mov	r2, fp
 800feda:	6860      	ldr	r0, [r4, #4]
 800fedc:	9907      	ldr	r1, [sp, #28]
 800fede:	4418      	add	r0, r3
 800fee0:	f003 f98b 	bl	80131fa <memcpy>
        p->len += oversize_used;
 800fee4:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800fee6:	6821      	ldr	r1, [r4, #0]
        p->len += oversize_used;
 800fee8:	445b      	add	r3, fp
 800feea:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800feec:	2900      	cmp	r1, #0
 800feee:	d1eb      	bne.n	800fec8 <tcp_write+0x2d0>
    last_unsent->len += oversize_used;
 800fef0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fef2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fef4:	8913      	ldrh	r3, [r2, #8]
 800fef6:	4419      	add	r1, r3
  if (concat_p != NULL) {
 800fef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    last_unsent->len += oversize_used;
 800fefa:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800fefc:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 810a 	beq.w	801011a <tcp_write+0x522>
    pbuf_cat(last_unsent->p, concat_p);
 800ff06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ff08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ff0c:	6860      	ldr	r0, [r4, #4]
 800ff0e:	4651      	mov	r1, sl
 800ff10:	f7fc fc28 	bl	800c764 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ff14:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 800ff18:	8923      	ldrh	r3, [r4, #8]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800ff1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff20:	601f      	str	r7, [r3, #0]
  pcb->snd_lbb += len;
 800ff22:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_queuelen = queuelen;
 800ff26:	f8a8 5066 	strh.w	r5, [r8, #102]	@ 0x66
  pcb->snd_lbb += len;
 800ff2a:	444b      	add	r3, r9
 800ff2c:	f8c8 305c 	str.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800ff30:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800ff34:	eba3 0309 	sub.w	r3, r3, r9
 800ff38:	f8a8 3064 	strh.w	r3, [r8, #100]	@ 0x64
  if (pcb->snd_queuelen != 0) {
 800ff3c:	b125      	cbz	r5, 800ff48 <tcp_write+0x350>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ff3e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f000 80bb 	beq.w	80100be <tcp_write+0x4c6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ff48:	b12e      	cbz	r6, 800ff56 <tcp_write+0x35e>
 800ff4a:	68f3      	ldr	r3, [r6, #12]
 800ff4c:	b11b      	cbz	r3, 800ff56 <tcp_write+0x35e>
 800ff4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff50:	0792      	lsls	r2, r2, #30
 800ff52:	f140 80ac 	bpl.w	80100ae <tcp_write+0x4b6>
  return ERR_OK;
 800ff56:	2000      	movs	r0, #0
}
 800ff58:	b011      	add	sp, #68	@ 0x44
 800ff5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ff5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ff90 <tcp_write+0x398>)
 800ff60:	f240 2271 	movw	r2, #625	@ 0x271
 800ff64:	490e      	ldr	r1, [pc, #56]	@ (800ffa0 <tcp_write+0x3a8>)
 800ff66:	480c      	ldr	r0, [pc, #48]	@ (800ff98 <tcp_write+0x3a0>)
 800ff68:	f002 ffc2 	bl	8012ef0 <iprintf>
 800ff6c:	e725      	b.n	800fdba <tcp_write+0x1c2>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ff6e:	4b08      	ldr	r3, [pc, #32]	@ (800ff90 <tcp_write+0x398>)
 800ff70:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ff74:	490b      	ldr	r1, [pc, #44]	@ (800ffa4 <tcp_write+0x3ac>)
 800ff76:	4808      	ldr	r0, [pc, #32]	@ (800ff98 <tcp_write+0x3a0>)
 800ff78:	f002 ffba 	bl	8012ef0 <iprintf>
 800ff7c:	e751      	b.n	800fe22 <tcp_write+0x22a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ff7e:	4b04      	ldr	r3, [pc, #16]	@ (800ff90 <tcp_write+0x398>)
 800ff80:	f240 2266 	movw	r2, #614	@ 0x266
 800ff84:	4908      	ldr	r1, [pc, #32]	@ (800ffa8 <tcp_write+0x3b0>)
 800ff86:	4804      	ldr	r0, [pc, #16]	@ (800ff98 <tcp_write+0x3a0>)
 800ff88:	f002 ffb2 	bl	8012ef0 <iprintf>
 800ff8c:	e773      	b.n	800fe76 <tcp_write+0x27e>
 800ff8e:	bf00      	nop
 800ff90:	08016490 	.word	0x08016490
 800ff94:	080166cc 	.word	0x080166cc
 800ff98:	08014150 	.word	0x08014150
 800ff9c:	08016660 	.word	0x08016660
 800ffa0:	08016788 	.word	0x08016788
 800ffa4:	08016798 	.word	0x08016798
 800ffa8:	08016748 	.word	0x08016748
 800ffac:	465f      	mov	r7, fp
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ffae:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800ffb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffb6:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800ffba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffbc:	b113      	cbz	r3, 800ffc4 <tcp_write+0x3cc>
    pbuf_free(concat_p);
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fc fa3a 	bl	800c438 <pbuf_free>
  if (queue != NULL) {
 800ffc4:	b117      	cbz	r7, 800ffcc <tcp_write+0x3d4>
    tcp_segs_free(queue);
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	f7fd f822 	bl	800d010 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800ffcc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	@ 0x66
 800ffd0:	b923      	cbnz	r3, 800ffdc <tcp_write+0x3e4>
  return ERR_MEM;
 800ffd2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ffd6:	b011      	add	sp, #68	@ 0x44
 800ffd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ffdc:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d1f6      	bne.n	800ffd2 <tcp_write+0x3da>
 800ffe4:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1f2      	bne.n	800ffd2 <tcp_write+0x3da>
 800ffec:	4b7e      	ldr	r3, [pc, #504]	@ (80101e8 <tcp_write+0x5f0>)
 800ffee:	f240 3227 	movw	r2, #807	@ 0x327
 800fff2:	497e      	ldr	r1, [pc, #504]	@ (80101ec <tcp_write+0x5f4>)
 800fff4:	487e      	ldr	r0, [pc, #504]	@ (80101f0 <tcp_write+0x5f8>)
 800fff6:	f002 ff7b 	bl	8012ef0 <iprintf>
 800fffa:	e7ea      	b.n	800ffd2 <tcp_write+0x3da>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800fffc:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 8010000:	2b00      	cmp	r3, #0
 8010002:	f47f ae79 	bne.w	800fcf8 <tcp_write+0x100>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010006:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
 801000a:	bb43      	cbnz	r3, 801005e <tcp_write+0x466>
  while (pos < len) {
 801000c:	f1b9 0f00 	cmp.w	r9, #0
 8010010:	f000 80c8 	beq.w	80101a4 <tcp_write+0x5ac>
 8010014:	2300      	movs	r3, #0
 8010016:	461c      	mov	r4, r3
 8010018:	930d      	str	r3, [sp, #52]	@ 0x34
 801001a:	930a      	str	r3, [sp, #40]	@ 0x28
 801001c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8010020:	e6bf      	b.n	800fda2 <tcp_write+0x1aa>
  struct pbuf *concat_p = NULL;
 8010022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010024:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010026:	930c      	str	r3, [sp, #48]	@ 0x30
 8010028:	e6bb      	b.n	800fda2 <tcp_write+0x1aa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801002a:	2f00      	cmp	r7, #0
 801002c:	f47f ae25 	bne.w	800fc7a <tcp_write+0x82>
 8010030:	4b6d      	ldr	r3, [pc, #436]	@ (80101e8 <tcp_write+0x5f0>)
 8010032:	f240 1255 	movw	r2, #341	@ 0x155
 8010036:	496f      	ldr	r1, [pc, #444]	@ (80101f4 <tcp_write+0x5fc>)
 8010038:	486d      	ldr	r0, [pc, #436]	@ (80101f0 <tcp_write+0x5f8>)
 801003a:	f002 ff59 	bl	8012ef0 <iprintf>
  if (pcb->unsent != NULL) {
 801003e:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 8010042:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 8010046:	2f00      	cmp	r7, #0
 8010048:	f47f ae17 	bne.w	800fc7a <tcp_write+0x82>
 801004c:	e7db      	b.n	8010006 <tcp_write+0x40e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801004e:	4b66      	ldr	r3, [pc, #408]	@ (80101e8 <tcp_write+0x5f0>)
 8010050:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8010054:	4968      	ldr	r1, [pc, #416]	@ (80101f8 <tcp_write+0x600>)
 8010056:	4866      	ldr	r0, [pc, #408]	@ (80101f0 <tcp_write+0x5f8>)
 8010058:	f002 ff4a 	bl	8012ef0 <iprintf>
 801005c:	e62c      	b.n	800fcb8 <tcp_write+0xc0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801005e:	4b62      	ldr	r3, [pc, #392]	@ (80101e8 <tcp_write+0x5f0>)
 8010060:	f240 224a 	movw	r2, #586	@ 0x24a
 8010064:	4965      	ldr	r1, [pc, #404]	@ (80101fc <tcp_write+0x604>)
 8010066:	4862      	ldr	r0, [pc, #392]	@ (80101f0 <tcp_write+0x5f8>)
 8010068:	f002 ff42 	bl	8012ef0 <iprintf>
 801006c:	e7ce      	b.n	801000c <tcp_write+0x414>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801006e:	4b5e      	ldr	r3, [pc, #376]	@ (80101e8 <tcp_write+0x5f0>)
 8010070:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010074:	4962      	ldr	r1, [pc, #392]	@ (8010200 <tcp_write+0x608>)
 8010076:	485e      	ldr	r0, [pc, #376]	@ (80101f0 <tcp_write+0x5f8>)
 8010078:	f002 ff3a 	bl	8012ef0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801007c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801007e:	891b      	ldrh	r3, [r3, #8]
 8010080:	e60a      	b.n	800fc98 <tcp_write+0xa0>
        pbuf_free(p2);
 8010082:	4618      	mov	r0, r3
 8010084:	465f      	mov	r7, fp
 8010086:	f7fc f9d7 	bl	800c438 <pbuf_free>
        goto memerr;
 801008a:	e790      	b.n	800ffae <tcp_write+0x3b6>
  if (concat_p != NULL) {
 801008c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  pcb->unsent_oversize = oversize;
 801008e:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 8010092:	2b00      	cmp	r3, #0
 8010094:	d061      	beq.n	801015a <tcp_write+0x562>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010098:	2b00      	cmp	r3, #0
 801009a:	f47f af34 	bne.w	800ff06 <tcp_write+0x30e>
 801009e:	4b52      	ldr	r3, [pc, #328]	@ (80101e8 <tcp_write+0x5f0>)
 80100a0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80100a4:	4957      	ldr	r1, [pc, #348]	@ (8010204 <tcp_write+0x60c>)
 80100a6:	4852      	ldr	r0, [pc, #328]	@ (80101f0 <tcp_write+0x5f8>)
 80100a8:	f002 ff22 	bl	8012ef0 <iprintf>
 80100ac:	e72b      	b.n	800ff06 <tcp_write+0x30e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80100ae:	899c      	ldrh	r4, [r3, #12]
 80100b0:	2008      	movs	r0, #8
 80100b2:	f7fb faed 	bl	800b690 <lwip_htons>
 80100b6:	68f3      	ldr	r3, [r6, #12]
 80100b8:	4304      	orrs	r4, r0
 80100ba:	819c      	strh	r4, [r3, #12]
 80100bc:	e74b      	b.n	800ff56 <tcp_write+0x35e>
    LWIP_ASSERT("tcp_write: valid queue length",
 80100be:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f47f af40 	bne.w	800ff48 <tcp_write+0x350>
 80100c8:	4b47      	ldr	r3, [pc, #284]	@ (80101e8 <tcp_write+0x5f0>)
 80100ca:	f240 3212 	movw	r2, #786	@ 0x312
 80100ce:	4947      	ldr	r1, [pc, #284]	@ (80101ec <tcp_write+0x5f4>)
 80100d0:	4847      	ldr	r0, [pc, #284]	@ (80101f0 <tcp_write+0x5f8>)
 80100d2:	f002 ff0d 	bl	8012ef0 <iprintf>
 80100d6:	e737      	b.n	800ff48 <tcp_write+0x350>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80100d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d15a      	bne.n	8010194 <tcp_write+0x59c>
          extendlen = seglen;
 80100de:	940d      	str	r4, [sp, #52]	@ 0x34
 80100e0:	e653      	b.n	800fd8a <tcp_write+0x192>
    return ERR_CONN;
 80100e2:	f06f 000a 	mvn.w	r0, #10
 80100e6:	e737      	b.n	800ff58 <tcp_write+0x360>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80100e8:	e9cd 8300 	strd	r8, r3, [sp]
 80100ec:	2301      	movs	r3, #1
 80100ee:	465a      	mov	r2, fp
 80100f0:	4621      	mov	r1, r4
 80100f2:	2000      	movs	r0, #0
 80100f4:	9302      	str	r3, [sp, #8]
 80100f6:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 80100fa:	f7ff fc07 	bl	800f90c <tcp_pbuf_prealloc>
 80100fe:	4603      	mov	r3, r0
 8010100:	900c      	str	r0, [sp, #48]	@ 0x30
 8010102:	2800      	cmp	r0, #0
 8010104:	d069      	beq.n	80101da <tcp_write+0x5e2>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010106:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010108:	461e      	mov	r6, r3
 801010a:	9907      	ldr	r1, [sp, #28]
 801010c:	4622      	mov	r2, r4
 801010e:	4401      	add	r1, r0
 8010110:	6858      	ldr	r0, [r3, #4]
 8010112:	f003 f872 	bl	80131fa <memcpy>
        queuelen += pbuf_clen(concat_p);
 8010116:	4630      	mov	r0, r6
 8010118:	e631      	b.n	800fd7e <tcp_write+0x186>
  } else if (extendlen > 0) {
 801011a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801011c:	2b00      	cmp	r3, #0
 801011e:	f43f aefe 	beq.w	800ff1e <tcp_write+0x326>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010122:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010124:	6859      	ldr	r1, [r3, #4]
 8010126:	b1e9      	cbz	r1, 8010164 <tcp_write+0x56c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010128:	680a      	ldr	r2, [r1, #0]
 801012a:	2a00      	cmp	r2, #0
 801012c:	d053      	beq.n	80101d6 <tcp_write+0x5de>
 801012e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8010130:	e000      	b.n	8010134 <tcp_write+0x53c>
 8010132:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 8010134:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010136:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 8010138:	4423      	add	r3, r4
 801013a:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801013c:	4611      	mov	r1, r2
 801013e:	2800      	cmp	r0, #0
 8010140:	d1f7      	bne.n	8010132 <tcp_write+0x53a>
    p->tot_len += extendlen;
 8010142:	8913      	ldrh	r3, [r2, #8]
 8010144:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010146:	440b      	add	r3, r1
 8010148:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801014a:	8953      	ldrh	r3, [r2, #10]
 801014c:	440b      	add	r3, r1
 801014e:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 8010150:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010152:	8913      	ldrh	r3, [r2, #8]
 8010154:	440b      	add	r3, r1
 8010156:	8113      	strh	r3, [r2, #8]
  if (last_unsent == NULL) {
 8010158:	e6e1      	b.n	800ff1e <tcp_write+0x326>
  } else if (extendlen > 0) {
 801015a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801015c:	b19b      	cbz	r3, 8010186 <tcp_write+0x58e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801015e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1de      	bne.n	8010122 <tcp_write+0x52a>
 8010164:	4b20      	ldr	r3, [pc, #128]	@ (80101e8 <tcp_write+0x5f0>)
 8010166:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801016a:	4927      	ldr	r1, [pc, #156]	@ (8010208 <tcp_write+0x610>)
 801016c:	4820      	ldr	r0, [pc, #128]	@ (80101f0 <tcp_write+0x5f8>)
 801016e:	f002 febf 	bl	8012ef0 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010174:	6859      	ldr	r1, [r3, #4]
 8010176:	e7d7      	b.n	8010128 <tcp_write+0x530>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010178:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 801017c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010180:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (err != ERR_OK) {
 8010184:	e725      	b.n	800ffd2 <tcp_write+0x3da>
  if (last_unsent == NULL) {
 8010186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010188:	2b00      	cmp	r3, #0
 801018a:	f47f aec8 	bne.w	800ff1e <tcp_write+0x326>
    pcb->unsent = queue;
 801018e:	f8c8 706c 	str.w	r7, [r8, #108]	@ 0x6c
 8010192:	e6c6      	b.n	800ff22 <tcp_write+0x32a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010194:	4b14      	ldr	r3, [pc, #80]	@ (80101e8 <tcp_write+0x5f0>)
 8010196:	f240 2231 	movw	r2, #561	@ 0x231
 801019a:	491c      	ldr	r1, [pc, #112]	@ (801020c <tcp_write+0x614>)
 801019c:	4814      	ldr	r0, [pc, #80]	@ (80101f0 <tcp_write+0x5f8>)
 801019e:	f002 fea7 	bl	8012ef0 <iprintf>
 80101a2:	e79c      	b.n	80100de <tcp_write+0x4e6>
  pcb->unsent_oversize = oversize;
 80101a4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 80101a8:	464f      	mov	r7, r9
 80101aa:	464e      	mov	r6, r9
 80101ac:	f8a8 3068 	strh.w	r3, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 80101b0:	e7ed      	b.n	801018e <tcp_write+0x596>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80101b2:	4b0d      	ldr	r3, [pc, #52]	@ (80101e8 <tcp_write+0x5f0>)
 80101b4:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80101b8:	4915      	ldr	r1, [pc, #84]	@ (8010210 <tcp_write+0x618>)
 80101ba:	480d      	ldr	r0, [pc, #52]	@ (80101f0 <tcp_write+0x5f8>)
 80101bc:	f002 fe98 	bl	8012ef0 <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80101c0:	f06f 000f 	mvn.w	r0, #15
 80101c4:	e6c8      	b.n	800ff58 <tcp_write+0x360>
 80101c6:	4b08      	ldr	r3, [pc, #32]	@ (80101e8 <tcp_write+0x5f0>)
 80101c8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80101cc:	4911      	ldr	r1, [pc, #68]	@ (8010214 <tcp_write+0x61c>)
 80101ce:	4808      	ldr	r0, [pc, #32]	@ (80101f0 <tcp_write+0x5f8>)
 80101d0:	f002 fe8e 	bl	8012ef0 <iprintf>
 80101d4:	e7f4      	b.n	80101c0 <tcp_write+0x5c8>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80101d6:	460a      	mov	r2, r1
 80101d8:	e7b3      	b.n	8010142 <tcp_write+0x54a>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101da:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80101de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101e2:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 80101e6:	e6f1      	b.n	800ffcc <tcp_write+0x3d4>
 80101e8:	08016490 	.word	0x08016490
 80101ec:	0801681c 	.word	0x0801681c
 80101f0:	08014150 	.word	0x08014150
 80101f4:	08016624 	.word	0x08016624
 80101f8:	080166ac 	.word	0x080166ac
 80101fc:	08016718 	.word	0x08016718
 8010200:	08016694 	.word	0x08016694
 8010204:	080167ac 	.word	0x080167ac
 8010208:	080167e4 	.word	0x080167e4
 801020c:	080166ec 	.word	0x080166ec
 8010210:	080165f0 	.word	0x080165f0
 8010214:	080165d8 	.word	0x080165d8

08010218 <tcp_split_unsent_seg>:
{
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801021c:	4606      	mov	r6, r0
{
 801021e:	b083      	sub	sp, #12
 8010220:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010222:	2800      	cmp	r0, #0
 8010224:	f000 80ad 	beq.w	8010382 <tcp_split_unsent_seg+0x16a>
  useg = pcb->unsent;
 8010228:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 801022a:	2d00      	cmp	r5, #0
 801022c:	f000 80b4 	beq.w	8010398 <tcp_split_unsent_seg+0x180>
  if (split == 0) {
 8010230:	2c00      	cmp	r4, #0
 8010232:	f000 80b4 	beq.w	801039e <tcp_split_unsent_seg+0x186>
  if (useg->len <= split) {
 8010236:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801023a:	45a0      	cmp	r8, r4
 801023c:	d97e      	bls.n	801033c <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801023e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8010240:	42a3      	cmp	r3, r4
 8010242:	f0c0 8084 	bcc.w	801034e <tcp_split_unsent_seg+0x136>
  optflags = useg->flags;
 8010246:	f895 a00a 	ldrb.w	sl, [r5, #10]
  remainder = useg->len - split;
 801024a:	eba8 0904 	sub.w	r9, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801024e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010252:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010254:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 8010258:	fa1f f989 	uxth.w	r9, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801025c:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010260:	eb0b 0109 	add.w	r1, fp, r9
 8010264:	b289      	uxth	r1, r1
 8010266:	f7fc f957 	bl	800c518 <pbuf_alloc>
  if (p == NULL) {
 801026a:	4607      	mov	r7, r0
 801026c:	2800      	cmp	r0, #0
 801026e:	f000 8093 	beq.w	8010398 <tcp_split_unsent_seg+0x180>
  offset = useg->p->tot_len - useg->len + split;
 8010272:	6868      	ldr	r0, [r5, #4]
 8010274:	892a      	ldrh	r2, [r5, #8]
 8010276:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010278:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801027a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801027c:	464a      	mov	r2, r9
 801027e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 8010280:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010282:	b29b      	uxth	r3, r3
 8010284:	f7fc fb7a 	bl	800c97c <pbuf_copy_partial>
 8010288:	4548      	cmp	r0, r9
 801028a:	f040 8082 	bne.w	8010392 <tcp_split_unsent_seg+0x17a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801028e:	68eb      	ldr	r3, [r5, #12]
 8010290:	8998      	ldrh	r0, [r3, #12]
 8010292:	f7fb f9fd 	bl	800b690 <lwip_htons>
  if (split_flags & TCP_PSH) {
 8010296:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801029a:	fa5f f980 	uxtb.w	r9, r0
  if (split_flags & TCP_PSH) {
 801029e:	d151      	bne.n	8010344 <tcp_split_unsent_seg+0x12c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80102a0:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
  if (split_flags & TCP_FIN) {
 80102a4:	f019 0f01 	tst.w	r9, #1
 80102a8:	d003      	beq.n	80102b2 <tcp_split_unsent_seg+0x9a>
    split_flags &= ~TCP_FIN;
 80102aa:	f009 09fe 	and.w	r9, r9, #254	@ 0xfe
    remainder_flags |= TCP_FIN;
 80102ae:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80102b2:	68eb      	ldr	r3, [r5, #12]
 80102b4:	6858      	ldr	r0, [r3, #4]
 80102b6:	f7fb f9ef 	bl	800b698 <lwip_htonl>
 80102ba:	f8cd a000 	str.w	sl, [sp]
 80102be:	1823      	adds	r3, r4, r0
 80102c0:	465a      	mov	r2, fp
 80102c2:	4639      	mov	r1, r7
 80102c4:	4630      	mov	r0, r6
 80102c6:	f7ff fb77 	bl	800f9b8 <tcp_create_segment>
  if (seg == NULL) {
 80102ca:	4682      	mov	sl, r0
 80102cc:	2800      	cmp	r0, #0
 80102ce:	d060      	beq.n	8010392 <tcp_split_unsent_seg+0x17a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80102d0:	6868      	ldr	r0, [r5, #4]
 80102d2:	eba4 0408 	sub.w	r4, r4, r8
 80102d6:	f7fc fa1d 	bl	800c714 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80102da:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80102dc:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 80102e0:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80102e2:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80102e4:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80102e6:	4610      	mov	r0, r2
 80102e8:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80102ea:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80102ee:	b289      	uxth	r1, r1
 80102f0:	f7fc f9b4 	bl	800c65c <pbuf_realloc>
  useg->len -= remainder;
 80102f4:	892b      	ldrh	r3, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80102f6:	4648      	mov	r0, r9
  useg->len -= remainder;
 80102f8:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80102fa:	68eb      	ldr	r3, [r5, #12]
  useg->len -= remainder;
 80102fc:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80102fe:	899c      	ldrh	r4, [r3, #12]
 8010300:	f7fb f9c6 	bl	800b690 <lwip_htons>
 8010304:	68eb      	ldr	r3, [r5, #12]
 8010306:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010308:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801030a:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801030c:	f7fc fa02 	bl	800c714 <pbuf_clen>
 8010310:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 8010314:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010316:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801031a:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801031e:	f7fc f9f9 	bl	800c714 <pbuf_clen>
 8010322:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 8010326:	4418      	add	r0, r3
  seg->next = useg->next;
 8010328:	682b      	ldr	r3, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801032a:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 801032e:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 8010332:	f8c5 a000 	str.w	sl, [r5]
  if (seg->next == NULL) {
 8010336:	f8da 3000 	ldr.w	r3, [sl]
 801033a:	b1fb      	cbz	r3, 801037c <tcp_split_unsent_seg+0x164>
    return ERR_OK;
 801033c:	2000      	movs	r0, #0
}
 801033e:	b003      	add	sp, #12
 8010340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    split_flags &= ~TCP_PSH;
 8010344:	f009 0937 	and.w	r9, r9, #55	@ 0x37
    remainder_flags |= TCP_PSH;
 8010348:	f04f 0b08 	mov.w	fp, #8
 801034c:	e7aa      	b.n	80102a4 <tcp_split_unsent_seg+0x8c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801034e:	4b19      	ldr	r3, [pc, #100]	@ (80103b4 <tcp_split_unsent_seg+0x19c>)
 8010350:	f240 325b 	movw	r2, #859	@ 0x35b
 8010354:	4918      	ldr	r1, [pc, #96]	@ (80103b8 <tcp_split_unsent_seg+0x1a0>)
 8010356:	4819      	ldr	r0, [pc, #100]	@ (80103bc <tcp_split_unsent_seg+0x1a4>)
 8010358:	f002 fdca 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801035c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8010360:	f1b8 0f00 	cmp.w	r8, #0
 8010364:	f47f af6f 	bne.w	8010246 <tcp_split_unsent_seg+0x2e>
 8010368:	4b12      	ldr	r3, [pc, #72]	@ (80103b4 <tcp_split_unsent_seg+0x19c>)
 801036a:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801036e:	4914      	ldr	r1, [pc, #80]	@ (80103c0 <tcp_split_unsent_seg+0x1a8>)
 8010370:	4812      	ldr	r0, [pc, #72]	@ (80103bc <tcp_split_unsent_seg+0x1a4>)
 8010372:	f002 fdbd 	bl	8012ef0 <iprintf>
  remainder = useg->len - split;
 8010376:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801037a:	e764      	b.n	8010246 <tcp_split_unsent_seg+0x2e>
    pcb->unsent_oversize = 0;
 801037c:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
 8010380:	e7dc      	b.n	801033c <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010382:	4b0c      	ldr	r3, [pc, #48]	@ (80103b4 <tcp_split_unsent_seg+0x19c>)
 8010384:	f240 324b 	movw	r2, #843	@ 0x34b
 8010388:	490e      	ldr	r1, [pc, #56]	@ (80103c4 <tcp_split_unsent_seg+0x1ac>)
 801038a:	480c      	ldr	r0, [pc, #48]	@ (80103bc <tcp_split_unsent_seg+0x1a4>)
 801038c:	f002 fdb0 	bl	8012ef0 <iprintf>
 8010390:	e74a      	b.n	8010228 <tcp_split_unsent_seg+0x10>
    pbuf_free(p);
 8010392:	4638      	mov	r0, r7
 8010394:	f7fc f850 	bl	800c438 <pbuf_free>
    return ERR_MEM;
 8010398:	f04f 30ff 	mov.w	r0, #4294967295
 801039c:	e7cf      	b.n	801033e <tcp_split_unsent_seg+0x126>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801039e:	4b05      	ldr	r3, [pc, #20]	@ (80103b4 <tcp_split_unsent_seg+0x19c>)
 80103a0:	f240 3253 	movw	r2, #851	@ 0x353
 80103a4:	4908      	ldr	r1, [pc, #32]	@ (80103c8 <tcp_split_unsent_seg+0x1b0>)
 80103a6:	4805      	ldr	r0, [pc, #20]	@ (80103bc <tcp_split_unsent_seg+0x1a4>)
 80103a8:	f002 fda2 	bl	8012ef0 <iprintf>
    return ERR_VAL;
 80103ac:	f06f 0005 	mvn.w	r0, #5
 80103b0:	e7c5      	b.n	801033e <tcp_split_unsent_seg+0x126>
 80103b2:	bf00      	nop
 80103b4:	08016490 	.word	0x08016490
 80103b8:	08016884 	.word	0x08016884
 80103bc:	08014150 	.word	0x08014150
 80103c0:	08016894 	.word	0x08016894
 80103c4:	0801683c 	.word	0x0801683c
 80103c8:	08016860 	.word	0x08016860

080103cc <tcp_enqueue_flags>:
{
 80103cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80103d0:	f011 0703 	ands.w	r7, r1, #3
{
 80103d4:	b083      	sub	sp, #12
 80103d6:	460d      	mov	r5, r1
 80103d8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80103da:	d053      	beq.n	8010484 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80103dc:	2c00      	cmp	r4, #0
 80103de:	d05a      	beq.n	8010496 <tcp_enqueue_flags+0xca>
  if (flags & TCP_SYN) {
 80103e0:	f3c5 0840 	ubfx	r8, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80103e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80103e8:	2036      	movs	r0, #54	@ 0x36
 80103ea:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80103ee:	4649      	mov	r1, r9
 80103f0:	f7fc f892 	bl	800c518 <pbuf_alloc>
 80103f4:	4606      	mov	r6, r0
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d071      	beq.n	80104de <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80103fa:	8943      	ldrh	r3, [r0, #10]
 80103fc:	454b      	cmp	r3, r9
 80103fe:	d352      	bcc.n	80104a6 <tcp_enqueue_flags+0xda>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010400:	4631      	mov	r1, r6
 8010402:	f8cd 8000 	str.w	r8, [sp]
 8010406:	462a      	mov	r2, r5
 8010408:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801040a:	4620      	mov	r0, r4
 801040c:	f7ff fad4 	bl	800f9b8 <tcp_create_segment>
 8010410:	4606      	mov	r6, r0
 8010412:	2800      	cmp	r0, #0
 8010414:	d063      	beq.n	80104de <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010416:	68c3      	ldr	r3, [r0, #12]
 8010418:	079a      	lsls	r2, r3, #30
 801041a:	d158      	bne.n	80104ce <tcp_enqueue_flags+0x102>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801041c:	8933      	ldrh	r3, [r6, #8]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d149      	bne.n	80104b6 <tcp_enqueue_flags+0xea>
  if (pcb->unsent == NULL) {
 8010422:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010424:	2b00      	cmp	r3, #0
 8010426:	d050      	beq.n	80104ca <tcp_enqueue_flags+0xfe>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010428:	461a      	mov	r2, r3
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d1fb      	bne.n	8010428 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 8010430:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8010432:	2300      	movs	r3, #0
 8010434:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010438:	b117      	cbz	r7, 8010440 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 801043a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801043c:	3301      	adds	r3, #1
 801043e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 8010440:	07eb      	lsls	r3, r5, #31
 8010442:	d503      	bpl.n	801044c <tcp_enqueue_flags+0x80>
    tcp_set_flags(pcb, TF_FIN);
 8010444:	8b63      	ldrh	r3, [r4, #26]
 8010446:	f043 0320 	orr.w	r3, r3, #32
 801044a:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801044c:	6870      	ldr	r0, [r6, #4]
 801044e:	f7fc f961 	bl	800c714 <pbuf_clen>
 8010452:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8010456:	4418      	add	r0, r3
 8010458:	b280      	uxth	r0, r0
 801045a:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 801045e:	b918      	cbnz	r0, 8010468 <tcp_enqueue_flags+0x9c>
  return ERR_OK;
 8010460:	2000      	movs	r0, #0
}
 8010462:	b003      	add	sp, #12
 8010464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010468:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1f8      	bne.n	8010460 <tcp_enqueue_flags+0x94>
 801046e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1f5      	bne.n	8010460 <tcp_enqueue_flags+0x94>
 8010474:	4b1d      	ldr	r3, [pc, #116]	@ (80104ec <tcp_enqueue_flags+0x120>)
 8010476:	f240 4265 	movw	r2, #1125	@ 0x465
 801047a:	491d      	ldr	r1, [pc, #116]	@ (80104f0 <tcp_enqueue_flags+0x124>)
 801047c:	481d      	ldr	r0, [pc, #116]	@ (80104f4 <tcp_enqueue_flags+0x128>)
 801047e:	f002 fd37 	bl	8012ef0 <iprintf>
 8010482:	e7ed      	b.n	8010460 <tcp_enqueue_flags+0x94>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010484:	4b19      	ldr	r3, [pc, #100]	@ (80104ec <tcp_enqueue_flags+0x120>)
 8010486:	f240 4211 	movw	r2, #1041	@ 0x411
 801048a:	491b      	ldr	r1, [pc, #108]	@ (80104f8 <tcp_enqueue_flags+0x12c>)
 801048c:	4819      	ldr	r0, [pc, #100]	@ (80104f4 <tcp_enqueue_flags+0x128>)
 801048e:	f002 fd2f 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010492:	2c00      	cmp	r4, #0
 8010494:	d1a4      	bne.n	80103e0 <tcp_enqueue_flags+0x14>
 8010496:	4b15      	ldr	r3, [pc, #84]	@ (80104ec <tcp_enqueue_flags+0x120>)
 8010498:	f240 4213 	movw	r2, #1043	@ 0x413
 801049c:	4917      	ldr	r1, [pc, #92]	@ (80104fc <tcp_enqueue_flags+0x130>)
 801049e:	4815      	ldr	r0, [pc, #84]	@ (80104f4 <tcp_enqueue_flags+0x128>)
 80104a0:	f002 fd26 	bl	8012ef0 <iprintf>
 80104a4:	e79c      	b.n	80103e0 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80104a6:	4b11      	ldr	r3, [pc, #68]	@ (80104ec <tcp_enqueue_flags+0x120>)
 80104a8:	f240 4239 	movw	r2, #1081	@ 0x439
 80104ac:	4914      	ldr	r1, [pc, #80]	@ (8010500 <tcp_enqueue_flags+0x134>)
 80104ae:	4811      	ldr	r0, [pc, #68]	@ (80104f4 <tcp_enqueue_flags+0x128>)
 80104b0:	f002 fd1e 	bl	8012ef0 <iprintf>
 80104b4:	e7a4      	b.n	8010400 <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80104b6:	4b0d      	ldr	r3, [pc, #52]	@ (80104ec <tcp_enqueue_flags+0x120>)
 80104b8:	f240 4243 	movw	r2, #1091	@ 0x443
 80104bc:	4911      	ldr	r1, [pc, #68]	@ (8010504 <tcp_enqueue_flags+0x138>)
 80104be:	480d      	ldr	r0, [pc, #52]	@ (80104f4 <tcp_enqueue_flags+0x128>)
 80104c0:	f002 fd16 	bl	8012ef0 <iprintf>
  if (pcb->unsent == NULL) {
 80104c4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1ae      	bne.n	8010428 <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 80104ca:	66e6      	str	r6, [r4, #108]	@ 0x6c
 80104cc:	e7b1      	b.n	8010432 <tcp_enqueue_flags+0x66>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80104ce:	4b07      	ldr	r3, [pc, #28]	@ (80104ec <tcp_enqueue_flags+0x120>)
 80104d0:	f240 4242 	movw	r2, #1090	@ 0x442
 80104d4:	490c      	ldr	r1, [pc, #48]	@ (8010508 <tcp_enqueue_flags+0x13c>)
 80104d6:	4807      	ldr	r0, [pc, #28]	@ (80104f4 <tcp_enqueue_flags+0x128>)
 80104d8:	f002 fd0a 	bl	8012ef0 <iprintf>
 80104dc:	e79e      	b.n	801041c <tcp_enqueue_flags+0x50>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104de:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 80104e0:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104e8:	8363      	strh	r3, [r4, #26]
 80104ea:	e7ba      	b.n	8010462 <tcp_enqueue_flags+0x96>
 80104ec:	08016490 	.word	0x08016490
 80104f0:	0801699c 	.word	0x0801699c
 80104f4:	08014150 	.word	0x08014150
 80104f8:	080168a4 	.word	0x080168a4
 80104fc:	080168fc 	.word	0x080168fc
 8010500:	0801691c 	.word	0x0801691c
 8010504:	08016970 	.word	0x08016970
 8010508:	08016958 	.word	0x08016958

0801050c <tcp_send_fin>:
{
 801050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801050e:	4606      	mov	r6, r0
 8010510:	b188      	cbz	r0, 8010536 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 8010512:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
 8010514:	b14c      	cbz	r4, 801052a <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010516:	4625      	mov	r5, r4
 8010518:	6824      	ldr	r4, [r4, #0]
 801051a:	2c00      	cmp	r4, #0
 801051c:	d1fb      	bne.n	8010516 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801051e:	68eb      	ldr	r3, [r5, #12]
 8010520:	8998      	ldrh	r0, [r3, #12]
 8010522:	f7fb f8b5 	bl	800b690 <lwip_htons>
 8010526:	0743      	lsls	r3, r0, #29
 8010528:	d00d      	beq.n	8010546 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801052a:	4630      	mov	r0, r6
 801052c:	2101      	movs	r1, #1
}
 801052e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010532:	f7ff bf4b 	b.w	80103cc <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010536:	4b0b      	ldr	r3, [pc, #44]	@ (8010564 <tcp_send_fin+0x58>)
 8010538:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801053c:	490a      	ldr	r1, [pc, #40]	@ (8010568 <tcp_send_fin+0x5c>)
 801053e:	480b      	ldr	r0, [pc, #44]	@ (801056c <tcp_send_fin+0x60>)
 8010540:	f002 fcd6 	bl	8012ef0 <iprintf>
 8010544:	e7e5      	b.n	8010512 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010546:	68eb      	ldr	r3, [r5, #12]
 8010548:	2001      	movs	r0, #1
 801054a:	899f      	ldrh	r7, [r3, #12]
 801054c:	f7fb f8a0 	bl	800b690 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8010550:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010552:	4307      	orrs	r7, r0
 8010554:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010556:	f043 0320 	orr.w	r3, r3, #32
}
 801055a:	4620      	mov	r0, r4
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801055c:	8197      	strh	r7, [r2, #12]
      tcp_set_flags(pcb, TF_FIN);
 801055e:	8373      	strh	r3, [r6, #26]
}
 8010560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010562:	bf00      	nop
 8010564:	08016490 	.word	0x08016490
 8010568:	080169c4 	.word	0x080169c4
 801056c:	08014150 	.word	0x08014150

08010570 <tcp_rexmit_rto_prepare>:
{
 8010570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010572:	4605      	mov	r5, r0
 8010574:	2800      	cmp	r0, #0
 8010576:	d031      	beq.n	80105dc <tcp_rexmit_rto_prepare+0x6c>
  if (pcb->unacked == NULL) {
 8010578:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 801057a:	b132      	cbz	r2, 801058a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801057c:	6813      	ldr	r3, [r2, #0]
 801057e:	4614      	mov	r4, r2
 8010580:	b153      	cbz	r3, 8010598 <tcp_rexmit_rto_prepare+0x28>
  if (seg->p->ref != 1) {
 8010582:	6863      	ldr	r3, [r4, #4]
 8010584:	7b9b      	ldrb	r3, [r3, #14]
 8010586:	2b01      	cmp	r3, #1
 8010588:	d002      	beq.n	8010590 <tcp_rexmit_rto_prepare+0x20>
    return ERR_VAL;
 801058a:	f06f 0005 	mvn.w	r0, #5
}
 801058e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010590:	6824      	ldr	r4, [r4, #0]
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d1f4      	bne.n	8010582 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 8010598:	6863      	ldr	r3, [r4, #4]
 801059a:	7b9b      	ldrb	r3, [r3, #14]
 801059c:	2b01      	cmp	r3, #1
 801059e:	d1f4      	bne.n	801058a <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 80105a0:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 80105a2:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 80105a4:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 80105a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
  seg->next = pcb->unsent;
 80105aa:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 80105ac:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80105ae:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 80105b0:	e9c5 271b 	strd	r2, r7, [r5, #108]	@ 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80105b4:	6858      	ldr	r0, [r3, #4]
 80105b6:	f7fb f86f 	bl	800b698 <lwip_htonl>
 80105ba:	68e3      	ldr	r3, [r4, #12]
 80105bc:	4606      	mov	r6, r0
 80105be:	8924      	ldrh	r4, [r4, #8]
 80105c0:	8998      	ldrh	r0, [r3, #12]
 80105c2:	f7fb f865 	bl	800b690 <lwip_htons>
 80105c6:	4603      	mov	r3, r0
 80105c8:	4426      	add	r6, r4
  return ERR_OK;
 80105ca:	4638      	mov	r0, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80105cc:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 80105d0:	636f      	str	r7, [r5, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80105d2:	bf18      	it	ne
 80105d4:	2301      	movne	r3, #1
 80105d6:	4433      	add	r3, r6
 80105d8:	64eb      	str	r3, [r5, #76]	@ 0x4c
}
 80105da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80105dc:	4b03      	ldr	r3, [pc, #12]	@ (80105ec <tcp_rexmit_rto_prepare+0x7c>)
 80105de:	f240 6263 	movw	r2, #1635	@ 0x663
 80105e2:	4903      	ldr	r1, [pc, #12]	@ (80105f0 <tcp_rexmit_rto_prepare+0x80>)
 80105e4:	4803      	ldr	r0, [pc, #12]	@ (80105f4 <tcp_rexmit_rto_prepare+0x84>)
 80105e6:	f002 fc83 	bl	8012ef0 <iprintf>
 80105ea:	e7c5      	b.n	8010578 <tcp_rexmit_rto_prepare+0x8>
 80105ec:	08016490 	.word	0x08016490
 80105f0:	080169e0 	.word	0x080169e0
 80105f4:	08014150 	.word	0x08014150

080105f8 <tcp_rexmit>:
{
 80105f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80105fa:	4607      	mov	r7, r0
 80105fc:	2800      	cmp	r0, #0
 80105fe:	d031      	beq.n	8010664 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 8010600:	6f3e      	ldr	r6, [r7, #112]	@ 0x70
 8010602:	b34e      	cbz	r6, 8010658 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 8010604:	6873      	ldr	r3, [r6, #4]
 8010606:	7b9b      	ldrb	r3, [r3, #14]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d125      	bne.n	8010658 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801060c:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801060e:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
  while (*cur_seg &&
 8010612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
  pcb->unacked = seg->next;
 8010614:	673a      	str	r2, [r7, #112]	@ 0x70
  while (*cur_seg &&
 8010616:	b91b      	cbnz	r3, 8010620 <tcp_rexmit+0x28>
 8010618:	e00f      	b.n	801063a <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801061a:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801061c:	682b      	ldr	r3, [r5, #0]
 801061e:	b163      	cbz	r3, 801063a <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	6858      	ldr	r0, [r3, #4]
 8010624:	f7fb f838 	bl	800b698 <lwip_htonl>
 8010628:	68f3      	ldr	r3, [r6, #12]
 801062a:	4604      	mov	r4, r0
 801062c:	6858      	ldr	r0, [r3, #4]
 801062e:	f7fb f833 	bl	800b698 <lwip_htonl>
 8010632:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8010634:	2c00      	cmp	r4, #0
 8010636:	dbf0      	blt.n	801061a <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 8010638:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801063a:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801063c:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801063e:	6833      	ldr	r3, [r6, #0]
 8010640:	b16b      	cbz	r3, 801065e <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 8010642:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8010646:	2bff      	cmp	r3, #255	@ 0xff
 8010648:	d002      	beq.n	8010650 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801064a:	3301      	adds	r3, #1
 801064c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  pcb->rttest = 0;
 8010650:	2300      	movs	r3, #0
  return ERR_OK;
 8010652:	4618      	mov	r0, r3
  pcb->rttest = 0;
 8010654:	637b      	str	r3, [r7, #52]	@ 0x34
}
 8010656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8010658:	f06f 0005 	mvn.w	r0, #5
}
 801065c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801065e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8010662:	e7ee      	b.n	8010642 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010664:	4b03      	ldr	r3, [pc, #12]	@ (8010674 <tcp_rexmit+0x7c>)
 8010666:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801066a:	4903      	ldr	r1, [pc, #12]	@ (8010678 <tcp_rexmit+0x80>)
 801066c:	4803      	ldr	r0, [pc, #12]	@ (801067c <tcp_rexmit+0x84>)
 801066e:	f002 fc3f 	bl	8012ef0 <iprintf>
 8010672:	e7c5      	b.n	8010600 <tcp_rexmit+0x8>
 8010674:	08016490 	.word	0x08016490
 8010678:	08016a04 	.word	0x08016a04
 801067c:	08014150 	.word	0x08014150

08010680 <tcp_rexmit_fast>:
{
 8010680:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010682:	4604      	mov	r4, r0
 8010684:	b340      	cbz	r0, 80106d8 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010686:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010688:	b113      	cbz	r3, 8010690 <tcp_rexmit_fast+0x10>
 801068a:	8b63      	ldrh	r3, [r4, #26]
 801068c:	075b      	lsls	r3, r3, #29
 801068e:	d500      	bpl.n	8010692 <tcp_rexmit_fast+0x12>
}
 8010690:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010692:	4620      	mov	r0, r4
 8010694:	f7ff ffb0 	bl	80105f8 <tcp_rexmit>
 8010698:	2800      	cmp	r0, #0
 801069a:	d1f9      	bne.n	8010690 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801069c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80106a0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80106a4:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80106a6:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80106a8:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80106ac:	bf28      	it	cs
 80106ae:	4619      	movcs	r1, r3
 80106b0:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80106b2:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80106b6:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80106ba:	d902      	bls.n	80106c2 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 80106bc:	b283      	uxth	r3, r0
 80106be:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      tcp_set_flags(pcb, TF_INFR);
 80106c2:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80106c4:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 80106c6:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80106ca:	4413      	add	r3, r2
      pcb->rtime = 0;
 80106cc:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80106ce:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80106d2:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 80106d4:	8622      	strh	r2, [r4, #48]	@ 0x30
}
 80106d6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80106d8:	4b03      	ldr	r3, [pc, #12]	@ (80106e8 <tcp_rexmit_fast+0x68>)
 80106da:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80106de:	4903      	ldr	r1, [pc, #12]	@ (80106ec <tcp_rexmit_fast+0x6c>)
 80106e0:	4803      	ldr	r0, [pc, #12]	@ (80106f0 <tcp_rexmit_fast+0x70>)
 80106e2:	f002 fc05 	bl	8012ef0 <iprintf>
 80106e6:	e7ce      	b.n	8010686 <tcp_rexmit_fast+0x6>
 80106e8:	08016490 	.word	0x08016490
 80106ec:	08016a1c 	.word	0x08016a1c
 80106f0:	08014150 	.word	0x08014150

080106f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80106f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106f8:	b084      	sub	sp, #16
 80106fa:	4607      	mov	r7, r0
 80106fc:	460e      	mov	r6, r1
 80106fe:	4615      	mov	r5, r2
 8010700:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010704:	461c      	mov	r4, r3
{
 8010706:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 801070a:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801070e:	b1fb      	cbz	r3, 8010750 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010710:	f1b8 0f00 	cmp.w	r8, #0
 8010714:	d026      	beq.n	8010764 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010716:	4630      	mov	r0, r6
 8010718:	f7fa ffbe 	bl	800b698 <lwip_htonl>
 801071c:	2114      	movs	r1, #20
 801071e:	4602      	mov	r2, r0
 8010720:	4628      	mov	r0, r5
 8010722:	f24d 0516 	movw	r5, #53270	@ 0xd016
 8010726:	464b      	mov	r3, r9
 8010728:	f8cd a000 	str.w	sl, [sp]
 801072c:	e9cd 1501 	strd	r1, r5, [sp, #4]
 8010730:	2100      	movs	r1, #0
 8010732:	f7ff f9b7 	bl	800faa4 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010736:	4601      	mov	r1, r0
 8010738:	b138      	cbz	r0, 801074a <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801073a:	4643      	mov	r3, r8
 801073c:	4622      	mov	r2, r4
 801073e:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010740:	b004      	add	sp, #16
 8010742:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010746:	f7ff ba1b 	b.w	800fb80 <tcp_output_control_segment>
}
 801074a:	b004      	add	sp, #16
 801074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010750:	4b08      	ldr	r3, [pc, #32]	@ (8010774 <tcp_rst+0x80>)
 8010752:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010756:	4908      	ldr	r1, [pc, #32]	@ (8010778 <tcp_rst+0x84>)
 8010758:	4808      	ldr	r0, [pc, #32]	@ (801077c <tcp_rst+0x88>)
 801075a:	f002 fbc9 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801075e:	f1b8 0f00 	cmp.w	r8, #0
 8010762:	d1d8      	bne.n	8010716 <tcp_rst+0x22>
 8010764:	4b03      	ldr	r3, [pc, #12]	@ (8010774 <tcp_rst+0x80>)
 8010766:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801076a:	4905      	ldr	r1, [pc, #20]	@ (8010780 <tcp_rst+0x8c>)
 801076c:	4803      	ldr	r0, [pc, #12]	@ (801077c <tcp_rst+0x88>)
 801076e:	f002 fbbf 	bl	8012ef0 <iprintf>
 8010772:	e7d0      	b.n	8010716 <tcp_rst+0x22>
 8010774:	08016490 	.word	0x08016490
 8010778:	08016a3c 	.word	0x08016a3c
 801077c:	08014150 	.word	0x08014150
 8010780:	08016a58 	.word	0x08016a58

08010784 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010784:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010786:	4604      	mov	r4, r0
 8010788:	b1c8      	cbz	r0, 80107be <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801078a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 801078c:	f7fa ff84 	bl	800b698 <lwip_htonl>
 8010790:	2100      	movs	r1, #0
 8010792:	4602      	mov	r2, r0
 8010794:	4620      	mov	r0, r4
 8010796:	f7ff f9cb 	bl	800fb30 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801079a:	4601      	mov	r1, r0
 801079c:	b1b8      	cbz	r0, 80107ce <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801079e:	1d23      	adds	r3, r4, #4
 80107a0:	4622      	mov	r2, r4
 80107a2:	4620      	mov	r0, r4
 80107a4:	f7ff f9ec 	bl	800fb80 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107a8:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 80107aa:	b920      	cbnz	r0, 80107b6 <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107ac:	f023 0303 	bic.w	r3, r3, #3
 80107b0:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107b2:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 80107b4:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107b6:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107ba:	8363      	strh	r3, [r4, #26]
}
 80107bc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80107be:	4b07      	ldr	r3, [pc, #28]	@ (80107dc <tcp_send_empty_ack+0x58>)
 80107c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80107c4:	4906      	ldr	r1, [pc, #24]	@ (80107e0 <tcp_send_empty_ack+0x5c>)
 80107c6:	4807      	ldr	r0, [pc, #28]	@ (80107e4 <tcp_send_empty_ack+0x60>)
 80107c8:	f002 fb92 	bl	8012ef0 <iprintf>
 80107cc:	e7dd      	b.n	801078a <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107ce:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 80107d0:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107d4:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 80107d8:	e7eb      	b.n	80107b2 <tcp_send_empty_ack+0x2e>
 80107da:	bf00      	nop
 80107dc:	08016490 	.word	0x08016490
 80107e0:	08016a74 	.word	0x08016a74
 80107e4:	08014150 	.word	0x08014150

080107e8 <tcp_output>:
{
 80107e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ec:	4604      	mov	r4, r0
 80107ee:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 80107f0:	f7f6 fd9c 	bl	800732c <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80107f4:	2c00      	cmp	r4, #0
 80107f6:	f000 81a5 	beq.w	8010b44 <tcp_output+0x35c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80107fa:	7d23      	ldrb	r3, [r4, #20]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	f000 8155 	beq.w	8010aac <tcp_output+0x2c4>
  if (tcp_input_pcb == pcb) {
 8010802:	4bb1      	ldr	r3, [pc, #708]	@ (8010ac8 <tcp_output+0x2e0>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	42a3      	cmp	r3, r4
 8010808:	d031      	beq.n	801086e <tcp_output+0x86>
  seg = pcb->unsent;
 801080a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801080c:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 8010810:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 8010814:	b325      	cbz	r5, 8010860 <tcp_output+0x78>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010816:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010818:	f104 0804 	add.w	r8, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801081c:	2800      	cmp	r0, #0
 801081e:	f040 8199 	bne.w	8010b54 <tcp_output+0x36c>
    return ip_route(src, dst);
 8010822:	4640      	mov	r0, r8
 8010824:	f001 faa6 	bl	8011d74 <ip4_route>
 8010828:	4683      	mov	fp, r0
  if (netif == NULL) {
 801082a:	f1bb 0f00 	cmp.w	fp, #0
 801082e:	f000 81a5 	beq.w	8010b7c <tcp_output+0x394>
  if (ip_addr_isany(&pcb->local_ip)) {
 8010832:	6823      	ldr	r3, [r4, #0]
 8010834:	b913      	cbnz	r3, 801083c <tcp_output+0x54>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010836:	f8db 3004 	ldr.w	r3, [fp, #4]
 801083a:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801083c:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801083e:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010840:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010842:	bf28      	it	cs
 8010844:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010846:	f7fa ff27 	bl	800b698 <lwip_htonl>
 801084a:	892b      	ldrh	r3, [r5, #8]
 801084c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801084e:	1a9b      	subs	r3, r3, r2
 8010850:	4403      	add	r3, r0
 8010852:	42bb      	cmp	r3, r7
 8010854:	d90f      	bls.n	8010876 <tcp_output+0x8e>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010856:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 801085a:	42bb      	cmp	r3, r7
 801085c:	f000 8142 	beq.w	8010ae4 <tcp_output+0x2fc>
    if (pcb->flags & TF_ACK_NOW) {
 8010860:	8b62      	ldrh	r2, [r4, #26]
 8010862:	0790      	lsls	r0, r2, #30
 8010864:	f100 812a 	bmi.w	8010abc <tcp_output+0x2d4>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801086c:	8362      	strh	r2, [r4, #26]
    return ERR_OK;
 801086e:	2000      	movs	r0, #0
}
 8010870:	b005      	add	sp, #20
 8010872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 8010876:	2300      	movs	r3, #0
 8010878:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  useg = pcb->unacked;
 801087c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (useg != NULL) {
 801087e:	2b00      	cmp	r3, #0
 8010880:	f000 8140 	beq.w	8010b04 <tcp_output+0x31c>
    for (; useg->next != NULL; useg = useg->next);
 8010884:	4699      	mov	r9, r3
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1fb      	bne.n	8010884 <tcp_output+0x9c>
    LWIP_ASSERT("RST not expected here!",
 801088c:	465e      	mov	r6, fp
 801088e:	e0a6      	b.n	80109de <tcp_output+0x1f6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010890:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010892:	b15b      	cbz	r3, 80108ac <tcp_output+0xc4>
 8010894:	8b62      	ldrh	r2, [r4, #26]
 8010896:	f012 0f44 	tst.w	r2, #68	@ 0x44
 801089a:	d107      	bne.n	80108ac <tcp_output+0xc4>
 801089c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801089e:	2800      	cmp	r0, #0
 80108a0:	f000 80f2 	beq.w	8010a88 <tcp_output+0x2a0>
 80108a4:	6803      	ldr	r3, [r0, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f000 80e9 	beq.w	8010a7e <tcp_output+0x296>
    if (pcb->state != SYN_SENT) {
 80108ac:	7d23      	ldrb	r3, [r4, #20]
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80108ae:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    if (pcb->state != SYN_SENT) {
 80108b2:	2b02      	cmp	r3, #2
 80108b4:	d00a      	beq.n	80108cc <tcp_output+0xe4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80108b6:	f8ba a00c 	ldrh.w	sl, [sl, #12]
 80108ba:	2010      	movs	r0, #16
 80108bc:	f7fa fee8 	bl	800b690 <lwip_htons>
 80108c0:	ea4a 0000 	orr.w	r0, sl, r0
 80108c4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80108c8:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 80108cc:	686b      	ldr	r3, [r5, #4]
 80108ce:	7b9b      	ldrb	r3, [r3, #14]
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d153      	bne.n	801097c <tcp_output+0x194>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80108d4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80108d6:	f7fa fedf 	bl	800b698 <lwip_htonl>
 80108da:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80108de:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80108e0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80108e4:	f7fa fed4 	bl	800b690 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80108e8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80108ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80108ec:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80108f0:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80108f2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80108f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80108f8:	7aab      	ldrb	r3, [r5, #10]
 80108fa:	07da      	lsls	r2, r3, #31
 80108fc:	f100 80ae 	bmi.w	8010a5c <tcp_output+0x274>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010900:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 8010904:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 8010908:	2b00      	cmp	r3, #0
 801090a:	da01      	bge.n	8010910 <tcp_output+0x128>
    pcb->rtime = 0;
 801090c:	2300      	movs	r3, #0
 801090e:	8623      	strh	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 8010910:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010912:	2b00      	cmp	r3, #0
 8010914:	f000 8097 	beq.w	8010a46 <tcp_output+0x25e>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010918:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801091a:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801091c:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 801091e:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010920:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 8010924:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010928:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 801092a:	1ac9      	subs	r1, r1, r3
 801092c:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 801092e:	8901      	ldrh	r1, [r0, #8]
 8010930:	1acb      	subs	r3, r1, r3
 8010932:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 8010934:	f88a 2010 	strb.w	r2, [sl, #16]
 8010938:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801093c:	7aab      	ldrb	r3, [r5, #10]
 801093e:	f013 0f01 	tst.w	r3, #1
 8010942:	bf0c      	ite	eq
 8010944:	2314      	moveq	r3, #20
 8010946:	2318      	movne	r3, #24
 8010948:	449a      	add	sl, r3
 801094a:	45d3      	cmp	fp, sl
 801094c:	d007      	beq.n	801095e <tcp_output+0x176>
 801094e:	4b5f      	ldr	r3, [pc, #380]	@ (8010acc <tcp_output+0x2e4>)
 8010950:	f240 621c 	movw	r2, #1564	@ 0x61c
 8010954:	495e      	ldr	r1, [pc, #376]	@ (8010ad0 <tcp_output+0x2e8>)
 8010956:	485f      	ldr	r0, [pc, #380]	@ (8010ad4 <tcp_output+0x2ec>)
 8010958:	f002 faca 	bl	8012ef0 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801095c:	6868      	ldr	r0, [r5, #4]
 801095e:	9602      	str	r6, [sp, #8]
 8010960:	4642      	mov	r2, r8
 8010962:	7aa3      	ldrb	r3, [r4, #10]
 8010964:	4621      	mov	r1, r4
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	2306      	movs	r3, #6
 801096a:	9301      	str	r3, [sp, #4]
 801096c:	7ae3      	ldrb	r3, [r4, #11]
 801096e:	f001 fb9b 	bl	80120a8 <ip4_output_if>
    if (err != ERR_OK) {
 8010972:	2800      	cmp	r0, #0
 8010974:	f040 80f8 	bne.w	8010b68 <tcp_output+0x380>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010978:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 801097c:	682b      	ldr	r3, [r5, #0]
 801097e:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010980:	7d23      	ldrb	r3, [r4, #20]
 8010982:	2b02      	cmp	r3, #2
 8010984:	d003      	beq.n	801098e <tcp_output+0x1a6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010986:	8b63      	ldrh	r3, [r4, #26]
 8010988:	f023 0303 	bic.w	r3, r3, #3
 801098c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801098e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8010992:	f7fa fe81 	bl	800b698 <lwip_htonl>
 8010996:	68eb      	ldr	r3, [r5, #12]
 8010998:	4682      	mov	sl, r0
 801099a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801099e:	8998      	ldrh	r0, [r3, #12]
 80109a0:	f7fa fe76 	bl	800b690 <lwip_htons>
 80109a4:	f010 0303 	ands.w	r3, r0, #3
 80109a8:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80109aa:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80109ac:	bf18      	it	ne
 80109ae:	2301      	movne	r3, #1
 80109b0:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 80109b2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80109b6:	1ad2      	subs	r2, r2, r3
 80109b8:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 80109ba:	bfb8      	it	lt
 80109bc:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 80109be:	68eb      	ldr	r3, [r5, #12]
 80109c0:	8998      	ldrh	r0, [r3, #12]
 80109c2:	f7fa fe65 	bl	800b690 <lwip_htons>
 80109c6:	0783      	lsls	r3, r0, #30
 80109c8:	d123      	bne.n	8010a12 <tcp_output+0x22a>
 80109ca:	f1ba 0f00 	cmp.w	sl, #0
 80109ce:	d120      	bne.n	8010a12 <tcp_output+0x22a>
      tcp_seg_free(seg);
 80109d0:	4628      	mov	r0, r5
 80109d2:	f7fc fb2f 	bl	800d034 <tcp_seg_free>
    seg = pcb->unsent;
 80109d6:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 80109d8:	2d00      	cmp	r5, #0
 80109da:	f000 80ca 	beq.w	8010b72 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80109de:	68eb      	ldr	r3, [r5, #12]
 80109e0:	6858      	ldr	r0, [r3, #4]
 80109e2:	f7fa fe59 	bl	800b698 <lwip_htonl>
 80109e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80109e8:	1ac0      	subs	r0, r0, r3
 80109ea:	892b      	ldrh	r3, [r5, #8]
 80109ec:	4418      	add	r0, r3
  while (seg != NULL &&
 80109ee:	42b8      	cmp	r0, r7
 80109f0:	f200 80b4 	bhi.w	8010b5c <tcp_output+0x374>
    LWIP_ASSERT("RST not expected here!",
 80109f4:	68eb      	ldr	r3, [r5, #12]
 80109f6:	8998      	ldrh	r0, [r3, #12]
 80109f8:	f7fa fe4a 	bl	800b690 <lwip_htons>
 80109fc:	0741      	lsls	r1, r0, #29
 80109fe:	f57f af47 	bpl.w	8010890 <tcp_output+0xa8>
 8010a02:	4b32      	ldr	r3, [pc, #200]	@ (8010acc <tcp_output+0x2e4>)
 8010a04:	f240 5236 	movw	r2, #1334	@ 0x536
 8010a08:	4933      	ldr	r1, [pc, #204]	@ (8010ad8 <tcp_output+0x2f0>)
 8010a0a:	4832      	ldr	r0, [pc, #200]	@ (8010ad4 <tcp_output+0x2ec>)
 8010a0c:	f002 fa70 	bl	8012ef0 <iprintf>
 8010a10:	e73e      	b.n	8010890 <tcp_output+0xa8>
      seg->next = NULL;
 8010a12:	2300      	movs	r3, #0
 8010a14:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8010a16:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010a18:	b193      	cbz	r3, 8010a40 <tcp_output+0x258>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010a1a:	68eb      	ldr	r3, [r5, #12]
 8010a1c:	6858      	ldr	r0, [r3, #4]
 8010a1e:	f7fa fe3b 	bl	800b698 <lwip_htonl>
 8010a22:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8010a26:	4682      	mov	sl, r0
 8010a28:	6858      	ldr	r0, [r3, #4]
 8010a2a:	f7fa fe35 	bl	800b698 <lwip_htonl>
 8010a2e:	ebaa 0a00 	sub.w	sl, sl, r0
 8010a32:	f1ba 0f00 	cmp.w	sl, #0
 8010a36:	db67      	blt.n	8010b08 <tcp_output+0x320>
          useg->next = seg;
 8010a38:	f8c9 5000 	str.w	r5, [r9]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010a3c:	46a9      	mov	r9, r5
 8010a3e:	e7ca      	b.n	80109d6 <tcp_output+0x1ee>
 8010a40:	46a9      	mov	r9, r5
        pcb->unacked = seg;
 8010a42:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 8010a44:	e7c7      	b.n	80109d6 <tcp_output+0x1ee>
    pcb->rttest = tcp_ticks;
 8010a46:	4b25      	ldr	r3, [pc, #148]	@ (8010adc <tcp_output+0x2f4>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	6363      	str	r3, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010a4c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8010a50:	f7fa fe22 	bl	800b698 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010a54:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010a58:	63a0      	str	r0, [r4, #56]	@ 0x38
 8010a5a:	e75d      	b.n	8010918 <tcp_output+0x130>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010a5c:	4642      	mov	r2, r8
 8010a5e:	4631      	mov	r1, r6
 8010a60:	f240 50b4 	movw	r0, #1460	@ 0x5b4
    opts += 1;
 8010a64:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010a68:	f7fd fb00 	bl	800e06c <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010a6c:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 8010a70:	f7fa fe12 	bl	800b698 <lwip_htonl>
 8010a74:	f8ca 0014 	str.w	r0, [sl, #20]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010a78:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8010a7c:	e742      	b.n	8010904 <tcp_output+0x11c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010a7e:	8901      	ldrh	r1, [r0, #8]
 8010a80:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010a82:	4299      	cmp	r1, r3
 8010a84:	f4bf af12 	bcs.w	80108ac <tcp_output+0xc4>
 8010a88:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f43f af0d 	beq.w	80108ac <tcp_output+0xc4>
 8010a92:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8010a96:	2b0f      	cmp	r3, #15
 8010a98:	f63f af08 	bhi.w	80108ac <tcp_output+0xc4>
 8010a9c:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 8010aa0:	f47f af04 	bne.w	80108ac <tcp_output+0xc4>
  if (pcb->unsent == NULL) {
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	f47f aedf 	bne.w	8010868 <tcp_output+0x80>
 8010aaa:	e063      	b.n	8010b74 <tcp_output+0x38c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010aac:	4b07      	ldr	r3, [pc, #28]	@ (8010acc <tcp_output+0x2e4>)
 8010aae:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010ab2:	490b      	ldr	r1, [pc, #44]	@ (8010ae0 <tcp_output+0x2f8>)
 8010ab4:	4807      	ldr	r0, [pc, #28]	@ (8010ad4 <tcp_output+0x2ec>)
 8010ab6:	f002 fa1b 	bl	8012ef0 <iprintf>
 8010aba:	e6a2      	b.n	8010802 <tcp_output+0x1a>
      return tcp_send_empty_ack(pcb);
 8010abc:	4620      	mov	r0, r4
}
 8010abe:	b005      	add	sp, #20
 8010ac0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8010ac4:	f7ff be5e 	b.w	8010784 <tcp_send_empty_ack>
 8010ac8:	2400fcd4 	.word	0x2400fcd4
 8010acc:	08016490 	.word	0x08016490
 8010ad0:	08016aec 	.word	0x08016aec
 8010ad4:	08014150 	.word	0x08014150
 8010ad8:	08016ad4 	.word	0x08016ad4
 8010adc:	2400fcd0 	.word	0x2400fcd0
 8010ae0:	08016aac 	.word	0x08016aac
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010ae4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f47f aeba 	bne.w	8010860 <tcp_output+0x78>
 8010aec:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f47f aeb5 	bne.w	8010860 <tcp_output+0x78>
      pcb->persist_cnt = 0;
 8010af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 8010afa:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 8010afe:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
      pcb->persist_probe = 0;
 8010b02:	e6ad      	b.n	8010860 <tcp_output+0x78>
  useg = pcb->unacked;
 8010b04:	4699      	mov	r9, r3
 8010b06:	e6c1      	b.n	801088c <tcp_output+0xa4>
          while (*cur_seg &&
 8010b08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010b0a:	f104 0b70 	add.w	fp, r4, #112	@ 0x70
          while (*cur_seg &&
 8010b0e:	b92b      	cbnz	r3, 8010b1c <tcp_output+0x334>
 8010b10:	e014      	b.n	8010b3c <tcp_output+0x354>
            cur_seg = &((*cur_seg)->next );
 8010b12:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 8010b16:	f8db 3000 	ldr.w	r3, [fp]
 8010b1a:	b17b      	cbz	r3, 8010b3c <tcp_output+0x354>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010b1c:	68db      	ldr	r3, [r3, #12]
 8010b1e:	6858      	ldr	r0, [r3, #4]
 8010b20:	f7fa fdba 	bl	800b698 <lwip_htonl>
 8010b24:	68eb      	ldr	r3, [r5, #12]
 8010b26:	4682      	mov	sl, r0
 8010b28:	6858      	ldr	r0, [r3, #4]
 8010b2a:	f7fa fdb5 	bl	800b698 <lwip_htonl>
 8010b2e:	ebaa 0a00 	sub.w	sl, sl, r0
          while (*cur_seg &&
 8010b32:	f1ba 0f00 	cmp.w	sl, #0
 8010b36:	dbec      	blt.n	8010b12 <tcp_output+0x32a>
            cur_seg = &((*cur_seg)->next );
 8010b38:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 8010b3c:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 8010b3e:	f8cb 5000 	str.w	r5, [fp]
 8010b42:	e748      	b.n	80109d6 <tcp_output+0x1ee>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010b44:	4b0f      	ldr	r3, [pc, #60]	@ (8010b84 <tcp_output+0x39c>)
 8010b46:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010b4a:	490f      	ldr	r1, [pc, #60]	@ (8010b88 <tcp_output+0x3a0>)
 8010b4c:	480f      	ldr	r0, [pc, #60]	@ (8010b8c <tcp_output+0x3a4>)
 8010b4e:	f002 f9cf 	bl	8012ef0 <iprintf>
 8010b52:	e652      	b.n	80107fa <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 8010b54:	f7fb fb66 	bl	800c224 <netif_get_by_index>
 8010b58:	4683      	mov	fp, r0
 8010b5a:	e666      	b.n	801082a <tcp_output+0x42>
  if (pcb->unsent == NULL) {
 8010b5c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8010b5e:	8b62      	ldrh	r2, [r4, #26]
 8010b60:	2800      	cmp	r0, #0
 8010b62:	f47f ae81 	bne.w	8010868 <tcp_output+0x80>
 8010b66:	e005      	b.n	8010b74 <tcp_output+0x38c>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b68:	8b63      	ldrh	r3, [r4, #26]
 8010b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b6e:	8363      	strh	r3, [r4, #26]
      return err;
 8010b70:	e67e      	b.n	8010870 <tcp_output+0x88>
 8010b72:	8b62      	ldrh	r2, [r4, #26]
    pcb->unsent_oversize = 0;
 8010b74:	2300      	movs	r3, #0
 8010b76:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 8010b7a:	e675      	b.n	8010868 <tcp_output+0x80>
    return ERR_RTE;
 8010b7c:	f06f 0003 	mvn.w	r0, #3
 8010b80:	e676      	b.n	8010870 <tcp_output+0x88>
 8010b82:	bf00      	nop
 8010b84:	08016490 	.word	0x08016490
 8010b88:	08016a94 	.word	0x08016a94
 8010b8c:	08014150 	.word	0x08014150

08010b90 <tcp_rexmit_rto_commit>:
{
 8010b90:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010b92:	4604      	mov	r4, r0
 8010b94:	b158      	cbz	r0, 8010bae <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 8010b96:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8010b9a:	2bff      	cmp	r3, #255	@ 0xff
 8010b9c:	d002      	beq.n	8010ba4 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 8010ba4:	4620      	mov	r0, r4
}
 8010ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8010baa:	f7ff be1d 	b.w	80107e8 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010bae:	4b04      	ldr	r3, [pc, #16]	@ (8010bc0 <tcp_rexmit_rto_commit+0x30>)
 8010bb0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010bb4:	4903      	ldr	r1, [pc, #12]	@ (8010bc4 <tcp_rexmit_rto_commit+0x34>)
 8010bb6:	4804      	ldr	r0, [pc, #16]	@ (8010bc8 <tcp_rexmit_rto_commit+0x38>)
 8010bb8:	f002 f99a 	bl	8012ef0 <iprintf>
 8010bbc:	e7eb      	b.n	8010b96 <tcp_rexmit_rto_commit+0x6>
 8010bbe:	bf00      	nop
 8010bc0:	08016490 	.word	0x08016490
 8010bc4:	08016b00 	.word	0x08016b00
 8010bc8:	08014150 	.word	0x08014150

08010bcc <tcp_rexmit_rto>:
{
 8010bcc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010bce:	4604      	mov	r4, r0
 8010bd0:	b118      	cbz	r0, 8010bda <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010bd2:	f7ff fccd 	bl	8010570 <tcp_rexmit_rto_prepare>
 8010bd6:	b198      	cbz	r0, 8010c00 <tcp_rexmit_rto+0x34>
}
 8010bd8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010bda:	4b0f      	ldr	r3, [pc, #60]	@ (8010c18 <tcp_rexmit_rto+0x4c>)
 8010bdc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8010be0:	490e      	ldr	r1, [pc, #56]	@ (8010c1c <tcp_rexmit_rto+0x50>)
 8010be2:	480f      	ldr	r0, [pc, #60]	@ (8010c20 <tcp_rexmit_rto+0x54>)
 8010be4:	f002 f984 	bl	8012ef0 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010be8:	4620      	mov	r0, r4
 8010bea:	f7ff fcc1 	bl	8010570 <tcp_rexmit_rto_prepare>
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d1f2      	bne.n	8010bd8 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010bf2:	4b09      	ldr	r3, [pc, #36]	@ (8010c18 <tcp_rexmit_rto+0x4c>)
 8010bf4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010bf8:	490a      	ldr	r1, [pc, #40]	@ (8010c24 <tcp_rexmit_rto+0x58>)
 8010bfa:	4809      	ldr	r0, [pc, #36]	@ (8010c20 <tcp_rexmit_rto+0x54>)
 8010bfc:	f002 f978 	bl	8012ef0 <iprintf>
  if (pcb->nrtx < 0xFF) {
 8010c00:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8010c04:	2bff      	cmp	r3, #255	@ 0xff
 8010c06:	d002      	beq.n	8010c0e <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 8010c08:	3301      	adds	r3, #1
 8010c0a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 8010c0e:	4620      	mov	r0, r4
}
 8010c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8010c14:	f7ff bde8 	b.w	80107e8 <tcp_output>
 8010c18:	08016490 	.word	0x08016490
 8010c1c:	08016b24 	.word	0x08016b24
 8010c20:	08014150 	.word	0x08014150
 8010c24:	08016b00 	.word	0x08016b00

08010c28 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010c28:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	b188      	cbz	r0, 8010c52 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010c2e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8010c30:	3801      	subs	r0, #1
 8010c32:	f7fa fd31 	bl	800b698 <lwip_htonl>
 8010c36:	2100      	movs	r1, #0
 8010c38:	4602      	mov	r2, r0
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f7fe ff78 	bl	800fb30 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8010c40:	4601      	mov	r1, r0
 8010c42:	b170      	cbz	r0, 8010c62 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010c44:	1d23      	adds	r3, r4, #4
 8010c46:	4622      	mov	r2, r4
 8010c48:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8010c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010c4e:	f7fe bf97 	b.w	800fb80 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010c52:	4b05      	ldr	r3, [pc, #20]	@ (8010c68 <tcp_keepalive+0x40>)
 8010c54:	f640 0224 	movw	r2, #2084	@ 0x824
 8010c58:	4904      	ldr	r1, [pc, #16]	@ (8010c6c <tcp_keepalive+0x44>)
 8010c5a:	4805      	ldr	r0, [pc, #20]	@ (8010c70 <tcp_keepalive+0x48>)
 8010c5c:	f002 f948 	bl	8012ef0 <iprintf>
 8010c60:	e7e5      	b.n	8010c2e <tcp_keepalive+0x6>
}
 8010c62:	f04f 30ff 	mov.w	r0, #4294967295
 8010c66:	bd10      	pop	{r4, pc}
 8010c68:	08016490 	.word	0x08016490
 8010c6c:	08016b40 	.word	0x08016b40
 8010c70:	08014150 	.word	0x08014150

08010c74 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010c78:	4604      	mov	r4, r0
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	d055      	beq.n	8010d2a <tcp_zero_window_probe+0xb6>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010c7e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  if (seg == NULL) {
 8010c80:	2d00      	cmp	r5, #0
 8010c82:	d04f      	beq.n	8010d24 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010c84:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8010c88:	2bff      	cmp	r3, #255	@ 0xff
 8010c8a:	d002      	beq.n	8010c92 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010c92:	68eb      	ldr	r3, [r5, #12]
 8010c94:	8998      	ldrh	r0, [r3, #12]
 8010c96:	f7fa fcfb 	bl	800b690 <lwip_htons>
 8010c9a:	07c3      	lsls	r3, r0, #31
 8010c9c:	d427      	bmi.n	8010cee <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010c9e:	68eb      	ldr	r3, [r5, #12]
 8010ca0:	2101      	movs	r1, #1
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	685a      	ldr	r2, [r3, #4]
 8010ca6:	f7fe ff43 	bl	800fb30 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8010caa:	4606      	mov	r6, r0
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d044      	beq.n	8010d3a <tcp_zero_window_probe+0xc6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010cb0:	f8d6 8004 	ldr.w	r8, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010cb4:	6868      	ldr	r0, [r5, #4]
 8010cb6:	f108 0114 	add.w	r1, r8, #20
 8010cba:	892f      	ldrh	r7, [r5, #8]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	8903      	ldrh	r3, [r0, #8]
 8010cc0:	1bdb      	subs	r3, r3, r7
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	f7fb fe5a 	bl	800c97c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010cc8:	68eb      	ldr	r3, [r5, #12]
 8010cca:	6858      	ldr	r0, [r3, #4]
 8010ccc:	f7fa fce4 	bl	800b698 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010cd0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010cd2:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010cd4:	4622      	mov	r2, r4
 8010cd6:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010cd8:	1a1b      	subs	r3, r3, r0
 8010cda:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010cdc:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 8010ce0:	bfb8      	it	lt
 8010ce2:	6520      	strlt	r0, [r4, #80]	@ 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010ce4:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8010ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010cea:	f7fe bf49 	b.w	800fb80 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010cee:	892f      	ldrh	r7, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	68eb      	ldr	r3, [r5, #12]
 8010cf4:	1e39      	subs	r1, r7, #0
 8010cf6:	685a      	ldr	r2, [r3, #4]
 8010cf8:	bf18      	it	ne
 8010cfa:	2101      	movne	r1, #1
 8010cfc:	f7fe ff18 	bl	800fb30 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8010d00:	4606      	mov	r6, r0
 8010d02:	b1d0      	cbz	r0, 8010d3a <tcp_zero_window_probe+0xc6>
  tcphdr = (struct tcp_hdr *)p->payload;
 8010d04:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (is_fin) {
 8010d08:	2f00      	cmp	r7, #0
 8010d0a:	d1d3      	bne.n	8010cb4 <tcp_zero_window_probe+0x40>
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010d0c:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8010d10:	2011      	movs	r0, #17
 8010d12:	f7fa fcbd 	bl	800b690 <lwip_htons>
 8010d16:	f427 577c 	bic.w	r7, r7, #16128	@ 0x3f00
 8010d1a:	b2bf      	uxth	r7, r7
 8010d1c:	4338      	orrs	r0, r7
 8010d1e:	f8a8 000c 	strh.w	r0, [r8, #12]
 8010d22:	e7d1      	b.n	8010cc8 <tcp_zero_window_probe+0x54>
    return ERR_OK;
 8010d24:	4628      	mov	r0, r5
}
 8010d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010d2a:	4b05      	ldr	r3, [pc, #20]	@ (8010d40 <tcp_zero_window_probe+0xcc>)
 8010d2c:	f640 024f 	movw	r2, #2127	@ 0x84f
 8010d30:	4904      	ldr	r1, [pc, #16]	@ (8010d44 <tcp_zero_window_probe+0xd0>)
 8010d32:	4805      	ldr	r0, [pc, #20]	@ (8010d48 <tcp_zero_window_probe+0xd4>)
 8010d34:	f002 f8dc 	bl	8012ef0 <iprintf>
 8010d38:	e7a1      	b.n	8010c7e <tcp_zero_window_probe+0xa>
    return ERR_MEM;
 8010d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3e:	e7f2      	b.n	8010d26 <tcp_zero_window_probe+0xb2>
 8010d40:	08016490 	.word	0x08016490
 8010d44:	08016b5c 	.word	0x08016b5c
 8010d48:	08014150 	.word	0x08014150

08010d4c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010d50:	200a      	movs	r0, #10
{
 8010d52:	460e      	mov	r6, r1
 8010d54:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010d56:	f7fb f81d 	bl	800bd94 <memp_malloc>
  if (timeout == NULL) {
 8010d5a:	b190      	cbz	r0, 8010d82 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8010d5c:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010d5e:	490d      	ldr	r1, [pc, #52]	@ (8010d94 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 8010d60:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 8010d62:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 8010d64:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8010d68:	680b      	ldr	r3, [r1, #0]
 8010d6a:	b91b      	cbnz	r3, 8010d74 <sys_timeout_abs+0x28>
 8010d6c:	e007      	b.n	8010d7e <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010d6e:	4619      	mov	r1, r3
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	b11b      	cbz	r3, 8010d7c <sys_timeout_abs+0x30>
 8010d74:	685a      	ldr	r2, [r3, #4]
 8010d76:	1aa2      	subs	r2, r4, r2
 8010d78:	2a00      	cmp	r2, #0
 8010d7a:	daf8      	bge.n	8010d6e <sys_timeout_abs+0x22>
        timeout->next = t->next;
 8010d7c:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8010d7e:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 8010d80:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010d82:	4b05      	ldr	r3, [pc, #20]	@ (8010d98 <sys_timeout_abs+0x4c>)
 8010d84:	22be      	movs	r2, #190	@ 0xbe
 8010d86:	4905      	ldr	r1, [pc, #20]	@ (8010d9c <sys_timeout_abs+0x50>)
 8010d88:	4805      	ldr	r0, [pc, #20]	@ (8010da0 <sys_timeout_abs+0x54>)
}
 8010d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010d8e:	f002 b8af 	b.w	8012ef0 <iprintf>
 8010d92:	bf00      	nop
 8010d94:	2400fd14 	.word	0x2400fd14
 8010d98:	08016b80 	.word	0x08016b80
 8010d9c:	08016bb4 	.word	0x08016bb4
 8010da0:	08014150 	.word	0x08014150

08010da4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010da4:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010da6:	6843      	ldr	r3, [r0, #4]
{
 8010da8:	4604      	mov	r4, r0
  cyclic->handler();
 8010daa:	4798      	blx	r3

  now = sys_now();
 8010dac:	f7f6 f936 	bl	800701c <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010db0:	4b0a      	ldr	r3, [pc, #40]	@ (8010ddc <lwip_cyclic_timer+0x38>)
 8010db2:	6825      	ldr	r5, [r4, #0]
  now = sys_now();
 8010db4:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010db6:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010db8:	4622      	mov	r2, r4
 8010dba:	4909      	ldr	r1, [pc, #36]	@ (8010de0 <lwip_cyclic_timer+0x3c>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010dbc:	18e8      	adds	r0, r5, r3
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010dbe:	eba0 030c 	sub.w	r3, r0, ip
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	da05      	bge.n	8010dd2 <lwip_cyclic_timer+0x2e>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010dc6:	eb05 000c 	add.w	r0, r5, ip
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010dce:	f7ff bfbd 	b.w	8010d4c <sys_timeout_abs>
}
 8010dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010dd6:	f7ff bfb9 	b.w	8010d4c <sys_timeout_abs>
 8010dda:	bf00      	nop
 8010ddc:	2400fd10 	.word	0x2400fd10
 8010de0:	08010da5 	.word	0x08010da5

08010de4 <tcpip_tcp_timer>:
{
 8010de4:	b508      	push	{r3, lr}
  tcp_tmr();
 8010de6:	f7fd f913 	bl	800e010 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010dea:	4b0a      	ldr	r3, [pc, #40]	@ (8010e14 <tcpip_tcp_timer+0x30>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	b153      	cbz	r3, 8010e06 <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 8010df0:	f7f6 fa9c 	bl	800732c <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010df4:	f7f6 f912 	bl	800701c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010df8:	2200      	movs	r2, #0
 8010dfa:	4907      	ldr	r1, [pc, #28]	@ (8010e18 <tcpip_tcp_timer+0x34>)
 8010dfc:	30fa      	adds	r0, #250	@ 0xfa
}
 8010dfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010e02:	f7ff bfa3 	b.w	8010d4c <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010e06:	4b05      	ldr	r3, [pc, #20]	@ (8010e1c <tcpip_tcp_timer+0x38>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d1f0      	bne.n	8010df0 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8010e0e:	4a04      	ldr	r2, [pc, #16]	@ (8010e20 <tcpip_tcp_timer+0x3c>)
 8010e10:	6013      	str	r3, [r2, #0]
}
 8010e12:	bd08      	pop	{r3, pc}
 8010e14:	2400fcc4 	.word	0x2400fcc4
 8010e18:	08010de5 	.word	0x08010de5
 8010e1c:	2400fcc0 	.word	0x2400fcc0
 8010e20:	2400fd0c 	.word	0x2400fd0c

08010e24 <tcp_timer_needed>:
{
 8010e24:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 8010e26:	f7f6 fa81 	bl	800732c <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8010e5c <tcp_timer_needed+0x38>)
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	b99a      	cbnz	r2, 8010e58 <tcp_timer_needed+0x34>
 8010e30:	4a0b      	ldr	r2, [pc, #44]	@ (8010e60 <tcp_timer_needed+0x3c>)
 8010e32:	6812      	ldr	r2, [r2, #0]
 8010e34:	b162      	cbz	r2, 8010e50 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 8010e36:	2201      	movs	r2, #1
 8010e38:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8010e3a:	f7f6 fa77 	bl	800732c <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010e3e:	f7f6 f8ed 	bl	800701c <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010e42:	2200      	movs	r2, #0
 8010e44:	4907      	ldr	r1, [pc, #28]	@ (8010e64 <tcp_timer_needed+0x40>)
 8010e46:	30fa      	adds	r0, #250	@ 0xfa
}
 8010e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010e4c:	f7ff bf7e 	b.w	8010d4c <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010e50:	4a05      	ldr	r2, [pc, #20]	@ (8010e68 <tcp_timer_needed+0x44>)
 8010e52:	6812      	ldr	r2, [r2, #0]
 8010e54:	2a00      	cmp	r2, #0
 8010e56:	d1ee      	bne.n	8010e36 <tcp_timer_needed+0x12>
}
 8010e58:	bd08      	pop	{r3, pc}
 8010e5a:	bf00      	nop
 8010e5c:	2400fd0c 	.word	0x2400fd0c
 8010e60:	2400fcc4 	.word	0x2400fcc4
 8010e64:	08010de5 	.word	0x08010de5
 8010e68:	2400fcc0 	.word	0x2400fcc0

08010e6c <sys_timeouts_init>:
{
 8010e6c:	b538      	push	{r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010e6e:	4d0c      	ldr	r5, [pc, #48]	@ (8010ea0 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 8010e70:	f7f6 fa5c 	bl	800732c <sys_check_core_locking>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010e74:	4c0b      	ldr	r4, [pc, #44]	@ (8010ea4 <sys_timeouts_init+0x38>)
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010e76:	f7f6 f8d1 	bl	800701c <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010e7a:	462a      	mov	r2, r5
 8010e7c:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 8010e80:	4621      	mov	r1, r4
 8010e82:	f7ff ff63 	bl	8010d4c <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 8010e86:	f7f6 fa51 	bl	800732c <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010e8a:	f7f6 f8c7 	bl	800701c <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010e8e:	f105 0208 	add.w	r2, r5, #8
 8010e92:	4621      	mov	r1, r4
 8010e94:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
}
 8010e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010e9c:	f7ff bf56 	b.w	8010d4c <sys_timeout_abs>
 8010ea0:	08016bfc 	.word	0x08016bfc
 8010ea4:	08010da5 	.word	0x08010da5

08010ea8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8010eac:	f7f6 fa3e 	bl	800732c <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010eb0:	4c10      	ldr	r4, [pc, #64]	@ (8010ef4 <sys_check_timeouts+0x4c>)
 8010eb2:	f7f6 f8b3 	bl	800701c <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8010eb6:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8010ef8 <sys_check_timeouts+0x50>
  now = sys_now();
 8010eba:	4607      	mov	r7, r0
 8010ebc:	e00f      	b.n	8010ede <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010ebe:	685a      	ldr	r2, [r3, #4]
 8010ec0:	eba7 0c02 	sub.w	ip, r7, r2
 8010ec4:	f1bc 0f00 	cmp.w	ip, #0
 8010ec8:	db0e      	blt.n	8010ee8 <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 8010eca:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 8010ecc:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 8010ece:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 8010ed2:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 8010ed6:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010ed8:	f7fa ffa2 	bl	800be20 <memp_free>
    if (handler != NULL) {
 8010edc:	b935      	cbnz	r5, 8010eec <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 8010ede:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010ee0:	200a      	movs	r0, #10
 8010ee2:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d1ea      	bne.n	8010ebe <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 8010eec:	4648      	mov	r0, r9
 8010eee:	47a8      	blx	r5
 8010ef0:	e7f5      	b.n	8010ede <sys_check_timeouts+0x36>
 8010ef2:	bf00      	nop
 8010ef4:	2400fd14 	.word	0x2400fd14
 8010ef8:	2400fd10 	.word	0x2400fd10

08010efc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010efc:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010efe:	4c08      	ldr	r4, [pc, #32]	@ (8010f20 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 8010f00:	f7f6 fa14 	bl	800732c <sys_check_core_locking>
  if (next_timeout == NULL) {
 8010f04:	6823      	ldr	r3, [r4, #0]
 8010f06:	b13b      	cbz	r3, 8010f18 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8010f08:	f7f6 f888 	bl	800701c <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010f0c:	6823      	ldr	r3, [r4, #0]
 8010f0e:	685b      	ldr	r3, [r3, #4]
    return 0;
 8010f10:	1a18      	subs	r0, r3, r0
 8010f12:	bf48      	it	mi
 8010f14:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 8010f16:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010f18:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010f1c:	bd10      	pop	{r4, pc}
 8010f1e:	bf00      	nop
 8010f20:	2400fd14 	.word	0x2400fd14

08010f24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010f24:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010f26:	f001 fed1 	bl	8012ccc <rand>
 8010f2a:	4b02      	ldr	r3, [pc, #8]	@ (8010f34 <udp_init+0x10>)
 8010f2c:	4a02      	ldr	r2, [pc, #8]	@ (8010f38 <udp_init+0x14>)
 8010f2e:	4303      	orrs	r3, r0
 8010f30:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 8010f32:	bd08      	pop	{r3, pc}
 8010f34:	ffffc000 	.word	0xffffc000
 8010f38:	24000036 	.word	0x24000036

08010f3c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f40:	4680      	mov	r8, r0
 8010f42:	b085      	sub	sp, #20
 8010f44:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8010f46:	f7f6 f9f1 	bl	800732c <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010f4a:	f1b8 0f00 	cmp.w	r8, #0
 8010f4e:	f000 80c4 	beq.w	80110da <udp_input+0x19e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010f52:	2f00      	cmp	r7, #0
 8010f54:	f000 80ca 	beq.w	80110ec <udp_input+0x1b0>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010f58:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8010f5c:	2b07      	cmp	r3, #7
 8010f5e:	f240 808c 	bls.w	801107a <udp_input+0x13e>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010f62:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 801113c <udp_input+0x200>
  udphdr = (struct udp_hdr *)p->payload;
 8010f66:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010f6a:	f8d9 1000 	ldr.w	r1, [r9]
 8010f6e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010f72:	f001 f8ab 	bl	80120cc <ip4_addr_isbroadcast_u32>
 8010f76:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010f78:	8820      	ldrh	r0, [r4, #0]
 8010f7a:	f7fa fb89 	bl	800b690 <lwip_htons>
 8010f7e:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 8010f80:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 8010f82:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8010f84:	f7fa fb84 	bl	800b690 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f88:	4b64      	ldr	r3, [pc, #400]	@ (801111c <udp_input+0x1e0>)
  dest = lwip_ntohs(udphdr->dest);
 8010f8a:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f8c:	681c      	ldr	r4, [r3, #0]
 8010f8e:	2c00      	cmp	r4, #0
 8010f90:	d07c      	beq.n	801108c <udp_input+0x150>
  uncon_pcb = NULL;
 8010f92:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 8010f96:	465e      	mov	r6, fp
 8010f98:	e004      	b.n	8010fa4 <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f9a:	68e3      	ldr	r3, [r4, #12]
 8010f9c:	4626      	mov	r6, r4
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d071      	beq.n	8011086 <udp_input+0x14a>
 8010fa2:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010fa4:	8a63      	ldrh	r3, [r4, #18]
 8010fa6:	42ab      	cmp	r3, r5
 8010fa8:	d1f7      	bne.n	8010f9a <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010faa:	2f00      	cmp	r7, #0
 8010fac:	f000 808e 	beq.w	80110cc <udp_input+0x190>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010fb0:	7a22      	ldrb	r2, [r4, #8]
 8010fb2:	b13a      	cbz	r2, 8010fc4 <udp_input+0x88>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010fb4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010fb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010fbc:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d1ea      	bne.n	8010f9a <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010fc4:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8010fc6:	f1ba 0f00 	cmp.w	sl, #0
 8010fca:	d038      	beq.n	801103e <udp_input+0x102>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010fcc:	b13b      	cbz	r3, 8010fde <udp_input+0xa2>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010fce:	f8d9 2014 	ldr.w	r2, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010fd2:	1c50      	adds	r0, r2, #1
 8010fd4:	d003      	beq.n	8010fde <udp_input+0xa2>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010fd6:	405a      	eors	r2, r3
 8010fd8:	68b9      	ldr	r1, [r7, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010fda:	420a      	tst	r2, r1
 8010fdc:	d1dd      	bne.n	8010f9a <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010fde:	7c22      	ldrb	r2, [r4, #16]
 8010fe0:	0752      	lsls	r2, r2, #29
 8010fe2:	d408      	bmi.n	8010ff6 <udp_input+0xba>
        if (uncon_pcb == NULL) {
 8010fe4:	f1bb 0f00 	cmp.w	fp, #0
 8010fe8:	f000 8091 	beq.w	801110e <udp_input+0x1d2>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010fec:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8010ff0:	3201      	adds	r2, #1
 8010ff2:	f000 8082 	beq.w	80110fa <udp_input+0x1be>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010ff6:	8aa3      	ldrh	r3, [r4, #20]
 8010ff8:	9a03      	ldr	r2, [sp, #12]
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d1cd      	bne.n	8010f9a <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010ffe:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8011000:	b11b      	cbz	r3, 801100a <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011002:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011006:	4293      	cmp	r3, r2
 8011008:	d1c7      	bne.n	8010f9a <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801100a:	b34e      	cbz	r6, 8011060 <udp_input+0x124>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801100c:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 801100e:	46a3      	mov	fp, r4
          pcb->next = udp_pcbs;
 8011010:	4a42      	ldr	r2, [pc, #264]	@ (801111c <udp_input+0x1e0>)
          prev->next = pcb->next;
 8011012:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 8011014:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 8011016:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 8011018:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801101a:	2108      	movs	r1, #8
 801101c:	4640      	mov	r0, r8
 801101e:	f7fb f9a9 	bl	800c374 <pbuf_remove_header>
 8011022:	bb18      	cbnz	r0, 801106c <udp_input+0x130>
 8011024:	465c      	mov	r4, fp
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011026:	69a5      	ldr	r5, [r4, #24]
 8011028:	b33d      	cbz	r5, 801107a <udp_input+0x13e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801102a:	9b03      	ldr	r3, [sp, #12]
 801102c:	4642      	mov	r2, r8
 801102e:	69e0      	ldr	r0, [r4, #28]
 8011030:	4621      	mov	r1, r4
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	4b3a      	ldr	r3, [pc, #232]	@ (8011120 <udp_input+0x1e4>)
 8011036:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011038:	b005      	add	sp, #20
 801103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801103e:	b11b      	cbz	r3, 8011048 <udp_input+0x10c>
 8011040:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8011044:	4293      	cmp	r3, r2
 8011046:	d1a8      	bne.n	8010f9a <udp_input+0x5e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011048:	7c23      	ldrb	r3, [r4, #16]
 801104a:	0759      	lsls	r1, r3, #29
 801104c:	d4d3      	bmi.n	8010ff6 <udp_input+0xba>
      if ((pcb->remote_port == src) &&
 801104e:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 8011050:	f1bb 0f00 	cmp.w	fp, #0
 8011054:	bf08      	it	eq
 8011056:	46a3      	moveq	fp, r4
      if ((pcb->remote_port == src) &&
 8011058:	9a03      	ldr	r2, [sp, #12]
 801105a:	4293      	cmp	r3, r2
 801105c:	d19d      	bne.n	8010f9a <udp_input+0x5e>
 801105e:	e7ce      	b.n	8010ffe <udp_input+0xc2>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011060:	2108      	movs	r1, #8
 8011062:	4640      	mov	r0, r8
 8011064:	f7fb f986 	bl	800c374 <pbuf_remove_header>
 8011068:	2800      	cmp	r0, #0
 801106a:	d0dc      	beq.n	8011026 <udp_input+0xea>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801106c:	4b2d      	ldr	r3, [pc, #180]	@ (8011124 <udp_input+0x1e8>)
 801106e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011072:	492d      	ldr	r1, [pc, #180]	@ (8011128 <udp_input+0x1ec>)
 8011074:	482d      	ldr	r0, [pc, #180]	@ (801112c <udp_input+0x1f0>)
 8011076:	f001 ff3b 	bl	8012ef0 <iprintf>
      pbuf_free(p);
 801107a:	4640      	mov	r0, r8
}
 801107c:	b005      	add	sp, #20
 801107e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8011082:	f7fb b9d9 	b.w	800c438 <pbuf_free>
  if (pcb != NULL) {
 8011086:	f1bb 0f00 	cmp.w	fp, #0
 801108a:	d1c6      	bne.n	801101a <udp_input+0xde>
  if (for_us) {
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011092:	429a      	cmp	r2, r3
 8011094:	d1f1      	bne.n	801107a <udp_input+0x13e>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011096:	2108      	movs	r1, #8
 8011098:	4640      	mov	r0, r8
 801109a:	f7fb f96b 	bl	800c374 <pbuf_remove_header>
 801109e:	2800      	cmp	r0, #0
 80110a0:	d1e4      	bne.n	801106c <udp_input+0x130>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80110a2:	f1ba 0f00 	cmp.w	sl, #0
 80110a6:	d1e8      	bne.n	801107a <udp_input+0x13e>
 80110a8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80110ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80110b0:	2be0      	cmp	r3, #224	@ 0xe0
 80110b2:	d0e2      	beq.n	801107a <udp_input+0x13e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80110b4:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 80110b8:	4640      	mov	r0, r8
 80110ba:	3108      	adds	r1, #8
 80110bc:	b209      	sxth	r1, r1
 80110be:	f7fb f987 	bl	800c3d0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80110c2:	2103      	movs	r1, #3
 80110c4:	4640      	mov	r0, r8
 80110c6:	f000 fe4d 	bl	8011d64 <icmp_dest_unreach>
 80110ca:	e7d6      	b.n	801107a <udp_input+0x13e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80110cc:	4b15      	ldr	r3, [pc, #84]	@ (8011124 <udp_input+0x1e8>)
 80110ce:	2288      	movs	r2, #136	@ 0x88
 80110d0:	4917      	ldr	r1, [pc, #92]	@ (8011130 <udp_input+0x1f4>)
 80110d2:	4816      	ldr	r0, [pc, #88]	@ (801112c <udp_input+0x1f0>)
 80110d4:	f001 ff0c 	bl	8012ef0 <iprintf>
 80110d8:	e76a      	b.n	8010fb0 <udp_input+0x74>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80110da:	4b12      	ldr	r3, [pc, #72]	@ (8011124 <udp_input+0x1e8>)
 80110dc:	22cf      	movs	r2, #207	@ 0xcf
 80110de:	4915      	ldr	r1, [pc, #84]	@ (8011134 <udp_input+0x1f8>)
 80110e0:	4812      	ldr	r0, [pc, #72]	@ (801112c <udp_input+0x1f0>)
 80110e2:	f001 ff05 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80110e6:	2f00      	cmp	r7, #0
 80110e8:	f47f af36 	bne.w	8010f58 <udp_input+0x1c>
 80110ec:	4b0d      	ldr	r3, [pc, #52]	@ (8011124 <udp_input+0x1e8>)
 80110ee:	22d0      	movs	r2, #208	@ 0xd0
 80110f0:	4911      	ldr	r1, [pc, #68]	@ (8011138 <udp_input+0x1fc>)
 80110f2:	480e      	ldr	r0, [pc, #56]	@ (801112c <udp_input+0x1f0>)
 80110f4:	f001 fefc 	bl	8012ef0 <iprintf>
 80110f8:	e72e      	b.n	8010f58 <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	f8db 1000 	ldr.w	r1, [fp]
 8011100:	4291      	cmp	r1, r2
 8011102:	f43f af78 	beq.w	8010ff6 <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011106:	429a      	cmp	r2, r3
 8011108:	bf08      	it	eq
 801110a:	46a3      	moveq	fp, r4
 801110c:	e773      	b.n	8010ff6 <udp_input+0xba>
      if ((pcb->remote_port == src) &&
 801110e:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 8011110:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 8011112:	9a03      	ldr	r2, [sp, #12]
 8011114:	4293      	cmp	r3, r2
 8011116:	f47f af40 	bne.w	8010f9a <udp_input+0x5e>
 801111a:	e770      	b.n	8010ffe <udp_input+0xc2>
 801111c:	2400fd18 	.word	0x2400fd18
 8011120:	24009210 	.word	0x24009210
 8011124:	08016c0c 	.word	0x08016c0c
 8011128:	08016c98 	.word	0x08016c98
 801112c:	08014150 	.word	0x08014150
 8011130:	08016c70 	.word	0x08016c70
 8011134:	08016c3c 	.word	0x08016c3c
 8011138:	08016c54 	.word	0x08016c54
 801113c:	24009200 	.word	0x24009200

08011140 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011142:	460f      	mov	r7, r1
 8011144:	4605      	mov	r5, r0
 8011146:	4616      	mov	r6, r2
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 8011148:	f7f6 f8f0 	bl	800732c <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801114c:	2f00      	cmp	r7, #0
 801114e:	d043      	beq.n	80111d8 <udp_bind+0x98>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011150:	2d00      	cmp	r5, #0
 8011152:	d05c      	beq.n	801120e <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011154:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8011238 <udp_bind+0xf8>
 8011158:	f8dc 0000 	ldr.w	r0, [ip]
 801115c:	b1e8      	cbz	r0, 801119a <udp_bind+0x5a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801115e:	4285      	cmp	r5, r0
 8011160:	d03c      	beq.n	80111dc <udp_bind+0x9c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011162:	4604      	mov	r4, r0
 8011164:	e001      	b.n	801116a <udp_bind+0x2a>
    if (pcb == ipcb) {
 8011166:	42a5      	cmp	r5, r4
 8011168:	d038      	beq.n	80111dc <udp_bind+0x9c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801116a:	68e4      	ldr	r4, [r4, #12]
 801116c:	2c00      	cmp	r4, #0
 801116e:	d1fa      	bne.n	8011166 <udp_bind+0x26>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011170:	b1ae      	cbz	r6, 801119e <udp_bind+0x5e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011172:	6839      	ldr	r1, [r7, #0]
 8011174:	4603      	mov	r3, r0
 8011176:	e001      	b.n	801117c <udp_bind+0x3c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	b303      	cbz	r3, 80111be <udp_bind+0x7e>
      if (pcb != ipcb) {
 801117c:	429d      	cmp	r5, r3
 801117e:	d0fb      	beq.n	8011178 <udp_bind+0x38>
          if ((ipcb->local_port == port) &&
 8011180:	8a5a      	ldrh	r2, [r3, #18]
 8011182:	42b2      	cmp	r2, r6
 8011184:	d1f8      	bne.n	8011178 <udp_bind+0x38>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011186:	681a      	ldr	r2, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 8011188:	2a00      	cmp	r2, #0
 801118a:	bf18      	it	ne
 801118c:	428a      	cmpne	r2, r1
 801118e:	d001      	beq.n	8011194 <udp_bind+0x54>
 8011190:	2900      	cmp	r1, #0
 8011192:	d1f1      	bne.n	8011178 <udp_bind+0x38>
      return ERR_USE;
 8011194:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 8011198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 801119a:	b9ae      	cbnz	r6, 80111c8 <udp_bind+0x88>
  rebind = 0;
 801119c:	4604      	mov	r4, r0
 801119e:	f8df e09c 	ldr.w	lr, [pc, #156]	@ 801123c <udp_bind+0xfc>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80111a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80111a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80111aa:	f8be 6000 	ldrh.w	r6, [lr]
 80111ae:	429e      	cmp	r6, r3
 80111b0:	d028      	beq.n	8011204 <udp_bind+0xc4>
 80111b2:	3601      	adds	r6, #1
 80111b4:	b2b6      	uxth	r6, r6
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80111b6:	b9e0      	cbnz	r0, 80111f2 <udp_bind+0xb2>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80111b8:	6839      	ldr	r1, [r7, #0]
 80111ba:	f8ae 6000 	strh.w	r6, [lr]
 80111be:	6029      	str	r1, [r5, #0]
  pcb->local_port = port;
 80111c0:	826e      	strh	r6, [r5, #18]
  if (rebind == 0) {
 80111c2:	b124      	cbz	r4, 80111ce <udp_bind+0x8e>
  return ERR_OK;
 80111c4:	2000      	movs	r0, #0
}
 80111c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80111c8:	683b      	ldr	r3, [r7, #0]
  pcb->local_port = port;
 80111ca:	826e      	strh	r6, [r5, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80111cc:	602b      	str	r3, [r5, #0]
    pcb->next = udp_pcbs;
 80111ce:	60e8      	str	r0, [r5, #12]
  return ERR_OK;
 80111d0:	2000      	movs	r0, #0
    udp_pcbs = pcb;
 80111d2:	f8cc 5000 	str.w	r5, [ip]
 80111d6:	e7f6      	b.n	80111c6 <udp_bind+0x86>
    ipaddr = IP4_ADDR_ANY;
 80111d8:	4f13      	ldr	r7, [pc, #76]	@ (8011228 <udp_bind+0xe8>)
 80111da:	e7b9      	b.n	8011150 <udp_bind+0x10>
      rebind = 1;
 80111dc:	2401      	movs	r4, #1
 80111de:	e7c7      	b.n	8011170 <udp_bind+0x30>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80111e0:	3901      	subs	r1, #1
 80111e2:	b289      	uxth	r1, r1
 80111e4:	b1e9      	cbz	r1, 8011222 <udp_bind+0xe2>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80111e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80111ea:	429e      	cmp	r6, r3
 80111ec:	d1e1      	bne.n	80111b2 <udp_bind+0x72>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80111ee:	f44f 4640 	mov.w	r6, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80111f2:	4603      	mov	r3, r0
 80111f4:	e002      	b.n	80111fc <udp_bind+0xbc>
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d0dd      	beq.n	80111b8 <udp_bind+0x78>
    if (pcb->local_port == udp_port) {
 80111fc:	8a5a      	ldrh	r2, [r3, #18]
 80111fe:	42b2      	cmp	r2, r6
 8011200:	d1f9      	bne.n	80111f6 <udp_bind+0xb6>
 8011202:	e7ed      	b.n	80111e0 <udp_bind+0xa0>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011204:	f44f 4640 	mov.w	r6, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011208:	2800      	cmp	r0, #0
 801120a:	d1f2      	bne.n	80111f2 <udp_bind+0xb2>
 801120c:	e7d4      	b.n	80111b8 <udp_bind+0x78>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801120e:	4b07      	ldr	r3, [pc, #28]	@ (801122c <udp_bind+0xec>)
 8011210:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8011214:	4906      	ldr	r1, [pc, #24]	@ (8011230 <udp_bind+0xf0>)
 8011216:	4807      	ldr	r0, [pc, #28]	@ (8011234 <udp_bind+0xf4>)
 8011218:	f001 fe6a 	bl	8012ef0 <iprintf>
 801121c:	f06f 000f 	mvn.w	r0, #15
}
 8011220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011222:	f8ae 6000 	strh.w	r6, [lr]
    if (port == 0) {
 8011226:	e7b5      	b.n	8011194 <udp_bind+0x54>
 8011228:	08016fdc 	.word	0x08016fdc
 801122c:	08016c0c 	.word	0x08016c0c
 8011230:	08016cb4 	.word	0x08016cb4
 8011234:	08014150 	.word	0x08014150
 8011238:	2400fd18 	.word	0x2400fd18
 801123c:	24000036 	.word	0x24000036

08011240 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011240:	b570      	push	{r4, r5, r6, lr}
 8011242:	4604      	mov	r4, r0
 8011244:	460e      	mov	r6, r1
 8011246:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 8011248:	f7f6 f870 	bl	800732c <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801124c:	b114      	cbz	r4, 8011254 <udp_recv+0x14>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801124e:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 8011252:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011254:	4b04      	ldr	r3, [pc, #16]	@ (8011268 <udp_recv+0x28>)
 8011256:	f240 428a 	movw	r2, #1162	@ 0x48a
 801125a:	4904      	ldr	r1, [pc, #16]	@ (801126c <udp_recv+0x2c>)
 801125c:	4804      	ldr	r0, [pc, #16]	@ (8011270 <udp_recv+0x30>)
}
 801125e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011262:	f001 be45 	b.w	8012ef0 <iprintf>
 8011266:	bf00      	nop
 8011268:	08016c0c 	.word	0x08016c0c
 801126c:	08016ccc 	.word	0x08016ccc
 8011270:	08014150 	.word	0x08014150

08011274 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011274:	b510      	push	{r4, lr}
 8011276:	4604      	mov	r4, r0
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 8011278:	f7f6 f858 	bl	800732c <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801127c:	b1cc      	cbz	r4, 80112b2 <udp_remove+0x3e>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801127e:	4a11      	ldr	r2, [pc, #68]	@ (80112c4 <udp_remove+0x50>)
 8011280:	6813      	ldr	r3, [r2, #0]
 8011282:	42a3      	cmp	r3, r4
 8011284:	d00d      	beq.n	80112a2 <udp_remove+0x2e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011286:	b133      	cbz	r3, 8011296 <udp_remove+0x22>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011288:	461a      	mov	r2, r3
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	b11b      	cbz	r3, 8011296 <udp_remove+0x22>
 801128e:	42a3      	cmp	r3, r4
 8011290:	d1fa      	bne.n	8011288 <udp_remove+0x14>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011292:	68e3      	ldr	r3, [r4, #12]
 8011294:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011296:	4621      	mov	r1, r4
 8011298:	2000      	movs	r0, #0
}
 801129a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 801129e:	f7fa bdbf 	b.w	800be20 <memp_free>
    udp_pcbs = udp_pcbs->next;
 80112a2:	68e3      	ldr	r3, [r4, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80112a4:	4621      	mov	r1, r4
 80112a6:	2000      	movs	r0, #0
    udp_pcbs = udp_pcbs->next;
 80112a8:	6013      	str	r3, [r2, #0]
}
 80112aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 80112ae:	f7fa bdb7 	b.w	800be20 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80112b2:	4b05      	ldr	r3, [pc, #20]	@ (80112c8 <udp_remove+0x54>)
 80112b4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80112b8:	4904      	ldr	r1, [pc, #16]	@ (80112cc <udp_remove+0x58>)
 80112ba:	4805      	ldr	r0, [pc, #20]	@ (80112d0 <udp_remove+0x5c>)
}
 80112bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80112c0:	f001 be16 	b.w	8012ef0 <iprintf>
 80112c4:	2400fd18 	.word	0x2400fd18
 80112c8:	08016c0c 	.word	0x08016c0c
 80112cc:	08016ce4 	.word	0x08016ce4
 80112d0:	08014150 	.word	0x08014150

080112d4 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80112d4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 80112d6:	f7f6 f829 	bl	800732c <sys_check_core_locking>
  LWIP_ASSERT_CORE_LOCKED();
 80112da:	f7f6 f827 	bl	800732c <sys_check_core_locking>
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80112de:	2000      	movs	r0, #0
 80112e0:	f7fa fd58 	bl	800bd94 <memp_malloc>
  if (pcb != NULL) {
 80112e4:	4604      	mov	r4, r0
 80112e6:	b128      	cbz	r0, 80112f4 <udp_new_ip_type+0x20>
    memset(pcb, 0, sizeof(struct udp_pcb));
 80112e8:	2220      	movs	r2, #32
 80112ea:	2100      	movs	r1, #0
 80112ec:	f001 fe9f 	bl	801302e <memset>
    pcb->ttl = UDP_TTL;
 80112f0:	23ff      	movs	r3, #255	@ 0xff
 80112f2:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 80112f4:	4620      	mov	r0, r4
 80112f6:	bd10      	pop	{r4, pc}

080112f8 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80112f8:	b110      	cbz	r0, 8011300 <udp_netif_ip_addr_changed+0x8>
 80112fa:	6802      	ldr	r2, [r0, #0]
 80112fc:	b101      	cbz	r1, 8011300 <udp_netif_ip_addr_changed+0x8>
 80112fe:	b902      	cbnz	r2, 8011302 <udp_netif_ip_addr_changed+0xa>
 8011300:	4770      	bx	lr
 8011302:	680b      	ldr	r3, [r1, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d0fb      	beq.n	8011300 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011308:	4b08      	ldr	r3, [pc, #32]	@ (801132c <udp_netif_ip_addr_changed+0x34>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d0f7      	beq.n	8011300 <udp_netif_ip_addr_changed+0x8>
{
 8011310:	b410      	push	{r4}
 8011312:	e000      	b.n	8011316 <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011314:	6802      	ldr	r2, [r0, #0]
 8011316:	681c      	ldr	r4, [r3, #0]
 8011318:	4294      	cmp	r4, r2
 801131a:	d101      	bne.n	8011320 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801131c:	680a      	ldr	r2, [r1, #0]
 801131e:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d1f6      	bne.n	8011314 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 8011326:	f85d 4b04 	ldr.w	r4, [sp], #4
 801132a:	4770      	bx	lr
 801132c:	2400fd18 	.word	0x2400fd18

08011330 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011334:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011336:	f04f 0e0a 	mov.w	lr, #10
{
 801133a:	b085      	sub	sp, #20
 801133c:	4e50      	ldr	r6, [pc, #320]	@ (8011480 <etharp_find_entry+0x150>)
 801133e:	4605      	mov	r5, r0
 8011340:	4608      	mov	r0, r1
 8011342:	4617      	mov	r7, r2
 8011344:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011346:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 8011348:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801134a:	46f0      	mov	r8, lr
 801134c:	46f3      	mov	fp, lr
 801134e:	9001      	str	r0, [sp, #4]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011350:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011354:	e004      	b.n	8011360 <etharp_find_entry+0x30>
 8011356:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011358:	3301      	adds	r3, #1
 801135a:	3118      	adds	r1, #24
 801135c:	2b0a      	cmp	r3, #10
 801135e:	d019      	beq.n	8011394 <etharp_find_entry+0x64>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011360:	2c0a      	cmp	r4, #10
 8011362:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 8011366:	f891 a014 	ldrb.w	sl, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801136a:	d139      	bne.n	80113e0 <etharp_find_entry+0xb0>
 801136c:	f1ba 0f00 	cmp.w	sl, #0
 8011370:	d0f1      	beq.n	8011356 <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011372:	b11d      	cbz	r5, 801137c <etharp_find_entry+0x4c>
 8011374:	6828      	ldr	r0, [r5, #0]
 8011376:	684a      	ldr	r2, [r1, #4]
 8011378:	4290      	cmp	r0, r2
 801137a:	d03d      	beq.n	80113f8 <etharp_find_entry+0xc8>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801137c:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 8011380:	8a48      	ldrh	r0, [r1, #18]
      if (state == ETHARP_STATE_PENDING) {
 8011382:	d031      	beq.n	80113e8 <etharp_find_entry+0xb8>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011384:	4548      	cmp	r0, r9
 8011386:	d3e7      	bcc.n	8011358 <etharp_find_entry+0x28>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011388:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 801138a:	4681      	mov	r9, r0
 801138c:	46e0      	mov	r8, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801138e:	3118      	adds	r1, #24
 8011390:	2b0a      	cmp	r3, #10
 8011392:	d1e5      	bne.n	8011360 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011394:	9801      	ldr	r0, [sp, #4]
 8011396:	2801      	cmp	r0, #1
 8011398:	d16e      	bne.n	8011478 <etharp_find_entry+0x148>
 801139a:	2c0a      	cmp	r4, #10
 801139c:	d032      	beq.n	8011404 <etharp_find_entry+0xd4>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801139e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80113a2:	46a1      	mov	r9, r4
 80113a4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80113a8:	7d1b      	ldrb	r3, [r3, #20]
 80113aa:	b133      	cbz	r3, 80113ba <etharp_find_entry+0x8a>
 80113ac:	4b35      	ldr	r3, [pc, #212]	@ (8011484 <etharp_find_entry+0x154>)
 80113ae:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80113b2:	4935      	ldr	r1, [pc, #212]	@ (8011488 <etharp_find_entry+0x158>)
 80113b4:	4835      	ldr	r0, [pc, #212]	@ (801148c <etharp_find_entry+0x15c>)
 80113b6:	f001 fd9b 	bl	8012ef0 <iprintf>
    etharp_free_entry(i);
 80113ba:	46a0      	mov	r8, r4
 80113bc:	0064      	lsls	r4, r4, #1
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80113be:	b12d      	cbz	r5, 80113cc <etharp_find_entry+0x9c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80113c0:	eb04 0309 	add.w	r3, r4, r9
 80113c4:	682a      	ldr	r2, [r5, #0]
 80113c6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80113ca:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80113cc:	444c      	add	r4, r9
 80113ce:	2300      	movs	r3, #0
 80113d0:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 80113d4:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80113d6:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 80113d8:	4640      	mov	r0, r8
 80113da:	b005      	add	sp, #20
 80113dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 80113e0:	f1ba 0f00 	cmp.w	sl, #0
 80113e4:	d0b8      	beq.n	8011358 <etharp_find_entry+0x28>
 80113e6:	e7c4      	b.n	8011372 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 80113e8:	680a      	ldr	r2, [r1, #0]
 80113ea:	b392      	cbz	r2, 8011452 <etharp_find_entry+0x122>
          if (arp_table[i].ctime >= age_queue) {
 80113ec:	9a02      	ldr	r2, [sp, #8]
 80113ee:	4290      	cmp	r0, r2
 80113f0:	d3b2      	bcc.n	8011358 <etharp_find_entry+0x28>
 80113f2:	46e6      	mov	lr, ip
 80113f4:	9002      	str	r0, [sp, #8]
 80113f6:	e7af      	b.n	8011358 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80113f8:	b117      	cbz	r7, 8011400 <etharp_find_entry+0xd0>
 80113fa:	6888      	ldr	r0, [r1, #8]
 80113fc:	42b8      	cmp	r0, r7
 80113fe:	d1bd      	bne.n	801137c <etharp_find_entry+0x4c>
 8011400:	46e0      	mov	r8, ip
 8011402:	e7e9      	b.n	80113d8 <etharp_find_entry+0xa8>
    if (old_stable < ARP_TABLE_SIZE) {
 8011404:	f1b8 0f0a 	cmp.w	r8, #10
 8011408:	d02a      	beq.n	8011460 <etharp_find_entry+0x130>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801140a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801140e:	46c1      	mov	r9, r8
 8011410:	ea4f 0448 	mov.w	r4, r8, lsl #1
 8011414:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 8011418:	b1a3      	cbz	r3, 8011444 <etharp_find_entry+0x114>
 801141a:	4b1a      	ldr	r3, [pc, #104]	@ (8011484 <etharp_find_entry+0x154>)
 801141c:	f240 126d 	movw	r2, #365	@ 0x16d
 8011420:	491b      	ldr	r1, [pc, #108]	@ (8011490 <etharp_find_entry+0x160>)
 8011422:	481a      	ldr	r0, [pc, #104]	@ (801148c <etharp_find_entry+0x15c>)
 8011424:	f001 fd64 	bl	8012ef0 <iprintf>
  if (arp_table[i].q != NULL) {
 8011428:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 801142c:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8011430:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8011434:	f856 000a 	ldr.w	r0, [r6, sl]
 8011438:	b120      	cbz	r0, 8011444 <etharp_find_entry+0x114>
    free_etharp_q(arp_table[i].q);
 801143a:	f7fa fffd 	bl	800c438 <pbuf_free>
    arp_table[i].q = NULL;
 801143e:	2300      	movs	r3, #0
 8011440:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011444:	eb04 0309 	add.w	r3, r4, r9
 8011448:	2200      	movs	r2, #0
 801144a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801144e:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011450:	e7b5      	b.n	80113be <etharp_find_entry+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 8011452:	9a03      	ldr	r2, [sp, #12]
 8011454:	4290      	cmp	r0, r2
 8011456:	f4ff af7f 	bcc.w	8011358 <etharp_find_entry+0x28>
 801145a:	46e3      	mov	fp, ip
 801145c:	9003      	str	r0, [sp, #12]
 801145e:	e77b      	b.n	8011358 <etharp_find_entry+0x28>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011460:	f1bb 0f0a 	cmp.w	fp, #10
 8011464:	d105      	bne.n	8011472 <etharp_find_entry+0x142>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011466:	f1be 0f0a 	cmp.w	lr, #10
 801146a:	d005      	beq.n	8011478 <etharp_find_entry+0x148>
    etharp_free_entry(i);
 801146c:	46f0      	mov	r8, lr
 801146e:	46f1      	mov	r9, lr
 8011470:	e7da      	b.n	8011428 <etharp_find_entry+0xf8>
 8011472:	46d8      	mov	r8, fp
 8011474:	46d9      	mov	r9, fp
 8011476:	e7d7      	b.n	8011428 <etharp_find_entry+0xf8>
    return (s16_t)ERR_MEM;
 8011478:	f04f 38ff 	mov.w	r8, #4294967295
 801147c:	e7ac      	b.n	80113d8 <etharp_find_entry+0xa8>
 801147e:	bf00      	nop
 8011480:	2400fd20 	.word	0x2400fd20
 8011484:	08016cfc 	.word	0x08016cfc
 8011488:	08016d4c 	.word	0x08016d4c
 801148c:	08014150 	.word	0x08014150
 8011490:	08016d34 	.word	0x08016d34

08011494 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011498:	b082      	sub	sp, #8
 801149a:	4688      	mov	r8, r1
 801149c:	4691      	mov	r9, r2
 801149e:	461f      	mov	r7, r3
 80114a0:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80114a4:	4606      	mov	r6, r0
{
 80114a6:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80114aa:	2800      	cmp	r0, #0
 80114ac:	d04a      	beq.n	8011544 <etharp_raw+0xb0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80114ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114b2:	211c      	movs	r1, #28
 80114b4:	200e      	movs	r0, #14
 80114b6:	f7fb f82f 	bl	800c518 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80114ba:	4605      	mov	r5, r0
 80114bc:	2800      	cmp	r0, #0
 80114be:	d049      	beq.n	8011554 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80114c0:	8943      	ldrh	r3, [r0, #10]
 80114c2:	2b1b      	cmp	r3, #27
 80114c4:	d936      	bls.n	8011534 <etharp_raw+0xa0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80114c6:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 80114c8:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 80114ca:	f7fa f8e1 	bl	800b690 <lwip_htons>
 80114ce:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80114d0:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 80114d4:	2b06      	cmp	r3, #6
 80114d6:	d006      	beq.n	80114e6 <etharp_raw+0x52>
 80114d8:	4b20      	ldr	r3, [pc, #128]	@ (801155c <etharp_raw+0xc8>)
 80114da:	f240 4269 	movw	r2, #1129	@ 0x469
 80114de:	4920      	ldr	r1, [pc, #128]	@ (8011560 <etharp_raw+0xcc>)
 80114e0:	4820      	ldr	r0, [pc, #128]	@ (8011564 <etharp_raw+0xd0>)
 80114e2:	f001 fd05 	bl	8012ef0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80114e6:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80114e8:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80114ea:	4e1f      	ldr	r6, [pc, #124]	@ (8011568 <etharp_raw+0xd4>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80114ec:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80114ee:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80114f0:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80114f2:	88b9      	ldrh	r1, [r7, #4]
 80114f4:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80114f6:	f8da 1000 	ldr.w	r1, [sl]
 80114fa:	f8c4 1012 	str.w	r1, [r4, #18]
 80114fe:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8011502:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011504:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011506:	6809      	ldr	r1, [r1, #0]
 8011508:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801150c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801150e:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011510:	6026      	str	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011512:	61a1      	str	r1, [r4, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
 8011514:	f240 4106 	movw	r1, #1030	@ 0x406
 8011518:	80a1      	strh	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801151a:	f640 0106 	movw	r1, #2054	@ 0x806
 801151e:	9100      	str	r1, [sp, #0]
 8011520:	4629      	mov	r1, r5
 8011522:	f001 fa95 	bl	8012a50 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011526:	4628      	mov	r0, r5
 8011528:	f7fa ff86 	bl	800c438 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801152c:	2000      	movs	r0, #0
}
 801152e:	b002      	add	sp, #8
 8011530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011534:	4b09      	ldr	r3, [pc, #36]	@ (801155c <etharp_raw+0xc8>)
 8011536:	f240 4262 	movw	r2, #1122	@ 0x462
 801153a:	490c      	ldr	r1, [pc, #48]	@ (801156c <etharp_raw+0xd8>)
 801153c:	4809      	ldr	r0, [pc, #36]	@ (8011564 <etharp_raw+0xd0>)
 801153e:	f001 fcd7 	bl	8012ef0 <iprintf>
 8011542:	e7c0      	b.n	80114c6 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011544:	4b05      	ldr	r3, [pc, #20]	@ (801155c <etharp_raw+0xc8>)
 8011546:	f240 4257 	movw	r2, #1111	@ 0x457
 801154a:	4909      	ldr	r1, [pc, #36]	@ (8011570 <etharp_raw+0xdc>)
 801154c:	4805      	ldr	r0, [pc, #20]	@ (8011564 <etharp_raw+0xd0>)
 801154e:	f001 fccf 	bl	8012ef0 <iprintf>
 8011552:	e7ac      	b.n	80114ae <etharp_raw+0x1a>
    return ERR_MEM;
 8011554:	f04f 30ff 	mov.w	r0, #4294967295
 8011558:	e7e9      	b.n	801152e <etharp_raw+0x9a>
 801155a:	bf00      	nop
 801155c:	08016cfc 	.word	0x08016cfc
 8011560:	08016dac 	.word	0x08016dac
 8011564:	08014150 	.word	0x08014150
 8011568:	00080100 	.word	0x00080100
 801156c:	08016d78 	.word	0x08016d78
 8011570:	080149e4 	.word	0x080149e4

08011574 <etharp_output_to_arp_index>:
{
 8011574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011578:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011650 <etharp_output_to_arp_index+0xdc>
 801157c:	eb02 0642 	add.w	r6, r2, r2, lsl #1
{
 8011580:	b084      	sub	sp, #16
 8011582:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011584:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
{
 8011588:	4605      	mov	r5, r0
 801158a:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801158c:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8011590:	7d33      	ldrb	r3, [r6, #20]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d936      	bls.n	8011604 <etharp_output_to_arp_index+0x90>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011596:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801159a:	2b02      	cmp	r3, #2
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801159c:	f105 0a26 	add.w	sl, r5, #38	@ 0x26
 80115a0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80115a4:	f100 060c 	add.w	r6, r0, #12
 80115a8:	4446      	add	r6, r8
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80115aa:	d00b      	beq.n	80115c4 <etharp_output_to_arp_index+0x50>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80115ac:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80115b0:	4633      	mov	r3, r6
 80115b2:	4652      	mov	r2, sl
 80115b4:	4639      	mov	r1, r7
 80115b6:	4628      	mov	r0, r5
 80115b8:	9400      	str	r4, [sp, #0]
 80115ba:	f001 fa49 	bl	8012a50 <ethernet_output>
}
 80115be:	b004      	add	sp, #16
 80115c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80115c4:	44a1      	add	r9, r4
 80115c6:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 80115ca:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 80115ce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80115d2:	d820      	bhi.n	8011616 <etharp_output_to_arp_index+0xa2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80115d4:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80115d8:	d3e8      	bcc.n	80115ac <etharp_output_to_arp_index+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80115da:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80115dc:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80115de:	4632      	mov	r2, r6
 80115e0:	4651      	mov	r1, sl
 80115e2:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80115e4:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80115e6:	4b15      	ldr	r3, [pc, #84]	@ (801163c <etharp_output_to_arp_index+0xc8>)
 80115e8:	9002      	str	r0, [sp, #8]
 80115ea:	4628      	mov	r0, r5
 80115ec:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80115ee:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	4653      	mov	r3, sl
 80115f4:	f7ff ff4e 	bl	8011494 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80115f8:	2800      	cmp	r0, #0
 80115fa:	d1d7      	bne.n	80115ac <etharp_output_to_arp_index+0x38>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80115fc:	2303      	movs	r3, #3
 80115fe:	f889 3014 	strb.w	r3, [r9, #20]
 8011602:	e7d3      	b.n	80115ac <etharp_output_to_arp_index+0x38>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011604:	4b0e      	ldr	r3, [pc, #56]	@ (8011640 <etharp_output_to_arp_index+0xcc>)
 8011606:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801160a:	490e      	ldr	r1, [pc, #56]	@ (8011644 <etharp_output_to_arp_index+0xd0>)
 801160c:	480e      	ldr	r0, [pc, #56]	@ (8011648 <etharp_output_to_arp_index+0xd4>)
 801160e:	f001 fc6f 	bl	8012ef0 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011612:	7d33      	ldrb	r3, [r6, #20]
 8011614:	e7bf      	b.n	8011596 <etharp_output_to_arp_index+0x22>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011616:	2301      	movs	r3, #1
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011618:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801161a:	4a0c      	ldr	r2, [pc, #48]	@ (801164c <etharp_output_to_arp_index+0xd8>)
 801161c:	4651      	mov	r1, sl
 801161e:	9303      	str	r3, [sp, #12]
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011620:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011622:	4b06      	ldr	r3, [pc, #24]	@ (801163c <etharp_output_to_arp_index+0xc8>)
 8011624:	9002      	str	r0, [sp, #8]
 8011626:	4628      	mov	r0, r5
 8011628:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801162a:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	4653      	mov	r3, sl
 8011630:	f7ff ff30 	bl	8011494 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011634:	2800      	cmp	r0, #0
 8011636:	d1b9      	bne.n	80115ac <etharp_output_to_arp_index+0x38>
 8011638:	e7e0      	b.n	80115fc <etharp_output_to_arp_index+0x88>
 801163a:	bf00      	nop
 801163c:	080171d0 	.word	0x080171d0
 8011640:	08016cfc 	.word	0x08016cfc
 8011644:	08016df0 	.word	0x08016df0
 8011648:	08014150 	.word	0x08014150
 801164c:	080171d8 	.word	0x080171d8
 8011650:	2400fd20 	.word	0x2400fd20

08011654 <etharp_tmr>:
{
 8011654:	b570      	push	{r4, r5, r6, lr}
 8011656:	4c1d      	ldr	r4, [pc, #116]	@ (80116cc <etharp_tmr+0x78>)
 8011658:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801165a:	2600      	movs	r6, #0
 801165c:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 8011660:	e00a      	b.n	8011678 <etharp_tmr+0x24>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011662:	2a01      	cmp	r2, #1
 8011664:	d01f      	beq.n	80116a6 <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011666:	2a03      	cmp	r2, #3
 8011668:	d02d      	beq.n	80116c6 <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801166a:	2a04      	cmp	r2, #4
 801166c:	d101      	bne.n	8011672 <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801166e:	2302      	movs	r3, #2
 8011670:	7423      	strb	r3, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011672:	3418      	adds	r4, #24
 8011674:	42ac      	cmp	r4, r5
 8011676:	d014      	beq.n	80116a2 <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 8011678:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 801167a:	2a00      	cmp	r2, #0
 801167c:	d0f9      	beq.n	8011672 <etharp_tmr+0x1e>
      arp_table[i].ctime++;
 801167e:	89e3      	ldrh	r3, [r4, #14]
 8011680:	3301      	adds	r3, #1
 8011682:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011684:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 8011688:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801168a:	d3ea      	bcc.n	8011662 <etharp_tmr+0xe>
  if (arp_table[i].q != NULL) {
 801168c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011690:	b118      	cbz	r0, 801169a <etharp_tmr+0x46>
    free_etharp_q(arp_table[i].q);
 8011692:	f7fa fed1 	bl	800c438 <pbuf_free>
    arp_table[i].q = NULL;
 8011696:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801169a:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801169c:	3418      	adds	r4, #24
 801169e:	42ac      	cmp	r4, r5
 80116a0:	d1ea      	bne.n	8011678 <etharp_tmr+0x24>
}
 80116a2:	b004      	add	sp, #16
 80116a4:	bd70      	pop	{r4, r5, r6, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80116a6:	2b04      	cmp	r3, #4
 80116a8:	d8f0      	bhi.n	801168c <etharp_tmr+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80116aa:	9203      	str	r2, [sp, #12]
 80116ac:	4a08      	ldr	r2, [pc, #32]	@ (80116d0 <etharp_tmr+0x7c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80116ae:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80116b0:	9201      	str	r2, [sp, #4]
 80116b2:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80116b6:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80116b8:	9402      	str	r4, [sp, #8]
 80116ba:	9200      	str	r2, [sp, #0]
 80116bc:	4619      	mov	r1, r3
 80116be:	4a05      	ldr	r2, [pc, #20]	@ (80116d4 <etharp_tmr+0x80>)
 80116c0:	f7ff fee8 	bl	8011494 <etharp_raw>
 80116c4:	e7d5      	b.n	8011672 <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80116c6:	2304      	movs	r3, #4
 80116c8:	7423      	strb	r3, [r4, #16]
 80116ca:	e7d2      	b.n	8011672 <etharp_tmr+0x1e>
 80116cc:	2400fd24 	.word	0x2400fd24
 80116d0:	080171d0 	.word	0x080171d0
 80116d4:	080171d8 	.word	0x080171d8

080116d8 <etharp_cleanup_netif>:
{
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	4c0b      	ldr	r4, [pc, #44]	@ (8011708 <etharp_cleanup_netif+0x30>)
 80116dc:	4606      	mov	r6, r0
 80116de:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80116e2:	7d23      	ldrb	r3, [r4, #20]
 80116e4:	b113      	cbz	r3, 80116ec <etharp_cleanup_netif+0x14>
 80116e6:	68a3      	ldr	r3, [r4, #8]
 80116e8:	42b3      	cmp	r3, r6
 80116ea:	d003      	beq.n	80116f4 <etharp_cleanup_netif+0x1c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116ec:	3418      	adds	r4, #24
 80116ee:	42ac      	cmp	r4, r5
 80116f0:	d1f7      	bne.n	80116e2 <etharp_cleanup_netif+0xa>
}
 80116f2:	bd70      	pop	{r4, r5, r6, pc}
  if (arp_table[i].q != NULL) {
 80116f4:	6820      	ldr	r0, [r4, #0]
 80116f6:	b118      	cbz	r0, 8011700 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 80116f8:	f7fa fe9e 	bl	800c438 <pbuf_free>
    arp_table[i].q = NULL;
 80116fc:	2300      	movs	r3, #0
 80116fe:	6023      	str	r3, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011700:	2300      	movs	r3, #0
 8011702:	7523      	strb	r3, [r4, #20]
}
 8011704:	e7f2      	b.n	80116ec <etharp_cleanup_netif+0x14>
 8011706:	bf00      	nop
 8011708:	2400fd20 	.word	0x2400fd20

0801170c <etharp_input>:
{
 801170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011710:	460d      	mov	r5, r1
 8011712:	b087      	sub	sp, #28
 8011714:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8011716:	f7f5 fe09 	bl	800732c <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801171a:	2d00      	cmp	r5, #0
 801171c:	d07a      	beq.n	8011814 <etharp_input+0x108>
  hdr = (struct etharp_hdr *)p->payload;
 801171e:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011720:	8833      	ldrh	r3, [r6, #0]
 8011722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011726:	d102      	bne.n	801172e <etharp_input+0x22>
 8011728:	7933      	ldrb	r3, [r6, #4]
 801172a:	2b06      	cmp	r3, #6
 801172c:	d005      	beq.n	801173a <etharp_input+0x2e>
  pbuf_free(p);
 801172e:	4620      	mov	r0, r4
}
 8011730:	b007      	add	sp, #28
 8011732:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8011736:	f7fa be7f 	b.w	800c438 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801173a:	7973      	ldrb	r3, [r6, #5]
 801173c:	2b04      	cmp	r3, #4
 801173e:	d1f6      	bne.n	801172e <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011740:	8873      	ldrh	r3, [r6, #2]
 8011742:	2b08      	cmp	r3, #8
 8011744:	d1f3      	bne.n	801172e <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011746:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801174a:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801174e:	686f      	ldr	r7, [r5, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011750:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011752:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011756:	2f00      	cmp	r7, #0
 8011758:	d166      	bne.n	8011828 <etharp_input+0x11c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801175a:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801175e:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011762:	2b06      	cmp	r3, #6
 8011764:	d165      	bne.n	8011832 <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 8011766:	f1ba 0f00 	cmp.w	sl, #0
 801176a:	d03d      	beq.n	80117e8 <etharp_input+0xdc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801176c:	4629      	mov	r1, r5
 801176e:	4650      	mov	r0, sl
 8011770:	f000 fcac 	bl	80120cc <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8011774:	4681      	mov	r9, r0
 8011776:	bbb8      	cbnz	r0, 80117e8 <etharp_input+0xdc>
      ip4_addr_ismulticast(ipaddr)) {
 8011778:	f00a 0af0 	and.w	sl, sl, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801177c:	f1ba 0fe0 	cmp.w	sl, #224	@ 0xe0
 8011780:	d032      	beq.n	80117e8 <etharp_input+0xdc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8011782:	4659      	mov	r1, fp
 8011784:	462a      	mov	r2, r5
 8011786:	a805      	add	r0, sp, #20
 8011788:	f7ff fdd2 	bl	8011330 <etharp_find_entry>
  if (i < 0) {
 801178c:	1e03      	subs	r3, r0, #0
 801178e:	db2b      	blt.n	80117e8 <etharp_input+0xdc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011790:	492d      	ldr	r1, [pc, #180]	@ (8011848 <etharp_input+0x13c>)
 8011792:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011796:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011798:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 801179c:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 80117a0:	00d2      	lsls	r2, r2, #3
 80117a2:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80117a6:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 80117a8:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80117ac:	fb13 030e 	smlabb	r3, r3, lr, r0
 80117b0:	68b0      	ldr	r0, [r6, #8]
 80117b2:	50c8      	str	r0, [r1, r3]
 80117b4:	440b      	add	r3, r1
 80117b6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80117ba:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 80117bc:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 80117c0:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 80117c4:	f1ba 0f00 	cmp.w	sl, #0
 80117c8:	d00e      	beq.n	80117e8 <etharp_input+0xdc>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80117ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 80117ce:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80117d2:	4628      	mov	r0, r5
 80117d4:	f105 0226 	add.w	r2, r5, #38	@ 0x26
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4651      	mov	r1, sl
 80117dc:	4643      	mov	r3, r8
 80117de:	f001 f937 	bl	8012a50 <ethernet_output>
    pbuf_free(p);
 80117e2:	4650      	mov	r0, sl
 80117e4:	f7fa fe28 	bl	800c438 <pbuf_free>
  switch (hdr->opcode) {
 80117e8:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 80117ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117ee:	d19e      	bne.n	801172e <etharp_input+0x22>
 80117f0:	2f00      	cmp	r7, #0
 80117f2:	d09c      	beq.n	801172e <etharp_input+0x22>
        etharp_raw(netif,
 80117f4:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80117f6:	f105 0326 	add.w	r3, r5, #38	@ 0x26
        etharp_raw(netif,
 80117fa:	4642      	mov	r2, r8
 80117fc:	4628      	mov	r0, r5
 80117fe:	9103      	str	r1, [sp, #12]
 8011800:	a905      	add	r1, sp, #20
 8011802:	f8cd 8004 	str.w	r8, [sp, #4]
 8011806:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011808:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 801180a:	9100      	str	r1, [sp, #0]
 801180c:	4619      	mov	r1, r3
 801180e:	f7ff fe41 	bl	8011494 <etharp_raw>
 8011812:	e78c      	b.n	801172e <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011814:	4b0d      	ldr	r3, [pc, #52]	@ (801184c <etharp_input+0x140>)
 8011816:	f240 228a 	movw	r2, #650	@ 0x28a
 801181a:	490d      	ldr	r1, [pc, #52]	@ (8011850 <etharp_input+0x144>)
 801181c:	480d      	ldr	r0, [pc, #52]	@ (8011854 <etharp_input+0x148>)
}
 801181e:	b007      	add	sp, #28
 8011820:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011824:	f001 bb64 	b.w	8012ef0 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011828:	429f      	cmp	r7, r3
 801182a:	d10a      	bne.n	8011842 <etharp_input+0x136>
 801182c:	2701      	movs	r7, #1
 801182e:	46bb      	mov	fp, r7
 8011830:	e795      	b.n	801175e <etharp_input+0x52>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011832:	4b06      	ldr	r3, [pc, #24]	@ (801184c <etharp_input+0x140>)
 8011834:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011838:	4907      	ldr	r1, [pc, #28]	@ (8011858 <etharp_input+0x14c>)
 801183a:	4806      	ldr	r0, [pc, #24]	@ (8011854 <etharp_input+0x148>)
 801183c:	f001 fb58 	bl	8012ef0 <iprintf>
 8011840:	e791      	b.n	8011766 <etharp_input+0x5a>
 8011842:	2700      	movs	r7, #0
 8011844:	e789      	b.n	801175a <etharp_input+0x4e>
 8011846:	bf00      	nop
 8011848:	2400fd20 	.word	0x2400fd20
 801184c:	08016cfc 	.word	0x08016cfc
 8011850:	080149e4 	.word	0x080149e4
 8011854:	08014150 	.word	0x08014150
 8011858:	08016e40 	.word	0x08016e40

0801185c <etharp_query>:
{
 801185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011860:	460e      	mov	r6, r1
 8011862:	b085      	sub	sp, #20
 8011864:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011866:	4601      	mov	r1, r0
 8011868:	6830      	ldr	r0, [r6, #0]
{
 801186a:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801186c:	f000 fc2e 	bl	80120cc <ip4_addr_isbroadcast_u32>
 8011870:	2800      	cmp	r0, #0
 8011872:	f040 80a2 	bne.w	80119ba <etharp_query+0x15e>
      ip4_addr_ismulticast(ipaddr) ||
 8011876:	6833      	ldr	r3, [r6, #0]
 8011878:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
      ip4_addr_isany(ipaddr)) {
 801187c:	2ae0      	cmp	r2, #224	@ 0xe0
 801187e:	f000 809c 	beq.w	80119ba <etharp_query+0x15e>
 8011882:	2b00      	cmp	r3, #0
 8011884:	f000 8099 	beq.w	80119ba <etharp_query+0x15e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011888:	462a      	mov	r2, r5
 801188a:	2101      	movs	r1, #1
 801188c:	4630      	mov	r0, r6
 801188e:	f7ff fd4f 	bl	8011330 <etharp_find_entry>
  if (i_err < 0) {
 8011892:	f1b0 0800 	subs.w	r8, r0, #0
 8011896:	db63      	blt.n	8011960 <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011898:	f1b8 0f7e 	cmp.w	r8, #126	@ 0x7e
 801189c:	dc58      	bgt.n	8011950 <etharp_query+0xf4>
  i = (netif_addr_idx_t)i_err;
 801189e:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80118a2:	4c49      	ldr	r4, [pc, #292]	@ (80119c8 <etharp_query+0x16c>)
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80118a4:	f105 0b26 	add.w	fp, r5, #38	@ 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80118a8:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 80118ac:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80118b0:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 80118b4:	f899 3014 	ldrb.w	r3, [r9, #20]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d133      	bne.n	8011924 <etharp_query+0xc8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80118bc:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118be:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 80118c0:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118c4:	4659      	mov	r1, fp
 80118c6:	9303      	str	r3, [sp, #12]
 80118c8:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 80118ca:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118ce:	4b3f      	ldr	r3, [pc, #252]	@ (80119cc <etharp_query+0x170>)
 80118d0:	4a3f      	ldr	r2, [pc, #252]	@ (80119d0 <etharp_query+0x174>)
 80118d2:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80118d4:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	465b      	mov	r3, fp
 80118da:	f7ff fddb 	bl	8011494 <etharp_raw>
    if (q == NULL) {
 80118de:	2f00      	cmp	r7, #0
 80118e0:	d033      	beq.n	801194a <etharp_query+0xee>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80118e2:	f899 3014 	ldrb.w	r3, [r9, #20]
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d820      	bhi.n	801192c <etharp_query+0xd0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80118ea:	d12e      	bne.n	801194a <etharp_query+0xee>
{
 80118ec:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80118ee:	4e39      	ldr	r6, [pc, #228]	@ (80119d4 <etharp_query+0x178>)
 80118f0:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 80119e4 <etharp_query+0x188>
 80118f4:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 80119e0 <etharp_query+0x184>
 80118f8:	e005      	b.n	8011906 <etharp_query+0xaa>
      if (PBUF_NEEDS_COPY(p)) {
 80118fa:	7b2b      	ldrb	r3, [r5, #12]
 80118fc:	065b      	lsls	r3, r3, #25
 80118fe:	d434      	bmi.n	801196a <etharp_query+0x10e>
      p = p->next;
 8011900:	682d      	ldr	r5, [r5, #0]
    while (p) {
 8011902:	2d00      	cmp	r5, #0
 8011904:	d047      	beq.n	8011996 <etharp_query+0x13a>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011906:	896a      	ldrh	r2, [r5, #10]
 8011908:	892b      	ldrh	r3, [r5, #8]
 801190a:	429a      	cmp	r2, r3
 801190c:	d1f5      	bne.n	80118fa <etharp_query+0x9e>
 801190e:	682a      	ldr	r2, [r5, #0]
 8011910:	4633      	mov	r3, r6
 8011912:	2a00      	cmp	r2, #0
 8011914:	d0f1      	beq.n	80118fa <etharp_query+0x9e>
 8011916:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801191a:	4659      	mov	r1, fp
 801191c:	4648      	mov	r0, r9
 801191e:	f001 fae7 	bl	8012ef0 <iprintf>
 8011922:	e7ea      	b.n	80118fa <etharp_query+0x9e>
  if (is_new_entry || (q == NULL)) {
 8011924:	2f00      	cmp	r7, #0
 8011926:	d03a      	beq.n	801199e <etharp_query+0x142>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011928:	2b01      	cmp	r3, #1
 801192a:	d0df      	beq.n	80118ec <etharp_query+0x90>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801192c:	2318      	movs	r3, #24
 801192e:	465a      	mov	r2, fp
 8011930:	4639      	mov	r1, r7
 8011932:	4628      	mov	r0, r5
 8011934:	fb03 4308 	mla	r3, r3, r8, r4
 8011938:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 801193c:	9400      	str	r4, [sp, #0]
 801193e:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 8011940:	4c25      	ldr	r4, [pc, #148]	@ (80119d8 <etharp_query+0x17c>)
 8011942:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011946:	f001 f883 	bl	8012a50 <ethernet_output>
}
 801194a:	b005      	add	sp, #20
 801194c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011950:	4b20      	ldr	r3, [pc, #128]	@ (80119d4 <etharp_query+0x178>)
 8011952:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8011956:	4921      	ldr	r1, [pc, #132]	@ (80119dc <etharp_query+0x180>)
 8011958:	4821      	ldr	r0, [pc, #132]	@ (80119e0 <etharp_query+0x184>)
 801195a:	f001 fac9 	bl	8012ef0 <iprintf>
 801195e:	e79e      	b.n	801189e <etharp_query+0x42>
    return (err_t)i_err;
 8011960:	fa4f f088 	sxtb.w	r0, r8
}
 8011964:	b005      	add	sp, #20
 8011966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801196a:	463a      	mov	r2, r7
 801196c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8011970:	200e      	movs	r0, #14
 8011972:	f7fb f84f 	bl	800ca14 <pbuf_clone>
 8011976:	4607      	mov	r7, r0
    if (p != NULL) {
 8011978:	b317      	cbz	r7, 80119c0 <etharp_query+0x164>
      if (arp_table[i].q != NULL) {
 801197a:	eb0a 0308 	add.w	r3, sl, r8
 801197e:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 8011982:	b108      	cbz	r0, 8011988 <etharp_query+0x12c>
        pbuf_free(arp_table[i].q);
 8011984:	f7fa fd58 	bl	800c438 <pbuf_free>
      arp_table[i].q = p;
 8011988:	44d0      	add	r8, sl
      result = ERR_OK;
 801198a:	2000      	movs	r0, #0
      arp_table[i].q = p;
 801198c:	f844 7038 	str.w	r7, [r4, r8, lsl #3]
}
 8011990:	b005      	add	sp, #20
 8011992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 8011996:	4638      	mov	r0, r7
 8011998:	f7fa fec6 	bl	800c728 <pbuf_ref>
 801199c:	e7ec      	b.n	8011978 <etharp_query+0x11c>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801199e:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80119a0:	2301      	movs	r3, #1
 80119a2:	4c0a      	ldr	r4, [pc, #40]	@ (80119cc <etharp_query+0x170>)
 80119a4:	4659      	mov	r1, fp
 80119a6:	4628      	mov	r0, r5
 80119a8:	e9cd 6302 	strd	r6, r3, [sp, #8]
 80119ac:	e9cd 2400 	strd	r2, r4, [sp]
 80119b0:	465b      	mov	r3, fp
 80119b2:	4a07      	ldr	r2, [pc, #28]	@ (80119d0 <etharp_query+0x174>)
 80119b4:	f7ff fd6e 	bl	8011494 <etharp_raw>
    if (q == NULL) {
 80119b8:	e7c7      	b.n	801194a <etharp_query+0xee>
    return ERR_ARG;
 80119ba:	f06f 000f 	mvn.w	r0, #15
 80119be:	e7c4      	b.n	801194a <etharp_query+0xee>
  err_t result = ERR_MEM;
 80119c0:	f04f 30ff 	mov.w	r0, #4294967295
 80119c4:	e7c1      	b.n	801194a <etharp_query+0xee>
 80119c6:	bf00      	nop
 80119c8:	2400fd20 	.word	0x2400fd20
 80119cc:	080171d0 	.word	0x080171d0
 80119d0:	080171d8 	.word	0x080171d8
 80119d4:	08016cfc 	.word	0x08016cfc
 80119d8:	2400fd1c 	.word	0x2400fd1c
 80119dc:	08016e64 	.word	0x08016e64
 80119e0:	08014150 	.word	0x08014150
 80119e4:	08016e74 	.word	0x08016e74

080119e8 <etharp_output>:
{
 80119e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119ea:	4604      	mov	r4, r0
 80119ec:	b085      	sub	sp, #20
 80119ee:	460e      	mov	r6, r1
 80119f0:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 80119f2:	f7f5 fc9b 	bl	800732c <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80119f6:	2c00      	cmp	r4, #0
 80119f8:	f000 8081 	beq.w	8011afe <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 80119fc:	2e00      	cmp	r6, #0
 80119fe:	d06d      	beq.n	8011adc <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011a00:	2d00      	cmp	r5, #0
 8011a02:	d074      	beq.n	8011aee <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011a04:	4621      	mov	r1, r4
 8011a06:	6828      	ldr	r0, [r5, #0]
 8011a08:	f000 fb60 	bl	80120cc <ip4_addr_isbroadcast_u32>
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	d163      	bne.n	8011ad8 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011a10:	682b      	ldr	r3, [r5, #0]
 8011a12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8011a16:	2ae0      	cmp	r2, #224	@ 0xe0
 8011a18:	d039      	beq.n	8011a8e <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011a1a:	6862      	ldr	r2, [r4, #4]
 8011a1c:	68a1      	ldr	r1, [r4, #8]
 8011a1e:	405a      	eors	r2, r3
 8011a20:	420a      	tst	r2, r1
 8011a22:	d009      	beq.n	8011a38 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 8011a24:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011a26:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d004      	beq.n	8011a38 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011a2e:	68e3      	ldr	r3, [r4, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d076      	beq.n	8011b22 <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 8011a34:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011a38:	4f3b      	ldr	r7, [pc, #236]	@ (8011b28 <etharp_output+0x140>)
 8011a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8011b2c <etharp_output+0x144>)
 8011a3c:	783a      	ldrb	r2, [r7, #0]
 8011a3e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8011a42:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011a46:	7d19      	ldrb	r1, [r3, #20]
 8011a48:	2901      	cmp	r1, #1
 8011a4a:	d902      	bls.n	8011a52 <etharp_output+0x6a>
 8011a4c:	6899      	ldr	r1, [r3, #8]
 8011a4e:	42a1      	cmp	r1, r4
 8011a50:	d060      	beq.n	8011b14 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011a52:	4b36      	ldr	r3, [pc, #216]	@ (8011b2c <etharp_output+0x144>)
{
 8011a54:	f04f 0c00 	mov.w	ip, #0
 8011a58:	e005      	b.n	8011a66 <etharp_output+0x7e>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011a5a:	f10c 0c01 	add.w	ip, ip, #1
 8011a5e:	3318      	adds	r3, #24
 8011a60:	f1bc 0f0a 	cmp.w	ip, #10
 8011a64:	d030      	beq.n	8011ac8 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011a66:	7d18      	ldrb	r0, [r3, #20]
 8011a68:	2801      	cmp	r0, #1
 8011a6a:	d9f6      	bls.n	8011a5a <etharp_output+0x72>
 8011a6c:	689a      	ldr	r2, [r3, #8]
 8011a6e:	42a2      	cmp	r2, r4
 8011a70:	d1f3      	bne.n	8011a5a <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 8011a72:	685a      	ldr	r2, [r3, #4]
 8011a74:	6829      	ldr	r1, [r5, #0]
 8011a76:	4291      	cmp	r1, r2
 8011a78:	d1ef      	bne.n	8011a5a <etharp_output+0x72>
 8011a7a:	fa5f f28c 	uxtb.w	r2, ip
        return etharp_output_to_arp_index(netif, q, i);
 8011a7e:	4631      	mov	r1, r6
 8011a80:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 8011a82:	703a      	strb	r2, [r7, #0]
}
 8011a84:	b005      	add	sp, #20
 8011a86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8011a8a:	f7ff bd73 	b.w	8011574 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011a8e:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011a90:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011a92:	215e      	movs	r1, #94	@ 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011a98:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011a9c:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011a9e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011aa2:	78ab      	ldrb	r3, [r5, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011aa4:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011aa8:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8011aac:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011aae:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011ab2:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8011ab6:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 8011aba:	4631      	mov	r1, r6
 8011abc:	4620      	mov	r0, r4
 8011abe:	9500      	str	r5, [sp, #0]
 8011ac0:	f000 ffc6 	bl	8012a50 <ethernet_output>
}
 8011ac4:	b005      	add	sp, #20
 8011ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 8011ac8:	4632      	mov	r2, r6
 8011aca:	4629      	mov	r1, r5
 8011acc:	4620      	mov	r0, r4
}
 8011ace:	b005      	add	sp, #20
 8011ad0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 8011ad4:	f7ff bec2 	b.w	801185c <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 8011ad8:	4b15      	ldr	r3, [pc, #84]	@ (8011b30 <etharp_output+0x148>)
 8011ada:	e7ea      	b.n	8011ab2 <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011adc:	4b15      	ldr	r3, [pc, #84]	@ (8011b34 <etharp_output+0x14c>)
 8011ade:	f240 321f 	movw	r2, #799	@ 0x31f
 8011ae2:	4915      	ldr	r1, [pc, #84]	@ (8011b38 <etharp_output+0x150>)
 8011ae4:	4815      	ldr	r0, [pc, #84]	@ (8011b3c <etharp_output+0x154>)
 8011ae6:	f001 fa03 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011aea:	2d00      	cmp	r5, #0
 8011aec:	d18a      	bne.n	8011a04 <etharp_output+0x1c>
 8011aee:	4b11      	ldr	r3, [pc, #68]	@ (8011b34 <etharp_output+0x14c>)
 8011af0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011af4:	4912      	ldr	r1, [pc, #72]	@ (8011b40 <etharp_output+0x158>)
 8011af6:	4811      	ldr	r0, [pc, #68]	@ (8011b3c <etharp_output+0x154>)
 8011af8:	f001 f9fa 	bl	8012ef0 <iprintf>
 8011afc:	e782      	b.n	8011a04 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011afe:	4b0d      	ldr	r3, [pc, #52]	@ (8011b34 <etharp_output+0x14c>)
 8011b00:	f240 321e 	movw	r2, #798	@ 0x31e
 8011b04:	490f      	ldr	r1, [pc, #60]	@ (8011b44 <etharp_output+0x15c>)
 8011b06:	480d      	ldr	r0, [pc, #52]	@ (8011b3c <etharp_output+0x154>)
 8011b08:	f001 f9f2 	bl	8012ef0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011b0c:	2e00      	cmp	r6, #0
 8011b0e:	f47f af77 	bne.w	8011a00 <etharp_output+0x18>
 8011b12:	e7e3      	b.n	8011adc <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	6829      	ldr	r1, [r5, #0]
 8011b18:	4299      	cmp	r1, r3
 8011b1a:	d19a      	bne.n	8011a52 <etharp_output+0x6a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011b1c:	4631      	mov	r1, r6
 8011b1e:	4620      	mov	r0, r4
 8011b20:	e7b0      	b.n	8011a84 <etharp_output+0x9c>
            return ERR_RTE;
 8011b22:	f06f 0003 	mvn.w	r0, #3
 8011b26:	e7cd      	b.n	8011ac4 <etharp_output+0xdc>
 8011b28:	2400fd1c 	.word	0x2400fd1c
 8011b2c:	2400fd20 	.word	0x2400fd20
 8011b30:	080171d8 	.word	0x080171d8
 8011b34:	08016cfc 	.word	0x08016cfc
 8011b38:	08016e90 	.word	0x08016e90
 8011b3c:	08014150 	.word	0x08014150
 8011b40:	08016e20 	.word	0x08016e20
 8011b44:	080149e4 	.word	0x080149e4

08011b48 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011b48:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b4a:	2301      	movs	r3, #1
{
 8011b4c:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b4e:	4c07      	ldr	r4, [pc, #28]	@ (8011b6c <etharp_request+0x24>)
 8011b50:	4a07      	ldr	r2, [pc, #28]	@ (8011b70 <etharp_request+0x28>)
 8011b52:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011b54:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b56:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8011b5a:	f100 0326 	add.w	r3, r0, #38	@ 0x26
 8011b5e:	9400      	str	r4, [sp, #0]
 8011b60:	4619      	mov	r1, r3
 8011b62:	f7ff fc97 	bl	8011494 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8011b66:	b004      	add	sp, #16
 8011b68:	bd10      	pop	{r4, pc}
 8011b6a:	bf00      	nop
 8011b6c:	080171d0 	.word	0x080171d0
 8011b70:	080171d8 	.word	0x080171d8

08011b74 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b76:	460f      	mov	r7, r1
 8011b78:	b087      	sub	sp, #28
 8011b7a:	4616      	mov	r6, r2
 8011b7c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011b7e:	2124      	movs	r1, #36	@ 0x24
 8011b80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011b84:	2022      	movs	r0, #34	@ 0x22
 8011b86:	f7fa fcc7 	bl	800c518 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8011b8a:	b390      	cbz	r0, 8011bf2 <icmp_send_response+0x7e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011b8c:	8943      	ldrh	r3, [r0, #10]
 8011b8e:	4605      	mov	r5, r0
 8011b90:	2b23      	cmp	r3, #35	@ 0x23
 8011b92:	d930      	bls.n	8011bf6 <icmp_send_response+0x82>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011b94:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011b96:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8011b98:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 8011b9a:	2700      	movs	r7, #0
  icmphdr->code = code;
 8011b9c:	7066      	strb	r6, [r4, #1]
  icmphdr->id = 0;
 8011b9e:	6067      	str	r7, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011ba0:	6818      	ldr	r0, [r3, #0]
 8011ba2:	6859      	ldr	r1, [r3, #4]
 8011ba4:	689a      	ldr	r2, [r3, #8]
 8011ba6:	68de      	ldr	r6, [r3, #12]
 8011ba8:	60a0      	str	r0, [r4, #8]
 8011baa:	6166      	str	r6, [r4, #20]
 8011bac:	60e1      	str	r1, [r4, #12]
 8011bae:	6122      	str	r2, [r4, #16]
 8011bb0:	6918      	ldr	r0, [r3, #16]
 8011bb2:	6959      	ldr	r1, [r3, #20]
 8011bb4:	699a      	ldr	r2, [r3, #24]
 8011bb6:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011bb8:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011bba:	61e1      	str	r1, [r4, #28]
 8011bbc:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8011bc2:	f000 f8d7 	bl	8011d74 <ip4_route>
#endif
  if (netif != NULL) {
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	b180      	cbz	r0, 8011bec <icmp_send_response+0x78>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011bca:	8969      	ldrh	r1, [r5, #10]
 8011bcc:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8011bce:	70a7      	strb	r7, [r4, #2]
 8011bd0:	70e7      	strb	r7, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011bd2:	f7f9 fd9d 	bl	800b710 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011bd6:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011bd8:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011bda:	aa05      	add	r2, sp, #20
 8011bdc:	4639      	mov	r1, r7
 8011bde:	4628      	mov	r0, r5
 8011be0:	9700      	str	r7, [sp, #0]
 8011be2:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8011be6:	23ff      	movs	r3, #255	@ 0xff
 8011be8:	f000 fa5e 	bl	80120a8 <ip4_output_if>
  }
  pbuf_free(q);
 8011bec:	4628      	mov	r0, r5
 8011bee:	f7fa fc23 	bl	800c438 <pbuf_free>
}
 8011bf2:	b007      	add	sp, #28
 8011bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011bf6:	4b04      	ldr	r3, [pc, #16]	@ (8011c08 <icmp_send_response+0x94>)
 8011bf8:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8011bfc:	4903      	ldr	r1, [pc, #12]	@ (8011c0c <icmp_send_response+0x98>)
 8011bfe:	4804      	ldr	r0, [pc, #16]	@ (8011c10 <icmp_send_response+0x9c>)
 8011c00:	f001 f976 	bl	8012ef0 <iprintf>
 8011c04:	e7c6      	b.n	8011b94 <icmp_send_response+0x20>
 8011c06:	bf00      	nop
 8011c08:	08016e9c 	.word	0x08016e9c
 8011c0c:	08016ed4 	.word	0x08016ed4
 8011c10:	08014150 	.word	0x08014150

08011c14 <icmp_input>:
{
 8011c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8011c18:	4f4c      	ldr	r7, [pc, #304]	@ (8011d4c <icmp_input+0x138>)
{
 8011c1a:	b085      	sub	sp, #20
 8011c1c:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8011c1e:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8011c22:	f898 4000 	ldrb.w	r4, [r8]
 8011c26:	f004 040f 	and.w	r4, r4, #15
 8011c2a:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8011c2c:	2c13      	cmp	r4, #19
 8011c2e:	d913      	bls.n	8011c58 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8011c30:	8943      	ldrh	r3, [r0, #10]
 8011c32:	2b03      	cmp	r3, #3
 8011c34:	d910      	bls.n	8011c58 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8011c36:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	2b08      	cmp	r3, #8
 8011c3c:	d10c      	bne.n	8011c58 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011c3e:	6978      	ldr	r0, [r7, #20]
 8011c40:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8011c44:	2be0      	cmp	r3, #224	@ 0xe0
 8011c46:	d007      	beq.n	8011c58 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011c48:	460e      	mov	r6, r1
 8011c4a:	6839      	ldr	r1, [r7, #0]
 8011c4c:	f000 fa3e 	bl	80120cc <ip4_addr_isbroadcast_u32>
 8011c50:	b910      	cbnz	r0, 8011c58 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011c52:	892b      	ldrh	r3, [r5, #8]
 8011c54:	2b07      	cmp	r3, #7
 8011c56:	d805      	bhi.n	8011c64 <icmp_input+0x50>
  pbuf_free(p);
 8011c58:	4628      	mov	r0, r5
}
 8011c5a:	b005      	add	sp, #20
 8011c5c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8011c60:	f7fa bbea 	b.w	800c438 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8011c64:	4628      	mov	r0, r5
 8011c66:	f7f9 fd59 	bl	800b71c <inet_chksum_pbuf>
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	d1f4      	bne.n	8011c58 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011c6e:	f104 090e 	add.w	r9, r4, #14
 8011c72:	4628      	mov	r0, r5
 8011c74:	4649      	mov	r1, r9
 8011c76:	f7fa fb4d 	bl	800c314 <pbuf_add_header>
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d04b      	beq.n	8011d16 <icmp_input+0x102>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011c7e:	892b      	ldrh	r3, [r5, #8]
 8011c80:	18e1      	adds	r1, r4, r3
 8011c82:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8011c84:	428b      	cmp	r3, r1
 8011c86:	d8e7      	bhi.n	8011c58 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011c88:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011c8c:	200e      	movs	r0, #14
 8011c8e:	f7fa fc43 	bl	800c518 <pbuf_alloc>
        if (r == NULL) {
 8011c92:	4681      	mov	r9, r0
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d0df      	beq.n	8011c58 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011c98:	8942      	ldrh	r2, [r0, #10]
 8011c9a:	f104 0308 	add.w	r3, r4, #8
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d346      	bcc.n	8011d30 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 8011ca2:	4641      	mov	r1, r8
 8011ca4:	4622      	mov	r2, r4
 8011ca6:	6840      	ldr	r0, [r0, #4]
 8011ca8:	f001 faa7 	bl	80131fa <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8011cac:	4621      	mov	r1, r4
 8011cae:	4648      	mov	r0, r9
 8011cb0:	f7fa fb60 	bl	800c374 <pbuf_remove_header>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d13f      	bne.n	8011d38 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 8011cb8:	4629      	mov	r1, r5
 8011cba:	4648      	mov	r0, r9
 8011cbc:	f7fa fd96 	bl	800c7ec <pbuf_copy>
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d135      	bne.n	8011d30 <icmp_input+0x11c>
        pbuf_free(p);
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	464d      	mov	r5, r9
 8011cc8:	f7fa fbb6 	bl	800c438 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8011ccc:	4621      	mov	r1, r4
 8011cce:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011cd0:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8011cd2:	f7fa fb1f 	bl	800c314 <pbuf_add_header>
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	d1be      	bne.n	8011c58 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011cda:	6869      	ldr	r1, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 8011cdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011ce0:	610a      	str	r2, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011ce2:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 8011ce6:	60cb      	str	r3, [r1, #12]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011ce8:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011cea:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011cec:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011cee:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 8011cf0:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011cf4:	bf8c      	ite	hi
 8011cf6:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011cf8:	3308      	addls	r3, #8
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011cfe:	23ff      	movs	r3, #255	@ 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8011d00:	728a      	strb	r2, [r1, #10]
 8011d02:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011d04:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011d06:	2101      	movs	r1, #1
 8011d08:	9200      	str	r2, [sp, #0]
 8011d0a:	e9cd 1601 	strd	r1, r6, [sp, #4]
 8011d0e:	4910      	ldr	r1, [pc, #64]	@ (8011d50 <icmp_input+0x13c>)
 8011d10:	f000 f9ca 	bl	80120a8 <ip4_output_if>
  pbuf_free(p);
 8011d14:	e7a0      	b.n	8011c58 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011d16:	4649      	mov	r1, r9
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f7fa fb2b 	bl	800c374 <pbuf_remove_header>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d0d4      	beq.n	8011ccc <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011d22:	4b0c      	ldr	r3, [pc, #48]	@ (8011d54 <icmp_input+0x140>)
 8011d24:	22c7      	movs	r2, #199	@ 0xc7
 8011d26:	490c      	ldr	r1, [pc, #48]	@ (8011d58 <icmp_input+0x144>)
 8011d28:	480c      	ldr	r0, [pc, #48]	@ (8011d5c <icmp_input+0x148>)
 8011d2a:	f001 f8e1 	bl	8012ef0 <iprintf>
          goto icmperr;
 8011d2e:	e793      	b.n	8011c58 <icmp_input+0x44>
          pbuf_free(r);
 8011d30:	4648      	mov	r0, r9
 8011d32:	f7fa fb81 	bl	800c438 <pbuf_free>
          goto icmperr;
 8011d36:	e78f      	b.n	8011c58 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011d38:	4b06      	ldr	r3, [pc, #24]	@ (8011d54 <icmp_input+0x140>)
 8011d3a:	22b6      	movs	r2, #182	@ 0xb6
 8011d3c:	4908      	ldr	r1, [pc, #32]	@ (8011d60 <icmp_input+0x14c>)
 8011d3e:	4807      	ldr	r0, [pc, #28]	@ (8011d5c <icmp_input+0x148>)
 8011d40:	f001 f8d6 	bl	8012ef0 <iprintf>
          pbuf_free(r);
 8011d44:	4648      	mov	r0, r9
 8011d46:	f7fa fb77 	bl	800c438 <pbuf_free>
          goto icmperr;
 8011d4a:	e785      	b.n	8011c58 <icmp_input+0x44>
 8011d4c:	24009200 	.word	0x24009200
 8011d50:	24009214 	.word	0x24009214
 8011d54:	08016e9c 	.word	0x08016e9c
 8011d58:	08016f38 	.word	0x08016f38
 8011d5c:	08014150 	.word	0x08014150
 8011d60:	08016f00 	.word	0x08016f00

08011d64 <icmp_dest_unreach>:
{
 8011d64:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8011d66:	2103      	movs	r1, #3
 8011d68:	f7ff bf04 	b.w	8011b74 <icmp_send_response>

08011d6c <icmp_time_exceeded>:
{
 8011d6c:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8011d6e:	210b      	movs	r1, #11
 8011d70:	f7ff bf00 	b.w	8011b74 <icmp_send_response>

08011d74 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8011d78:	f7f5 fad8 	bl	800732c <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011d7c:	4b15      	ldr	r3, [pc, #84]	@ (8011dd4 <ip4_route+0x60>)
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	b1a0      	cbz	r0, 8011dac <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d82:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011d86:	07d9      	lsls	r1, r3, #31
 8011d88:	d50d      	bpl.n	8011da6 <ip4_route+0x32>
 8011d8a:	075a      	lsls	r2, r3, #29
 8011d8c:	d50b      	bpl.n	8011da6 <ip4_route+0x32>
 8011d8e:	6842      	ldr	r2, [r0, #4]
 8011d90:	b14a      	cbz	r2, 8011da6 <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011d92:	6821      	ldr	r1, [r4, #0]
 8011d94:	6885      	ldr	r5, [r0, #8]
 8011d96:	404a      	eors	r2, r1
 8011d98:	422a      	tst	r2, r5
 8011d9a:	d016      	beq.n	8011dca <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011d9c:	079b      	lsls	r3, r3, #30
 8011d9e:	d402      	bmi.n	8011da6 <ip4_route+0x32>
 8011da0:	68c3      	ldr	r3, [r0, #12]
 8011da2:	4299      	cmp	r1, r3
 8011da4:	d011      	beq.n	8011dca <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 8011da6:	6800      	ldr	r0, [r0, #0]
 8011da8:	2800      	cmp	r0, #0
 8011daa:	d1ea      	bne.n	8011d82 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011dac:	4b0a      	ldr	r3, [pc, #40]	@ (8011dd8 <ip4_route+0x64>)
 8011dae:	6818      	ldr	r0, [r3, #0]
 8011db0:	b158      	cbz	r0, 8011dca <ip4_route+0x56>
 8011db2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011db6:	f003 0305 	and.w	r3, r3, #5
 8011dba:	2b05      	cmp	r3, #5
 8011dbc:	d106      	bne.n	8011dcc <ip4_route+0x58>
 8011dbe:	6843      	ldr	r3, [r0, #4]
 8011dc0:	b133      	cbz	r3, 8011dd0 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011dc2:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011dc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8011dc6:	bf08      	it	eq
 8011dc8:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 8011dca:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 8011dcc:	2000      	movs	r0, #0
}
 8011dce:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 8011dd0:	4618      	mov	r0, r3
}
 8011dd2:	bd38      	pop	{r3, r4, r5, pc}
 8011dd4:	2400fcb8 	.word	0x2400fcb8
 8011dd8:	2400fcb4 	.word	0x2400fcb4

08011ddc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011de0:	4604      	mov	r4, r0
 8011de2:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 8011de4:	f7f5 faa2 	bl	800732c <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011de8:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 8011dea:	783b      	ldrb	r3, [r7, #0]
 8011dec:	091a      	lsrs	r2, r3, #4
 8011dee:	2a04      	cmp	r2, #4
 8011df0:	d16d      	bne.n	8011ece <ip4_input+0xf2>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011df2:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011df6:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011df8:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011dfa:	f7f9 fc49 	bl	800b690 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011dfe:	8923      	ldrh	r3, [r4, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011e00:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8011e02:	4283      	cmp	r3, r0
 8011e04:	d869      	bhi.n	8011eda <ip4_input+0xfe>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011e06:	8963      	ldrh	r3, [r4, #10]
 8011e08:	42ab      	cmp	r3, r5
 8011e0a:	d360      	bcc.n	8011ece <ip4_input+0xf2>
 8011e0c:	8923      	ldrh	r3, [r4, #8]
 8011e0e:	4543      	cmp	r3, r8
 8011e10:	d35d      	bcc.n	8011ece <ip4_input+0xf2>
 8011e12:	2d13      	cmp	r5, #19
 8011e14:	d95b      	bls.n	8011ece <ip4_input+0xf2>
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011e16:	693a      	ldr	r2, [r7, #16]
 8011e18:	68f8      	ldr	r0, [r7, #12]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011e1a:	f002 01f0 	and.w	r1, r2, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011e1e:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8011f9c <ip4_input+0x1c0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011e22:	f896 802d 	ldrb.w	r8, [r6, #45]	@ 0x2d
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011e26:	29e0      	cmp	r1, #224	@ 0xe0
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011e28:	f008 0301 	and.w	r3, r8, #1
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011e2c:	e9c9 0204 	strd	r0, r2, [r9, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011e30:	d158      	bne.n	8011ee4 <ip4_input+0x108>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f040 8083 	bne.w	8011f3e <ip4_input+0x162>
      netif = inp;
    } else {
      netif = NULL;
 8011e38:	f04f 0800 	mov.w	r8, #0
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011e3c:	4631      	mov	r1, r6
 8011e3e:	f000 f945 	bl	80120cc <ip4_addr_isbroadcast_u32>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d143      	bne.n	8011ece <ip4_input+0xf2>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011e46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011e4e:	2be0      	cmp	r3, #224	@ 0xe0
 8011e50:	d03d      	beq.n	8011ece <ip4_input+0xf2>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011e52:	f1b8 0f00 	cmp.w	r8, #0
 8011e56:	d03a      	beq.n	8011ece <ip4_input+0xf2>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011e58:	88fb      	ldrh	r3, [r7, #6]
 8011e5a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d165      	bne.n	8011f2e <ip4_input+0x152>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8011e62:	f8c9 7008 	str.w	r7, [r9, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011e66:	4629      	mov	r1, r5
 8011e68:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8011e6a:	e9c9 8600 	strd	r8, r6, [r9]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011e6e:	783b      	ldrb	r3, [r7, #0]
 8011e70:	f003 030f 	and.w	r3, r3, #15
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	f8a9 300c 	strh.w	r3, [r9, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011e7a:	f7fa fa7b 	bl	800c374 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011e7e:	7a7b      	ldrb	r3, [r7, #9]
 8011e80:	2b06      	cmp	r3, #6
 8011e82:	d07a      	beq.n	8011f7a <ip4_input+0x19e>
 8011e84:	2b11      	cmp	r3, #17
 8011e86:	d073      	beq.n	8011f70 <ip4_input+0x194>
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	d06c      	beq.n	8011f66 <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011e8c:	4641      	mov	r1, r8
 8011e8e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011e92:	f000 f91b 	bl	80120cc <ip4_addr_isbroadcast_u32>
 8011e96:	b968      	cbnz	r0, 8011eb4 <ip4_input+0xd8>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011e98:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011ea0:	2be0      	cmp	r3, #224	@ 0xe0
 8011ea2:	d007      	beq.n	8011eb4 <ip4_input+0xd8>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f7fa fa92 	bl	800c3d0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011eac:	2102      	movs	r1, #2
 8011eae:	4620      	mov	r0, r4
 8011eb0:	f7ff ff58 	bl	8011d64 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	f7fa fabf 	bl	800c438 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	e9c9 3300 	strd	r3, r3, [r9]
  ip_data.current_input_netif = NULL;
  ip_data.current_ip4_header = NULL;
 8011ec0:	f8c9 3008 	str.w	r3, [r9, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011ec4:	f8a9 300c 	strh.w	r3, [r9, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011ec8:	e9c9 3304 	strd	r3, r3, [r9, #16]
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
 8011ecc:	e002      	b.n	8011ed4 <ip4_input+0xf8>
    pbuf_free(p);
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f7fa fab2 	bl	800c438 <pbuf_free>
}
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 8011eda:	4601      	mov	r1, r0
 8011edc:	4620      	mov	r0, r4
 8011ede:	f7fa fbbd 	bl	800c65c <pbuf_realloc>
 8011ee2:	e790      	b.n	8011e06 <ip4_input+0x2a>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011ee4:	bb93      	cbnz	r3, 8011f4c <ip4_input+0x170>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011ee6:	b2d2      	uxtb	r2, r2
 8011ee8:	2a7f      	cmp	r2, #127	@ 0x7f
 8011eea:	d04b      	beq.n	8011f84 <ip4_input+0x1a8>
        NETIF_FOREACH(netif) {
 8011eec:	4b2a      	ldr	r3, [pc, #168]	@ (8011f98 <ip4_input+0x1bc>)
 8011eee:	f8d3 8000 	ldr.w	r8, [r3]
 8011ef2:	f1b8 0f00 	cmp.w	r8, #0
 8011ef6:	d108      	bne.n	8011f0a <ip4_input+0x12e>
 8011ef8:	e044      	b.n	8011f84 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011efa:	f000 f8e7 	bl	80120cc <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011efe:	b998      	cbnz	r0, 8011f28 <ip4_input+0x14c>
        NETIF_FOREACH(netif) {
 8011f00:	f8d8 8000 	ldr.w	r8, [r8]
 8011f04:	f1b8 0f00 	cmp.w	r8, #0
 8011f08:	d00e      	beq.n	8011f28 <ip4_input+0x14c>
          if (netif == inp) {
 8011f0a:	4546      	cmp	r6, r8
 8011f0c:	d0f8      	beq.n	8011f00 <ip4_input+0x124>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011f0e:	f898 302d 	ldrb.w	r3, [r8, #45]	@ 0x2d
 8011f12:	07db      	lsls	r3, r3, #31
 8011f14:	d5f4      	bpl.n	8011f00 <ip4_input+0x124>
 8011f16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d0f0      	beq.n	8011f00 <ip4_input+0x124>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f1e:	f8d9 0014 	ldr.w	r0, [r9, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011f22:	4641      	mov	r1, r8
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f24:	4283      	cmp	r3, r0
 8011f26:	d1e8      	bne.n	8011efa <ip4_input+0x11e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011f28:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011f2c:	e786      	b.n	8011e3c <ip4_input+0x60>
    p = ip4_reass(p);
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f000 f9f8 	bl	8012324 <ip4_reass>
    if (p == NULL) {
 8011f34:	4604      	mov	r4, r0
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d0cc      	beq.n	8011ed4 <ip4_input+0xf8>
    iphdr = (const struct ip_hdr *)p->payload;
 8011f3a:	6847      	ldr	r7, [r0, #4]
 8011f3c:	e791      	b.n	8011e62 <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011f3e:	6873      	ldr	r3, [r6, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	bf14      	ite	ne
 8011f44:	46b0      	movne	r8, r6
 8011f46:	f04f 0800 	moveq.w	r8, #0
 8011f4a:	e777      	b.n	8011e3c <ip4_input+0x60>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011f4c:	6873      	ldr	r3, [r6, #4]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d0c9      	beq.n	8011ee6 <ip4_input+0x10a>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f52:	429a      	cmp	r2, r3
 8011f54:	d019      	beq.n	8011f8a <ip4_input+0x1ae>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011f56:	4610      	mov	r0, r2
 8011f58:	4631      	mov	r1, r6
 8011f5a:	f000 f8b7 	bl	80120cc <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f5e:	b9b0      	cbnz	r0, 8011f8e <ip4_input+0x1b2>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011f60:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8011f64:	e7bf      	b.n	8011ee6 <ip4_input+0x10a>
        icmp_input(p, inp);
 8011f66:	4631      	mov	r1, r6
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f7ff fe53 	bl	8011c14 <icmp_input>
        break;
 8011f6e:	e7a4      	b.n	8011eba <ip4_input+0xde>
        udp_input(p, inp);
 8011f70:	4631      	mov	r1, r6
 8011f72:	4620      	mov	r0, r4
 8011f74:	f7fe ffe2 	bl	8010f3c <udp_input>
        break;
 8011f78:	e79f      	b.n	8011eba <ip4_input+0xde>
        tcp_input(p, inp);
 8011f7a:	4631      	mov	r1, r6
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f7fc feed 	bl	800ed5c <tcp_input>
        break;
 8011f82:	e79a      	b.n	8011eba <ip4_input+0xde>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011f84:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011f88:	e756      	b.n	8011e38 <ip4_input+0x5c>
 8011f8a:	46b0      	mov	r8, r6
 8011f8c:	e756      	b.n	8011e3c <ip4_input+0x60>
 8011f8e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011f92:	46b0      	mov	r8, r6
 8011f94:	e752      	b.n	8011e3c <ip4_input+0x60>
 8011f96:	bf00      	nop
 8011f98:	2400fcb8 	.word	0x2400fcb8
 8011f9c:	24009200 	.word	0x24009200

08011fa0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	4604      	mov	r4, r0
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	4699      	mov	r9, r3
 8011faa:	460f      	mov	r7, r1
 8011fac:	4616      	mov	r6, r2
 8011fae:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 8011fb2:	f89d b034 	ldrb.w	fp, [sp, #52]	@ 0x34
 8011fb6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 8011fba:	f7f5 f9b7 	bl	800732c <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011fbe:	7ba3      	ldrb	r3, [r4, #14]
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	d13d      	bne.n	8012040 <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011fc4:	2e00      	cmp	r6, #0
 8011fc6:	d044      	beq.n	8012052 <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011fc8:	2114      	movs	r1, #20
 8011fca:	4620      	mov	r0, r4
 8011fcc:	f7fa f9a2 	bl	800c314 <pbuf_add_header>
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d159      	bne.n	8012088 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011fd4:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8011fd6:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011fd8:	2b13      	cmp	r3, #19
 8011fda:	d942      	bls.n	8012062 <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011fdc:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011fe0:	2245      	movs	r2, #69	@ 0x45
    IPH_PROTO_SET(iphdr, proto);
 8011fe2:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8011fe6:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011fe8:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8011fea:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 8011fee:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011ff0:	8920      	ldrh	r0, [r4, #8]
 8011ff2:	f7f9 fb4d 	bl	800b690 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011ff6:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80120a4 <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 8011ffa:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011ffc:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011ffe:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 8012002:	71ab      	strb	r3, [r5, #6]
 8012004:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012006:	f7f9 fb43 	bl	800b690 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801200a:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801200e:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8012010:	3301      	adds	r3, #1
 8012012:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8012016:	b367      	cbz	r7, 8012072 <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801201c:	2300      	movs	r3, #0
 801201e:	72ab      	strb	r3, [r5, #10]
 8012020:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012022:	f8b8 3024 	ldrh.w	r3, [r8, #36]	@ 0x24
 8012026:	b113      	cbz	r3, 801202e <ip4_output_if_src+0x8e>
 8012028:	8922      	ldrh	r2, [r4, #8]
 801202a:	429a      	cmp	r2, r3
 801202c:	d824      	bhi.n	8012078 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801202e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012032:	4632      	mov	r2, r6
 8012034:	4621      	mov	r1, r4
 8012036:	4640      	mov	r0, r8
 8012038:	4798      	blx	r3
}
 801203a:	b003      	add	sp, #12
 801203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012040:	4b13      	ldr	r3, [pc, #76]	@ (8012090 <ip4_output_if_src+0xf0>)
 8012042:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012046:	4913      	ldr	r1, [pc, #76]	@ (8012094 <ip4_output_if_src+0xf4>)
 8012048:	4813      	ldr	r0, [pc, #76]	@ (8012098 <ip4_output_if_src+0xf8>)
 801204a:	f000 ff51 	bl	8012ef0 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801204e:	2e00      	cmp	r6, #0
 8012050:	d1ba      	bne.n	8011fc8 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 8012052:	8963      	ldrh	r3, [r4, #10]
 8012054:	2b13      	cmp	r3, #19
 8012056:	d917      	bls.n	8012088 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012058:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 801205a:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 801205c:	691b      	ldr	r3, [r3, #16]
 801205e:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8012060:	e7df      	b.n	8012022 <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012062:	4b0b      	ldr	r3, [pc, #44]	@ (8012090 <ip4_output_if_src+0xf0>)
 8012064:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012068:	490c      	ldr	r1, [pc, #48]	@ (801209c <ip4_output_if_src+0xfc>)
 801206a:	480b      	ldr	r0, [pc, #44]	@ (8012098 <ip4_output_if_src+0xf8>)
 801206c:	f000 ff40 	bl	8012ef0 <iprintf>
 8012070:	e7b4      	b.n	8011fdc <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012072:	4b0b      	ldr	r3, [pc, #44]	@ (80120a0 <ip4_output_if_src+0x100>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	e7d0      	b.n	801201a <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 8012078:	4632      	mov	r2, r6
 801207a:	4641      	mov	r1, r8
 801207c:	4620      	mov	r0, r4
 801207e:	f000 fb8d 	bl	801279c <ip4_frag>
}
 8012082:	b003      	add	sp, #12
 8012084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 8012088:	f06f 0001 	mvn.w	r0, #1
 801208c:	e7d5      	b.n	801203a <ip4_output_if_src+0x9a>
 801208e:	bf00      	nop
 8012090:	08016f6c 	.word	0x08016f6c
 8012094:	08016fa0 	.word	0x08016fa0
 8012098:	08014150 	.word	0x08014150
 801209c:	08016fac 	.word	0x08016fac
 80120a0:	08016fdc 	.word	0x08016fdc
 80120a4:	2400fe10 	.word	0x2400fe10

080120a8 <ip4_output_if>:
{
 80120a8:	b4f0      	push	{r4, r5, r6, r7}
 80120aa:	9c06      	ldr	r4, [sp, #24]
 80120ac:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80120b0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80120b4:	b11a      	cbz	r2, 80120be <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80120b6:	b109      	cbz	r1, 80120bc <ip4_output_if+0x14>
 80120b8:	680f      	ldr	r7, [r1, #0]
 80120ba:	b907      	cbnz	r7, 80120be <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80120bc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80120be:	9504      	str	r5, [sp, #16]
 80120c0:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 80120c4:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80120c6:	f7ff bf6b 	b.w	8011fa0 <ip4_output_if_src>
 80120ca:	bf00      	nop

080120cc <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80120cc:	1e42      	subs	r2, r0, #1
{
 80120ce:	4603      	mov	r3, r0
  if ((~addr == IPADDR_ANY) ||
 80120d0:	3203      	adds	r2, #3
 80120d2:	d815      	bhi.n	8012100 <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80120d4:	f891 002d 	ldrb.w	r0, [r1, #45]	@ 0x2d
 80120d8:	f010 0002 	ands.w	r0, r0, #2
 80120dc:	d00f      	beq.n	80120fe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80120de:	684a      	ldr	r2, [r1, #4]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d00b      	beq.n	80120fc <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80120e4:	6889      	ldr	r1, [r1, #8]
 80120e6:	405a      	eors	r2, r3
 80120e8:	420a      	tst	r2, r1
 80120ea:	d107      	bne.n	80120fc <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80120ec:	43c8      	mvns	r0, r1
 80120ee:	ea23 0301 	bic.w	r3, r3, r1
 80120f2:	1a18      	subs	r0, r3, r0
 80120f4:	fab0 f080 	clz	r0, r0
 80120f8:	0940      	lsrs	r0, r0, #5
 80120fa:	4770      	bx	lr
    return 0;
 80120fc:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 80120fe:	4770      	bx	lr
    return 1;
 8012100:	2001      	movs	r0, #1
 8012102:	4770      	bx	lr

08012104 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012104:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012106:	4604      	mov	r4, r0
 8012108:	b148      	cbz	r0, 801211e <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 801210a:	6960      	ldr	r0, [r4, #20]
 801210c:	b108      	cbz	r0, 8012112 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801210e:	f7fa f993 	bl	800c438 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8012112:	4621      	mov	r1, r4
 8012114:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8012116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801211a:	f7f9 be81 	b.w	800be20 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801211e:	4b04      	ldr	r3, [pc, #16]	@ (8012130 <ipfrag_free_pbuf_custom+0x2c>)
 8012120:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012124:	4903      	ldr	r1, [pc, #12]	@ (8012134 <ipfrag_free_pbuf_custom+0x30>)
 8012126:	4804      	ldr	r0, [pc, #16]	@ (8012138 <ipfrag_free_pbuf_custom+0x34>)
 8012128:	f000 fee2 	bl	8012ef0 <iprintf>
 801212c:	e7ed      	b.n	801210a <ipfrag_free_pbuf_custom+0x6>
 801212e:	bf00      	nop
 8012130:	08016fe0 	.word	0x08016fe0
 8012134:	0801701c 	.word	0x0801701c
 8012138:	08014150 	.word	0x08014150

0801213c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801213c:	4281      	cmp	r1, r0
{
 801213e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012142:	4606      	mov	r6, r0
 8012144:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012146:	d076      	beq.n	8012236 <ip_reass_free_complete_datagram+0xfa>
  if (prev != NULL) {
 8012148:	b147      	cbz	r7, 801215c <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	42b3      	cmp	r3, r6
 801214e:	d005      	beq.n	801215c <ip_reass_free_complete_datagram+0x20>
 8012150:	4b40      	ldr	r3, [pc, #256]	@ (8012254 <ip_reass_free_complete_datagram+0x118>)
 8012152:	22ad      	movs	r2, #173	@ 0xad
 8012154:	4940      	ldr	r1, [pc, #256]	@ (8012258 <ip_reass_free_complete_datagram+0x11c>)
 8012156:	4841      	ldr	r0, [pc, #260]	@ (801225c <ip_reass_free_complete_datagram+0x120>)
 8012158:	f000 feca 	bl	8012ef0 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801215c:	6874      	ldr	r4, [r6, #4]
 801215e:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 8012160:	889a      	ldrh	r2, [r3, #4]
 8012162:	2a00      	cmp	r2, #0
 8012164:	d046      	beq.n	80121f4 <ip_reass_free_complete_datagram+0xb8>
  u16_t pbufs_freed = 0;
 8012166:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801216a:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 8012254 <ip_reass_free_complete_datagram+0x118>
 801216e:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8012274 <ip_reass_free_complete_datagram+0x138>
 8012172:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 801225c <ip_reass_free_complete_datagram+0x120>
 8012176:	e003      	b.n	8012180 <ip_reass_free_complete_datagram+0x44>
    pbuf_free(pcur);
 8012178:	4628      	mov	r0, r5
 801217a:	f7fa f95d 	bl	800c438 <pbuf_free>
  while (p != NULL) {
 801217e:	b1b4      	cbz	r4, 80121ae <ip_reass_free_complete_datagram+0x72>
    iprh = (struct ip_reass_helper *)p->payload;
 8012180:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8012182:	4620      	mov	r0, r4
 8012184:	4625      	mov	r5, r4
    p = iprh->next_pbuf;
 8012186:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8012188:	f7fa fac4 	bl	800c714 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801218c:	4458      	add	r0, fp
 801218e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012192:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012196:	dbef      	blt.n	8012178 <ip_reass_free_complete_datagram+0x3c>
 8012198:	4653      	mov	r3, sl
 801219a:	22cc      	movs	r2, #204	@ 0xcc
 801219c:	4649      	mov	r1, r9
 801219e:	4640      	mov	r0, r8
 80121a0:	f000 fea6 	bl	8012ef0 <iprintf>
    pbuf_free(pcur);
 80121a4:	4628      	mov	r0, r5
 80121a6:	f7fa f947 	bl	800c438 <pbuf_free>
  while (p != NULL) {
 80121aa:	2c00      	cmp	r4, #0
 80121ac:	d1e8      	bne.n	8012180 <ip_reass_free_complete_datagram+0x44>
  if (reassdatagrams == ipr) {
 80121ae:	4b2c      	ldr	r3, [pc, #176]	@ (8012260 <ip_reass_free_complete_datagram+0x124>)
 80121b0:	681a      	ldr	r2, [r3, #0]
 80121b2:	4296      	cmp	r6, r2
 80121b4:	d03c      	beq.n	8012230 <ip_reass_free_complete_datagram+0xf4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80121b6:	2f00      	cmp	r7, #0
 80121b8:	d044      	beq.n	8012244 <ip_reass_free_complete_datagram+0x108>
    prev->next = ipr->next;
 80121ba:	6833      	ldr	r3, [r6, #0]
 80121bc:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80121be:	4c29      	ldr	r4, [pc, #164]	@ (8012264 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 80121c0:	4631      	mov	r1, r6
 80121c2:	2004      	movs	r0, #4
 80121c4:	f7f9 fe2c 	bl	800be20 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80121c8:	8823      	ldrh	r3, [r4, #0]
 80121ca:	455b      	cmp	r3, fp
 80121cc:	d305      	bcc.n	80121da <ip_reass_free_complete_datagram+0x9e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80121ce:	eba3 030b 	sub.w	r3, r3, fp
}
 80121d2:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80121d4:	8023      	strh	r3, [r4, #0]
}
 80121d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80121da:	4b1e      	ldr	r3, [pc, #120]	@ (8012254 <ip_reass_free_complete_datagram+0x118>)
 80121dc:	22d2      	movs	r2, #210	@ 0xd2
 80121de:	4922      	ldr	r1, [pc, #136]	@ (8012268 <ip_reass_free_complete_datagram+0x12c>)
 80121e0:	481e      	ldr	r0, [pc, #120]	@ (801225c <ip_reass_free_complete_datagram+0x120>)
 80121e2:	f000 fe85 	bl	8012ef0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80121e6:	8823      	ldrh	r3, [r4, #0]
}
 80121e8:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80121ea:	eba3 030b 	sub.w	r3, r3, fp
 80121ee:	8023      	strh	r3, [r4, #0]
}
 80121f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 80121f4:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80121f6:	6930      	ldr	r0, [r6, #16]
 80121f8:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 80121fa:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80121fc:	68f5      	ldr	r5, [r6, #12]
 80121fe:	68b2      	ldr	r2, [r6, #8]
 8012200:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012202:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012204:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012206:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012208:	601a      	str	r2, [r3, #0]
 801220a:	605d      	str	r5, [r3, #4]
 801220c:	69b2      	ldr	r2, [r6, #24]
 801220e:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012210:	f7ff fdac 	bl	8011d6c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012214:	4620      	mov	r0, r4
 8012216:	f7fa fa7d 	bl	800c714 <pbuf_clen>
 801221a:	4683      	mov	fp, r0
    pbuf_free(p);
 801221c:	4620      	mov	r0, r4
 801221e:	f7fa f90b 	bl	800c438 <pbuf_free>
  p = ipr->p;
 8012222:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 8012224:	2c00      	cmp	r4, #0
 8012226:	d1a0      	bne.n	801216a <ip_reass_free_complete_datagram+0x2e>
  if (reassdatagrams == ipr) {
 8012228:	4b0d      	ldr	r3, [pc, #52]	@ (8012260 <ip_reass_free_complete_datagram+0x124>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	4296      	cmp	r6, r2
 801222e:	d1c2      	bne.n	80121b6 <ip_reass_free_complete_datagram+0x7a>
    reassdatagrams = ipr->next;
 8012230:	6832      	ldr	r2, [r6, #0]
 8012232:	601a      	str	r2, [r3, #0]
 8012234:	e7c3      	b.n	80121be <ip_reass_free_complete_datagram+0x82>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012236:	4b07      	ldr	r3, [pc, #28]	@ (8012254 <ip_reass_free_complete_datagram+0x118>)
 8012238:	22ab      	movs	r2, #171	@ 0xab
 801223a:	490c      	ldr	r1, [pc, #48]	@ (801226c <ip_reass_free_complete_datagram+0x130>)
 801223c:	4807      	ldr	r0, [pc, #28]	@ (801225c <ip_reass_free_complete_datagram+0x120>)
 801223e:	f000 fe57 	bl	8012ef0 <iprintf>
 8012242:	e781      	b.n	8012148 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012244:	4b03      	ldr	r3, [pc, #12]	@ (8012254 <ip_reass_free_complete_datagram+0x118>)
 8012246:	f240 1245 	movw	r2, #325	@ 0x145
 801224a:	4909      	ldr	r1, [pc, #36]	@ (8012270 <ip_reass_free_complete_datagram+0x134>)
 801224c:	4803      	ldr	r0, [pc, #12]	@ (801225c <ip_reass_free_complete_datagram+0x120>)
 801224e:	f000 fe4f 	bl	8012ef0 <iprintf>
 8012252:	e7b2      	b.n	80121ba <ip_reass_free_complete_datagram+0x7e>
 8012254:	08016fe0 	.word	0x08016fe0
 8012258:	08017034 	.word	0x08017034
 801225c:	08014150 	.word	0x08014150
 8012260:	2400fe14 	.word	0x2400fe14
 8012264:	2400fe12 	.word	0x2400fe12
 8012268:	08017084 	.word	0x08017084
 801226c:	08017028 	.word	0x08017028
 8012270:	08017068 	.word	0x08017068
 8012274:	08017048 	.word	0x08017048

08012278 <ip_reass_remove_oldest_datagram>:
{
 8012278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 801227c:	2700      	movs	r7, #0
 801227e:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 80122f0 <ip_reass_remove_oldest_datagram+0x78>
{
 8012282:	4605      	mov	r5, r0
 8012284:	460e      	mov	r6, r1
    r = reassdatagrams;
 8012286:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801228a:	b1f3      	cbz	r3, 80122ca <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 801228c:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801228e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 8012292:	4621      	mov	r1, r4
    prev = NULL;
 8012294:	46a4      	mov	ip, r4
    oldest = NULL;
 8012296:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012298:	695a      	ldr	r2, [r3, #20]
 801229a:	4572      	cmp	r2, lr
 801229c:	d018      	beq.n	80122d0 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801229e:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80122a0:	b318      	cbz	r0, 80122ea <ip_reass_remove_oldest_datagram+0x72>
        } else if (r->timer <= oldest->timer) {
 80122a2:	7fc2      	ldrb	r2, [r0, #31]
 80122a4:	f893 901f 	ldrb.w	r9, [r3, #31]
 80122a8:	4591      	cmp	r9, r2
 80122aa:	bf9c      	itt	ls
 80122ac:	4661      	movls	r1, ip
 80122ae:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	469c      	mov	ip, r3
 80122b4:	4613      	mov	r3, r2
 80122b6:	2a00      	cmp	r2, #0
 80122b8:	d1ee      	bne.n	8012298 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 80122ba:	b110      	cbz	r0, 80122c2 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80122bc:	f7ff ff3e 	bl	801213c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80122c0:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80122c2:	42b7      	cmp	r7, r6
 80122c4:	da01      	bge.n	80122ca <ip_reass_remove_oldest_datagram+0x52>
 80122c6:	2c01      	cmp	r4, #1
 80122c8:	dcdd      	bgt.n	8012286 <ip_reass_remove_oldest_datagram+0xe>
}
 80122ca:	4638      	mov	r0, r7
 80122cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80122d0:	699a      	ldr	r2, [r3, #24]
 80122d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80122d6:	454a      	cmp	r2, r9
 80122d8:	d1e1      	bne.n	801229e <ip_reass_remove_oldest_datagram+0x26>
 80122da:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80122de:	88aa      	ldrh	r2, [r5, #4]
 80122e0:	4591      	cmp	r9, r2
 80122e2:	d0e5      	beq.n	80122b0 <ip_reass_remove_oldest_datagram+0x38>
        other_datagrams++;
 80122e4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80122e6:	2800      	cmp	r0, #0
 80122e8:	d1db      	bne.n	80122a2 <ip_reass_remove_oldest_datagram+0x2a>
 80122ea:	4661      	mov	r1, ip
 80122ec:	4618      	mov	r0, r3
 80122ee:	e7df      	b.n	80122b0 <ip_reass_remove_oldest_datagram+0x38>
 80122f0:	2400fe14 	.word	0x2400fe14

080122f4 <ip_reass_tmr>:
{
 80122f4:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80122f6:	4b0a      	ldr	r3, [pc, #40]	@ (8012320 <ip_reass_tmr+0x2c>)
 80122f8:	681c      	ldr	r4, [r3, #0]
  while (r != NULL) {
 80122fa:	b14c      	cbz	r4, 8012310 <ip_reass_tmr+0x1c>
  struct ip_reassdata *r, *prev = NULL;
 80122fc:	2500      	movs	r5, #0
    if (r->timer > 0) {
 80122fe:	7fe3      	ldrb	r3, [r4, #31]
 8012300:	4620      	mov	r0, r4
      r = r->next;
 8012302:	6824      	ldr	r4, [r4, #0]
      r->timer--;
 8012304:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8012306:	b123      	cbz	r3, 8012312 <ip_reass_tmr+0x1e>
 8012308:	4605      	mov	r5, r0
      r->timer--;
 801230a:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 801230c:	2c00      	cmp	r4, #0
 801230e:	d1f6      	bne.n	80122fe <ip_reass_tmr+0xa>
}
 8012310:	bd38      	pop	{r3, r4, r5, pc}
      ip_reass_free_complete_datagram(tmp, prev);
 8012312:	4629      	mov	r1, r5
 8012314:	f7ff ff12 	bl	801213c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012318:	2c00      	cmp	r4, #0
 801231a:	d1f0      	bne.n	80122fe <ip_reass_tmr+0xa>
 801231c:	e7f8      	b.n	8012310 <ip_reass_tmr+0x1c>
 801231e:	bf00      	nop
 8012320:	2400fe14 	.word	0x2400fe14

08012324 <ip4_reass>:
{
 8012324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8012328:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 801232c:	b085      	sub	sp, #20
 801232e:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012330:	f899 3000 	ldrb.w	r3, [r9]
 8012334:	f003 030f 	and.w	r3, r3, #15
 8012338:	2b05      	cmp	r3, #5
 801233a:	f040 8089 	bne.w	8012450 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 801233e:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8012342:	f7f9 f9a5 	bl	800b690 <lwip_htons>
 8012346:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012348:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 801234c:	f7f9 f9a0 	bl	800b690 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8012350:	f899 3000 	ldrb.w	r3, [r9]
 8012354:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8012358:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 801235c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012360:	d376      	bcc.n	8012450 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8012362:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012364:	f8df 8310 	ldr.w	r8, [pc, #784]	@ 8012678 <ip4_reass+0x354>
  clen = pbuf_clen(p);
 8012368:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 801236a:	b29b      	uxth	r3, r3
 801236c:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 801236e:	f7fa f9d1 	bl	800c714 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012372:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 8012376:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012378:	4403      	add	r3, r0
 801237a:	2b0a      	cmp	r3, #10
 801237c:	f300 80e7 	bgt.w	801254e <ip4_reass+0x22a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012380:	f8df a2f8 	ldr.w	sl, [pc, #760]	@ 801267c <ip4_reass+0x358>
 8012384:	f8da 4000 	ldr.w	r4, [sl]
 8012388:	2c00      	cmp	r4, #0
 801238a:	f000 80ee 	beq.w	801256a <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801238e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8012392:	e003      	b.n	801239c <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012394:	6824      	ldr	r4, [r4, #0]
 8012396:	2c00      	cmp	r4, #0
 8012398:	f000 80e7 	beq.w	801256a <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801239c:	6963      	ldr	r3, [r4, #20]
 801239e:	4293      	cmp	r3, r2
 80123a0:	d1f8      	bne.n	8012394 <ip4_reass+0x70>
 80123a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80123a6:	69a1      	ldr	r1, [r4, #24]
 80123a8:	4299      	cmp	r1, r3
 80123aa:	d1f3      	bne.n	8012394 <ip4_reass+0x70>
 80123ac:	89a1      	ldrh	r1, [r4, #12]
 80123ae:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80123b2:	4299      	cmp	r1, r3
 80123b4:	d1ee      	bne.n	8012394 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80123b6:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 80123ba:	f7f9 f969 	bl	800b690 <lwip_htons>
 80123be:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80123c2:	2800      	cmp	r0, #0
 80123c4:	f000 80ab 	beq.w	801251e <ip4_reass+0x1fa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80123c8:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80123cc:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 80123d0:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 80123d4:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 80123d8:	9302      	str	r3, [sp, #8]
 80123da:	d108      	bne.n	80123ee <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 80123dc:	9b01      	ldr	r3, [sp, #4]
 80123de:	18f3      	adds	r3, r6, r3
 80123e0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80123e2:	429e      	cmp	r6, r3
 80123e4:	d812      	bhi.n	801240c <ip4_reass+0xe8>
 80123e6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d80e      	bhi.n	801240c <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80123ee:	f8d5 9004 	ldr.w	r9, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80123f2:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 80123f6:	f7f9 f94b 	bl	800b690 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80123fa:	f899 3000 	ldrb.w	r3, [r9]
 80123fe:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8012402:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8012406:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801240a:	d229      	bcs.n	8012460 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 801240c:	6866      	ldr	r6, [r4, #4]
 801240e:	b9fe      	cbnz	r6, 8012450 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012410:	f8da 3000 	ldr.w	r3, [sl]
 8012414:	42a3      	cmp	r3, r4
 8012416:	d014      	beq.n	8012442 <ip4_reass+0x11e>
 8012418:	4b93      	ldr	r3, [pc, #588]	@ (8012668 <ip4_reass+0x344>)
 801241a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801241e:	4993      	ldr	r1, [pc, #588]	@ (801266c <ip4_reass+0x348>)
 8012420:	4893      	ldr	r0, [pc, #588]	@ (8012670 <ip4_reass+0x34c>)
 8012422:	f000 fd65 	bl	8012ef0 <iprintf>
  if (reassdatagrams == ipr) {
 8012426:	f8da 3000 	ldr.w	r3, [sl]
 801242a:	429c      	cmp	r4, r3
 801242c:	d009      	beq.n	8012442 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801242e:	4b8e      	ldr	r3, [pc, #568]	@ (8012668 <ip4_reass+0x344>)
 8012430:	f240 1245 	movw	r2, #325	@ 0x145
 8012434:	498f      	ldr	r1, [pc, #572]	@ (8012674 <ip4_reass+0x350>)
 8012436:	488e      	ldr	r0, [pc, #568]	@ (8012670 <ip4_reass+0x34c>)
 8012438:	f000 fd5a 	bl	8012ef0 <iprintf>
    prev->next = ipr->next;
 801243c:	6823      	ldr	r3, [r4, #0]
 801243e:	6033      	str	r3, [r6, #0]
 8012440:	deff      	udf	#255	@ 0xff
    reassdatagrams = ipr->next;
 8012442:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8012444:	4621      	mov	r1, r4
 8012446:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 8012448:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 801244c:	f7f9 fce8 	bl	800be20 <memp_free>
  pbuf_free(p);
 8012450:	4628      	mov	r0, r5
 8012452:	f7f9 fff1 	bl	800c438 <pbuf_free>
  return NULL;
 8012456:	2600      	movs	r6, #0
}
 8012458:	4630      	mov	r0, r6
 801245a:	b005      	add	sp, #20
 801245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8012460:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012462:	f8b9 0006 	ldrh.w	r0, [r9, #6]
  len = (u16_t)(len - hlen);
 8012466:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801246a:	f7f9 f911 	bl	800b690 <lwip_htons>
 801246e:	f3c0 020c 	ubfx	r2, r0, #0, #13
 8012472:	00d2      	lsls	r2, r2, #3
  iprh->end = (u16_t)(offset + len);
 8012474:	eb09 0302 	add.w	r3, r9, r2
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012478:	f8d5 9004 	ldr.w	r9, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 801247c:	f8a9 3006 	strh.w	r3, [r9, #6]
 8012480:	b29b      	uxth	r3, r3
  iprh->start = offset;
 8012482:	f8a9 2004 	strh.w	r2, [r9, #4]
  iprh->end = (u16_t)(offset + len);
 8012486:	4619      	mov	r1, r3
 8012488:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 801248a:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 801248c:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 801248e:	f889 3000 	strb.w	r3, [r9]
 8012492:	f889 3001 	strb.w	r3, [r9, #1]
 8012496:	f889 3002 	strb.w	r3, [r9, #2]
 801249a:	f889 3003 	strb.w	r3, [r9, #3]
  if (iprh->end < offset) {
 801249e:	d8b5      	bhi.n	801240c <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 80124a0:	6861      	ldr	r1, [r4, #4]
 80124a2:	2900      	cmp	r1, #0
 80124a4:	f000 80d4 	beq.w	8012650 <ip4_reass+0x32c>
  int valid = 1;
 80124a8:	f04f 0b01 	mov.w	fp, #1
 80124ac:	4694      	mov	ip, r2
 80124ae:	e00e      	b.n	80124ce <ip4_reass+0x1aa>
    } else if (iprh->start == iprh_tmp->start) {
 80124b0:	d0ce      	beq.n	8012450 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 80124b2:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 80124b6:	45f4      	cmp	ip, lr
 80124b8:	d3ca      	bcc.n	8012450 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 80124ba:	b122      	cbz	r2, 80124c6 <ip4_reass+0x1a2>
        if (iprh_prev->end != iprh_tmp->start) {
 80124bc:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 80124be:	4282      	cmp	r2, r0
 80124c0:	bf18      	it	ne
 80124c2:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 80124c6:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 80124c8:	2900      	cmp	r1, #0
 80124ca:	f000 80a6 	beq.w	801261a <ip4_reass+0x2f6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80124ce:	461a      	mov	r2, r3
 80124d0:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80124d2:	8898      	ldrh	r0, [r3, #4]
 80124d4:	4584      	cmp	ip, r0
 80124d6:	d2eb      	bcs.n	80124b0 <ip4_reass+0x18c>
      iprh->next_pbuf = q;
 80124d8:	4613      	mov	r3, r2
 80124da:	f8c9 1000 	str.w	r1, [r9]
 80124de:	4662      	mov	r2, ip
 80124e0:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d064      	beq.n	80125b0 <ip4_reass+0x28c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80124e6:	88db      	ldrh	r3, [r3, #6]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d3b1      	bcc.n	8012450 <ip4_reass+0x12c>
 80124ec:	9903      	ldr	r1, [sp, #12]
 80124ee:	4281      	cmp	r1, r0
 80124f0:	d8ae      	bhi.n	8012450 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 80124f2:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 80124f4:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 80124f8:	d05f      	beq.n	80125ba <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80124fa:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80124fe:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012500:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012502:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012504:	b292      	uxth	r2, r2
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012506:	2900      	cmp	r1, #0
 8012508:	f000 80ab 	beq.w	8012662 <ip4_reass+0x33e>
 801250c:	07d9      	lsls	r1, r3, #31
 801250e:	f100 8122 	bmi.w	8012756 <ip4_reass+0x432>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012512:	f8b8 3000 	ldrh.w	r3, [r8]
 8012516:	443b      	add	r3, r7
 8012518:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 801251c:	e79b      	b.n	8012456 <ip4_reass+0x132>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801251e:	89e0      	ldrh	r0, [r4, #14]
 8012520:	f7f9 f8b6 	bl	800b690 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012524:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012528:	2800      	cmp	r0, #0
 801252a:	f43f af4d 	beq.w	80123c8 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801252e:	f8d9 3000 	ldr.w	r3, [r9]
 8012532:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8012536:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801253a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801253e:	60a3      	str	r3, [r4, #8]
 8012540:	60e0      	str	r0, [r4, #12]
 8012542:	6121      	str	r1, [r4, #16]
 8012544:	6162      	str	r2, [r4, #20]
 8012546:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801254a:	61a3      	str	r3, [r4, #24]
 801254c:	e73c      	b.n	80123c8 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801254e:	4601      	mov	r1, r0
 8012550:	4648      	mov	r0, r9
 8012552:	f7ff fe91 	bl	8012278 <ip_reass_remove_oldest_datagram>
 8012556:	2800      	cmp	r0, #0
 8012558:	f43f af7a 	beq.w	8012450 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801255c:	f8b8 3000 	ldrh.w	r3, [r8]
 8012560:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012562:	2b0a      	cmp	r3, #10
 8012564:	f77f af0c 	ble.w	8012380 <ip4_reass+0x5c>
 8012568:	e772      	b.n	8012450 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801256a:	2004      	movs	r0, #4
 801256c:	f7f9 fc12 	bl	800bd94 <memp_malloc>
  if (ipr == NULL) {
 8012570:	4604      	mov	r4, r0
 8012572:	b178      	cbz	r0, 8012594 <ip4_reass+0x270>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012574:	2300      	movs	r3, #0
 8012576:	61e3      	str	r3, [r4, #28]
 8012578:	60a3      	str	r3, [r4, #8]
 801257a:	60e3      	str	r3, [r4, #12]
 801257c:	6123      	str	r3, [r4, #16]
 801257e:	6163      	str	r3, [r4, #20]
 8012580:	61a3      	str	r3, [r4, #24]
 8012582:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8012584:	f8da 3000 	ldr.w	r3, [sl]
  reassdatagrams = ipr;
 8012588:	f8ca 4000 	str.w	r4, [sl]
  ipr->next = reassdatagrams;
 801258c:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 801258e:	230f      	movs	r3, #15
 8012590:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012592:	e7cc      	b.n	801252e <ip4_reass+0x20a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012594:	4639      	mov	r1, r7
 8012596:	4648      	mov	r0, r9
 8012598:	f7ff fe6e 	bl	8012278 <ip_reass_remove_oldest_datagram>
 801259c:	4287      	cmp	r7, r0
 801259e:	f73f af57 	bgt.w	8012450 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80125a2:	2004      	movs	r0, #4
 80125a4:	f7f9 fbf6 	bl	800bd94 <memp_malloc>
    if (ipr == NULL)
 80125a8:	4604      	mov	r4, r0
 80125aa:	2800      	cmp	r0, #0
 80125ac:	d1e2      	bne.n	8012574 <ip4_reass+0x250>
 80125ae:	e74f      	b.n	8012450 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 80125b0:	9b03      	ldr	r3, [sp, #12]
 80125b2:	4283      	cmp	r3, r0
 80125b4:	f63f af4c 	bhi.w	8012450 <ip4_reass+0x12c>
        ipr->p = new_p;
 80125b8:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80125ba:	9b02      	ldr	r3, [sp, #8]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d03b      	beq.n	8012638 <ip4_reass+0x314>
 80125c0:	7fa3      	ldrb	r3, [r4, #30]
 80125c2:	07db      	lsls	r3, r3, #31
 80125c4:	d5a5      	bpl.n	8012512 <ip4_reass+0x1ee>
    if (valid) {
 80125c6:	f1bb 0f00 	cmp.w	fp, #0
 80125ca:	d0a2      	beq.n	8012512 <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80125cc:	6862      	ldr	r2, [r4, #4]
 80125ce:	2a00      	cmp	r2, #0
 80125d0:	d09f      	beq.n	8012512 <ip4_reass+0x1ee>
 80125d2:	6851      	ldr	r1, [r2, #4]
 80125d4:	888b      	ldrh	r3, [r1, #4]
 80125d6:	b97b      	cbnz	r3, 80125f8 <ip4_reass+0x2d4>
        q = iprh->next_pbuf;
 80125d8:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f000 80bd 	beq.w	801275c <ip4_reass+0x438>
 80125e2:	464a      	mov	r2, r9
 80125e4:	e002      	b.n	80125ec <ip4_reass+0x2c8>
          q = iprh->next_pbuf;
 80125e6:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d049      	beq.n	8012680 <ip4_reass+0x35c>
          iprh = (struct ip_reass_helper *)q->payload;
 80125ec:	4610      	mov	r0, r2
 80125ee:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80125f0:	88c0      	ldrh	r0, [r0, #6]
 80125f2:	8893      	ldrh	r3, [r2, #4]
 80125f4:	4298      	cmp	r0, r3
 80125f6:	d0f6      	beq.n	80125e6 <ip4_reass+0x2c2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80125f8:	f8b8 3000 	ldrh.w	r3, [r8]
 80125fc:	443b      	add	r3, r7
 80125fe:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8012602:	9b02      	ldr	r3, [sp, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	f47f af26 	bne.w	8012456 <ip4_reass+0x132>
 801260a:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801260c:	9a01      	ldr	r2, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801260e:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8012612:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012614:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8012616:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012618:	e71d      	b.n	8012456 <ip4_reass+0x132>
      if (iprh_prev->end != iprh->start) {
 801261a:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 801261c:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801261e:	d0cc      	beq.n	80125ba <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012620:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012624:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012626:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012628:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801262a:	b292      	uxth	r2, r2
 801262c:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012630:	2900      	cmp	r1, #0
 8012632:	f47f af10 	bne.w	8012456 <ip4_reass+0x132>
 8012636:	e7e9      	b.n	801260c <ip4_reass+0x2e8>
    if (valid) {
 8012638:	f1bb 0f00 	cmp.w	fp, #0
 801263c:	d002      	beq.n	8012644 <ip4_reass+0x320>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801263e:	6862      	ldr	r2, [r4, #4]
 8012640:	2a00      	cmp	r2, #0
 8012642:	d1c6      	bne.n	80125d2 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012644:	f8b8 3000 	ldrh.w	r3, [r8]
 8012648:	443b      	add	r3, r7
 801264a:	f8a8 3000 	strh.w	r3, [r8]
 801264e:	e7dc      	b.n	801260a <ip4_reass+0x2e6>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012650:	9b02      	ldr	r3, [sp, #8]
      ipr->p = new_p;
 8012652:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012654:	b11b      	cbz	r3, 801265e <ip4_reass+0x33a>
 8012656:	7fa3      	ldrb	r3, [r4, #30]
 8012658:	07da      	lsls	r2, r3, #31
 801265a:	f57f af5a 	bpl.w	8012512 <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801265e:	6862      	ldr	r2, [r4, #4]
 8012660:	e7b7      	b.n	80125d2 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012662:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 8012666:	e7d1      	b.n	801260c <ip4_reass+0x2e8>
 8012668:	08016fe0 	.word	0x08016fe0
 801266c:	080170f8 	.word	0x080170f8
 8012670:	08014150 	.word	0x08014150
 8012674:	08017068 	.word	0x08017068
 8012678:	2400fe12 	.word	0x2400fe12
 801267c:	2400fe14 	.word	0x2400fe14
          LWIP_ASSERT("sanity check",
 8012680:	4291      	cmp	r1, r2
 8012682:	4691      	mov	r9, r2
 8012684:	d06c      	beq.n	8012760 <ip4_reass+0x43c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012686:	f8d9 3000 	ldr.w	r3, [r9]
 801268a:	b133      	cbz	r3, 801269a <ip4_reass+0x376>
 801268c:	4b3d      	ldr	r3, [pc, #244]	@ (8012784 <ip4_reass+0x460>)
 801268e:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8012692:	493d      	ldr	r1, [pc, #244]	@ (8012788 <ip4_reass+0x464>)
 8012694:	483d      	ldr	r0, [pc, #244]	@ (801278c <ip4_reass+0x468>)
 8012696:	f000 fc2b 	bl	8012ef0 <iprintf>
 801269a:	6862      	ldr	r2, [r4, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801269c:	f8b8 3000 	ldrh.w	r3, [r8]
 80126a0:	443b      	add	r3, r7
 80126a2:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 80126a6:	9b02      	ldr	r3, [sp, #8]
 80126a8:	b933      	cbnz	r3, 80126b8 <ip4_reass+0x394>
    u16_t datagram_len = (u16_t)(offset + len);
 80126aa:	9b01      	ldr	r3, [sp, #4]
 80126ac:	441e      	add	r6, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80126ae:	7fa3      	ldrb	r3, [r4, #30]
 80126b0:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80126b4:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80126b6:	77a3      	strb	r3, [r4, #30]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80126b8:	6856      	ldr	r6, [r2, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80126ba:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80126bc:	68a3      	ldr	r3, [r4, #8]
 80126be:	68e5      	ldr	r5, [r4, #12]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80126c0:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80126c2:	6921      	ldr	r1, [r4, #16]
 80126c4:	6962      	ldr	r2, [r4, #20]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80126c6:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80126c8:	6075      	str	r5, [r6, #4]
 80126ca:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80126cc:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80126ce:	60f2      	str	r2, [r6, #12]
 80126d0:	6033      	str	r3, [r6, #0]
 80126d2:	69a3      	ldr	r3, [r4, #24]
 80126d4:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80126d6:	f7f8 ffdb 	bl	800b690 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80126da:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80126dc:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80126de:	71b3      	strb	r3, [r6, #6]
 80126e0:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80126e2:	72b3      	strb	r3, [r6, #10]
 80126e4:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 80126e6:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80126e8:	b15d      	cbz	r5, 8012702 <ip4_reass+0x3de>
      iprh = (struct ip_reass_helper *)r->payload;
 80126ea:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80126ec:	4628      	mov	r0, r5
 80126ee:	2114      	movs	r1, #20
 80126f0:	f7f9 fe40 	bl	800c374 <pbuf_remove_header>
      pbuf_cat(p, r);
 80126f4:	4629      	mov	r1, r5
 80126f6:	4630      	mov	r0, r6
 80126f8:	f7fa f834 	bl	800c764 <pbuf_cat>
      r = iprh->next_pbuf;
 80126fc:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 80126fe:	2d00      	cmp	r5, #0
 8012700:	d1f3      	bne.n	80126ea <ip4_reass+0x3c6>
    if (ipr == reassdatagrams) {
 8012702:	f8da 5000 	ldr.w	r5, [sl]
 8012706:	42a5      	cmp	r5, r4
 8012708:	d005      	beq.n	8012716 <ip4_reass+0x3f2>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801270a:	b38d      	cbz	r5, 8012770 <ip4_reass+0x44c>
        if (ipr_prev->next == ipr) {
 801270c:	682b      	ldr	r3, [r5, #0]
 801270e:	42a3      	cmp	r3, r4
 8012710:	d014      	beq.n	801273c <ip4_reass+0x418>
 8012712:	461d      	mov	r5, r3
 8012714:	e7f9      	b.n	801270a <ip4_reass+0x3e6>
    reassdatagrams = ipr->next;
 8012716:	6823      	ldr	r3, [r4, #0]
 8012718:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 801271c:	4621      	mov	r1, r4
 801271e:	2004      	movs	r0, #4
 8012720:	f7f9 fb7e 	bl	800be20 <memp_free>
    clen = pbuf_clen(p);
 8012724:	4630      	mov	r0, r6
 8012726:	f7f9 fff5 	bl	800c714 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801272a:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 801272e:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012730:	4283      	cmp	r3, r0
 8012732:	d306      	bcc.n	8012742 <ip4_reass+0x41e>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012734:	1b1b      	subs	r3, r3, r4
 8012736:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 801273a:	e68d      	b.n	8012458 <ip4_reass+0x134>
    prev->next = ipr->next;
 801273c:	6823      	ldr	r3, [r4, #0]
 801273e:	602b      	str	r3, [r5, #0]
 8012740:	e7ec      	b.n	801271c <ip4_reass+0x3f8>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012742:	4b10      	ldr	r3, [pc, #64]	@ (8012784 <ip4_reass+0x460>)
 8012744:	f240 229b 	movw	r2, #667	@ 0x29b
 8012748:	4911      	ldr	r1, [pc, #68]	@ (8012790 <ip4_reass+0x46c>)
 801274a:	4810      	ldr	r0, [pc, #64]	@ (801278c <ip4_reass+0x468>)
 801274c:	f000 fbd0 	bl	8012ef0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012750:	f8b8 3000 	ldrh.w	r3, [r8]
 8012754:	e7ee      	b.n	8012734 <ip4_reass+0x410>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012756:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 801275a:	e67c      	b.n	8012456 <ip4_reass+0x132>
          LWIP_ASSERT("sanity check",
 801275c:	4589      	cmp	r9, r1
 801275e:	d19d      	bne.n	801269c <ip4_reass+0x378>
 8012760:	4b08      	ldr	r3, [pc, #32]	@ (8012784 <ip4_reass+0x460>)
 8012762:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012766:	490b      	ldr	r1, [pc, #44]	@ (8012794 <ip4_reass+0x470>)
 8012768:	4808      	ldr	r0, [pc, #32]	@ (801278c <ip4_reass+0x468>)
 801276a:	f000 fbc1 	bl	8012ef0 <iprintf>
 801276e:	e78a      	b.n	8012686 <ip4_reass+0x362>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012770:	4b04      	ldr	r3, [pc, #16]	@ (8012784 <ip4_reass+0x460>)
 8012772:	f240 1245 	movw	r2, #325	@ 0x145
 8012776:	4908      	ldr	r1, [pc, #32]	@ (8012798 <ip4_reass+0x474>)
 8012778:	4804      	ldr	r0, [pc, #16]	@ (801278c <ip4_reass+0x468>)
 801277a:	f000 fbb9 	bl	8012ef0 <iprintf>
    prev->next = ipr->next;
 801277e:	6823      	ldr	r3, [r4, #0]
 8012780:	602b      	str	r3, [r5, #0]
 8012782:	deff      	udf	#255	@ 0xff
 8012784:	08016fe0 	.word	0x08016fe0
 8012788:	080170b8 	.word	0x080170b8
 801278c:	08014150 	.word	0x08014150
 8012790:	080170dc 	.word	0x080170dc
 8012794:	080170a8 	.word	0x080170a8
 8012798:	08017068 	.word	0x08017068

0801279c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80127a0:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 80127a2:	b08d      	sub	sp, #52	@ 0x34
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80127a4:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 80127a8:	4681      	mov	r9, r0
 80127aa:	9107      	str	r1, [sp, #28]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80127ac:	f1b3 0114 	subs.w	r1, r3, #20
{
 80127b0:	920a      	str	r2, [sp, #40]	@ 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80127b2:	bf48      	it	mi
 80127b4:	f1a3 010d 	submi.w	r1, r3, #13
 80127b8:	f3c1 03cf 	ubfx	r3, r1, #3, #16
 80127bc:	9306      	str	r3, [sp, #24]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80127be:	f89a 3000 	ldrb.w	r3, [sl]
 80127c2:	f003 030f 	and.w	r3, r3, #15
 80127c6:	2b05      	cmp	r3, #5
 80127c8:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80127cc:	f040 80dd 	bne.w	801298a <ip4_frag+0x1ee>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80127d0:	8943      	ldrh	r3, [r0, #10]
 80127d2:	2b13      	cmp	r3, #19
 80127d4:	f240 80d2 	bls.w	801297c <ip4_frag+0x1e0>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80127d8:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80127dc:	f7f8 ff58 	bl	800b690 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80127e0:	f8b9 c008 	ldrh.w	ip, [r9, #8]
  ofo = tmp & IP_OFFMASK;
 80127e4:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 80127e8:	f1ac 0c14 	sub.w	ip, ip, #20
  ofo = tmp & IP_OFFMASK;
 80127ec:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 80127ee:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80127f2:	fa1f fc8c 	uxth.w	ip, ip
 80127f6:	930b      	str	r3, [sp, #44]	@ 0x2c

  while (left) {
 80127f8:	f1bc 0f00 	cmp.w	ip, #0
 80127fc:	f000 80a1 	beq.w	8012942 <ip4_frag+0x1a6>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012800:	9b06      	ldr	r3, [sp, #24]
  u16_t newpbuflen = 0;
 8012802:	2400      	movs	r4, #0

    left_to_copy = fragsize;
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012804:	464d      	mov	r5, r9
 8012806:	f8cd c010 	str.w	ip, [sp, #16]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801280a:	00db      	lsls	r3, r3, #3
 801280c:	b29b      	uxth	r3, r3
 801280e:	9308      	str	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012810:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012814:	2114      	movs	r1, #20
 8012816:	200e      	movs	r0, #14
 8012818:	f7f9 fe7e 	bl	800c518 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801281c:	9b08      	ldr	r3, [sp, #32]
 801281e:	9a04      	ldr	r2, [sp, #16]
    if (rambuf == NULL) {
 8012820:	4680      	mov	r8, r0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012822:	4293      	cmp	r3, r2
 8012824:	bf28      	it	cs
 8012826:	4613      	movcs	r3, r2
 8012828:	4699      	mov	r9, r3
    if (rambuf == NULL) {
 801282a:	2800      	cmp	r0, #0
 801282c:	f000 8098 	beq.w	8012960 <ip4_frag+0x1c4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012830:	8943      	ldrh	r3, [r0, #10]
 8012832:	2b13      	cmp	r3, #19
 8012834:	f240 8097 	bls.w	8012966 <ip4_frag+0x1ca>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012838:	f8da 2000 	ldr.w	r2, [sl]
 801283c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012840:	f8da 7004 	ldr.w	r7, [sl, #4]
 8012844:	f8da 0008 	ldr.w	r0, [sl, #8]
 8012848:	f8da 100c 	ldr.w	r1, [sl, #12]
 801284c:	601a      	str	r2, [r3, #0]
 801284e:	605f      	str	r7, [r3, #4]
 8012850:	6098      	str	r0, [r3, #8]
 8012852:	60d9      	str	r1, [r3, #12]
 8012854:	f8da 2010 	ldr.w	r2, [sl, #16]
 8012858:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801285a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801285e:	9309      	str	r3, [sp, #36]	@ 0x24
    while (left_to_copy) {
 8012860:	f1b9 0f00 	cmp.w	r9, #0
 8012864:	d03c      	beq.n	80128e0 <ip4_frag+0x144>
      u16_t plen = (u16_t)(p->len - poff);
 8012866:	896b      	ldrh	r3, [r5, #10]
 8012868:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801286a:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 801286c:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801286e:	d206      	bcs.n	801287e <ip4_frag+0xe2>
 8012870:	4b47      	ldr	r3, [pc, #284]	@ (8012990 <ip4_frag+0x1f4>)
 8012872:	f240 322d 	movw	r2, #813	@ 0x32d
 8012876:	4947      	ldr	r1, [pc, #284]	@ (8012994 <ip4_frag+0x1f8>)
 8012878:	4847      	ldr	r0, [pc, #284]	@ (8012998 <ip4_frag+0x1fc>)
 801287a:	f000 fb39 	bl	8012ef0 <iprintf>
  u16_t newpbuflen = 0;
 801287e:	f8cd 9008 	str.w	r9, [sp, #8]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012882:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012884:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012886:	429c      	cmp	r4, r3
 8012888:	bf28      	it	cs
 801288a:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801288c:	2c00      	cmp	r4, #0
 801288e:	d05c      	beq.n	801294a <ip4_frag+0x1ae>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012890:	f7f9 fa80 	bl	800bd94 <memp_malloc>
 8012894:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012896:	2241      	movs	r2, #65	@ 0x41
 8012898:	4621      	mov	r1, r4
 801289a:	2000      	movs	r0, #0
      if (pcr == NULL) {
 801289c:	f1bb 0f00 	cmp.w	fp, #0
 80128a0:	d05b      	beq.n	801295a <ip4_frag+0x1be>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80128a2:	9401      	str	r4, [sp, #4]
 80128a4:	465b      	mov	r3, fp
 80128a6:	686f      	ldr	r7, [r5, #4]
 80128a8:	eb07 0c06 	add.w	ip, r7, r6
 80128ac:	f8cd c000 	str.w	ip, [sp]
 80128b0:	f7f9 fd10 	bl	800c2d4 <pbuf_alloced_custom>
 80128b4:	4601      	mov	r1, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80128b6:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 80128b8:	2900      	cmp	r1, #0
 80128ba:	d04a      	beq.n	8012952 <ip4_frag+0x1b6>
 80128bc:	9103      	str	r1, [sp, #12]
      pbuf_ref(p);
 80128be:	f7f9 ff33 	bl	800c728 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80128c2:	4b36      	ldr	r3, [pc, #216]	@ (801299c <ip4_frag+0x200>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80128c4:	4640      	mov	r0, r8
 80128c6:	9903      	ldr	r1, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80128c8:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 80128cc:	f8cb 5014 	str.w	r5, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 80128d0:	f7f9 ff48 	bl	800c764 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80128d4:	9b02      	ldr	r3, [sp, #8]
 80128d6:	1b1f      	subs	r7, r3, r4
 80128d8:	b2bb      	uxth	r3, r7
 80128da:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d134      	bne.n	801294a <ip4_frag+0x1ae>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80128e0:	9b07      	ldr	r3, [sp, #28]
    poff = (u16_t)(poff + newpbuflen);
 80128e2:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80128e4:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 80128e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    poff = (u16_t)(poff + newpbuflen);
 80128e8:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 80128ea:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 80128ee:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 80128f0:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 80128f2:	4293      	cmp	r3, r2
 80128f4:	dd3f      	ble.n	8012976 <ip4_frag+0x1da>
 80128f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d13c      	bne.n	8012976 <ip4_frag+0x1da>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80128fc:	f7f8 fec8 	bl	800b690 <lwip_htons>
 8012900:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012902:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012904:	f109 0014 	add.w	r0, r9, #20
 8012908:	b280      	uxth	r0, r0
 801290a:	f7f8 fec1 	bl	800b690 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 801290e:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012910:	8078      	strh	r0, [r7, #2]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012912:	4641      	mov	r1, r8
 8012914:	9807      	ldr	r0, [sp, #28]
 8012916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    IPH_CHKSUM_SET(iphdr, 0);
 8012918:	72bb      	strb	r3, [r7, #10]
 801291a:	72fb      	strb	r3, [r7, #11]
    netif->output(netif, rambuf, dest);
 801291c:	6943      	ldr	r3, [r0, #20]
 801291e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012920:	4640      	mov	r0, r8
 8012922:	f7f9 fd89 	bl	800c438 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012926:	9b04      	ldr	r3, [sp, #16]
 8012928:	eba3 0909 	sub.w	r9, r3, r9
    ofo = (u16_t)(ofo + nfb);
 801292c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8012930:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8012932:	fa1f f289 	uxth.w	r2, r9
    ofo = (u16_t)(ofo + nfb);
 8012936:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 8012938:	9204      	str	r2, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 801293a:	9305      	str	r3, [sp, #20]
  while (left) {
 801293c:	2a00      	cmp	r2, #0
 801293e:	f47f af67 	bne.w	8012810 <ip4_frag+0x74>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012942:	2000      	movs	r0, #0
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8012944:	b00d      	add	sp, #52	@ 0x34
 8012946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = p->next;
 801294a:	682d      	ldr	r5, [r5, #0]
      u16_t plen = (u16_t)(p->len - poff);
 801294c:	2600      	movs	r6, #0
 801294e:	896c      	ldrh	r4, [r5, #10]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012950:	e797      	b.n	8012882 <ip4_frag+0xe6>
  memp_free(MEMP_FRAG_PBUF, p);
 8012952:	4659      	mov	r1, fp
 8012954:	2005      	movs	r0, #5
 8012956:	f7f9 fa63 	bl	800be20 <memp_free>
        pbuf_free(rambuf);
 801295a:	4640      	mov	r0, r8
 801295c:	f7f9 fd6c 	bl	800c438 <pbuf_free>
  return ERR_MEM;
 8012960:	f04f 30ff 	mov.w	r0, #4294967295
 8012964:	e7ee      	b.n	8012944 <ip4_frag+0x1a8>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012966:	4b0a      	ldr	r3, [pc, #40]	@ (8012990 <ip4_frag+0x1f4>)
 8012968:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801296c:	490c      	ldr	r1, [pc, #48]	@ (80129a0 <ip4_frag+0x204>)
 801296e:	480a      	ldr	r0, [pc, #40]	@ (8012998 <ip4_frag+0x1fc>)
 8012970:	f000 fabe 	bl	8012ef0 <iprintf>
 8012974:	e760      	b.n	8012838 <ip4_frag+0x9c>
      tmp = tmp | IP_MF;
 8012976:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 801297a:	e7bf      	b.n	80128fc <ip4_frag+0x160>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801297c:	4b04      	ldr	r3, [pc, #16]	@ (8012990 <ip4_frag+0x1f4>)
 801297e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012982:	4908      	ldr	r1, [pc, #32]	@ (80129a4 <ip4_frag+0x208>)
 8012984:	4804      	ldr	r0, [pc, #16]	@ (8012998 <ip4_frag+0x1fc>)
 8012986:	f000 fab3 	bl	8012ef0 <iprintf>
    return ERR_VAL;
 801298a:	f06f 0005 	mvn.w	r0, #5
 801298e:	e7d9      	b.n	8012944 <ip4_frag+0x1a8>
 8012990:	08016fe0 	.word	0x08016fe0
 8012994:	08017154 	.word	0x08017154
 8012998:	08014150 	.word	0x08014150
 801299c:	08012105 	.word	0x08012105
 80129a0:	08017134 	.word	0x08017134
 80129a4:	08017118 	.word	0x08017118

080129a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	4604      	mov	r4, r0
 80129ac:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 80129ae:	f7f4 fcbd 	bl	800732c <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 80129b2:	8963      	ldrh	r3, [r4, #10]
 80129b4:	2b0e      	cmp	r3, #14
 80129b6:	d91a      	bls.n	80129ee <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80129b8:	7be3      	ldrb	r3, [r4, #15]
 80129ba:	b91b      	cbnz	r3, 80129c4 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 80129bc:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 80129c0:	3301      	adds	r3, #1
 80129c2:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80129c4:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80129c6:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80129c8:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80129ca:	07d9      	lsls	r1, r3, #31
 80129cc:	d50a      	bpl.n	80129e4 <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d030      	beq.n	8012a34 <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80129d2:	2206      	movs	r2, #6
 80129d4:	491d      	ldr	r1, [pc, #116]	@ (8012a4c <ethernet_input+0xa4>)
 80129d6:	f000 fb00 	bl	8012fda <memcmp>
 80129da:	b918      	cbnz	r0, 80129e4 <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80129dc:	7b63      	ldrb	r3, [r4, #13]
 80129de:	f043 0308 	orr.w	r3, r3, #8
 80129e2:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80129e4:	2e08      	cmp	r6, #8
 80129e6:	d016      	beq.n	8012a16 <ethernet_input+0x6e>
 80129e8:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 80129ec:	d004      	beq.n	80129f8 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80129ee:	4620      	mov	r0, r4
 80129f0:	f7f9 fd22 	bl	800c438 <pbuf_free>
  return ERR_OK;
}
 80129f4:	2000      	movs	r0, #0
 80129f6:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80129f8:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 80129fc:	071b      	lsls	r3, r3, #28
 80129fe:	d5f6      	bpl.n	80129ee <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a00:	210e      	movs	r1, #14
 8012a02:	4620      	mov	r0, r4
 8012a04:	f7f9 fcb6 	bl	800c374 <pbuf_remove_header>
 8012a08:	2800      	cmp	r0, #0
 8012a0a:	d1f0      	bne.n	80129ee <ethernet_input+0x46>
        etharp_input(p, netif);
 8012a0c:	4629      	mov	r1, r5
 8012a0e:	4620      	mov	r0, r4
 8012a10:	f7fe fe7c 	bl	801170c <etharp_input>
      break;
 8012a14:	e7ee      	b.n	80129f4 <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012a16:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 8012a1a:	071a      	lsls	r2, r3, #28
 8012a1c:	d5e7      	bpl.n	80129ee <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012a1e:	210e      	movs	r1, #14
 8012a20:	4620      	mov	r0, r4
 8012a22:	f7f9 fca7 	bl	800c374 <pbuf_remove_header>
 8012a26:	2800      	cmp	r0, #0
 8012a28:	d1e1      	bne.n	80129ee <ethernet_input+0x46>
        ip4_input(p, netif);
 8012a2a:	4629      	mov	r1, r5
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	f7ff f9d5 	bl	8011ddc <ip4_input>
      break;
 8012a32:	e7df      	b.n	80129f4 <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a34:	7843      	ldrb	r3, [r0, #1]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d1d4      	bne.n	80129e4 <ethernet_input+0x3c>
 8012a3a:	7883      	ldrb	r3, [r0, #2]
 8012a3c:	2b5e      	cmp	r3, #94	@ 0x5e
 8012a3e:	d1d1      	bne.n	80129e4 <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 8012a40:	7b63      	ldrb	r3, [r4, #13]
 8012a42:	f043 0310 	orr.w	r3, r3, #16
 8012a46:	7363      	strb	r3, [r4, #13]
 8012a48:	e7cc      	b.n	80129e4 <ethernet_input+0x3c>
 8012a4a:	bf00      	nop
 8012a4c:	080171d8 	.word	0x080171d8

08012a50 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a54:	460c      	mov	r4, r1
 8012a56:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012a58:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8012a5c:	4616      	mov	r6, r2
 8012a5e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8012a60:	f7f8 fe16 	bl	800b690 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012a64:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8012a66:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012a68:	4620      	mov	r0, r4
 8012a6a:	f7f9 fc53 	bl	800c314 <pbuf_add_header>
 8012a6e:	b9f0      	cbnz	r0, 8012aae <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 8012a70:	f7f4 fc5c 	bl	800732c <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 8012a74:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8012a76:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	600b      	str	r3, [r1, #0]
 8012a7e:	88bb      	ldrh	r3, [r7, #4]
 8012a80:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012a82:	6833      	ldr	r3, [r6, #0]
 8012a84:	f8c1 3006 	str.w	r3, [r1, #6]
 8012a88:	88b3      	ldrh	r3, [r6, #4]
 8012a8a:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012a8c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012a90:	2b06      	cmp	r3, #6
 8012a92:	d006      	beq.n	8012aa2 <ethernet_output+0x52>
 8012a94:	4b08      	ldr	r3, [pc, #32]	@ (8012ab8 <ethernet_output+0x68>)
 8012a96:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8012a9a:	4908      	ldr	r1, [pc, #32]	@ (8012abc <ethernet_output+0x6c>)
 8012a9c:	4808      	ldr	r0, [pc, #32]	@ (8012ac0 <ethernet_output+0x70>)
 8012a9e:	f000 fa27 	bl	8012ef0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012aa2:	69ab      	ldr	r3, [r5, #24]
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8012aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8012aac:	4718      	bx	r3
}
 8012aae:	f06f 0001 	mvn.w	r0, #1
 8012ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ab6:	bf00      	nop
 8012ab8:	08017164 	.word	0x08017164
 8012abc:	0801719c 	.word	0x0801719c
 8012ac0:	08014150 	.word	0x08014150

08012ac4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012ac4:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	2104      	movs	r1, #4
{
 8012aca:	b510      	push	{r4, lr}
 8012acc:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7f4 fe40 	bl	8007754 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012ad4:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8012ad8:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8012ada:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8012adc:	4258      	negs	r0, r3
 8012ade:	bd10      	pop	{r4, pc}

08012ae0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8012ae0:	b510      	push	{r4, lr}
 8012ae2:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8012ae4:	6800      	ldr	r0, [r0, #0]
 8012ae6:	f7f4 fee7 	bl	80078b8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8012aea:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8012aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
 8012af0:	f7f4 beec 	b.w	80078cc <osMessageQueueDelete>

08012af4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012af4:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8012af6:	2300      	movs	r3, #0
{
 8012af8:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8012afa:	6800      	ldr	r0, [r0, #0]
{
 8012afc:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8012afe:	461a      	mov	r2, r3
 8012b00:	a901      	add	r1, sp, #4
 8012b02:	f7f4 fe63 	bl	80077cc <osMessageQueuePut>
 8012b06:	3800      	subs	r0, #0
 8012b08:	bf18      	it	ne
 8012b0a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8012b0c:	4240      	negs	r0, r0
 8012b0e:	b003      	add	sp, #12
 8012b10:	f85d fb04 	ldr.w	pc, [sp], #4

08012b14 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b16:	4615      	mov	r5, r2
 8012b18:	4606      	mov	r6, r0
 8012b1a:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8012b1c:	f7f4 fc7a 	bl	8007414 <osKernelGetTickCount>
 8012b20:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 8012b22:	b14d      	cbz	r5, 8012b38 <sys_arch_mbox_fetch+0x24>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8012b24:	462b      	mov	r3, r5
 8012b26:	2200      	movs	r2, #0
 8012b28:	4639      	mov	r1, r7
 8012b2a:	6830      	ldr	r0, [r6, #0]
 8012b2c:	f7f4 fe8a 	bl	8007844 <osMessageQueueGet>
    if (status == osOK)
 8012b30:	b148      	cbz	r0, 8012b46 <sys_arch_mbox_fetch+0x32>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012b32:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8012b38:	f04f 33ff 	mov.w	r3, #4294967295
 8012b3c:	462a      	mov	r2, r5
 8012b3e:	4639      	mov	r1, r7
 8012b40:	6830      	ldr	r0, [r6, #0]
 8012b42:	f7f4 fe7f 	bl	8007844 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8012b46:	f7f4 fc65 	bl	8007414 <osKernelGetTickCount>
 8012b4a:	1b00      	subs	r0, r0, r4
}
 8012b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b4e:	bf00      	nop

08012b50 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8012b50:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8012b52:	2300      	movs	r3, #0
 8012b54:	6800      	ldr	r0, [r0, #0]
 8012b56:	461a      	mov	r2, r3
 8012b58:	f7f4 fe74 	bl	8007844 <osMessageQueueGet>
 8012b5c:	3800      	subs	r0, #0
 8012b5e:	bf18      	it	ne
 8012b60:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 8012b62:	4240      	negs	r0, r0
 8012b64:	bd08      	pop	{r3, pc}
 8012b66:	bf00      	nop

08012b68 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 8012b68:	6800      	ldr	r0, [r0, #0]
 8012b6a:	3800      	subs	r0, #0
 8012b6c:	bf18      	it	ne
 8012b6e:	2001      	movne	r0, #1
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop

08012b74 <sys_mbox_set_invalid>:
    return 0;
  else
    return 1;
}
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
 8012b74:	2300      	movs	r3, #0
 8012b76:	6003      	str	r3, [r0, #0]
 8012b78:	4770      	bx	lr
 8012b7a:	bf00      	nop

08012b7c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8012b80:	2200      	movs	r2, #0
 8012b82:	f64f 70ff 	movw	r0, #65535	@ 0xffff
{
 8012b86:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8012b88:	f7f4 fd28 	bl	80075dc <osSemaphoreNew>
 8012b8c:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
 8012b8e:	b130      	cbz	r0, 8012b9e <sys_sem_new+0x22>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 8012b90:	b10c      	cbz	r4, 8012b96 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8012b92:	2000      	movs	r0, #0
}
 8012b94:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 8012b96:	4621      	mov	r1, r4
 8012b98:	f7f4 fd6c 	bl	8007674 <osSemaphoreAcquire>
 8012b9c:	e7f9      	b.n	8012b92 <sys_sem_new+0x16>
    return ERR_MEM;
 8012b9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012ba2:	bd38      	pop	{r3, r4, r5, pc}

08012ba4 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8012ba4:	b570      	push	{r4, r5, r6, lr}
 8012ba6:	460e      	mov	r6, r1
 8012ba8:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8012baa:	f7f4 fc33 	bl	8007414 <osKernelGetTickCount>
 8012bae:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 8012bb0:	b956      	cbnz	r6, 8012bc8 <sys_arch_sem_wait+0x24>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8012bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8012bb6:	6820      	ldr	r0, [r4, #0]
 8012bb8:	f7f4 fd5c 	bl	8007674 <osSemaphoreAcquire>
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	d1f8      	bne.n	8012bb2 <sys_arch_sem_wait+0xe>
    return (osKernelGetTickCount() - starttime);
 8012bc0:	f7f4 fc28 	bl	8007414 <osKernelGetTickCount>
 8012bc4:	1b40      	subs	r0, r0, r5
#endif
  }
}
 8012bc6:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8012bc8:	4631      	mov	r1, r6
 8012bca:	6820      	ldr	r0, [r4, #0]
 8012bcc:	f7f4 fd52 	bl	8007674 <osSemaphoreAcquire>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d0f5      	beq.n	8012bc0 <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 8012bd4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012bd8:	bd70      	pop	{r4, r5, r6, pc}
 8012bda:	bf00      	nop

08012bdc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8012bdc:	6800      	ldr	r0, [r0, #0]
 8012bde:	f7f4 bd7b 	b.w	80076d8 <osSemaphoreRelease>
 8012be2:	bf00      	nop

08012be4 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8012be4:	6800      	ldr	r0, [r0, #0]
 8012be6:	f7f4 bda1 	b.w	800772c <osSemaphoreDelete>
 8012bea:	bf00      	nop

08012bec <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8012bec:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 8012bee:	3800      	subs	r0, #0
 8012bf0:	bf18      	it	ne
 8012bf2:	2001      	movne	r0, #1
 8012bf4:	4770      	bx	lr
 8012bf6:	bf00      	nop

08012bf8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	6003      	str	r3, [r0, #0]
}
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop

08012c00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012c00:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8012c02:	2000      	movs	r0, #0
 8012c04:	f7f4 fc62 	bl	80074cc <osMutexNew>
 8012c08:	4b01      	ldr	r3, [pc, #4]	@ (8012c10 <sys_init+0x10>)
 8012c0a:	6018      	str	r0, [r3, #0]
#endif
}
 8012c0c:	bd08      	pop	{r3, pc}
 8012c0e:	bf00      	nop
 8012c10:	2400fe18 	.word	0x2400fe18

08012c14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012c14:	b510      	push	{r4, lr}
 8012c16:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8012c18:	2000      	movs	r0, #0
 8012c1a:	f7f4 fc57 	bl	80074cc <osMutexNew>
#endif

  if(*mutex == NULL)
 8012c1e:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 8012c22:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8012c24:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8012c26:	4258      	negs	r0, r3
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	bf00      	nop

08012c2c <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8012c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8012c30:	6800      	ldr	r0, [r0, #0]
 8012c32:	f7f4 bc8d 	b.w	8007550 <osMutexAcquire>
 8012c36:	bf00      	nop

08012c38 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8012c38:	6800      	ldr	r0, [r0, #0]
 8012c3a:	f7f4 bcad 	b.w	8007598 <osMutexRelease>
 8012c3e:	bf00      	nop

08012c40 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c42:	b08b      	sub	sp, #44	@ 0x2c
 8012c44:	4617      	mov	r7, r2
 8012c46:	460e      	mov	r6, r1
 8012c48:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8012c4a:	2220      	movs	r2, #32
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	a802      	add	r0, sp, #8
{
 8012c50:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 8012c52:	f000 f9ec 	bl	801302e <memset>
 8012c56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8012c58:	4639      	mov	r1, r7
 8012c5a:	aa01      	add	r2, sp, #4
 8012c5c:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 8012c5e:	9501      	str	r5, [sp, #4]
 8012c60:	9406      	str	r4, [sp, #24]
 8012c62:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 8012c64:	f7f4 fbde 	bl	8007424 <osThreadNew>
#endif
}
 8012c68:	b00b      	add	sp, #44	@ 0x2c
 8012c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c6c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012c6c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8012c6e:	4b04      	ldr	r3, [pc, #16]	@ (8012c80 <sys_arch_protect+0x14>)
 8012c70:	f04f 31ff 	mov.w	r1, #4294967295
 8012c74:	6818      	ldr	r0, [r3, #0]
 8012c76:	f7f4 fc6b 	bl	8007550 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 8012c7a:	2001      	movs	r0, #1
 8012c7c:	bd08      	pop	{r3, pc}
 8012c7e:	bf00      	nop
 8012c80:	2400fe18 	.word	0x2400fe18

08012c84 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012c84:	4b01      	ldr	r3, [pc, #4]	@ (8012c8c <sys_arch_unprotect+0x8>)
 8012c86:	6818      	ldr	r0, [r3, #0]
 8012c88:	f7f4 bc86 	b.w	8007598 <osMutexRelease>
 8012c8c:	2400fe18 	.word	0x2400fe18

08012c90 <__assert_func>:
 8012c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c92:	4614      	mov	r4, r2
 8012c94:	461a      	mov	r2, r3
 8012c96:	4b09      	ldr	r3, [pc, #36]	@ (8012cbc <__assert_func+0x2c>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4605      	mov	r5, r0
 8012c9c:	68d8      	ldr	r0, [r3, #12]
 8012c9e:	b954      	cbnz	r4, 8012cb6 <__assert_func+0x26>
 8012ca0:	4b07      	ldr	r3, [pc, #28]	@ (8012cc0 <__assert_func+0x30>)
 8012ca2:	461c      	mov	r4, r3
 8012ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ca8:	9100      	str	r1, [sp, #0]
 8012caa:	462b      	mov	r3, r5
 8012cac:	4905      	ldr	r1, [pc, #20]	@ (8012cc4 <__assert_func+0x34>)
 8012cae:	f000 f8ef 	bl	8012e90 <fiprintf>
 8012cb2:	f000 fab0 	bl	8013216 <abort>
 8012cb6:	4b04      	ldr	r3, [pc, #16]	@ (8012cc8 <__assert_func+0x38>)
 8012cb8:	e7f4      	b.n	8012ca4 <__assert_func+0x14>
 8012cba:	bf00      	nop
 8012cbc:	24000044 	.word	0x24000044
 8012cc0:	08017219 	.word	0x08017219
 8012cc4:	080171eb 	.word	0x080171eb
 8012cc8:	080171de 	.word	0x080171de

08012ccc <rand>:
 8012ccc:	4b16      	ldr	r3, [pc, #88]	@ (8012d28 <rand+0x5c>)
 8012cce:	b510      	push	{r4, lr}
 8012cd0:	681c      	ldr	r4, [r3, #0]
 8012cd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012cd4:	b9b3      	cbnz	r3, 8012d04 <rand+0x38>
 8012cd6:	2018      	movs	r0, #24
 8012cd8:	f000 faee 	bl	80132b8 <malloc>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	6320      	str	r0, [r4, #48]	@ 0x30
 8012ce0:	b920      	cbnz	r0, 8012cec <rand+0x20>
 8012ce2:	4b12      	ldr	r3, [pc, #72]	@ (8012d2c <rand+0x60>)
 8012ce4:	4812      	ldr	r0, [pc, #72]	@ (8012d30 <rand+0x64>)
 8012ce6:	2152      	movs	r1, #82	@ 0x52
 8012ce8:	f7ff ffd2 	bl	8012c90 <__assert_func>
 8012cec:	4911      	ldr	r1, [pc, #68]	@ (8012d34 <rand+0x68>)
 8012cee:	4b12      	ldr	r3, [pc, #72]	@ (8012d38 <rand+0x6c>)
 8012cf0:	e9c0 1300 	strd	r1, r3, [r0]
 8012cf4:	4b11      	ldr	r3, [pc, #68]	@ (8012d3c <rand+0x70>)
 8012cf6:	6083      	str	r3, [r0, #8]
 8012cf8:	230b      	movs	r3, #11
 8012cfa:	8183      	strh	r3, [r0, #12]
 8012cfc:	2100      	movs	r1, #0
 8012cfe:	2001      	movs	r0, #1
 8012d00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012d04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012d06:	480e      	ldr	r0, [pc, #56]	@ (8012d40 <rand+0x74>)
 8012d08:	690b      	ldr	r3, [r1, #16]
 8012d0a:	694c      	ldr	r4, [r1, #20]
 8012d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8012d44 <rand+0x78>)
 8012d0e:	4358      	muls	r0, r3
 8012d10:	fb02 0004 	mla	r0, r2, r4, r0
 8012d14:	fba3 3202 	umull	r3, r2, r3, r2
 8012d18:	3301      	adds	r3, #1
 8012d1a:	eb40 0002 	adc.w	r0, r0, r2
 8012d1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012d22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012d26:	bd10      	pop	{r4, pc}
 8012d28:	24000044 	.word	0x24000044
 8012d2c:	0801721a 	.word	0x0801721a
 8012d30:	08017231 	.word	0x08017231
 8012d34:	abcd330e 	.word	0xabcd330e
 8012d38:	e66d1234 	.word	0xe66d1234
 8012d3c:	0005deec 	.word	0x0005deec
 8012d40:	5851f42d 	.word	0x5851f42d
 8012d44:	4c957f2d 	.word	0x4c957f2d

08012d48 <std>:
 8012d48:	2300      	movs	r3, #0
 8012d4a:	b510      	push	{r4, lr}
 8012d4c:	4604      	mov	r4, r0
 8012d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8012d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d56:	6083      	str	r3, [r0, #8]
 8012d58:	8181      	strh	r1, [r0, #12]
 8012d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8012d5c:	81c2      	strh	r2, [r0, #14]
 8012d5e:	6183      	str	r3, [r0, #24]
 8012d60:	4619      	mov	r1, r3
 8012d62:	2208      	movs	r2, #8
 8012d64:	305c      	adds	r0, #92	@ 0x5c
 8012d66:	f000 f962 	bl	801302e <memset>
 8012d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8012da0 <std+0x58>)
 8012d6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012da4 <std+0x5c>)
 8012d70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012d72:	4b0d      	ldr	r3, [pc, #52]	@ (8012da8 <std+0x60>)
 8012d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012d76:	4b0d      	ldr	r3, [pc, #52]	@ (8012dac <std+0x64>)
 8012d78:	6323      	str	r3, [r4, #48]	@ 0x30
 8012d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8012db0 <std+0x68>)
 8012d7c:	6224      	str	r4, [r4, #32]
 8012d7e:	429c      	cmp	r4, r3
 8012d80:	d006      	beq.n	8012d90 <std+0x48>
 8012d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012d86:	4294      	cmp	r4, r2
 8012d88:	d002      	beq.n	8012d90 <std+0x48>
 8012d8a:	33d0      	adds	r3, #208	@ 0xd0
 8012d8c:	429c      	cmp	r4, r3
 8012d8e:	d105      	bne.n	8012d9c <std+0x54>
 8012d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d98:	f000 ba24 	b.w	80131e4 <__retarget_lock_init_recursive>
 8012d9c:	bd10      	pop	{r4, pc}
 8012d9e:	bf00      	nop
 8012da0:	08012f55 	.word	0x08012f55
 8012da4:	08012f77 	.word	0x08012f77
 8012da8:	08012faf 	.word	0x08012faf
 8012dac:	08012fd3 	.word	0x08012fd3
 8012db0:	2400fe1c 	.word	0x2400fe1c

08012db4 <stdio_exit_handler>:
 8012db4:	4a02      	ldr	r2, [pc, #8]	@ (8012dc0 <stdio_exit_handler+0xc>)
 8012db6:	4903      	ldr	r1, [pc, #12]	@ (8012dc4 <stdio_exit_handler+0x10>)
 8012db8:	4803      	ldr	r0, [pc, #12]	@ (8012dc8 <stdio_exit_handler+0x14>)
 8012dba:	f000 b87b 	b.w	8012eb4 <_fwalk_sglue>
 8012dbe:	bf00      	nop
 8012dc0:	24000038 	.word	0x24000038
 8012dc4:	08013d7d 	.word	0x08013d7d
 8012dc8:	24000048 	.word	0x24000048

08012dcc <cleanup_stdio>:
 8012dcc:	6841      	ldr	r1, [r0, #4]
 8012dce:	4b0c      	ldr	r3, [pc, #48]	@ (8012e00 <cleanup_stdio+0x34>)
 8012dd0:	4299      	cmp	r1, r3
 8012dd2:	b510      	push	{r4, lr}
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	d001      	beq.n	8012ddc <cleanup_stdio+0x10>
 8012dd8:	f000 ffd0 	bl	8013d7c <_fflush_r>
 8012ddc:	68a1      	ldr	r1, [r4, #8]
 8012dde:	4b09      	ldr	r3, [pc, #36]	@ (8012e04 <cleanup_stdio+0x38>)
 8012de0:	4299      	cmp	r1, r3
 8012de2:	d002      	beq.n	8012dea <cleanup_stdio+0x1e>
 8012de4:	4620      	mov	r0, r4
 8012de6:	f000 ffc9 	bl	8013d7c <_fflush_r>
 8012dea:	68e1      	ldr	r1, [r4, #12]
 8012dec:	4b06      	ldr	r3, [pc, #24]	@ (8012e08 <cleanup_stdio+0x3c>)
 8012dee:	4299      	cmp	r1, r3
 8012df0:	d004      	beq.n	8012dfc <cleanup_stdio+0x30>
 8012df2:	4620      	mov	r0, r4
 8012df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012df8:	f000 bfc0 	b.w	8013d7c <_fflush_r>
 8012dfc:	bd10      	pop	{r4, pc}
 8012dfe:	bf00      	nop
 8012e00:	2400fe1c 	.word	0x2400fe1c
 8012e04:	2400fe84 	.word	0x2400fe84
 8012e08:	2400feec 	.word	0x2400feec

08012e0c <global_stdio_init.part.0>:
 8012e0c:	b510      	push	{r4, lr}
 8012e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e3c <global_stdio_init.part.0+0x30>)
 8012e10:	4c0b      	ldr	r4, [pc, #44]	@ (8012e40 <global_stdio_init.part.0+0x34>)
 8012e12:	4a0c      	ldr	r2, [pc, #48]	@ (8012e44 <global_stdio_init.part.0+0x38>)
 8012e14:	601a      	str	r2, [r3, #0]
 8012e16:	4620      	mov	r0, r4
 8012e18:	2200      	movs	r2, #0
 8012e1a:	2104      	movs	r1, #4
 8012e1c:	f7ff ff94 	bl	8012d48 <std>
 8012e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012e24:	2201      	movs	r2, #1
 8012e26:	2109      	movs	r1, #9
 8012e28:	f7ff ff8e 	bl	8012d48 <std>
 8012e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012e30:	2202      	movs	r2, #2
 8012e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e36:	2112      	movs	r1, #18
 8012e38:	f7ff bf86 	b.w	8012d48 <std>
 8012e3c:	2400ff54 	.word	0x2400ff54
 8012e40:	2400fe1c 	.word	0x2400fe1c
 8012e44:	08012db5 	.word	0x08012db5

08012e48 <__sfp_lock_acquire>:
 8012e48:	4801      	ldr	r0, [pc, #4]	@ (8012e50 <__sfp_lock_acquire+0x8>)
 8012e4a:	f000 b9cc 	b.w	80131e6 <__retarget_lock_acquire_recursive>
 8012e4e:	bf00      	nop
 8012e50:	2400ff5d 	.word	0x2400ff5d

08012e54 <__sfp_lock_release>:
 8012e54:	4801      	ldr	r0, [pc, #4]	@ (8012e5c <__sfp_lock_release+0x8>)
 8012e56:	f000 b9c7 	b.w	80131e8 <__retarget_lock_release_recursive>
 8012e5a:	bf00      	nop
 8012e5c:	2400ff5d 	.word	0x2400ff5d

08012e60 <__sinit>:
 8012e60:	b510      	push	{r4, lr}
 8012e62:	4604      	mov	r4, r0
 8012e64:	f7ff fff0 	bl	8012e48 <__sfp_lock_acquire>
 8012e68:	6a23      	ldr	r3, [r4, #32]
 8012e6a:	b11b      	cbz	r3, 8012e74 <__sinit+0x14>
 8012e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e70:	f7ff bff0 	b.w	8012e54 <__sfp_lock_release>
 8012e74:	4b04      	ldr	r3, [pc, #16]	@ (8012e88 <__sinit+0x28>)
 8012e76:	6223      	str	r3, [r4, #32]
 8012e78:	4b04      	ldr	r3, [pc, #16]	@ (8012e8c <__sinit+0x2c>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d1f5      	bne.n	8012e6c <__sinit+0xc>
 8012e80:	f7ff ffc4 	bl	8012e0c <global_stdio_init.part.0>
 8012e84:	e7f2      	b.n	8012e6c <__sinit+0xc>
 8012e86:	bf00      	nop
 8012e88:	08012dcd 	.word	0x08012dcd
 8012e8c:	2400ff54 	.word	0x2400ff54

08012e90 <fiprintf>:
 8012e90:	b40e      	push	{r1, r2, r3}
 8012e92:	b503      	push	{r0, r1, lr}
 8012e94:	4601      	mov	r1, r0
 8012e96:	ab03      	add	r3, sp, #12
 8012e98:	4805      	ldr	r0, [pc, #20]	@ (8012eb0 <fiprintf+0x20>)
 8012e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e9e:	6800      	ldr	r0, [r0, #0]
 8012ea0:	9301      	str	r3, [sp, #4]
 8012ea2:	f000 fc41 	bl	8013728 <_vfiprintf_r>
 8012ea6:	b002      	add	sp, #8
 8012ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012eac:	b003      	add	sp, #12
 8012eae:	4770      	bx	lr
 8012eb0:	24000044 	.word	0x24000044

08012eb4 <_fwalk_sglue>:
 8012eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012eb8:	4607      	mov	r7, r0
 8012eba:	4688      	mov	r8, r1
 8012ebc:	4614      	mov	r4, r2
 8012ebe:	2600      	movs	r6, #0
 8012ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8012ec8:	d505      	bpl.n	8012ed6 <_fwalk_sglue+0x22>
 8012eca:	6824      	ldr	r4, [r4, #0]
 8012ecc:	2c00      	cmp	r4, #0
 8012ece:	d1f7      	bne.n	8012ec0 <_fwalk_sglue+0xc>
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ed6:	89ab      	ldrh	r3, [r5, #12]
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d907      	bls.n	8012eec <_fwalk_sglue+0x38>
 8012edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	d003      	beq.n	8012eec <_fwalk_sglue+0x38>
 8012ee4:	4629      	mov	r1, r5
 8012ee6:	4638      	mov	r0, r7
 8012ee8:	47c0      	blx	r8
 8012eea:	4306      	orrs	r6, r0
 8012eec:	3568      	adds	r5, #104	@ 0x68
 8012eee:	e7e9      	b.n	8012ec4 <_fwalk_sglue+0x10>

08012ef0 <iprintf>:
 8012ef0:	b40f      	push	{r0, r1, r2, r3}
 8012ef2:	b507      	push	{r0, r1, r2, lr}
 8012ef4:	4906      	ldr	r1, [pc, #24]	@ (8012f10 <iprintf+0x20>)
 8012ef6:	ab04      	add	r3, sp, #16
 8012ef8:	6808      	ldr	r0, [r1, #0]
 8012efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012efe:	6881      	ldr	r1, [r0, #8]
 8012f00:	9301      	str	r3, [sp, #4]
 8012f02:	f000 fc11 	bl	8013728 <_vfiprintf_r>
 8012f06:	b003      	add	sp, #12
 8012f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f0c:	b004      	add	sp, #16
 8012f0e:	4770      	bx	lr
 8012f10:	24000044 	.word	0x24000044

08012f14 <siprintf>:
 8012f14:	b40e      	push	{r1, r2, r3}
 8012f16:	b500      	push	{lr}
 8012f18:	b09c      	sub	sp, #112	@ 0x70
 8012f1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8012f1c:	9002      	str	r0, [sp, #8]
 8012f1e:	9006      	str	r0, [sp, #24]
 8012f20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012f24:	4809      	ldr	r0, [pc, #36]	@ (8012f4c <siprintf+0x38>)
 8012f26:	9107      	str	r1, [sp, #28]
 8012f28:	9104      	str	r1, [sp, #16]
 8012f2a:	4909      	ldr	r1, [pc, #36]	@ (8012f50 <siprintf+0x3c>)
 8012f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f30:	9105      	str	r1, [sp, #20]
 8012f32:	6800      	ldr	r0, [r0, #0]
 8012f34:	9301      	str	r3, [sp, #4]
 8012f36:	a902      	add	r1, sp, #8
 8012f38:	f000 fad0 	bl	80134dc <_svfiprintf_r>
 8012f3c:	9b02      	ldr	r3, [sp, #8]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	701a      	strb	r2, [r3, #0]
 8012f42:	b01c      	add	sp, #112	@ 0x70
 8012f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f48:	b003      	add	sp, #12
 8012f4a:	4770      	bx	lr
 8012f4c:	24000044 	.word	0x24000044
 8012f50:	ffff0208 	.word	0xffff0208

08012f54 <__sread>:
 8012f54:	b510      	push	{r4, lr}
 8012f56:	460c      	mov	r4, r1
 8012f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f5c:	f000 f8fa 	bl	8013154 <_read_r>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	bfab      	itete	ge
 8012f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012f66:	89a3      	ldrhlt	r3, [r4, #12]
 8012f68:	181b      	addge	r3, r3, r0
 8012f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012f6e:	bfac      	ite	ge
 8012f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012f72:	81a3      	strhlt	r3, [r4, #12]
 8012f74:	bd10      	pop	{r4, pc}

08012f76 <__swrite>:
 8012f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f7a:	461f      	mov	r7, r3
 8012f7c:	898b      	ldrh	r3, [r1, #12]
 8012f7e:	05db      	lsls	r3, r3, #23
 8012f80:	4605      	mov	r5, r0
 8012f82:	460c      	mov	r4, r1
 8012f84:	4616      	mov	r6, r2
 8012f86:	d505      	bpl.n	8012f94 <__swrite+0x1e>
 8012f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f8c:	2302      	movs	r3, #2
 8012f8e:	2200      	movs	r2, #0
 8012f90:	f000 f8ce 	bl	8013130 <_lseek_r>
 8012f94:	89a3      	ldrh	r3, [r4, #12]
 8012f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012f9e:	81a3      	strh	r3, [r4, #12]
 8012fa0:	4632      	mov	r2, r6
 8012fa2:	463b      	mov	r3, r7
 8012fa4:	4628      	mov	r0, r5
 8012fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012faa:	f000 b8e5 	b.w	8013178 <_write_r>

08012fae <__sseek>:
 8012fae:	b510      	push	{r4, lr}
 8012fb0:	460c      	mov	r4, r1
 8012fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fb6:	f000 f8bb 	bl	8013130 <_lseek_r>
 8012fba:	1c43      	adds	r3, r0, #1
 8012fbc:	89a3      	ldrh	r3, [r4, #12]
 8012fbe:	bf15      	itete	ne
 8012fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012fca:	81a3      	strheq	r3, [r4, #12]
 8012fcc:	bf18      	it	ne
 8012fce:	81a3      	strhne	r3, [r4, #12]
 8012fd0:	bd10      	pop	{r4, pc}

08012fd2 <__sclose>:
 8012fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fd6:	f000 b845 	b.w	8013064 <_close_r>

08012fda <memcmp>:
 8012fda:	b510      	push	{r4, lr}
 8012fdc:	3901      	subs	r1, #1
 8012fde:	4402      	add	r2, r0
 8012fe0:	4290      	cmp	r0, r2
 8012fe2:	d101      	bne.n	8012fe8 <memcmp+0xe>
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	e005      	b.n	8012ff4 <memcmp+0x1a>
 8012fe8:	7803      	ldrb	r3, [r0, #0]
 8012fea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012fee:	42a3      	cmp	r3, r4
 8012ff0:	d001      	beq.n	8012ff6 <memcmp+0x1c>
 8012ff2:	1b18      	subs	r0, r3, r4
 8012ff4:	bd10      	pop	{r4, pc}
 8012ff6:	3001      	adds	r0, #1
 8012ff8:	e7f2      	b.n	8012fe0 <memcmp+0x6>

08012ffa <memmove>:
 8012ffa:	4288      	cmp	r0, r1
 8012ffc:	b510      	push	{r4, lr}
 8012ffe:	eb01 0402 	add.w	r4, r1, r2
 8013002:	d902      	bls.n	801300a <memmove+0x10>
 8013004:	4284      	cmp	r4, r0
 8013006:	4623      	mov	r3, r4
 8013008:	d807      	bhi.n	801301a <memmove+0x20>
 801300a:	1e43      	subs	r3, r0, #1
 801300c:	42a1      	cmp	r1, r4
 801300e:	d008      	beq.n	8013022 <memmove+0x28>
 8013010:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013014:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013018:	e7f8      	b.n	801300c <memmove+0x12>
 801301a:	4402      	add	r2, r0
 801301c:	4601      	mov	r1, r0
 801301e:	428a      	cmp	r2, r1
 8013020:	d100      	bne.n	8013024 <memmove+0x2a>
 8013022:	bd10      	pop	{r4, pc}
 8013024:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013028:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801302c:	e7f7      	b.n	801301e <memmove+0x24>

0801302e <memset>:
 801302e:	4402      	add	r2, r0
 8013030:	4603      	mov	r3, r0
 8013032:	4293      	cmp	r3, r2
 8013034:	d100      	bne.n	8013038 <memset+0xa>
 8013036:	4770      	bx	lr
 8013038:	f803 1b01 	strb.w	r1, [r3], #1
 801303c:	e7f9      	b.n	8013032 <memset+0x4>

0801303e <strncpy>:
 801303e:	b510      	push	{r4, lr}
 8013040:	3901      	subs	r1, #1
 8013042:	4603      	mov	r3, r0
 8013044:	b132      	cbz	r2, 8013054 <strncpy+0x16>
 8013046:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801304a:	f803 4b01 	strb.w	r4, [r3], #1
 801304e:	3a01      	subs	r2, #1
 8013050:	2c00      	cmp	r4, #0
 8013052:	d1f7      	bne.n	8013044 <strncpy+0x6>
 8013054:	441a      	add	r2, r3
 8013056:	2100      	movs	r1, #0
 8013058:	4293      	cmp	r3, r2
 801305a:	d100      	bne.n	801305e <strncpy+0x20>
 801305c:	bd10      	pop	{r4, pc}
 801305e:	f803 1b01 	strb.w	r1, [r3], #1
 8013062:	e7f9      	b.n	8013058 <strncpy+0x1a>

08013064 <_close_r>:
 8013064:	b538      	push	{r3, r4, r5, lr}
 8013066:	4d06      	ldr	r5, [pc, #24]	@ (8013080 <_close_r+0x1c>)
 8013068:	2300      	movs	r3, #0
 801306a:	4604      	mov	r4, r0
 801306c:	4608      	mov	r0, r1
 801306e:	602b      	str	r3, [r5, #0]
 8013070:	f7ee fcac 	bl	80019cc <_close>
 8013074:	1c43      	adds	r3, r0, #1
 8013076:	d102      	bne.n	801307e <_close_r+0x1a>
 8013078:	682b      	ldr	r3, [r5, #0]
 801307a:	b103      	cbz	r3, 801307e <_close_r+0x1a>
 801307c:	6023      	str	r3, [r4, #0]
 801307e:	bd38      	pop	{r3, r4, r5, pc}
 8013080:	2400ff58 	.word	0x2400ff58

08013084 <_reclaim_reent>:
 8013084:	4b29      	ldr	r3, [pc, #164]	@ (801312c <_reclaim_reent+0xa8>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4283      	cmp	r3, r0
 801308a:	b570      	push	{r4, r5, r6, lr}
 801308c:	4604      	mov	r4, r0
 801308e:	d04b      	beq.n	8013128 <_reclaim_reent+0xa4>
 8013090:	69c3      	ldr	r3, [r0, #28]
 8013092:	b1ab      	cbz	r3, 80130c0 <_reclaim_reent+0x3c>
 8013094:	68db      	ldr	r3, [r3, #12]
 8013096:	b16b      	cbz	r3, 80130b4 <_reclaim_reent+0x30>
 8013098:	2500      	movs	r5, #0
 801309a:	69e3      	ldr	r3, [r4, #28]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	5959      	ldr	r1, [r3, r5]
 80130a0:	2900      	cmp	r1, #0
 80130a2:	d13b      	bne.n	801311c <_reclaim_reent+0x98>
 80130a4:	3504      	adds	r5, #4
 80130a6:	2d80      	cmp	r5, #128	@ 0x80
 80130a8:	d1f7      	bne.n	801309a <_reclaim_reent+0x16>
 80130aa:	69e3      	ldr	r3, [r4, #28]
 80130ac:	4620      	mov	r0, r4
 80130ae:	68d9      	ldr	r1, [r3, #12]
 80130b0:	f000 f8b8 	bl	8013224 <_free_r>
 80130b4:	69e3      	ldr	r3, [r4, #28]
 80130b6:	6819      	ldr	r1, [r3, #0]
 80130b8:	b111      	cbz	r1, 80130c0 <_reclaim_reent+0x3c>
 80130ba:	4620      	mov	r0, r4
 80130bc:	f000 f8b2 	bl	8013224 <_free_r>
 80130c0:	6961      	ldr	r1, [r4, #20]
 80130c2:	b111      	cbz	r1, 80130ca <_reclaim_reent+0x46>
 80130c4:	4620      	mov	r0, r4
 80130c6:	f000 f8ad 	bl	8013224 <_free_r>
 80130ca:	69e1      	ldr	r1, [r4, #28]
 80130cc:	b111      	cbz	r1, 80130d4 <_reclaim_reent+0x50>
 80130ce:	4620      	mov	r0, r4
 80130d0:	f000 f8a8 	bl	8013224 <_free_r>
 80130d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80130d6:	b111      	cbz	r1, 80130de <_reclaim_reent+0x5a>
 80130d8:	4620      	mov	r0, r4
 80130da:	f000 f8a3 	bl	8013224 <_free_r>
 80130de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130e0:	b111      	cbz	r1, 80130e8 <_reclaim_reent+0x64>
 80130e2:	4620      	mov	r0, r4
 80130e4:	f000 f89e 	bl	8013224 <_free_r>
 80130e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80130ea:	b111      	cbz	r1, 80130f2 <_reclaim_reent+0x6e>
 80130ec:	4620      	mov	r0, r4
 80130ee:	f000 f899 	bl	8013224 <_free_r>
 80130f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80130f4:	b111      	cbz	r1, 80130fc <_reclaim_reent+0x78>
 80130f6:	4620      	mov	r0, r4
 80130f8:	f000 f894 	bl	8013224 <_free_r>
 80130fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80130fe:	b111      	cbz	r1, 8013106 <_reclaim_reent+0x82>
 8013100:	4620      	mov	r0, r4
 8013102:	f000 f88f 	bl	8013224 <_free_r>
 8013106:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013108:	b111      	cbz	r1, 8013110 <_reclaim_reent+0x8c>
 801310a:	4620      	mov	r0, r4
 801310c:	f000 f88a 	bl	8013224 <_free_r>
 8013110:	6a23      	ldr	r3, [r4, #32]
 8013112:	b14b      	cbz	r3, 8013128 <_reclaim_reent+0xa4>
 8013114:	4620      	mov	r0, r4
 8013116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801311a:	4718      	bx	r3
 801311c:	680e      	ldr	r6, [r1, #0]
 801311e:	4620      	mov	r0, r4
 8013120:	f000 f880 	bl	8013224 <_free_r>
 8013124:	4631      	mov	r1, r6
 8013126:	e7bb      	b.n	80130a0 <_reclaim_reent+0x1c>
 8013128:	bd70      	pop	{r4, r5, r6, pc}
 801312a:	bf00      	nop
 801312c:	24000044 	.word	0x24000044

08013130 <_lseek_r>:
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	4d07      	ldr	r5, [pc, #28]	@ (8013150 <_lseek_r+0x20>)
 8013134:	4604      	mov	r4, r0
 8013136:	4608      	mov	r0, r1
 8013138:	4611      	mov	r1, r2
 801313a:	2200      	movs	r2, #0
 801313c:	602a      	str	r2, [r5, #0]
 801313e:	461a      	mov	r2, r3
 8013140:	f7ee fc50 	bl	80019e4 <_lseek>
 8013144:	1c43      	adds	r3, r0, #1
 8013146:	d102      	bne.n	801314e <_lseek_r+0x1e>
 8013148:	682b      	ldr	r3, [r5, #0]
 801314a:	b103      	cbz	r3, 801314e <_lseek_r+0x1e>
 801314c:	6023      	str	r3, [r4, #0]
 801314e:	bd38      	pop	{r3, r4, r5, pc}
 8013150:	2400ff58 	.word	0x2400ff58

08013154 <_read_r>:
 8013154:	b538      	push	{r3, r4, r5, lr}
 8013156:	4d07      	ldr	r5, [pc, #28]	@ (8013174 <_read_r+0x20>)
 8013158:	4604      	mov	r4, r0
 801315a:	4608      	mov	r0, r1
 801315c:	4611      	mov	r1, r2
 801315e:	2200      	movs	r2, #0
 8013160:	602a      	str	r2, [r5, #0]
 8013162:	461a      	mov	r2, r3
 8013164:	f7ee fc16 	bl	8001994 <_read>
 8013168:	1c43      	adds	r3, r0, #1
 801316a:	d102      	bne.n	8013172 <_read_r+0x1e>
 801316c:	682b      	ldr	r3, [r5, #0]
 801316e:	b103      	cbz	r3, 8013172 <_read_r+0x1e>
 8013170:	6023      	str	r3, [r4, #0]
 8013172:	bd38      	pop	{r3, r4, r5, pc}
 8013174:	2400ff58 	.word	0x2400ff58

08013178 <_write_r>:
 8013178:	b538      	push	{r3, r4, r5, lr}
 801317a:	4d07      	ldr	r5, [pc, #28]	@ (8013198 <_write_r+0x20>)
 801317c:	4604      	mov	r4, r0
 801317e:	4608      	mov	r0, r1
 8013180:	4611      	mov	r1, r2
 8013182:	2200      	movs	r2, #0
 8013184:	602a      	str	r2, [r5, #0]
 8013186:	461a      	mov	r2, r3
 8013188:	f7ee fc12 	bl	80019b0 <_write>
 801318c:	1c43      	adds	r3, r0, #1
 801318e:	d102      	bne.n	8013196 <_write_r+0x1e>
 8013190:	682b      	ldr	r3, [r5, #0]
 8013192:	b103      	cbz	r3, 8013196 <_write_r+0x1e>
 8013194:	6023      	str	r3, [r4, #0]
 8013196:	bd38      	pop	{r3, r4, r5, pc}
 8013198:	2400ff58 	.word	0x2400ff58

0801319c <__libc_init_array>:
 801319c:	b570      	push	{r4, r5, r6, lr}
 801319e:	4d0d      	ldr	r5, [pc, #52]	@ (80131d4 <__libc_init_array+0x38>)
 80131a0:	4c0d      	ldr	r4, [pc, #52]	@ (80131d8 <__libc_init_array+0x3c>)
 80131a2:	1b64      	subs	r4, r4, r5
 80131a4:	10a4      	asrs	r4, r4, #2
 80131a6:	2600      	movs	r6, #0
 80131a8:	42a6      	cmp	r6, r4
 80131aa:	d109      	bne.n	80131c0 <__libc_init_array+0x24>
 80131ac:	4d0b      	ldr	r5, [pc, #44]	@ (80131dc <__libc_init_array+0x40>)
 80131ae:	4c0c      	ldr	r4, [pc, #48]	@ (80131e0 <__libc_init_array+0x44>)
 80131b0:	f000 ffae 	bl	8014110 <_init>
 80131b4:	1b64      	subs	r4, r4, r5
 80131b6:	10a4      	asrs	r4, r4, #2
 80131b8:	2600      	movs	r6, #0
 80131ba:	42a6      	cmp	r6, r4
 80131bc:	d105      	bne.n	80131ca <__libc_init_array+0x2e>
 80131be:	bd70      	pop	{r4, r5, r6, pc}
 80131c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80131c4:	4798      	blx	r3
 80131c6:	3601      	adds	r6, #1
 80131c8:	e7ee      	b.n	80131a8 <__libc_init_array+0xc>
 80131ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80131ce:	4798      	blx	r3
 80131d0:	3601      	adds	r6, #1
 80131d2:	e7f2      	b.n	80131ba <__libc_init_array+0x1e>
 80131d4:	080172c4 	.word	0x080172c4
 80131d8:	080172c4 	.word	0x080172c4
 80131dc:	080172c4 	.word	0x080172c4
 80131e0:	080172c8 	.word	0x080172c8

080131e4 <__retarget_lock_init_recursive>:
 80131e4:	4770      	bx	lr

080131e6 <__retarget_lock_acquire_recursive>:
 80131e6:	4770      	bx	lr

080131e8 <__retarget_lock_release_recursive>:
 80131e8:	4770      	bx	lr

080131ea <strcpy>:
 80131ea:	4603      	mov	r3, r0
 80131ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131f0:	f803 2b01 	strb.w	r2, [r3], #1
 80131f4:	2a00      	cmp	r2, #0
 80131f6:	d1f9      	bne.n	80131ec <strcpy+0x2>
 80131f8:	4770      	bx	lr

080131fa <memcpy>:
 80131fa:	440a      	add	r2, r1
 80131fc:	4291      	cmp	r1, r2
 80131fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8013202:	d100      	bne.n	8013206 <memcpy+0xc>
 8013204:	4770      	bx	lr
 8013206:	b510      	push	{r4, lr}
 8013208:	f811 4b01 	ldrb.w	r4, [r1], #1
 801320c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013210:	4291      	cmp	r1, r2
 8013212:	d1f9      	bne.n	8013208 <memcpy+0xe>
 8013214:	bd10      	pop	{r4, pc}

08013216 <abort>:
 8013216:	b508      	push	{r3, lr}
 8013218:	2006      	movs	r0, #6
 801321a:	f000 fe93 	bl	8013f44 <raise>
 801321e:	2001      	movs	r0, #1
 8013220:	f7ee fbb2 	bl	8001988 <_exit>

08013224 <_free_r>:
 8013224:	b538      	push	{r3, r4, r5, lr}
 8013226:	4605      	mov	r5, r0
 8013228:	2900      	cmp	r1, #0
 801322a:	d041      	beq.n	80132b0 <_free_r+0x8c>
 801322c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013230:	1f0c      	subs	r4, r1, #4
 8013232:	2b00      	cmp	r3, #0
 8013234:	bfb8      	it	lt
 8013236:	18e4      	addlt	r4, r4, r3
 8013238:	f000 f8e8 	bl	801340c <__malloc_lock>
 801323c:	4a1d      	ldr	r2, [pc, #116]	@ (80132b4 <_free_r+0x90>)
 801323e:	6813      	ldr	r3, [r2, #0]
 8013240:	b933      	cbnz	r3, 8013250 <_free_r+0x2c>
 8013242:	6063      	str	r3, [r4, #4]
 8013244:	6014      	str	r4, [r2, #0]
 8013246:	4628      	mov	r0, r5
 8013248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801324c:	f000 b8e4 	b.w	8013418 <__malloc_unlock>
 8013250:	42a3      	cmp	r3, r4
 8013252:	d908      	bls.n	8013266 <_free_r+0x42>
 8013254:	6820      	ldr	r0, [r4, #0]
 8013256:	1821      	adds	r1, r4, r0
 8013258:	428b      	cmp	r3, r1
 801325a:	bf01      	itttt	eq
 801325c:	6819      	ldreq	r1, [r3, #0]
 801325e:	685b      	ldreq	r3, [r3, #4]
 8013260:	1809      	addeq	r1, r1, r0
 8013262:	6021      	streq	r1, [r4, #0]
 8013264:	e7ed      	b.n	8013242 <_free_r+0x1e>
 8013266:	461a      	mov	r2, r3
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	b10b      	cbz	r3, 8013270 <_free_r+0x4c>
 801326c:	42a3      	cmp	r3, r4
 801326e:	d9fa      	bls.n	8013266 <_free_r+0x42>
 8013270:	6811      	ldr	r1, [r2, #0]
 8013272:	1850      	adds	r0, r2, r1
 8013274:	42a0      	cmp	r0, r4
 8013276:	d10b      	bne.n	8013290 <_free_r+0x6c>
 8013278:	6820      	ldr	r0, [r4, #0]
 801327a:	4401      	add	r1, r0
 801327c:	1850      	adds	r0, r2, r1
 801327e:	4283      	cmp	r3, r0
 8013280:	6011      	str	r1, [r2, #0]
 8013282:	d1e0      	bne.n	8013246 <_free_r+0x22>
 8013284:	6818      	ldr	r0, [r3, #0]
 8013286:	685b      	ldr	r3, [r3, #4]
 8013288:	6053      	str	r3, [r2, #4]
 801328a:	4408      	add	r0, r1
 801328c:	6010      	str	r0, [r2, #0]
 801328e:	e7da      	b.n	8013246 <_free_r+0x22>
 8013290:	d902      	bls.n	8013298 <_free_r+0x74>
 8013292:	230c      	movs	r3, #12
 8013294:	602b      	str	r3, [r5, #0]
 8013296:	e7d6      	b.n	8013246 <_free_r+0x22>
 8013298:	6820      	ldr	r0, [r4, #0]
 801329a:	1821      	adds	r1, r4, r0
 801329c:	428b      	cmp	r3, r1
 801329e:	bf04      	itt	eq
 80132a0:	6819      	ldreq	r1, [r3, #0]
 80132a2:	685b      	ldreq	r3, [r3, #4]
 80132a4:	6063      	str	r3, [r4, #4]
 80132a6:	bf04      	itt	eq
 80132a8:	1809      	addeq	r1, r1, r0
 80132aa:	6021      	streq	r1, [r4, #0]
 80132ac:	6054      	str	r4, [r2, #4]
 80132ae:	e7ca      	b.n	8013246 <_free_r+0x22>
 80132b0:	bd38      	pop	{r3, r4, r5, pc}
 80132b2:	bf00      	nop
 80132b4:	2400ff64 	.word	0x2400ff64

080132b8 <malloc>:
 80132b8:	4b02      	ldr	r3, [pc, #8]	@ (80132c4 <malloc+0xc>)
 80132ba:	4601      	mov	r1, r0
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	f000 b825 	b.w	801330c <_malloc_r>
 80132c2:	bf00      	nop
 80132c4:	24000044 	.word	0x24000044

080132c8 <sbrk_aligned>:
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	4e0f      	ldr	r6, [pc, #60]	@ (8013308 <sbrk_aligned+0x40>)
 80132cc:	460c      	mov	r4, r1
 80132ce:	6831      	ldr	r1, [r6, #0]
 80132d0:	4605      	mov	r5, r0
 80132d2:	b911      	cbnz	r1, 80132da <sbrk_aligned+0x12>
 80132d4:	f000 fe52 	bl	8013f7c <_sbrk_r>
 80132d8:	6030      	str	r0, [r6, #0]
 80132da:	4621      	mov	r1, r4
 80132dc:	4628      	mov	r0, r5
 80132de:	f000 fe4d 	bl	8013f7c <_sbrk_r>
 80132e2:	1c43      	adds	r3, r0, #1
 80132e4:	d103      	bne.n	80132ee <sbrk_aligned+0x26>
 80132e6:	f04f 34ff 	mov.w	r4, #4294967295
 80132ea:	4620      	mov	r0, r4
 80132ec:	bd70      	pop	{r4, r5, r6, pc}
 80132ee:	1cc4      	adds	r4, r0, #3
 80132f0:	f024 0403 	bic.w	r4, r4, #3
 80132f4:	42a0      	cmp	r0, r4
 80132f6:	d0f8      	beq.n	80132ea <sbrk_aligned+0x22>
 80132f8:	1a21      	subs	r1, r4, r0
 80132fa:	4628      	mov	r0, r5
 80132fc:	f000 fe3e 	bl	8013f7c <_sbrk_r>
 8013300:	3001      	adds	r0, #1
 8013302:	d1f2      	bne.n	80132ea <sbrk_aligned+0x22>
 8013304:	e7ef      	b.n	80132e6 <sbrk_aligned+0x1e>
 8013306:	bf00      	nop
 8013308:	2400ff60 	.word	0x2400ff60

0801330c <_malloc_r>:
 801330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013310:	1ccd      	adds	r5, r1, #3
 8013312:	f025 0503 	bic.w	r5, r5, #3
 8013316:	3508      	adds	r5, #8
 8013318:	2d0c      	cmp	r5, #12
 801331a:	bf38      	it	cc
 801331c:	250c      	movcc	r5, #12
 801331e:	2d00      	cmp	r5, #0
 8013320:	4606      	mov	r6, r0
 8013322:	db01      	blt.n	8013328 <_malloc_r+0x1c>
 8013324:	42a9      	cmp	r1, r5
 8013326:	d904      	bls.n	8013332 <_malloc_r+0x26>
 8013328:	230c      	movs	r3, #12
 801332a:	6033      	str	r3, [r6, #0]
 801332c:	2000      	movs	r0, #0
 801332e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013408 <_malloc_r+0xfc>
 8013336:	f000 f869 	bl	801340c <__malloc_lock>
 801333a:	f8d8 3000 	ldr.w	r3, [r8]
 801333e:	461c      	mov	r4, r3
 8013340:	bb44      	cbnz	r4, 8013394 <_malloc_r+0x88>
 8013342:	4629      	mov	r1, r5
 8013344:	4630      	mov	r0, r6
 8013346:	f7ff ffbf 	bl	80132c8 <sbrk_aligned>
 801334a:	1c43      	adds	r3, r0, #1
 801334c:	4604      	mov	r4, r0
 801334e:	d158      	bne.n	8013402 <_malloc_r+0xf6>
 8013350:	f8d8 4000 	ldr.w	r4, [r8]
 8013354:	4627      	mov	r7, r4
 8013356:	2f00      	cmp	r7, #0
 8013358:	d143      	bne.n	80133e2 <_malloc_r+0xd6>
 801335a:	2c00      	cmp	r4, #0
 801335c:	d04b      	beq.n	80133f6 <_malloc_r+0xea>
 801335e:	6823      	ldr	r3, [r4, #0]
 8013360:	4639      	mov	r1, r7
 8013362:	4630      	mov	r0, r6
 8013364:	eb04 0903 	add.w	r9, r4, r3
 8013368:	f000 fe08 	bl	8013f7c <_sbrk_r>
 801336c:	4581      	cmp	r9, r0
 801336e:	d142      	bne.n	80133f6 <_malloc_r+0xea>
 8013370:	6821      	ldr	r1, [r4, #0]
 8013372:	1a6d      	subs	r5, r5, r1
 8013374:	4629      	mov	r1, r5
 8013376:	4630      	mov	r0, r6
 8013378:	f7ff ffa6 	bl	80132c8 <sbrk_aligned>
 801337c:	3001      	adds	r0, #1
 801337e:	d03a      	beq.n	80133f6 <_malloc_r+0xea>
 8013380:	6823      	ldr	r3, [r4, #0]
 8013382:	442b      	add	r3, r5
 8013384:	6023      	str	r3, [r4, #0]
 8013386:	f8d8 3000 	ldr.w	r3, [r8]
 801338a:	685a      	ldr	r2, [r3, #4]
 801338c:	bb62      	cbnz	r2, 80133e8 <_malloc_r+0xdc>
 801338e:	f8c8 7000 	str.w	r7, [r8]
 8013392:	e00f      	b.n	80133b4 <_malloc_r+0xa8>
 8013394:	6822      	ldr	r2, [r4, #0]
 8013396:	1b52      	subs	r2, r2, r5
 8013398:	d420      	bmi.n	80133dc <_malloc_r+0xd0>
 801339a:	2a0b      	cmp	r2, #11
 801339c:	d917      	bls.n	80133ce <_malloc_r+0xc2>
 801339e:	1961      	adds	r1, r4, r5
 80133a0:	42a3      	cmp	r3, r4
 80133a2:	6025      	str	r5, [r4, #0]
 80133a4:	bf18      	it	ne
 80133a6:	6059      	strne	r1, [r3, #4]
 80133a8:	6863      	ldr	r3, [r4, #4]
 80133aa:	bf08      	it	eq
 80133ac:	f8c8 1000 	streq.w	r1, [r8]
 80133b0:	5162      	str	r2, [r4, r5]
 80133b2:	604b      	str	r3, [r1, #4]
 80133b4:	4630      	mov	r0, r6
 80133b6:	f000 f82f 	bl	8013418 <__malloc_unlock>
 80133ba:	f104 000b 	add.w	r0, r4, #11
 80133be:	1d23      	adds	r3, r4, #4
 80133c0:	f020 0007 	bic.w	r0, r0, #7
 80133c4:	1ac2      	subs	r2, r0, r3
 80133c6:	bf1c      	itt	ne
 80133c8:	1a1b      	subne	r3, r3, r0
 80133ca:	50a3      	strne	r3, [r4, r2]
 80133cc:	e7af      	b.n	801332e <_malloc_r+0x22>
 80133ce:	6862      	ldr	r2, [r4, #4]
 80133d0:	42a3      	cmp	r3, r4
 80133d2:	bf0c      	ite	eq
 80133d4:	f8c8 2000 	streq.w	r2, [r8]
 80133d8:	605a      	strne	r2, [r3, #4]
 80133da:	e7eb      	b.n	80133b4 <_malloc_r+0xa8>
 80133dc:	4623      	mov	r3, r4
 80133de:	6864      	ldr	r4, [r4, #4]
 80133e0:	e7ae      	b.n	8013340 <_malloc_r+0x34>
 80133e2:	463c      	mov	r4, r7
 80133e4:	687f      	ldr	r7, [r7, #4]
 80133e6:	e7b6      	b.n	8013356 <_malloc_r+0x4a>
 80133e8:	461a      	mov	r2, r3
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	42a3      	cmp	r3, r4
 80133ee:	d1fb      	bne.n	80133e8 <_malloc_r+0xdc>
 80133f0:	2300      	movs	r3, #0
 80133f2:	6053      	str	r3, [r2, #4]
 80133f4:	e7de      	b.n	80133b4 <_malloc_r+0xa8>
 80133f6:	230c      	movs	r3, #12
 80133f8:	6033      	str	r3, [r6, #0]
 80133fa:	4630      	mov	r0, r6
 80133fc:	f000 f80c 	bl	8013418 <__malloc_unlock>
 8013400:	e794      	b.n	801332c <_malloc_r+0x20>
 8013402:	6005      	str	r5, [r0, #0]
 8013404:	e7d6      	b.n	80133b4 <_malloc_r+0xa8>
 8013406:	bf00      	nop
 8013408:	2400ff64 	.word	0x2400ff64

0801340c <__malloc_lock>:
 801340c:	4801      	ldr	r0, [pc, #4]	@ (8013414 <__malloc_lock+0x8>)
 801340e:	f7ff beea 	b.w	80131e6 <__retarget_lock_acquire_recursive>
 8013412:	bf00      	nop
 8013414:	2400ff5c 	.word	0x2400ff5c

08013418 <__malloc_unlock>:
 8013418:	4801      	ldr	r0, [pc, #4]	@ (8013420 <__malloc_unlock+0x8>)
 801341a:	f7ff bee5 	b.w	80131e8 <__retarget_lock_release_recursive>
 801341e:	bf00      	nop
 8013420:	2400ff5c 	.word	0x2400ff5c

08013424 <__ssputs_r>:
 8013424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013428:	688e      	ldr	r6, [r1, #8]
 801342a:	461f      	mov	r7, r3
 801342c:	42be      	cmp	r6, r7
 801342e:	680b      	ldr	r3, [r1, #0]
 8013430:	4682      	mov	sl, r0
 8013432:	460c      	mov	r4, r1
 8013434:	4690      	mov	r8, r2
 8013436:	d82d      	bhi.n	8013494 <__ssputs_r+0x70>
 8013438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801343c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013440:	d026      	beq.n	8013490 <__ssputs_r+0x6c>
 8013442:	6965      	ldr	r5, [r4, #20]
 8013444:	6909      	ldr	r1, [r1, #16]
 8013446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801344a:	eba3 0901 	sub.w	r9, r3, r1
 801344e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013452:	1c7b      	adds	r3, r7, #1
 8013454:	444b      	add	r3, r9
 8013456:	106d      	asrs	r5, r5, #1
 8013458:	429d      	cmp	r5, r3
 801345a:	bf38      	it	cc
 801345c:	461d      	movcc	r5, r3
 801345e:	0553      	lsls	r3, r2, #21
 8013460:	d527      	bpl.n	80134b2 <__ssputs_r+0x8e>
 8013462:	4629      	mov	r1, r5
 8013464:	f7ff ff52 	bl	801330c <_malloc_r>
 8013468:	4606      	mov	r6, r0
 801346a:	b360      	cbz	r0, 80134c6 <__ssputs_r+0xa2>
 801346c:	6921      	ldr	r1, [r4, #16]
 801346e:	464a      	mov	r2, r9
 8013470:	f7ff fec3 	bl	80131fa <memcpy>
 8013474:	89a3      	ldrh	r3, [r4, #12]
 8013476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801347a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801347e:	81a3      	strh	r3, [r4, #12]
 8013480:	6126      	str	r6, [r4, #16]
 8013482:	6165      	str	r5, [r4, #20]
 8013484:	444e      	add	r6, r9
 8013486:	eba5 0509 	sub.w	r5, r5, r9
 801348a:	6026      	str	r6, [r4, #0]
 801348c:	60a5      	str	r5, [r4, #8]
 801348e:	463e      	mov	r6, r7
 8013490:	42be      	cmp	r6, r7
 8013492:	d900      	bls.n	8013496 <__ssputs_r+0x72>
 8013494:	463e      	mov	r6, r7
 8013496:	6820      	ldr	r0, [r4, #0]
 8013498:	4632      	mov	r2, r6
 801349a:	4641      	mov	r1, r8
 801349c:	f7ff fdad 	bl	8012ffa <memmove>
 80134a0:	68a3      	ldr	r3, [r4, #8]
 80134a2:	1b9b      	subs	r3, r3, r6
 80134a4:	60a3      	str	r3, [r4, #8]
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	4433      	add	r3, r6
 80134aa:	6023      	str	r3, [r4, #0]
 80134ac:	2000      	movs	r0, #0
 80134ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134b2:	462a      	mov	r2, r5
 80134b4:	f000 fd72 	bl	8013f9c <_realloc_r>
 80134b8:	4606      	mov	r6, r0
 80134ba:	2800      	cmp	r0, #0
 80134bc:	d1e0      	bne.n	8013480 <__ssputs_r+0x5c>
 80134be:	6921      	ldr	r1, [r4, #16]
 80134c0:	4650      	mov	r0, sl
 80134c2:	f7ff feaf 	bl	8013224 <_free_r>
 80134c6:	230c      	movs	r3, #12
 80134c8:	f8ca 3000 	str.w	r3, [sl]
 80134cc:	89a3      	ldrh	r3, [r4, #12]
 80134ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134d2:	81a3      	strh	r3, [r4, #12]
 80134d4:	f04f 30ff 	mov.w	r0, #4294967295
 80134d8:	e7e9      	b.n	80134ae <__ssputs_r+0x8a>
	...

080134dc <_svfiprintf_r>:
 80134dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e0:	4698      	mov	r8, r3
 80134e2:	898b      	ldrh	r3, [r1, #12]
 80134e4:	061b      	lsls	r3, r3, #24
 80134e6:	b09d      	sub	sp, #116	@ 0x74
 80134e8:	4607      	mov	r7, r0
 80134ea:	460d      	mov	r5, r1
 80134ec:	4614      	mov	r4, r2
 80134ee:	d510      	bpl.n	8013512 <_svfiprintf_r+0x36>
 80134f0:	690b      	ldr	r3, [r1, #16]
 80134f2:	b973      	cbnz	r3, 8013512 <_svfiprintf_r+0x36>
 80134f4:	2140      	movs	r1, #64	@ 0x40
 80134f6:	f7ff ff09 	bl	801330c <_malloc_r>
 80134fa:	6028      	str	r0, [r5, #0]
 80134fc:	6128      	str	r0, [r5, #16]
 80134fe:	b930      	cbnz	r0, 801350e <_svfiprintf_r+0x32>
 8013500:	230c      	movs	r3, #12
 8013502:	603b      	str	r3, [r7, #0]
 8013504:	f04f 30ff 	mov.w	r0, #4294967295
 8013508:	b01d      	add	sp, #116	@ 0x74
 801350a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801350e:	2340      	movs	r3, #64	@ 0x40
 8013510:	616b      	str	r3, [r5, #20]
 8013512:	2300      	movs	r3, #0
 8013514:	9309      	str	r3, [sp, #36]	@ 0x24
 8013516:	2320      	movs	r3, #32
 8013518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801351c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013520:	2330      	movs	r3, #48	@ 0x30
 8013522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80136c0 <_svfiprintf_r+0x1e4>
 8013526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801352a:	f04f 0901 	mov.w	r9, #1
 801352e:	4623      	mov	r3, r4
 8013530:	469a      	mov	sl, r3
 8013532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013536:	b10a      	cbz	r2, 801353c <_svfiprintf_r+0x60>
 8013538:	2a25      	cmp	r2, #37	@ 0x25
 801353a:	d1f9      	bne.n	8013530 <_svfiprintf_r+0x54>
 801353c:	ebba 0b04 	subs.w	fp, sl, r4
 8013540:	d00b      	beq.n	801355a <_svfiprintf_r+0x7e>
 8013542:	465b      	mov	r3, fp
 8013544:	4622      	mov	r2, r4
 8013546:	4629      	mov	r1, r5
 8013548:	4638      	mov	r0, r7
 801354a:	f7ff ff6b 	bl	8013424 <__ssputs_r>
 801354e:	3001      	adds	r0, #1
 8013550:	f000 80a7 	beq.w	80136a2 <_svfiprintf_r+0x1c6>
 8013554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013556:	445a      	add	r2, fp
 8013558:	9209      	str	r2, [sp, #36]	@ 0x24
 801355a:	f89a 3000 	ldrb.w	r3, [sl]
 801355e:	2b00      	cmp	r3, #0
 8013560:	f000 809f 	beq.w	80136a2 <_svfiprintf_r+0x1c6>
 8013564:	2300      	movs	r3, #0
 8013566:	f04f 32ff 	mov.w	r2, #4294967295
 801356a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801356e:	f10a 0a01 	add.w	sl, sl, #1
 8013572:	9304      	str	r3, [sp, #16]
 8013574:	9307      	str	r3, [sp, #28]
 8013576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801357a:	931a      	str	r3, [sp, #104]	@ 0x68
 801357c:	4654      	mov	r4, sl
 801357e:	2205      	movs	r2, #5
 8013580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013584:	484e      	ldr	r0, [pc, #312]	@ (80136c0 <_svfiprintf_r+0x1e4>)
 8013586:	f7ec feab 	bl	80002e0 <memchr>
 801358a:	9a04      	ldr	r2, [sp, #16]
 801358c:	b9d8      	cbnz	r0, 80135c6 <_svfiprintf_r+0xea>
 801358e:	06d0      	lsls	r0, r2, #27
 8013590:	bf44      	itt	mi
 8013592:	2320      	movmi	r3, #32
 8013594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013598:	0711      	lsls	r1, r2, #28
 801359a:	bf44      	itt	mi
 801359c:	232b      	movmi	r3, #43	@ 0x2b
 801359e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135a2:	f89a 3000 	ldrb.w	r3, [sl]
 80135a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80135a8:	d015      	beq.n	80135d6 <_svfiprintf_r+0xfa>
 80135aa:	9a07      	ldr	r2, [sp, #28]
 80135ac:	4654      	mov	r4, sl
 80135ae:	2000      	movs	r0, #0
 80135b0:	f04f 0c0a 	mov.w	ip, #10
 80135b4:	4621      	mov	r1, r4
 80135b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135ba:	3b30      	subs	r3, #48	@ 0x30
 80135bc:	2b09      	cmp	r3, #9
 80135be:	d94b      	bls.n	8013658 <_svfiprintf_r+0x17c>
 80135c0:	b1b0      	cbz	r0, 80135f0 <_svfiprintf_r+0x114>
 80135c2:	9207      	str	r2, [sp, #28]
 80135c4:	e014      	b.n	80135f0 <_svfiprintf_r+0x114>
 80135c6:	eba0 0308 	sub.w	r3, r0, r8
 80135ca:	fa09 f303 	lsl.w	r3, r9, r3
 80135ce:	4313      	orrs	r3, r2
 80135d0:	9304      	str	r3, [sp, #16]
 80135d2:	46a2      	mov	sl, r4
 80135d4:	e7d2      	b.n	801357c <_svfiprintf_r+0xa0>
 80135d6:	9b03      	ldr	r3, [sp, #12]
 80135d8:	1d19      	adds	r1, r3, #4
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	9103      	str	r1, [sp, #12]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	bfbb      	ittet	lt
 80135e2:	425b      	neglt	r3, r3
 80135e4:	f042 0202 	orrlt.w	r2, r2, #2
 80135e8:	9307      	strge	r3, [sp, #28]
 80135ea:	9307      	strlt	r3, [sp, #28]
 80135ec:	bfb8      	it	lt
 80135ee:	9204      	strlt	r2, [sp, #16]
 80135f0:	7823      	ldrb	r3, [r4, #0]
 80135f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80135f4:	d10a      	bne.n	801360c <_svfiprintf_r+0x130>
 80135f6:	7863      	ldrb	r3, [r4, #1]
 80135f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80135fa:	d132      	bne.n	8013662 <_svfiprintf_r+0x186>
 80135fc:	9b03      	ldr	r3, [sp, #12]
 80135fe:	1d1a      	adds	r2, r3, #4
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	9203      	str	r2, [sp, #12]
 8013604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013608:	3402      	adds	r4, #2
 801360a:	9305      	str	r3, [sp, #20]
 801360c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80136d0 <_svfiprintf_r+0x1f4>
 8013610:	7821      	ldrb	r1, [r4, #0]
 8013612:	2203      	movs	r2, #3
 8013614:	4650      	mov	r0, sl
 8013616:	f7ec fe63 	bl	80002e0 <memchr>
 801361a:	b138      	cbz	r0, 801362c <_svfiprintf_r+0x150>
 801361c:	9b04      	ldr	r3, [sp, #16]
 801361e:	eba0 000a 	sub.w	r0, r0, sl
 8013622:	2240      	movs	r2, #64	@ 0x40
 8013624:	4082      	lsls	r2, r0
 8013626:	4313      	orrs	r3, r2
 8013628:	3401      	adds	r4, #1
 801362a:	9304      	str	r3, [sp, #16]
 801362c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013630:	4824      	ldr	r0, [pc, #144]	@ (80136c4 <_svfiprintf_r+0x1e8>)
 8013632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013636:	2206      	movs	r2, #6
 8013638:	f7ec fe52 	bl	80002e0 <memchr>
 801363c:	2800      	cmp	r0, #0
 801363e:	d036      	beq.n	80136ae <_svfiprintf_r+0x1d2>
 8013640:	4b21      	ldr	r3, [pc, #132]	@ (80136c8 <_svfiprintf_r+0x1ec>)
 8013642:	bb1b      	cbnz	r3, 801368c <_svfiprintf_r+0x1b0>
 8013644:	9b03      	ldr	r3, [sp, #12]
 8013646:	3307      	adds	r3, #7
 8013648:	f023 0307 	bic.w	r3, r3, #7
 801364c:	3308      	adds	r3, #8
 801364e:	9303      	str	r3, [sp, #12]
 8013650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013652:	4433      	add	r3, r6
 8013654:	9309      	str	r3, [sp, #36]	@ 0x24
 8013656:	e76a      	b.n	801352e <_svfiprintf_r+0x52>
 8013658:	fb0c 3202 	mla	r2, ip, r2, r3
 801365c:	460c      	mov	r4, r1
 801365e:	2001      	movs	r0, #1
 8013660:	e7a8      	b.n	80135b4 <_svfiprintf_r+0xd8>
 8013662:	2300      	movs	r3, #0
 8013664:	3401      	adds	r4, #1
 8013666:	9305      	str	r3, [sp, #20]
 8013668:	4619      	mov	r1, r3
 801366a:	f04f 0c0a 	mov.w	ip, #10
 801366e:	4620      	mov	r0, r4
 8013670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013674:	3a30      	subs	r2, #48	@ 0x30
 8013676:	2a09      	cmp	r2, #9
 8013678:	d903      	bls.n	8013682 <_svfiprintf_r+0x1a6>
 801367a:	2b00      	cmp	r3, #0
 801367c:	d0c6      	beq.n	801360c <_svfiprintf_r+0x130>
 801367e:	9105      	str	r1, [sp, #20]
 8013680:	e7c4      	b.n	801360c <_svfiprintf_r+0x130>
 8013682:	fb0c 2101 	mla	r1, ip, r1, r2
 8013686:	4604      	mov	r4, r0
 8013688:	2301      	movs	r3, #1
 801368a:	e7f0      	b.n	801366e <_svfiprintf_r+0x192>
 801368c:	ab03      	add	r3, sp, #12
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	462a      	mov	r2, r5
 8013692:	4b0e      	ldr	r3, [pc, #56]	@ (80136cc <_svfiprintf_r+0x1f0>)
 8013694:	a904      	add	r1, sp, #16
 8013696:	4638      	mov	r0, r7
 8013698:	f3af 8000 	nop.w
 801369c:	1c42      	adds	r2, r0, #1
 801369e:	4606      	mov	r6, r0
 80136a0:	d1d6      	bne.n	8013650 <_svfiprintf_r+0x174>
 80136a2:	89ab      	ldrh	r3, [r5, #12]
 80136a4:	065b      	lsls	r3, r3, #25
 80136a6:	f53f af2d 	bmi.w	8013504 <_svfiprintf_r+0x28>
 80136aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80136ac:	e72c      	b.n	8013508 <_svfiprintf_r+0x2c>
 80136ae:	ab03      	add	r3, sp, #12
 80136b0:	9300      	str	r3, [sp, #0]
 80136b2:	462a      	mov	r2, r5
 80136b4:	4b05      	ldr	r3, [pc, #20]	@ (80136cc <_svfiprintf_r+0x1f0>)
 80136b6:	a904      	add	r1, sp, #16
 80136b8:	4638      	mov	r0, r7
 80136ba:	f000 f9bb 	bl	8013a34 <_printf_i>
 80136be:	e7ed      	b.n	801369c <_svfiprintf_r+0x1c0>
 80136c0:	08017289 	.word	0x08017289
 80136c4:	08017293 	.word	0x08017293
 80136c8:	00000000 	.word	0x00000000
 80136cc:	08013425 	.word	0x08013425
 80136d0:	0801728f 	.word	0x0801728f

080136d4 <__sfputc_r>:
 80136d4:	6893      	ldr	r3, [r2, #8]
 80136d6:	3b01      	subs	r3, #1
 80136d8:	2b00      	cmp	r3, #0
 80136da:	b410      	push	{r4}
 80136dc:	6093      	str	r3, [r2, #8]
 80136de:	da08      	bge.n	80136f2 <__sfputc_r+0x1e>
 80136e0:	6994      	ldr	r4, [r2, #24]
 80136e2:	42a3      	cmp	r3, r4
 80136e4:	db01      	blt.n	80136ea <__sfputc_r+0x16>
 80136e6:	290a      	cmp	r1, #10
 80136e8:	d103      	bne.n	80136f2 <__sfputc_r+0x1e>
 80136ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136ee:	f000 bb6d 	b.w	8013dcc <__swbuf_r>
 80136f2:	6813      	ldr	r3, [r2, #0]
 80136f4:	1c58      	adds	r0, r3, #1
 80136f6:	6010      	str	r0, [r2, #0]
 80136f8:	7019      	strb	r1, [r3, #0]
 80136fa:	4608      	mov	r0, r1
 80136fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013700:	4770      	bx	lr

08013702 <__sfputs_r>:
 8013702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013704:	4606      	mov	r6, r0
 8013706:	460f      	mov	r7, r1
 8013708:	4614      	mov	r4, r2
 801370a:	18d5      	adds	r5, r2, r3
 801370c:	42ac      	cmp	r4, r5
 801370e:	d101      	bne.n	8013714 <__sfputs_r+0x12>
 8013710:	2000      	movs	r0, #0
 8013712:	e007      	b.n	8013724 <__sfputs_r+0x22>
 8013714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013718:	463a      	mov	r2, r7
 801371a:	4630      	mov	r0, r6
 801371c:	f7ff ffda 	bl	80136d4 <__sfputc_r>
 8013720:	1c43      	adds	r3, r0, #1
 8013722:	d1f3      	bne.n	801370c <__sfputs_r+0xa>
 8013724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013728 <_vfiprintf_r>:
 8013728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801372c:	460d      	mov	r5, r1
 801372e:	b09d      	sub	sp, #116	@ 0x74
 8013730:	4614      	mov	r4, r2
 8013732:	4698      	mov	r8, r3
 8013734:	4606      	mov	r6, r0
 8013736:	b118      	cbz	r0, 8013740 <_vfiprintf_r+0x18>
 8013738:	6a03      	ldr	r3, [r0, #32]
 801373a:	b90b      	cbnz	r3, 8013740 <_vfiprintf_r+0x18>
 801373c:	f7ff fb90 	bl	8012e60 <__sinit>
 8013740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013742:	07d9      	lsls	r1, r3, #31
 8013744:	d405      	bmi.n	8013752 <_vfiprintf_r+0x2a>
 8013746:	89ab      	ldrh	r3, [r5, #12]
 8013748:	059a      	lsls	r2, r3, #22
 801374a:	d402      	bmi.n	8013752 <_vfiprintf_r+0x2a>
 801374c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801374e:	f7ff fd4a 	bl	80131e6 <__retarget_lock_acquire_recursive>
 8013752:	89ab      	ldrh	r3, [r5, #12]
 8013754:	071b      	lsls	r3, r3, #28
 8013756:	d501      	bpl.n	801375c <_vfiprintf_r+0x34>
 8013758:	692b      	ldr	r3, [r5, #16]
 801375a:	b99b      	cbnz	r3, 8013784 <_vfiprintf_r+0x5c>
 801375c:	4629      	mov	r1, r5
 801375e:	4630      	mov	r0, r6
 8013760:	f000 fb72 	bl	8013e48 <__swsetup_r>
 8013764:	b170      	cbz	r0, 8013784 <_vfiprintf_r+0x5c>
 8013766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013768:	07dc      	lsls	r4, r3, #31
 801376a:	d504      	bpl.n	8013776 <_vfiprintf_r+0x4e>
 801376c:	f04f 30ff 	mov.w	r0, #4294967295
 8013770:	b01d      	add	sp, #116	@ 0x74
 8013772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013776:	89ab      	ldrh	r3, [r5, #12]
 8013778:	0598      	lsls	r0, r3, #22
 801377a:	d4f7      	bmi.n	801376c <_vfiprintf_r+0x44>
 801377c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801377e:	f7ff fd33 	bl	80131e8 <__retarget_lock_release_recursive>
 8013782:	e7f3      	b.n	801376c <_vfiprintf_r+0x44>
 8013784:	2300      	movs	r3, #0
 8013786:	9309      	str	r3, [sp, #36]	@ 0x24
 8013788:	2320      	movs	r3, #32
 801378a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801378e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013792:	2330      	movs	r3, #48	@ 0x30
 8013794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013944 <_vfiprintf_r+0x21c>
 8013798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801379c:	f04f 0901 	mov.w	r9, #1
 80137a0:	4623      	mov	r3, r4
 80137a2:	469a      	mov	sl, r3
 80137a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137a8:	b10a      	cbz	r2, 80137ae <_vfiprintf_r+0x86>
 80137aa:	2a25      	cmp	r2, #37	@ 0x25
 80137ac:	d1f9      	bne.n	80137a2 <_vfiprintf_r+0x7a>
 80137ae:	ebba 0b04 	subs.w	fp, sl, r4
 80137b2:	d00b      	beq.n	80137cc <_vfiprintf_r+0xa4>
 80137b4:	465b      	mov	r3, fp
 80137b6:	4622      	mov	r2, r4
 80137b8:	4629      	mov	r1, r5
 80137ba:	4630      	mov	r0, r6
 80137bc:	f7ff ffa1 	bl	8013702 <__sfputs_r>
 80137c0:	3001      	adds	r0, #1
 80137c2:	f000 80a7 	beq.w	8013914 <_vfiprintf_r+0x1ec>
 80137c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137c8:	445a      	add	r2, fp
 80137ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80137cc:	f89a 3000 	ldrb.w	r3, [sl]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f000 809f 	beq.w	8013914 <_vfiprintf_r+0x1ec>
 80137d6:	2300      	movs	r3, #0
 80137d8:	f04f 32ff 	mov.w	r2, #4294967295
 80137dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137e0:	f10a 0a01 	add.w	sl, sl, #1
 80137e4:	9304      	str	r3, [sp, #16]
 80137e6:	9307      	str	r3, [sp, #28]
 80137e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80137ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80137ee:	4654      	mov	r4, sl
 80137f0:	2205      	movs	r2, #5
 80137f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137f6:	4853      	ldr	r0, [pc, #332]	@ (8013944 <_vfiprintf_r+0x21c>)
 80137f8:	f7ec fd72 	bl	80002e0 <memchr>
 80137fc:	9a04      	ldr	r2, [sp, #16]
 80137fe:	b9d8      	cbnz	r0, 8013838 <_vfiprintf_r+0x110>
 8013800:	06d1      	lsls	r1, r2, #27
 8013802:	bf44      	itt	mi
 8013804:	2320      	movmi	r3, #32
 8013806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801380a:	0713      	lsls	r3, r2, #28
 801380c:	bf44      	itt	mi
 801380e:	232b      	movmi	r3, #43	@ 0x2b
 8013810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013814:	f89a 3000 	ldrb.w	r3, [sl]
 8013818:	2b2a      	cmp	r3, #42	@ 0x2a
 801381a:	d015      	beq.n	8013848 <_vfiprintf_r+0x120>
 801381c:	9a07      	ldr	r2, [sp, #28]
 801381e:	4654      	mov	r4, sl
 8013820:	2000      	movs	r0, #0
 8013822:	f04f 0c0a 	mov.w	ip, #10
 8013826:	4621      	mov	r1, r4
 8013828:	f811 3b01 	ldrb.w	r3, [r1], #1
 801382c:	3b30      	subs	r3, #48	@ 0x30
 801382e:	2b09      	cmp	r3, #9
 8013830:	d94b      	bls.n	80138ca <_vfiprintf_r+0x1a2>
 8013832:	b1b0      	cbz	r0, 8013862 <_vfiprintf_r+0x13a>
 8013834:	9207      	str	r2, [sp, #28]
 8013836:	e014      	b.n	8013862 <_vfiprintf_r+0x13a>
 8013838:	eba0 0308 	sub.w	r3, r0, r8
 801383c:	fa09 f303 	lsl.w	r3, r9, r3
 8013840:	4313      	orrs	r3, r2
 8013842:	9304      	str	r3, [sp, #16]
 8013844:	46a2      	mov	sl, r4
 8013846:	e7d2      	b.n	80137ee <_vfiprintf_r+0xc6>
 8013848:	9b03      	ldr	r3, [sp, #12]
 801384a:	1d19      	adds	r1, r3, #4
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	9103      	str	r1, [sp, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	bfbb      	ittet	lt
 8013854:	425b      	neglt	r3, r3
 8013856:	f042 0202 	orrlt.w	r2, r2, #2
 801385a:	9307      	strge	r3, [sp, #28]
 801385c:	9307      	strlt	r3, [sp, #28]
 801385e:	bfb8      	it	lt
 8013860:	9204      	strlt	r2, [sp, #16]
 8013862:	7823      	ldrb	r3, [r4, #0]
 8013864:	2b2e      	cmp	r3, #46	@ 0x2e
 8013866:	d10a      	bne.n	801387e <_vfiprintf_r+0x156>
 8013868:	7863      	ldrb	r3, [r4, #1]
 801386a:	2b2a      	cmp	r3, #42	@ 0x2a
 801386c:	d132      	bne.n	80138d4 <_vfiprintf_r+0x1ac>
 801386e:	9b03      	ldr	r3, [sp, #12]
 8013870:	1d1a      	adds	r2, r3, #4
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	9203      	str	r2, [sp, #12]
 8013876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801387a:	3402      	adds	r4, #2
 801387c:	9305      	str	r3, [sp, #20]
 801387e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013954 <_vfiprintf_r+0x22c>
 8013882:	7821      	ldrb	r1, [r4, #0]
 8013884:	2203      	movs	r2, #3
 8013886:	4650      	mov	r0, sl
 8013888:	f7ec fd2a 	bl	80002e0 <memchr>
 801388c:	b138      	cbz	r0, 801389e <_vfiprintf_r+0x176>
 801388e:	9b04      	ldr	r3, [sp, #16]
 8013890:	eba0 000a 	sub.w	r0, r0, sl
 8013894:	2240      	movs	r2, #64	@ 0x40
 8013896:	4082      	lsls	r2, r0
 8013898:	4313      	orrs	r3, r2
 801389a:	3401      	adds	r4, #1
 801389c:	9304      	str	r3, [sp, #16]
 801389e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a2:	4829      	ldr	r0, [pc, #164]	@ (8013948 <_vfiprintf_r+0x220>)
 80138a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80138a8:	2206      	movs	r2, #6
 80138aa:	f7ec fd19 	bl	80002e0 <memchr>
 80138ae:	2800      	cmp	r0, #0
 80138b0:	d03f      	beq.n	8013932 <_vfiprintf_r+0x20a>
 80138b2:	4b26      	ldr	r3, [pc, #152]	@ (801394c <_vfiprintf_r+0x224>)
 80138b4:	bb1b      	cbnz	r3, 80138fe <_vfiprintf_r+0x1d6>
 80138b6:	9b03      	ldr	r3, [sp, #12]
 80138b8:	3307      	adds	r3, #7
 80138ba:	f023 0307 	bic.w	r3, r3, #7
 80138be:	3308      	adds	r3, #8
 80138c0:	9303      	str	r3, [sp, #12]
 80138c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138c4:	443b      	add	r3, r7
 80138c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80138c8:	e76a      	b.n	80137a0 <_vfiprintf_r+0x78>
 80138ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80138ce:	460c      	mov	r4, r1
 80138d0:	2001      	movs	r0, #1
 80138d2:	e7a8      	b.n	8013826 <_vfiprintf_r+0xfe>
 80138d4:	2300      	movs	r3, #0
 80138d6:	3401      	adds	r4, #1
 80138d8:	9305      	str	r3, [sp, #20]
 80138da:	4619      	mov	r1, r3
 80138dc:	f04f 0c0a 	mov.w	ip, #10
 80138e0:	4620      	mov	r0, r4
 80138e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138e6:	3a30      	subs	r2, #48	@ 0x30
 80138e8:	2a09      	cmp	r2, #9
 80138ea:	d903      	bls.n	80138f4 <_vfiprintf_r+0x1cc>
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d0c6      	beq.n	801387e <_vfiprintf_r+0x156>
 80138f0:	9105      	str	r1, [sp, #20]
 80138f2:	e7c4      	b.n	801387e <_vfiprintf_r+0x156>
 80138f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80138f8:	4604      	mov	r4, r0
 80138fa:	2301      	movs	r3, #1
 80138fc:	e7f0      	b.n	80138e0 <_vfiprintf_r+0x1b8>
 80138fe:	ab03      	add	r3, sp, #12
 8013900:	9300      	str	r3, [sp, #0]
 8013902:	462a      	mov	r2, r5
 8013904:	4b12      	ldr	r3, [pc, #72]	@ (8013950 <_vfiprintf_r+0x228>)
 8013906:	a904      	add	r1, sp, #16
 8013908:	4630      	mov	r0, r6
 801390a:	f3af 8000 	nop.w
 801390e:	4607      	mov	r7, r0
 8013910:	1c78      	adds	r0, r7, #1
 8013912:	d1d6      	bne.n	80138c2 <_vfiprintf_r+0x19a>
 8013914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013916:	07d9      	lsls	r1, r3, #31
 8013918:	d405      	bmi.n	8013926 <_vfiprintf_r+0x1fe>
 801391a:	89ab      	ldrh	r3, [r5, #12]
 801391c:	059a      	lsls	r2, r3, #22
 801391e:	d402      	bmi.n	8013926 <_vfiprintf_r+0x1fe>
 8013920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013922:	f7ff fc61 	bl	80131e8 <__retarget_lock_release_recursive>
 8013926:	89ab      	ldrh	r3, [r5, #12]
 8013928:	065b      	lsls	r3, r3, #25
 801392a:	f53f af1f 	bmi.w	801376c <_vfiprintf_r+0x44>
 801392e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013930:	e71e      	b.n	8013770 <_vfiprintf_r+0x48>
 8013932:	ab03      	add	r3, sp, #12
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	462a      	mov	r2, r5
 8013938:	4b05      	ldr	r3, [pc, #20]	@ (8013950 <_vfiprintf_r+0x228>)
 801393a:	a904      	add	r1, sp, #16
 801393c:	4630      	mov	r0, r6
 801393e:	f000 f879 	bl	8013a34 <_printf_i>
 8013942:	e7e4      	b.n	801390e <_vfiprintf_r+0x1e6>
 8013944:	08017289 	.word	0x08017289
 8013948:	08017293 	.word	0x08017293
 801394c:	00000000 	.word	0x00000000
 8013950:	08013703 	.word	0x08013703
 8013954:	0801728f 	.word	0x0801728f

08013958 <_printf_common>:
 8013958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801395c:	4616      	mov	r6, r2
 801395e:	4698      	mov	r8, r3
 8013960:	688a      	ldr	r2, [r1, #8]
 8013962:	690b      	ldr	r3, [r1, #16]
 8013964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013968:	4293      	cmp	r3, r2
 801396a:	bfb8      	it	lt
 801396c:	4613      	movlt	r3, r2
 801396e:	6033      	str	r3, [r6, #0]
 8013970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013974:	4607      	mov	r7, r0
 8013976:	460c      	mov	r4, r1
 8013978:	b10a      	cbz	r2, 801397e <_printf_common+0x26>
 801397a:	3301      	adds	r3, #1
 801397c:	6033      	str	r3, [r6, #0]
 801397e:	6823      	ldr	r3, [r4, #0]
 8013980:	0699      	lsls	r1, r3, #26
 8013982:	bf42      	ittt	mi
 8013984:	6833      	ldrmi	r3, [r6, #0]
 8013986:	3302      	addmi	r3, #2
 8013988:	6033      	strmi	r3, [r6, #0]
 801398a:	6825      	ldr	r5, [r4, #0]
 801398c:	f015 0506 	ands.w	r5, r5, #6
 8013990:	d106      	bne.n	80139a0 <_printf_common+0x48>
 8013992:	f104 0a19 	add.w	sl, r4, #25
 8013996:	68e3      	ldr	r3, [r4, #12]
 8013998:	6832      	ldr	r2, [r6, #0]
 801399a:	1a9b      	subs	r3, r3, r2
 801399c:	42ab      	cmp	r3, r5
 801399e:	dc26      	bgt.n	80139ee <_printf_common+0x96>
 80139a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80139a4:	6822      	ldr	r2, [r4, #0]
 80139a6:	3b00      	subs	r3, #0
 80139a8:	bf18      	it	ne
 80139aa:	2301      	movne	r3, #1
 80139ac:	0692      	lsls	r2, r2, #26
 80139ae:	d42b      	bmi.n	8013a08 <_printf_common+0xb0>
 80139b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80139b4:	4641      	mov	r1, r8
 80139b6:	4638      	mov	r0, r7
 80139b8:	47c8      	blx	r9
 80139ba:	3001      	adds	r0, #1
 80139bc:	d01e      	beq.n	80139fc <_printf_common+0xa4>
 80139be:	6823      	ldr	r3, [r4, #0]
 80139c0:	6922      	ldr	r2, [r4, #16]
 80139c2:	f003 0306 	and.w	r3, r3, #6
 80139c6:	2b04      	cmp	r3, #4
 80139c8:	bf02      	ittt	eq
 80139ca:	68e5      	ldreq	r5, [r4, #12]
 80139cc:	6833      	ldreq	r3, [r6, #0]
 80139ce:	1aed      	subeq	r5, r5, r3
 80139d0:	68a3      	ldr	r3, [r4, #8]
 80139d2:	bf0c      	ite	eq
 80139d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139d8:	2500      	movne	r5, #0
 80139da:	4293      	cmp	r3, r2
 80139dc:	bfc4      	itt	gt
 80139de:	1a9b      	subgt	r3, r3, r2
 80139e0:	18ed      	addgt	r5, r5, r3
 80139e2:	2600      	movs	r6, #0
 80139e4:	341a      	adds	r4, #26
 80139e6:	42b5      	cmp	r5, r6
 80139e8:	d11a      	bne.n	8013a20 <_printf_common+0xc8>
 80139ea:	2000      	movs	r0, #0
 80139ec:	e008      	b.n	8013a00 <_printf_common+0xa8>
 80139ee:	2301      	movs	r3, #1
 80139f0:	4652      	mov	r2, sl
 80139f2:	4641      	mov	r1, r8
 80139f4:	4638      	mov	r0, r7
 80139f6:	47c8      	blx	r9
 80139f8:	3001      	adds	r0, #1
 80139fa:	d103      	bne.n	8013a04 <_printf_common+0xac>
 80139fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a04:	3501      	adds	r5, #1
 8013a06:	e7c6      	b.n	8013996 <_printf_common+0x3e>
 8013a08:	18e1      	adds	r1, r4, r3
 8013a0a:	1c5a      	adds	r2, r3, #1
 8013a0c:	2030      	movs	r0, #48	@ 0x30
 8013a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013a12:	4422      	add	r2, r4
 8013a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013a1c:	3302      	adds	r3, #2
 8013a1e:	e7c7      	b.n	80139b0 <_printf_common+0x58>
 8013a20:	2301      	movs	r3, #1
 8013a22:	4622      	mov	r2, r4
 8013a24:	4641      	mov	r1, r8
 8013a26:	4638      	mov	r0, r7
 8013a28:	47c8      	blx	r9
 8013a2a:	3001      	adds	r0, #1
 8013a2c:	d0e6      	beq.n	80139fc <_printf_common+0xa4>
 8013a2e:	3601      	adds	r6, #1
 8013a30:	e7d9      	b.n	80139e6 <_printf_common+0x8e>
	...

08013a34 <_printf_i>:
 8013a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a38:	7e0f      	ldrb	r7, [r1, #24]
 8013a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a3c:	2f78      	cmp	r7, #120	@ 0x78
 8013a3e:	4691      	mov	r9, r2
 8013a40:	4680      	mov	r8, r0
 8013a42:	460c      	mov	r4, r1
 8013a44:	469a      	mov	sl, r3
 8013a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013a4a:	d807      	bhi.n	8013a5c <_printf_i+0x28>
 8013a4c:	2f62      	cmp	r7, #98	@ 0x62
 8013a4e:	d80a      	bhi.n	8013a66 <_printf_i+0x32>
 8013a50:	2f00      	cmp	r7, #0
 8013a52:	f000 80d2 	beq.w	8013bfa <_printf_i+0x1c6>
 8013a56:	2f58      	cmp	r7, #88	@ 0x58
 8013a58:	f000 80b9 	beq.w	8013bce <_printf_i+0x19a>
 8013a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013a64:	e03a      	b.n	8013adc <_printf_i+0xa8>
 8013a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013a6a:	2b15      	cmp	r3, #21
 8013a6c:	d8f6      	bhi.n	8013a5c <_printf_i+0x28>
 8013a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8013a74 <_printf_i+0x40>)
 8013a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a74:	08013acd 	.word	0x08013acd
 8013a78:	08013ae1 	.word	0x08013ae1
 8013a7c:	08013a5d 	.word	0x08013a5d
 8013a80:	08013a5d 	.word	0x08013a5d
 8013a84:	08013a5d 	.word	0x08013a5d
 8013a88:	08013a5d 	.word	0x08013a5d
 8013a8c:	08013ae1 	.word	0x08013ae1
 8013a90:	08013a5d 	.word	0x08013a5d
 8013a94:	08013a5d 	.word	0x08013a5d
 8013a98:	08013a5d 	.word	0x08013a5d
 8013a9c:	08013a5d 	.word	0x08013a5d
 8013aa0:	08013be1 	.word	0x08013be1
 8013aa4:	08013b0b 	.word	0x08013b0b
 8013aa8:	08013b9b 	.word	0x08013b9b
 8013aac:	08013a5d 	.word	0x08013a5d
 8013ab0:	08013a5d 	.word	0x08013a5d
 8013ab4:	08013c03 	.word	0x08013c03
 8013ab8:	08013a5d 	.word	0x08013a5d
 8013abc:	08013b0b 	.word	0x08013b0b
 8013ac0:	08013a5d 	.word	0x08013a5d
 8013ac4:	08013a5d 	.word	0x08013a5d
 8013ac8:	08013ba3 	.word	0x08013ba3
 8013acc:	6833      	ldr	r3, [r6, #0]
 8013ace:	1d1a      	adds	r2, r3, #4
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	6032      	str	r2, [r6, #0]
 8013ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013adc:	2301      	movs	r3, #1
 8013ade:	e09d      	b.n	8013c1c <_printf_i+0x1e8>
 8013ae0:	6833      	ldr	r3, [r6, #0]
 8013ae2:	6820      	ldr	r0, [r4, #0]
 8013ae4:	1d19      	adds	r1, r3, #4
 8013ae6:	6031      	str	r1, [r6, #0]
 8013ae8:	0606      	lsls	r6, r0, #24
 8013aea:	d501      	bpl.n	8013af0 <_printf_i+0xbc>
 8013aec:	681d      	ldr	r5, [r3, #0]
 8013aee:	e003      	b.n	8013af8 <_printf_i+0xc4>
 8013af0:	0645      	lsls	r5, r0, #25
 8013af2:	d5fb      	bpl.n	8013aec <_printf_i+0xb8>
 8013af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013af8:	2d00      	cmp	r5, #0
 8013afa:	da03      	bge.n	8013b04 <_printf_i+0xd0>
 8013afc:	232d      	movs	r3, #45	@ 0x2d
 8013afe:	426d      	negs	r5, r5
 8013b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b04:	4859      	ldr	r0, [pc, #356]	@ (8013c6c <_printf_i+0x238>)
 8013b06:	230a      	movs	r3, #10
 8013b08:	e011      	b.n	8013b2e <_printf_i+0xfa>
 8013b0a:	6821      	ldr	r1, [r4, #0]
 8013b0c:	6833      	ldr	r3, [r6, #0]
 8013b0e:	0608      	lsls	r0, r1, #24
 8013b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b14:	d402      	bmi.n	8013b1c <_printf_i+0xe8>
 8013b16:	0649      	lsls	r1, r1, #25
 8013b18:	bf48      	it	mi
 8013b1a:	b2ad      	uxthmi	r5, r5
 8013b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8013b1e:	4853      	ldr	r0, [pc, #332]	@ (8013c6c <_printf_i+0x238>)
 8013b20:	6033      	str	r3, [r6, #0]
 8013b22:	bf14      	ite	ne
 8013b24:	230a      	movne	r3, #10
 8013b26:	2308      	moveq	r3, #8
 8013b28:	2100      	movs	r1, #0
 8013b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013b2e:	6866      	ldr	r6, [r4, #4]
 8013b30:	60a6      	str	r6, [r4, #8]
 8013b32:	2e00      	cmp	r6, #0
 8013b34:	bfa2      	ittt	ge
 8013b36:	6821      	ldrge	r1, [r4, #0]
 8013b38:	f021 0104 	bicge.w	r1, r1, #4
 8013b3c:	6021      	strge	r1, [r4, #0]
 8013b3e:	b90d      	cbnz	r5, 8013b44 <_printf_i+0x110>
 8013b40:	2e00      	cmp	r6, #0
 8013b42:	d04b      	beq.n	8013bdc <_printf_i+0x1a8>
 8013b44:	4616      	mov	r6, r2
 8013b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8013b4e:	5dc7      	ldrb	r7, [r0, r7]
 8013b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b54:	462f      	mov	r7, r5
 8013b56:	42bb      	cmp	r3, r7
 8013b58:	460d      	mov	r5, r1
 8013b5a:	d9f4      	bls.n	8013b46 <_printf_i+0x112>
 8013b5c:	2b08      	cmp	r3, #8
 8013b5e:	d10b      	bne.n	8013b78 <_printf_i+0x144>
 8013b60:	6823      	ldr	r3, [r4, #0]
 8013b62:	07df      	lsls	r7, r3, #31
 8013b64:	d508      	bpl.n	8013b78 <_printf_i+0x144>
 8013b66:	6923      	ldr	r3, [r4, #16]
 8013b68:	6861      	ldr	r1, [r4, #4]
 8013b6a:	4299      	cmp	r1, r3
 8013b6c:	bfde      	ittt	le
 8013b6e:	2330      	movle	r3, #48	@ 0x30
 8013b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b78:	1b92      	subs	r2, r2, r6
 8013b7a:	6122      	str	r2, [r4, #16]
 8013b7c:	f8cd a000 	str.w	sl, [sp]
 8013b80:	464b      	mov	r3, r9
 8013b82:	aa03      	add	r2, sp, #12
 8013b84:	4621      	mov	r1, r4
 8013b86:	4640      	mov	r0, r8
 8013b88:	f7ff fee6 	bl	8013958 <_printf_common>
 8013b8c:	3001      	adds	r0, #1
 8013b8e:	d14a      	bne.n	8013c26 <_printf_i+0x1f2>
 8013b90:	f04f 30ff 	mov.w	r0, #4294967295
 8013b94:	b004      	add	sp, #16
 8013b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b9a:	6823      	ldr	r3, [r4, #0]
 8013b9c:	f043 0320 	orr.w	r3, r3, #32
 8013ba0:	6023      	str	r3, [r4, #0]
 8013ba2:	4833      	ldr	r0, [pc, #204]	@ (8013c70 <_printf_i+0x23c>)
 8013ba4:	2778      	movs	r7, #120	@ 0x78
 8013ba6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013baa:	6823      	ldr	r3, [r4, #0]
 8013bac:	6831      	ldr	r1, [r6, #0]
 8013bae:	061f      	lsls	r7, r3, #24
 8013bb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8013bb4:	d402      	bmi.n	8013bbc <_printf_i+0x188>
 8013bb6:	065f      	lsls	r7, r3, #25
 8013bb8:	bf48      	it	mi
 8013bba:	b2ad      	uxthmi	r5, r5
 8013bbc:	6031      	str	r1, [r6, #0]
 8013bbe:	07d9      	lsls	r1, r3, #31
 8013bc0:	bf44      	itt	mi
 8013bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8013bc6:	6023      	strmi	r3, [r4, #0]
 8013bc8:	b11d      	cbz	r5, 8013bd2 <_printf_i+0x19e>
 8013bca:	2310      	movs	r3, #16
 8013bcc:	e7ac      	b.n	8013b28 <_printf_i+0xf4>
 8013bce:	4827      	ldr	r0, [pc, #156]	@ (8013c6c <_printf_i+0x238>)
 8013bd0:	e7e9      	b.n	8013ba6 <_printf_i+0x172>
 8013bd2:	6823      	ldr	r3, [r4, #0]
 8013bd4:	f023 0320 	bic.w	r3, r3, #32
 8013bd8:	6023      	str	r3, [r4, #0]
 8013bda:	e7f6      	b.n	8013bca <_printf_i+0x196>
 8013bdc:	4616      	mov	r6, r2
 8013bde:	e7bd      	b.n	8013b5c <_printf_i+0x128>
 8013be0:	6833      	ldr	r3, [r6, #0]
 8013be2:	6825      	ldr	r5, [r4, #0]
 8013be4:	6961      	ldr	r1, [r4, #20]
 8013be6:	1d18      	adds	r0, r3, #4
 8013be8:	6030      	str	r0, [r6, #0]
 8013bea:	062e      	lsls	r6, r5, #24
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	d501      	bpl.n	8013bf4 <_printf_i+0x1c0>
 8013bf0:	6019      	str	r1, [r3, #0]
 8013bf2:	e002      	b.n	8013bfa <_printf_i+0x1c6>
 8013bf4:	0668      	lsls	r0, r5, #25
 8013bf6:	d5fb      	bpl.n	8013bf0 <_printf_i+0x1bc>
 8013bf8:	8019      	strh	r1, [r3, #0]
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	6123      	str	r3, [r4, #16]
 8013bfe:	4616      	mov	r6, r2
 8013c00:	e7bc      	b.n	8013b7c <_printf_i+0x148>
 8013c02:	6833      	ldr	r3, [r6, #0]
 8013c04:	1d1a      	adds	r2, r3, #4
 8013c06:	6032      	str	r2, [r6, #0]
 8013c08:	681e      	ldr	r6, [r3, #0]
 8013c0a:	6862      	ldr	r2, [r4, #4]
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	4630      	mov	r0, r6
 8013c10:	f7ec fb66 	bl	80002e0 <memchr>
 8013c14:	b108      	cbz	r0, 8013c1a <_printf_i+0x1e6>
 8013c16:	1b80      	subs	r0, r0, r6
 8013c18:	6060      	str	r0, [r4, #4]
 8013c1a:	6863      	ldr	r3, [r4, #4]
 8013c1c:	6123      	str	r3, [r4, #16]
 8013c1e:	2300      	movs	r3, #0
 8013c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c24:	e7aa      	b.n	8013b7c <_printf_i+0x148>
 8013c26:	6923      	ldr	r3, [r4, #16]
 8013c28:	4632      	mov	r2, r6
 8013c2a:	4649      	mov	r1, r9
 8013c2c:	4640      	mov	r0, r8
 8013c2e:	47d0      	blx	sl
 8013c30:	3001      	adds	r0, #1
 8013c32:	d0ad      	beq.n	8013b90 <_printf_i+0x15c>
 8013c34:	6823      	ldr	r3, [r4, #0]
 8013c36:	079b      	lsls	r3, r3, #30
 8013c38:	d413      	bmi.n	8013c62 <_printf_i+0x22e>
 8013c3a:	68e0      	ldr	r0, [r4, #12]
 8013c3c:	9b03      	ldr	r3, [sp, #12]
 8013c3e:	4298      	cmp	r0, r3
 8013c40:	bfb8      	it	lt
 8013c42:	4618      	movlt	r0, r3
 8013c44:	e7a6      	b.n	8013b94 <_printf_i+0x160>
 8013c46:	2301      	movs	r3, #1
 8013c48:	4632      	mov	r2, r6
 8013c4a:	4649      	mov	r1, r9
 8013c4c:	4640      	mov	r0, r8
 8013c4e:	47d0      	blx	sl
 8013c50:	3001      	adds	r0, #1
 8013c52:	d09d      	beq.n	8013b90 <_printf_i+0x15c>
 8013c54:	3501      	adds	r5, #1
 8013c56:	68e3      	ldr	r3, [r4, #12]
 8013c58:	9903      	ldr	r1, [sp, #12]
 8013c5a:	1a5b      	subs	r3, r3, r1
 8013c5c:	42ab      	cmp	r3, r5
 8013c5e:	dcf2      	bgt.n	8013c46 <_printf_i+0x212>
 8013c60:	e7eb      	b.n	8013c3a <_printf_i+0x206>
 8013c62:	2500      	movs	r5, #0
 8013c64:	f104 0619 	add.w	r6, r4, #25
 8013c68:	e7f5      	b.n	8013c56 <_printf_i+0x222>
 8013c6a:	bf00      	nop
 8013c6c:	0801729a 	.word	0x0801729a
 8013c70:	080172ab 	.word	0x080172ab

08013c74 <__sflush_r>:
 8013c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c7c:	0716      	lsls	r6, r2, #28
 8013c7e:	4605      	mov	r5, r0
 8013c80:	460c      	mov	r4, r1
 8013c82:	d454      	bmi.n	8013d2e <__sflush_r+0xba>
 8013c84:	684b      	ldr	r3, [r1, #4]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	dc02      	bgt.n	8013c90 <__sflush_r+0x1c>
 8013c8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	dd48      	ble.n	8013d22 <__sflush_r+0xae>
 8013c90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c92:	2e00      	cmp	r6, #0
 8013c94:	d045      	beq.n	8013d22 <__sflush_r+0xae>
 8013c96:	2300      	movs	r3, #0
 8013c98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013c9c:	682f      	ldr	r7, [r5, #0]
 8013c9e:	6a21      	ldr	r1, [r4, #32]
 8013ca0:	602b      	str	r3, [r5, #0]
 8013ca2:	d030      	beq.n	8013d06 <__sflush_r+0x92>
 8013ca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013ca6:	89a3      	ldrh	r3, [r4, #12]
 8013ca8:	0759      	lsls	r1, r3, #29
 8013caa:	d505      	bpl.n	8013cb8 <__sflush_r+0x44>
 8013cac:	6863      	ldr	r3, [r4, #4]
 8013cae:	1ad2      	subs	r2, r2, r3
 8013cb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013cb2:	b10b      	cbz	r3, 8013cb8 <__sflush_r+0x44>
 8013cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013cb6:	1ad2      	subs	r2, r2, r3
 8013cb8:	2300      	movs	r3, #0
 8013cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cbc:	6a21      	ldr	r1, [r4, #32]
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	47b0      	blx	r6
 8013cc2:	1c43      	adds	r3, r0, #1
 8013cc4:	89a3      	ldrh	r3, [r4, #12]
 8013cc6:	d106      	bne.n	8013cd6 <__sflush_r+0x62>
 8013cc8:	6829      	ldr	r1, [r5, #0]
 8013cca:	291d      	cmp	r1, #29
 8013ccc:	d82b      	bhi.n	8013d26 <__sflush_r+0xb2>
 8013cce:	4a2a      	ldr	r2, [pc, #168]	@ (8013d78 <__sflush_r+0x104>)
 8013cd0:	410a      	asrs	r2, r1
 8013cd2:	07d6      	lsls	r6, r2, #31
 8013cd4:	d427      	bmi.n	8013d26 <__sflush_r+0xb2>
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	6062      	str	r2, [r4, #4]
 8013cda:	04d9      	lsls	r1, r3, #19
 8013cdc:	6922      	ldr	r2, [r4, #16]
 8013cde:	6022      	str	r2, [r4, #0]
 8013ce0:	d504      	bpl.n	8013cec <__sflush_r+0x78>
 8013ce2:	1c42      	adds	r2, r0, #1
 8013ce4:	d101      	bne.n	8013cea <__sflush_r+0x76>
 8013ce6:	682b      	ldr	r3, [r5, #0]
 8013ce8:	b903      	cbnz	r3, 8013cec <__sflush_r+0x78>
 8013cea:	6560      	str	r0, [r4, #84]	@ 0x54
 8013cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013cee:	602f      	str	r7, [r5, #0]
 8013cf0:	b1b9      	cbz	r1, 8013d22 <__sflush_r+0xae>
 8013cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013cf6:	4299      	cmp	r1, r3
 8013cf8:	d002      	beq.n	8013d00 <__sflush_r+0x8c>
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	f7ff fa92 	bl	8013224 <_free_r>
 8013d00:	2300      	movs	r3, #0
 8013d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d04:	e00d      	b.n	8013d22 <__sflush_r+0xae>
 8013d06:	2301      	movs	r3, #1
 8013d08:	4628      	mov	r0, r5
 8013d0a:	47b0      	blx	r6
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	1c50      	adds	r0, r2, #1
 8013d10:	d1c9      	bne.n	8013ca6 <__sflush_r+0x32>
 8013d12:	682b      	ldr	r3, [r5, #0]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d0c6      	beq.n	8013ca6 <__sflush_r+0x32>
 8013d18:	2b1d      	cmp	r3, #29
 8013d1a:	d001      	beq.n	8013d20 <__sflush_r+0xac>
 8013d1c:	2b16      	cmp	r3, #22
 8013d1e:	d11e      	bne.n	8013d5e <__sflush_r+0xea>
 8013d20:	602f      	str	r7, [r5, #0]
 8013d22:	2000      	movs	r0, #0
 8013d24:	e022      	b.n	8013d6c <__sflush_r+0xf8>
 8013d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d2a:	b21b      	sxth	r3, r3
 8013d2c:	e01b      	b.n	8013d66 <__sflush_r+0xf2>
 8013d2e:	690f      	ldr	r7, [r1, #16]
 8013d30:	2f00      	cmp	r7, #0
 8013d32:	d0f6      	beq.n	8013d22 <__sflush_r+0xae>
 8013d34:	0793      	lsls	r3, r2, #30
 8013d36:	680e      	ldr	r6, [r1, #0]
 8013d38:	bf08      	it	eq
 8013d3a:	694b      	ldreq	r3, [r1, #20]
 8013d3c:	600f      	str	r7, [r1, #0]
 8013d3e:	bf18      	it	ne
 8013d40:	2300      	movne	r3, #0
 8013d42:	eba6 0807 	sub.w	r8, r6, r7
 8013d46:	608b      	str	r3, [r1, #8]
 8013d48:	f1b8 0f00 	cmp.w	r8, #0
 8013d4c:	dde9      	ble.n	8013d22 <__sflush_r+0xae>
 8013d4e:	6a21      	ldr	r1, [r4, #32]
 8013d50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013d52:	4643      	mov	r3, r8
 8013d54:	463a      	mov	r2, r7
 8013d56:	4628      	mov	r0, r5
 8013d58:	47b0      	blx	r6
 8013d5a:	2800      	cmp	r0, #0
 8013d5c:	dc08      	bgt.n	8013d70 <__sflush_r+0xfc>
 8013d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d66:	81a3      	strh	r3, [r4, #12]
 8013d68:	f04f 30ff 	mov.w	r0, #4294967295
 8013d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d70:	4407      	add	r7, r0
 8013d72:	eba8 0800 	sub.w	r8, r8, r0
 8013d76:	e7e7      	b.n	8013d48 <__sflush_r+0xd4>
 8013d78:	dfbffffe 	.word	0xdfbffffe

08013d7c <_fflush_r>:
 8013d7c:	b538      	push	{r3, r4, r5, lr}
 8013d7e:	690b      	ldr	r3, [r1, #16]
 8013d80:	4605      	mov	r5, r0
 8013d82:	460c      	mov	r4, r1
 8013d84:	b913      	cbnz	r3, 8013d8c <_fflush_r+0x10>
 8013d86:	2500      	movs	r5, #0
 8013d88:	4628      	mov	r0, r5
 8013d8a:	bd38      	pop	{r3, r4, r5, pc}
 8013d8c:	b118      	cbz	r0, 8013d96 <_fflush_r+0x1a>
 8013d8e:	6a03      	ldr	r3, [r0, #32]
 8013d90:	b90b      	cbnz	r3, 8013d96 <_fflush_r+0x1a>
 8013d92:	f7ff f865 	bl	8012e60 <__sinit>
 8013d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d0f3      	beq.n	8013d86 <_fflush_r+0xa>
 8013d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013da0:	07d0      	lsls	r0, r2, #31
 8013da2:	d404      	bmi.n	8013dae <_fflush_r+0x32>
 8013da4:	0599      	lsls	r1, r3, #22
 8013da6:	d402      	bmi.n	8013dae <_fflush_r+0x32>
 8013da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013daa:	f7ff fa1c 	bl	80131e6 <__retarget_lock_acquire_recursive>
 8013dae:	4628      	mov	r0, r5
 8013db0:	4621      	mov	r1, r4
 8013db2:	f7ff ff5f 	bl	8013c74 <__sflush_r>
 8013db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013db8:	07da      	lsls	r2, r3, #31
 8013dba:	4605      	mov	r5, r0
 8013dbc:	d4e4      	bmi.n	8013d88 <_fflush_r+0xc>
 8013dbe:	89a3      	ldrh	r3, [r4, #12]
 8013dc0:	059b      	lsls	r3, r3, #22
 8013dc2:	d4e1      	bmi.n	8013d88 <_fflush_r+0xc>
 8013dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013dc6:	f7ff fa0f 	bl	80131e8 <__retarget_lock_release_recursive>
 8013dca:	e7dd      	b.n	8013d88 <_fflush_r+0xc>

08013dcc <__swbuf_r>:
 8013dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dce:	460e      	mov	r6, r1
 8013dd0:	4614      	mov	r4, r2
 8013dd2:	4605      	mov	r5, r0
 8013dd4:	b118      	cbz	r0, 8013dde <__swbuf_r+0x12>
 8013dd6:	6a03      	ldr	r3, [r0, #32]
 8013dd8:	b90b      	cbnz	r3, 8013dde <__swbuf_r+0x12>
 8013dda:	f7ff f841 	bl	8012e60 <__sinit>
 8013dde:	69a3      	ldr	r3, [r4, #24]
 8013de0:	60a3      	str	r3, [r4, #8]
 8013de2:	89a3      	ldrh	r3, [r4, #12]
 8013de4:	071a      	lsls	r2, r3, #28
 8013de6:	d501      	bpl.n	8013dec <__swbuf_r+0x20>
 8013de8:	6923      	ldr	r3, [r4, #16]
 8013dea:	b943      	cbnz	r3, 8013dfe <__swbuf_r+0x32>
 8013dec:	4621      	mov	r1, r4
 8013dee:	4628      	mov	r0, r5
 8013df0:	f000 f82a 	bl	8013e48 <__swsetup_r>
 8013df4:	b118      	cbz	r0, 8013dfe <__swbuf_r+0x32>
 8013df6:	f04f 37ff 	mov.w	r7, #4294967295
 8013dfa:	4638      	mov	r0, r7
 8013dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dfe:	6823      	ldr	r3, [r4, #0]
 8013e00:	6922      	ldr	r2, [r4, #16]
 8013e02:	1a98      	subs	r0, r3, r2
 8013e04:	6963      	ldr	r3, [r4, #20]
 8013e06:	b2f6      	uxtb	r6, r6
 8013e08:	4283      	cmp	r3, r0
 8013e0a:	4637      	mov	r7, r6
 8013e0c:	dc05      	bgt.n	8013e1a <__swbuf_r+0x4e>
 8013e0e:	4621      	mov	r1, r4
 8013e10:	4628      	mov	r0, r5
 8013e12:	f7ff ffb3 	bl	8013d7c <_fflush_r>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	d1ed      	bne.n	8013df6 <__swbuf_r+0x2a>
 8013e1a:	68a3      	ldr	r3, [r4, #8]
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	60a3      	str	r3, [r4, #8]
 8013e20:	6823      	ldr	r3, [r4, #0]
 8013e22:	1c5a      	adds	r2, r3, #1
 8013e24:	6022      	str	r2, [r4, #0]
 8013e26:	701e      	strb	r6, [r3, #0]
 8013e28:	6962      	ldr	r2, [r4, #20]
 8013e2a:	1c43      	adds	r3, r0, #1
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d004      	beq.n	8013e3a <__swbuf_r+0x6e>
 8013e30:	89a3      	ldrh	r3, [r4, #12]
 8013e32:	07db      	lsls	r3, r3, #31
 8013e34:	d5e1      	bpl.n	8013dfa <__swbuf_r+0x2e>
 8013e36:	2e0a      	cmp	r6, #10
 8013e38:	d1df      	bne.n	8013dfa <__swbuf_r+0x2e>
 8013e3a:	4621      	mov	r1, r4
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	f7ff ff9d 	bl	8013d7c <_fflush_r>
 8013e42:	2800      	cmp	r0, #0
 8013e44:	d0d9      	beq.n	8013dfa <__swbuf_r+0x2e>
 8013e46:	e7d6      	b.n	8013df6 <__swbuf_r+0x2a>

08013e48 <__swsetup_r>:
 8013e48:	b538      	push	{r3, r4, r5, lr}
 8013e4a:	4b29      	ldr	r3, [pc, #164]	@ (8013ef0 <__swsetup_r+0xa8>)
 8013e4c:	4605      	mov	r5, r0
 8013e4e:	6818      	ldr	r0, [r3, #0]
 8013e50:	460c      	mov	r4, r1
 8013e52:	b118      	cbz	r0, 8013e5c <__swsetup_r+0x14>
 8013e54:	6a03      	ldr	r3, [r0, #32]
 8013e56:	b90b      	cbnz	r3, 8013e5c <__swsetup_r+0x14>
 8013e58:	f7ff f802 	bl	8012e60 <__sinit>
 8013e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e60:	0719      	lsls	r1, r3, #28
 8013e62:	d422      	bmi.n	8013eaa <__swsetup_r+0x62>
 8013e64:	06da      	lsls	r2, r3, #27
 8013e66:	d407      	bmi.n	8013e78 <__swsetup_r+0x30>
 8013e68:	2209      	movs	r2, #9
 8013e6a:	602a      	str	r2, [r5, #0]
 8013e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e70:	81a3      	strh	r3, [r4, #12]
 8013e72:	f04f 30ff 	mov.w	r0, #4294967295
 8013e76:	e033      	b.n	8013ee0 <__swsetup_r+0x98>
 8013e78:	0758      	lsls	r0, r3, #29
 8013e7a:	d512      	bpl.n	8013ea2 <__swsetup_r+0x5a>
 8013e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e7e:	b141      	cbz	r1, 8013e92 <__swsetup_r+0x4a>
 8013e80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e84:	4299      	cmp	r1, r3
 8013e86:	d002      	beq.n	8013e8e <__swsetup_r+0x46>
 8013e88:	4628      	mov	r0, r5
 8013e8a:	f7ff f9cb 	bl	8013224 <_free_r>
 8013e8e:	2300      	movs	r3, #0
 8013e90:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e92:	89a3      	ldrh	r3, [r4, #12]
 8013e94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013e98:	81a3      	strh	r3, [r4, #12]
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	6063      	str	r3, [r4, #4]
 8013e9e:	6923      	ldr	r3, [r4, #16]
 8013ea0:	6023      	str	r3, [r4, #0]
 8013ea2:	89a3      	ldrh	r3, [r4, #12]
 8013ea4:	f043 0308 	orr.w	r3, r3, #8
 8013ea8:	81a3      	strh	r3, [r4, #12]
 8013eaa:	6923      	ldr	r3, [r4, #16]
 8013eac:	b94b      	cbnz	r3, 8013ec2 <__swsetup_r+0x7a>
 8013eae:	89a3      	ldrh	r3, [r4, #12]
 8013eb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013eb8:	d003      	beq.n	8013ec2 <__swsetup_r+0x7a>
 8013eba:	4621      	mov	r1, r4
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	f000 f8c1 	bl	8014044 <__smakebuf_r>
 8013ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ec6:	f013 0201 	ands.w	r2, r3, #1
 8013eca:	d00a      	beq.n	8013ee2 <__swsetup_r+0x9a>
 8013ecc:	2200      	movs	r2, #0
 8013ece:	60a2      	str	r2, [r4, #8]
 8013ed0:	6962      	ldr	r2, [r4, #20]
 8013ed2:	4252      	negs	r2, r2
 8013ed4:	61a2      	str	r2, [r4, #24]
 8013ed6:	6922      	ldr	r2, [r4, #16]
 8013ed8:	b942      	cbnz	r2, 8013eec <__swsetup_r+0xa4>
 8013eda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013ede:	d1c5      	bne.n	8013e6c <__swsetup_r+0x24>
 8013ee0:	bd38      	pop	{r3, r4, r5, pc}
 8013ee2:	0799      	lsls	r1, r3, #30
 8013ee4:	bf58      	it	pl
 8013ee6:	6962      	ldrpl	r2, [r4, #20]
 8013ee8:	60a2      	str	r2, [r4, #8]
 8013eea:	e7f4      	b.n	8013ed6 <__swsetup_r+0x8e>
 8013eec:	2000      	movs	r0, #0
 8013eee:	e7f7      	b.n	8013ee0 <__swsetup_r+0x98>
 8013ef0:	24000044 	.word	0x24000044

08013ef4 <_raise_r>:
 8013ef4:	291f      	cmp	r1, #31
 8013ef6:	b538      	push	{r3, r4, r5, lr}
 8013ef8:	4605      	mov	r5, r0
 8013efa:	460c      	mov	r4, r1
 8013efc:	d904      	bls.n	8013f08 <_raise_r+0x14>
 8013efe:	2316      	movs	r3, #22
 8013f00:	6003      	str	r3, [r0, #0]
 8013f02:	f04f 30ff 	mov.w	r0, #4294967295
 8013f06:	bd38      	pop	{r3, r4, r5, pc}
 8013f08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013f0a:	b112      	cbz	r2, 8013f12 <_raise_r+0x1e>
 8013f0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f10:	b94b      	cbnz	r3, 8013f26 <_raise_r+0x32>
 8013f12:	4628      	mov	r0, r5
 8013f14:	f000 f830 	bl	8013f78 <_getpid_r>
 8013f18:	4622      	mov	r2, r4
 8013f1a:	4601      	mov	r1, r0
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f22:	f000 b817 	b.w	8013f54 <_kill_r>
 8013f26:	2b01      	cmp	r3, #1
 8013f28:	d00a      	beq.n	8013f40 <_raise_r+0x4c>
 8013f2a:	1c59      	adds	r1, r3, #1
 8013f2c:	d103      	bne.n	8013f36 <_raise_r+0x42>
 8013f2e:	2316      	movs	r3, #22
 8013f30:	6003      	str	r3, [r0, #0]
 8013f32:	2001      	movs	r0, #1
 8013f34:	e7e7      	b.n	8013f06 <_raise_r+0x12>
 8013f36:	2100      	movs	r1, #0
 8013f38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	4798      	blx	r3
 8013f40:	2000      	movs	r0, #0
 8013f42:	e7e0      	b.n	8013f06 <_raise_r+0x12>

08013f44 <raise>:
 8013f44:	4b02      	ldr	r3, [pc, #8]	@ (8013f50 <raise+0xc>)
 8013f46:	4601      	mov	r1, r0
 8013f48:	6818      	ldr	r0, [r3, #0]
 8013f4a:	f7ff bfd3 	b.w	8013ef4 <_raise_r>
 8013f4e:	bf00      	nop
 8013f50:	24000044 	.word	0x24000044

08013f54 <_kill_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4d07      	ldr	r5, [pc, #28]	@ (8013f74 <_kill_r+0x20>)
 8013f58:	2300      	movs	r3, #0
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	4608      	mov	r0, r1
 8013f5e:	4611      	mov	r1, r2
 8013f60:	602b      	str	r3, [r5, #0]
 8013f62:	f7ed fd09 	bl	8001978 <_kill>
 8013f66:	1c43      	adds	r3, r0, #1
 8013f68:	d102      	bne.n	8013f70 <_kill_r+0x1c>
 8013f6a:	682b      	ldr	r3, [r5, #0]
 8013f6c:	b103      	cbz	r3, 8013f70 <_kill_r+0x1c>
 8013f6e:	6023      	str	r3, [r4, #0]
 8013f70:	bd38      	pop	{r3, r4, r5, pc}
 8013f72:	bf00      	nop
 8013f74:	2400ff58 	.word	0x2400ff58

08013f78 <_getpid_r>:
 8013f78:	f7ed bcfc 	b.w	8001974 <_getpid>

08013f7c <_sbrk_r>:
 8013f7c:	b538      	push	{r3, r4, r5, lr}
 8013f7e:	4d06      	ldr	r5, [pc, #24]	@ (8013f98 <_sbrk_r+0x1c>)
 8013f80:	2300      	movs	r3, #0
 8013f82:	4604      	mov	r4, r0
 8013f84:	4608      	mov	r0, r1
 8013f86:	602b      	str	r3, [r5, #0]
 8013f88:	f7ed fd2e 	bl	80019e8 <_sbrk>
 8013f8c:	1c43      	adds	r3, r0, #1
 8013f8e:	d102      	bne.n	8013f96 <_sbrk_r+0x1a>
 8013f90:	682b      	ldr	r3, [r5, #0]
 8013f92:	b103      	cbz	r3, 8013f96 <_sbrk_r+0x1a>
 8013f94:	6023      	str	r3, [r4, #0]
 8013f96:	bd38      	pop	{r3, r4, r5, pc}
 8013f98:	2400ff58 	.word	0x2400ff58

08013f9c <_realloc_r>:
 8013f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa0:	4680      	mov	r8, r0
 8013fa2:	4615      	mov	r5, r2
 8013fa4:	460c      	mov	r4, r1
 8013fa6:	b921      	cbnz	r1, 8013fb2 <_realloc_r+0x16>
 8013fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fac:	4611      	mov	r1, r2
 8013fae:	f7ff b9ad 	b.w	801330c <_malloc_r>
 8013fb2:	b92a      	cbnz	r2, 8013fc0 <_realloc_r+0x24>
 8013fb4:	f7ff f936 	bl	8013224 <_free_r>
 8013fb8:	2400      	movs	r4, #0
 8013fba:	4620      	mov	r0, r4
 8013fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fc0:	f000 f89e 	bl	8014100 <_malloc_usable_size_r>
 8013fc4:	4285      	cmp	r5, r0
 8013fc6:	4606      	mov	r6, r0
 8013fc8:	d802      	bhi.n	8013fd0 <_realloc_r+0x34>
 8013fca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013fce:	d8f4      	bhi.n	8013fba <_realloc_r+0x1e>
 8013fd0:	4629      	mov	r1, r5
 8013fd2:	4640      	mov	r0, r8
 8013fd4:	f7ff f99a 	bl	801330c <_malloc_r>
 8013fd8:	4607      	mov	r7, r0
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d0ec      	beq.n	8013fb8 <_realloc_r+0x1c>
 8013fde:	42b5      	cmp	r5, r6
 8013fe0:	462a      	mov	r2, r5
 8013fe2:	4621      	mov	r1, r4
 8013fe4:	bf28      	it	cs
 8013fe6:	4632      	movcs	r2, r6
 8013fe8:	f7ff f907 	bl	80131fa <memcpy>
 8013fec:	4621      	mov	r1, r4
 8013fee:	4640      	mov	r0, r8
 8013ff0:	f7ff f918 	bl	8013224 <_free_r>
 8013ff4:	463c      	mov	r4, r7
 8013ff6:	e7e0      	b.n	8013fba <_realloc_r+0x1e>

08013ff8 <__swhatbuf_r>:
 8013ff8:	b570      	push	{r4, r5, r6, lr}
 8013ffa:	460c      	mov	r4, r1
 8013ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014000:	2900      	cmp	r1, #0
 8014002:	b096      	sub	sp, #88	@ 0x58
 8014004:	4615      	mov	r5, r2
 8014006:	461e      	mov	r6, r3
 8014008:	da0d      	bge.n	8014026 <__swhatbuf_r+0x2e>
 801400a:	89a3      	ldrh	r3, [r4, #12]
 801400c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014010:	f04f 0100 	mov.w	r1, #0
 8014014:	bf14      	ite	ne
 8014016:	2340      	movne	r3, #64	@ 0x40
 8014018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801401c:	2000      	movs	r0, #0
 801401e:	6031      	str	r1, [r6, #0]
 8014020:	602b      	str	r3, [r5, #0]
 8014022:	b016      	add	sp, #88	@ 0x58
 8014024:	bd70      	pop	{r4, r5, r6, pc}
 8014026:	466a      	mov	r2, sp
 8014028:	f000 f848 	bl	80140bc <_fstat_r>
 801402c:	2800      	cmp	r0, #0
 801402e:	dbec      	blt.n	801400a <__swhatbuf_r+0x12>
 8014030:	9901      	ldr	r1, [sp, #4]
 8014032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801403a:	4259      	negs	r1, r3
 801403c:	4159      	adcs	r1, r3
 801403e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014042:	e7eb      	b.n	801401c <__swhatbuf_r+0x24>

08014044 <__smakebuf_r>:
 8014044:	898b      	ldrh	r3, [r1, #12]
 8014046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014048:	079d      	lsls	r5, r3, #30
 801404a:	4606      	mov	r6, r0
 801404c:	460c      	mov	r4, r1
 801404e:	d507      	bpl.n	8014060 <__smakebuf_r+0x1c>
 8014050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	6123      	str	r3, [r4, #16]
 8014058:	2301      	movs	r3, #1
 801405a:	6163      	str	r3, [r4, #20]
 801405c:	b003      	add	sp, #12
 801405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014060:	ab01      	add	r3, sp, #4
 8014062:	466a      	mov	r2, sp
 8014064:	f7ff ffc8 	bl	8013ff8 <__swhatbuf_r>
 8014068:	9f00      	ldr	r7, [sp, #0]
 801406a:	4605      	mov	r5, r0
 801406c:	4639      	mov	r1, r7
 801406e:	4630      	mov	r0, r6
 8014070:	f7ff f94c 	bl	801330c <_malloc_r>
 8014074:	b948      	cbnz	r0, 801408a <__smakebuf_r+0x46>
 8014076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801407a:	059a      	lsls	r2, r3, #22
 801407c:	d4ee      	bmi.n	801405c <__smakebuf_r+0x18>
 801407e:	f023 0303 	bic.w	r3, r3, #3
 8014082:	f043 0302 	orr.w	r3, r3, #2
 8014086:	81a3      	strh	r3, [r4, #12]
 8014088:	e7e2      	b.n	8014050 <__smakebuf_r+0xc>
 801408a:	89a3      	ldrh	r3, [r4, #12]
 801408c:	6020      	str	r0, [r4, #0]
 801408e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014092:	81a3      	strh	r3, [r4, #12]
 8014094:	9b01      	ldr	r3, [sp, #4]
 8014096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801409a:	b15b      	cbz	r3, 80140b4 <__smakebuf_r+0x70>
 801409c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140a0:	4630      	mov	r0, r6
 80140a2:	f000 f81d 	bl	80140e0 <_isatty_r>
 80140a6:	b128      	cbz	r0, 80140b4 <__smakebuf_r+0x70>
 80140a8:	89a3      	ldrh	r3, [r4, #12]
 80140aa:	f023 0303 	bic.w	r3, r3, #3
 80140ae:	f043 0301 	orr.w	r3, r3, #1
 80140b2:	81a3      	strh	r3, [r4, #12]
 80140b4:	89a3      	ldrh	r3, [r4, #12]
 80140b6:	431d      	orrs	r5, r3
 80140b8:	81a5      	strh	r5, [r4, #12]
 80140ba:	e7cf      	b.n	801405c <__smakebuf_r+0x18>

080140bc <_fstat_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	4d07      	ldr	r5, [pc, #28]	@ (80140dc <_fstat_r+0x20>)
 80140c0:	2300      	movs	r3, #0
 80140c2:	4604      	mov	r4, r0
 80140c4:	4608      	mov	r0, r1
 80140c6:	4611      	mov	r1, r2
 80140c8:	602b      	str	r3, [r5, #0]
 80140ca:	f7ed fc83 	bl	80019d4 <_fstat>
 80140ce:	1c43      	adds	r3, r0, #1
 80140d0:	d102      	bne.n	80140d8 <_fstat_r+0x1c>
 80140d2:	682b      	ldr	r3, [r5, #0]
 80140d4:	b103      	cbz	r3, 80140d8 <_fstat_r+0x1c>
 80140d6:	6023      	str	r3, [r4, #0]
 80140d8:	bd38      	pop	{r3, r4, r5, pc}
 80140da:	bf00      	nop
 80140dc:	2400ff58 	.word	0x2400ff58

080140e0 <_isatty_r>:
 80140e0:	b538      	push	{r3, r4, r5, lr}
 80140e2:	4d06      	ldr	r5, [pc, #24]	@ (80140fc <_isatty_r+0x1c>)
 80140e4:	2300      	movs	r3, #0
 80140e6:	4604      	mov	r4, r0
 80140e8:	4608      	mov	r0, r1
 80140ea:	602b      	str	r3, [r5, #0]
 80140ec:	f7ed fc78 	bl	80019e0 <_isatty>
 80140f0:	1c43      	adds	r3, r0, #1
 80140f2:	d102      	bne.n	80140fa <_isatty_r+0x1a>
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	b103      	cbz	r3, 80140fa <_isatty_r+0x1a>
 80140f8:	6023      	str	r3, [r4, #0]
 80140fa:	bd38      	pop	{r3, r4, r5, pc}
 80140fc:	2400ff58 	.word	0x2400ff58

08014100 <_malloc_usable_size_r>:
 8014100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014104:	1f18      	subs	r0, r3, #4
 8014106:	2b00      	cmp	r3, #0
 8014108:	bfbc      	itt	lt
 801410a:	580b      	ldrlt	r3, [r1, r0]
 801410c:	18c0      	addlt	r0, r0, r3
 801410e:	4770      	bx	lr

08014110 <_init>:
 8014110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014112:	bf00      	nop
 8014114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014116:	bc08      	pop	{r3}
 8014118:	469e      	mov	lr, r3
 801411a:	4770      	bx	lr

0801411c <_fini>:
 801411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801411e:	bf00      	nop
 8014120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014122:	bc08      	pop	{r3}
 8014124:	469e      	mov	lr, r3
 8014126:	4770      	bx	lr
